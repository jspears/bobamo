{
  "name": "blueimp-load-image",
  "version": "1.2.1",
  "title": "JavaScript Load Image",
  "description": "JavaScript Load Image is a function to load images provided as File or Blob objects or via URL. It returns an optionally scaled HTML img or canvas element.",
  "keywords": [
    "javascript",
    "load",
    "loading",
    "image",
    "file",
    "blob",
    "url",
    "scale",
    "scaling",
    "img",
    "canvas"
  ],
  "homepage": "https://github.com/blueimp/JavaScript-Load-Image",
  "author": {
    "name": "Sebastian Tschan",
    "url": "https://blueimp.net"
  },
  "maintainers": [
    {
      "name": "Sebastian Tschan",
      "url": "https://blueimp.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/blueimp/JavaScript-Load-Image.git"
  },
  "bugs": "https://github.com/blueimp/JavaScript-Load-Image/issues",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "load-image.js",
  "readme": "# JavaScript Load Image\n\n## Demo\n[JavaScript Load Image Demo](http://blueimp.github.com/JavaScript-Load-Image/)\n\n## Usage\nInclude the (minified) JavaScript Load Image script in your HTML markup:\n\n```html\n<script src=\"load-image.min.js\"></script>\n```\n\nIn your application code, use the **loadImage()** function like this:\n\n```js\ndocument.getElementById('file-input').onchange = function (e) {\n    window.loadImage(\n        e.target.files[0],\n        function (img) {\n            document.body.appendChild(img);\n        },\n        {maxWidth: 600}\n    );\n};\n```\n\n## Requirements\nThe JavaScript Load Image function has zero dependencies.\n\nHowever, JavaScript Load Image is a very suitable complement to the [Canvas to Blob](https://github.com/blueimp/JavaScript-Canvas-to-Blob) function.\n\n## API\nThe **loadImage()** function accepts a [File](https://developer.mozilla.org/en/DOM/File) or [Blob](https://developer.mozilla.org/en/DOM/Blob) object or a simple image URL (e.g. \"http://example.org/image.png\") as first argument.\n\nIf a [File](https://developer.mozilla.org/en/DOM/File) or [Blob](https://developer.mozilla.org/en/DOM/Blob) is passed as parameter, it returns a HTML **img** element if the browser supports the [URL](https://developer.mozilla.org/en/DOM/window.URL) API or a [FileReader](https://developer.mozilla.org/en/DOM/FileReader) object if supported, or **false**.  \nIt always returns a HTML **img** element when passing an image URL:\n\n```js\ndocument.getElementById('file-input').onchange = function (e) {\n    var loadingImage = window.loadImage(\n        e.target.files[0],\n        function (img) {\n            document.body.appendChild(img);\n        },\n        {maxWidth: 600}\n    );\n    if (!loadingImage) {\n        // Alternative code ...\n    }\n};\n```\n\nThe **img** element or [FileReader](https://developer.mozilla.org/en/DOM/FileReader) object returned by the **loadImage()** function allows to abort the loading process by setting the **onload** and **onerror** event handlers to null:\n\n```js\ndocument.getElementById('file-input').onchange = function (e) {\n    var loadingImage = window.loadImage(\n        e.target.files[0],\n        function (img) {\n            document.body.appendChild(img);\n        },\n        {maxWidth: 600}\n    );\n    loadingImage.onload = loadingImage.onerror = null;\n};\n```\n\nThe second argument must be a **callback** function, which is called when the image has been loaded or an error occurred while loading the image. The callback function is passed one argument, which is either a HTML **img** element, a [canvas](https://developer.mozilla.org/en/HTML/Canvas) element, or an [Event](https://developer.mozilla.org/en/DOM/event) object of type \"**error**\":\n\n```js\nvar imageUrl = \"http://example.org/image.png\";\nwindow.loadImage(\n    imageUrl,\n    function (img) {\n        if(img.type === \"error\") {\n            console.log(\"Error loading image \" + imageUrl);\n        } else {\n            document.body.appendChild(img);\n        }\n    },\n    {maxWidth: 600}\n);\n```\n\nThe optional third argument is a map of options:\n\n* **maxWidth**: Defines the maximum width of the img/canvas element.\n* **maxHeight**: Defines the maximum height of the img/canvas element.\n* **minWidth**: Defines the minimum width of the img/canvas element.\n* **minHeight**: Defines the minimum height of the img/canvas element.\n* **canvas**: Defines if the returned element should be a [canvas](https://developer.mozilla.org/en/HTML/Canvas) element.\n* **noRevoke**: By default, the [created object URL](https://developer.mozilla.org/en/DOM/window.URL.createObjectURL) is revoked after the image has been loaded, except when this option is set to *true*.\n\nThey can be used the following way:\n\n```js\nwindow.loadImage(\n    fileOrBlobOrUrl,\n    function (img) {\n        document.body.appendChild(img);\n    },\n    {\n        maxWidth: 600,\n        maxHeight: 300,\n        minWidth: 100,\n        minHeight: 50,\n        canvas: true,\n        noRevoke: true\n    }\n);\n```\n\nAll settings are optional. By default, the image is returned as HTML **img** element without any image size restrictions.\n\n## License\nThe JavaScript Load Image script is released under the [MIT license](http://www.opensource.org/licenses/MIT).\n",
  "_id": "blueimp-load-image@1.2.1",
  "_from": "blueimp-load-image@>=1.2.1"
}

{
  "name": "blueimp-tmpl",
  "version": "2.1.0",
  "title": "JavaScript Templates",
  "description": "< 1KB lightweight, fast & powerful JavaScript templating engine with zero dependencies. Compatible with server-side environments like node.js, module loaders like RequireJS and all web browsers.",
  "keywords": [
    "javascript",
    "templates",
    "templating"
  ],
  "homepage": "https://github.com/blueimp/JavaScript-Templates",
  "author": {
    "name": "Sebastian Tschan",
    "url": "https://blueimp.net"
  },
  "maintainers": [
    {
      "name": "Sebastian Tschan",
      "url": "https://blueimp.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/blueimp/JavaScript-Templates.git"
  },
  "bugs": "https://github.com/blueimp/JavaScript-Templates/issues",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "devDependencies": {
    "mocha": "latest",
    "expect.js": "latest",
    "uglify-js": "latest"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "bin": {
    "tmpl.js": "./compile.js"
  },
  "main": "tmpl.js",
  "readme": "# JavaScript Templates\n\n## Demo\n[JavaScript Templates Demo](http://blueimp.github.com/JavaScript-Templates/)\n\n## Usage\n\n### Client-side\nInclude the (minified) JavaScript Templates script in your HTML markup:\n\n```html\n<script src=\"tmpl.min.js\"></script>\n```\n\nAdd a script section with type **\"text/x-tmpl\"**, a unique **id** property and your template definition as content:\n\n```html\n<script type=\"text/x-tmpl\" id=\"tmpl-demo\">\n<h3>{%=o.title%}</h3>\n<p>Released under the\n<a href=\"{%=o.license.url%}\">{%=o.license.name%}</a>.</p>\n<h4>Features</h4>\n<ul>\n{% for (var i=0; i<o.features.length; i++) { %}\n    <li>{%=o.features[i]%}</li>\n{% } %}\n</ul>\n</script>\n```\n\n**\"o\"** (the lowercase letter) is a reference to the data parameter of the template function (see the API section on how to modify this identifier).\n\nIn your application code, create a JavaScript object to use as data for the template:\n\n```js\nvar data = {\n    \"title\": \"JavaScript Templates\",\n    \"license\": {\n        \"name\": \"MIT license\",\n        \"url\": \"http://www.opensource.org/licenses/MIT\"\n    },\n    \"features\": [\n        \"lightweight & fast\",\n        \"powerful\",\n        \"zero dependencies\"\n    ]\n};\n```\n\nIn a real application, this data could be the result of retrieving a [JSON](http://json.org/) resource.\n\nRender the result by calling the **tmpl()** method with the id of the template and the data object as arguments:\n\n```js\ndocument.getElementById(\"result\").innerHTML = tmpl(\"tmpl-demo\", data);\n```\n\n### Server-side\n\nThe following is an example how to use the JavaScript Templates engine on the server-side with [node.js](http://nodejs.org/).\n\nCreate a new directory and add the **tmpl.js** file. Or alternatively, install the **blueimp-tmpl** package with [npm](http://npmjs.org/):\n\n```sh\nnpm install blueimp-tmpl\n```\n\nAdd a file **template.html** with the following content:\n\n```html\n<!DOCTYPE HTML>\n<title>{%=o.title%}</title>\n<h3><a href=\"{%=o.url%}\">{%=o.title%}</a></h3>\n<h4>Features</h4>\n<ul>\n{% for (var i=0; i<o.features.length; i++) { %}\n    <li>{%=o.features[i]%}</li>\n{% } %}\n</ul>\n```\n\nAdd a file **server.js** with the following content:\n\n```js\nrequire(\"http\").createServer(function (req, res) {\n    var fs = require(\"fs\"),\n        // The tmpl module exports the tmpl() function:\n        tmpl = require(\"./tmpl\").tmpl,\n        // Use the following version if you installed the package with npm:\n        // tmpl = require(\"blueimp-tmpl\").tmpl,\n        // Sample data:\n        data = {\n            \"title\": \"JavaScript Templates\",\n            \"url\": \"https://github.com/blueimp/JavaScript-Templates\",\n            \"features\": [\n                \"lightweight & fast\",\n                \"powerful\",\n                \"zero dependencies\"\n            ]\n        };\n    // Override the template loading method:\n    tmpl.load = function (id) {\n        var filename = id + \".html\";\n        console.log(\"Loading \" + filename);\n        return fs.readFileSync(filename, \"utf8\");\n    };\n    res.writeHead(200, {\"Content-Type\": \"text/x-tmpl\"});\n    // Render the content:\n    res.end(tmpl(\"template\", data));\n}).listen(8080, \"localhost\");\nconsole.log(\"Server running at http://localhost:8080/\");\n```\n\nRun the application with the following command:\n\n```sh\nnode server.js\n```\n\n## Requirements\nThe JavaScript Templates script has zero dependencies.\n\n## API\n\n### tmpl() function\nThe **tmpl()** function is added to the global **window** object and can be called as global function:\n\n```js\nvar result = tmpl(\"tmpl-demo\", data);\n```\n\nThe **tmpl()** function can be called with the id of a template, or with a template string:\n\n```js\nvar result = tmpl(\"<h3>{%=o.title%}</h3>\", data);\n```\n\nIf called without second argument, **tmpl()** returns a reusable template function:\n\n```js\nvar func = tmpl(\"<h3>{%=o.title%}</h3>\");\ndocument.getElementById(\"result\").innerHTML = func(data);\n```\n\n### Templates cache\nTemplates loaded by id are cached in the map **tmpl.cache**:\n\n```js\nvar func = tmpl(\"tmpl-demo\"), // Loads and parses the template\n    cached = typeof tmpl.cache[\"tmpl-demo\"] === \"function\", // true\n    result = tmpl(\"tmpl-demo\", data); // Uses cached template function\n\ntmpl.cache[\"tmpl-demo\"] = null;\nresult = tmpl(\"tmpl-demo\", data); // Loads and parses the template again\n```\n\n### Output encoding\nThe method **tmpl.encode** is used to escape HTML special characters in the template output:\n\n```js\nvar output = tmpl.encode(\"<>&\\\"'\\x00\"); // Renders \"&lt;&gt;&amp;&quot;&#39;\"\n```\n\n**tmpl.encode** makes use of the regular expression **tmpl.encReg** and the encoding map **tmpl.encMap** to match and replace special characters, which can be modified to change the behavior of the output encoding.  \nStrings matched by the regular expression, but not found in the encoding map are removed from the output. This allows for example to automatically trim input values (removing whitespace from the start and end of the string):\n\n```js\ntmpl.encReg = /(^\\s+)|(\\s+$)|[<>&\"'\\x00]/g;\nvar output = tmpl.encode(\"    Banana!    \"); // Renders \"Banana\" (without whitespace)\n```\n\n### Local helper variables\nThe local variables available inside the templates are the following:\n\n* **o**: The data object given as parameter to the template function (see the next section on how to modify the parameter name).\n* **tmpl**: A reference to the **tmpl** function object.\n* **_s**: The string for the rendered result content.\n* **_e**: A reference to the **tmpl.encode** method.\n* **print**: Helper function to add content to the rendered result string.\n* **include**: Helper function to include the return value of a different template in the result.\n\nTo introduce additional local helper variables, the string **tmpl.helper** can be extended. The following adds a convenience function for *console.log* and a streaming function, that streams the template rendering result back to the callback argument (note the comma at the beginning of each variable declaration):\n\n```js\ntmpl.helper += \",log=function(){console.log.apply(console, arguments)}\" +\n    \",st='',stream=function(cb){var l=st.length;st=_s;cb( _s.slice(l));}\";\n```\n\nThose new helper functions could be used to stream the template contents to the console output:\n\n```html\n<script type=\"text/x-tmpl\" id=\"tmpl-demo\">\n<h3>{%=o.title%}</h3>\n{% stream(log); %}\n<p>Released under the\n<a href=\"{%=o.license.url%}\">{%=o.license.name%}</a>.</p>\n{% stream(log); %}\n<h4>Features</h4>\n<ul>\n{% stream(log); %}\n{% for (var i=0; i<o.features.length; i++) { %}\n    <li>{%=o.features[i]%}</li>\n    {% stream(log); %}\n{% } %}\n</ul>\n{% stream(log); %}\n</script>\n```\n\n### Template function argument\nThe generated template functions accept one argument, which is the data object given to the **tmpl(id, data)** function. This argument is available inside the template definitions as parameter **o** (the lowercase letter).\n\nThe argument name can be modified by overriding **tmpl.arg**:\n\n```js\ntmpl.arg = \"p\";\n\n// Renders \"<h3>JavaScript Templates</h3>\":\nvar result = tmpl(\"<h3>{%=p.title%}</h3>\", {title: \"JavaScript Templates\"});\n```\n\n### Template parsing\nThe template contents are matched and replaced using the regular expression **tmpl.regexp** and the replacement function **tmpl.func**. The replacement function operates based on the [parenthesized submatch strings](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter).\n\nTo use different tags for the template syntax, override **tmpl.regexp** with a modified regular expression, by exchanging all occurrences of \"**\\\\{%**\" and \"**%\\\\}**\", e.g. with \"**\\\\[%**\" and \"**%\\\\]**\":\n\n```js\ntmpl.regexp = /([\\s'\\\\])(?![^%]*%\\])|(?:\\[%(=|#)([\\s\\S]+?)%\\])|(\\[%)|(%\\])/g;\n```\n\nBy default, the plugin preserves whitespace (newlines, carriage returns, tabs and spaces). To strip unnecessary whitespace, you can override the **tmpl.func** function, e.g. with the following code:\n\n```js\nvar originalFunc = tmpl.func;\ntmpl.func = function (s, p1, p2, p3, p4, p5, offset, str) {\n    if (p1 && /\\s/.test(p1)) {\n        if (!offset || /\\s/.test(str.charAt(offset - 1)) ||\n                /^\\s+$/g.test(str.slice(offset))) {\n            return '';\n        }\n        return ' ';\n    }\n    return originalFunc.apply(tmpl, arguments);\n};\n```\n\n## Templates syntax\n\n### Interpolation\nPrint variable with HTML special characters escaped:\n\n```html\n<h3>{%=o.title%}</h3>\n```\n\nPrint variable without escaping:\n\n```html\n<h3>{%#o.user_id%}</h3>\n```\n\nPrint output of function calls:\n\n```html\n<a href=\"{%=encodeURI(o.url)%}\">Website</a>\n```\n\nUse dot notation to print nested properties:\n\n```html\n<strong>{%=o.author.name%}</strong>\n```\n\nNote that the JavaScript Templates engine prints **falsy** values as empty strings.  \nThat is, **undefined**, **null**, **false**, **0** and **NaN** will all be converted to **''**.  \nTo be able to print e.g. the number 0, convert it to a String before using it as an output variable:\n\n```html\n<h3>{%=0+''%}</h3>\n```\n\n### Evaluation\nUse **print(str)** to add escaped content to the output:\n\n```html\n<span>Year: {% var d=new Date(); print(d.getFullYear()); %}</span>\n```\n\nUse **print(str, true)** to add unescaped content to the output:\n\n```html\n<span>{% print(\"Fast &amp; powerful\", true); %}</span>\n```\n\nUse **include(str, obj)** to include content from a different template:\n\n```html\n<div>\n{% include('tmpl-link', {name: \"Website\", url: \"http://example.org\"}); %}\n</div>\n```\n\nIf else condition:\n\n```html\n{% if (o.author.url) { %}\n    <a href=\"{%=encodeURI(o.author.url)%}\">{%=o.author.name%}</a>\n{% } else { %}\n    <em>No author url.</em>\n{% } %}\n```\n\nFor loop:\n\n```html\n<ul>\n{% for (var i=0; i<o.features.length; i++) { %}\n    <li>{%=o.features[i]%}</li>\n{% } %}\n</ul>\n```\n\n## Compiled templates\nThe JavaScript Templates project comes with a compilation script, that allows you to compile your templates into JavaScript code and combine them with a minimal Templates runtime into one minified JavaScript file.\n\nThe compilation script is built for [node.js](http://nodejs.org/) and also requires [UglifyJS](https://github.com/mishoo/UglifyJS).  \nTo use it, first install both the JavaScript Templates project and UglifyJS via [npm](http://npmjs.org/):\n\n```sh\nnpm install uglify-js\nnpm install blueimp-tmpl\n```\n\nThis will put the executables **uglifyjs** and **tmpl.js** into the folder **node_modules/.bin**. It will also make them available on your PATH if you install the packages globally (by adding the **-g** flag to the install command).\n\nThe **tmpl.js** executable accepts the paths to one or multiple template files as command line arguments and prints the generated JavaScript code to the console output. The following command line shows you how to store the generated code in a new JavaScript file that can be included in your project:\n\n```sh\ntmpl.js templates/upload.html templates/download.html > tmpl.min.js\n```\n\nThe files given as command line arguments to **tmpl.js** can either be pure template files or HTML documents with embedded template script sections. For the pure template files, the file names (without extension) serve as template ids.  \nThe generated file can be included in your project as a replacement for the original **tmpl.js** runtime. It provides you with the same API and provides a **tmpl(id, data)** function that accepts the id of one of your templates as first and a data object as optional second parameter.\n\n## License\nThe JavaScript Templates script is released under the [MIT license](http://www.opensource.org/licenses/MIT).\n",
  "_id": "blueimp-tmpl@2.1.0",
  "_from": "blueimp-tmpl@>=2.1.0"
}

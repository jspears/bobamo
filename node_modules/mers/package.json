{
  "name": "mers",
  "version": "0.4.1",
  "private": false,
  "author": {
    "name": "Justin Spears",
    "email": "speajus@gmail.com"
  },
  "dependencies": {
    "mongoose": ">= 2.5.7",
    "underscore": ">=1.3.1"
  },
  "devDependencies": {
    "express": ">= 2.5.8",
    "mocha": "latest",
    "should": "latest"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --reporter spec test/*-mocha.js"
  },
  "keywords": [
    "framework",
    "json",
    "express",
    "mongoose",
    "rest",
    "restful"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:jspears/mers"
  },
  "readme": "#Mers\n *_Mongoose\n *_Express\n *_Rest\n *_Service\n \n    Mers is a plugin for express to expose mongoose finders as simple crud/rest operations.  The\n    basic idea being you should just define your model/finders and the rest should be be magic.\n\n\n## Usage [usage]\n```javascript\n    var mers = require('mers');\n    app.use('/rest', mers({uri:'mongodb://localhost/rest_example_prod'}).rest());\n```\nConfiguration options include\n     uri://mongoose uri or\n     mongoose:mongoose, //your mongoose instance.\n     [error][error]:function //your custom error handler.\n     responseStream:function //your custom respost stream See: lib/streams.js\n     transformer:function //your custom transformer factory\n\n\n###If you had a schema such as\n   ```javascript\nvar mongoose = require('mongoose'), Schema = mongoose.Schema,\n    ObjectId = mongoose.Schema.ObjectId;\n\nvar CommentSchema = new Schema({\n    title:String, body:String, date:Date\n});\n\n\nvar BlogPostSchema = new Schema({\n    author:ObjectId, title:String, body:String, buf:Buffer, date:Date, comments:[CommentSchema], meta:{\n        votes:Number, favs:Number\n    }\n});\n/**\n * Note this must return a query object.   If it doesn't well, I dunno what it'll do.\n * @param q\n * @param term\n */\nBlogPostSchema.statics.findTitleLike = function findTitleLike(q, term) {\n    return this.find({'title':new RegExp(q.title || term, 'i')});\n}\nvar Comment = module.exports.Comment = mongoose.model('Comment', CommentSchema);\nvar BlogPost = module.exports.BlogPost = mongoose.model('BlogPost', BlogPostSchema);\n```\n\nyou could then access it at\n    listing.\n    \n    http://localhost:3000/rest/blogpost/\n    http://localhost:3000/rest/blogpost/$id\n    http://localhost:3000/rest/blogpost/$id/comments\n    http://localhost:3000/rest/blogpost/$id/comments/$id\n    http://localhost:3000/rest/blogpost/$id/comments/0\n    http://localhost:3000/rest/blogpost/finder/findTitleLike/term\n    \n    \n###Pagination\nPagination is also supported via skip= and limit= query params.\n\n    http://localhost:3000/rest/blogpost/$id?skip=10&limit=10\n\n###Population\nMongoose populate is supported, but this will be changing shortly to allow for more\nfine grained controll over population.  Currently you can do\n\n    http://localhost:3000/rest/blogpost?populate=comments\n\nor to specify particular fields.\n\n    http://localhost:3000/rest/blogpost?skip=10&populate[comments]=title,date\n\n\n\n###Filter\nFiltering is available for strings. To find all the blog posts with C in the title.\n\n    http://localhost:3000/rest/blogpost?filter[title]=C\n\nTo filter all String fields that have a C in them\n\n    http://localhost:3000/rest/blogpost?filter=C\n\n\n###Sorting\nSorting is supported 1 ascending -1 ascending.\n\n  http://localhost:3000/rest/blogpost?sort=title:1,date:-1\n\n###Transformer\nTransformers can be registered on startup.  A simple TransformerFactory is\nincluded.  Something that takes security into account could be added.  Currently\nthis is only supported on the get operations.   May change the responses to post\nto send location, though I find that pretty inconvient.\n\n\n```javascript\n\napp.use('/rest', require('mers').rest({\n    mongoose:mongoose,\n    transformers:{\n           renameid:function(Model, label){\n            //do some setup but return function.\n              return function(obj){\n                obj.id = obj._id;\n                delete obj._id;\n                //don't forget to return the object.  Null will filter it from the results.\n                return obj;\n              }\n           }\n      }\n    }));\n}\n```\n\nto get results transformered just add\n\n     http://localhost:3000/rest/blogpost?transform=renameid\n\n\n\nIt handles  get/put/post/delete I'll add some docs on that some day, but pretty much as you expect, or I expect anyways.\nsee tests/routes-mocha.js for examples.\n\n###Static Finders\nIt should also be able to be used with Class finders. Now handles class finders. Note: They must return  a query object.\nThey are passed the query object and the rest of the url. All of the populate's, filters, transforms should work.\n\n```javascript\n\n/**\n * Note this must return a query object.\n * @param q\n * @param term\n */\nBlogPostSchema.statics.findTitleLike = function findTitleLike(q, term) {\n    return this.find({'title':new RegExp(q.title || term, 'i')});\n}\n\n```\n\nSo you can get the url\n\n    http://localhost:3000/rest/blogpost/finder/findTitleLike?title=term\n\nor\n\n    http://localhost:3000/rest/blogpost/finder/findTitleLike/term\n\n### [Error Handling][error]\nTo create a custom error handler\n\n```javascript\n\n   app.use('/rest, rest({\n         error : function(err, req, res, next){\n               res.send({\n                   status:1,\n                   error:err && err.message\n               });\n           }).rest());\n\n```\n\n### Custom Transformers\nYou can transform your results by adding a custom transformer and or adding a new TransformerFactory\n\n```javascript\n\n   app.use('/rest, rest({\n         transformers :{\n          cooltranform:function(Model, label){\n             return function(obj){\n                    obj.id = obj._id;\n                    delete obj._id;\n                    return obj; //returning null removes it from the output\n             }\n          } }).rest());\n\n```\n\n### Custom ResultStream\nYou can create your own result stream. It needs to subclass Stream and be writable.  This can allow\nfor other formats, and preventing the wrapping of data in the payload.\n\n\n##Examples.\nAn example of a customized rest service can be found at\n\n    https://github.com/jspears/backbone-directory\n",
  "_id": "mers@0.4.1",
  "description": "*_Mongoose  *_Express  *_Rest  *_Service",
  "dist": {
    "shasum": "7d0190ea01ec585cecbc375ce5aef08fb06bedcd"
  },
  "_from": "mers@0.4.1"
}

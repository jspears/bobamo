{
  "name": "jqtpl",
  "description": "A port of jQuery's template engine",
  "version": "1.1.0",
  "author": {
    "name": "Oleg Slobodskoi",
    "email": "oleg008@gmail.com"
  },
  "contributors": [
    {
      "name": "John Resig",
      "email": "jeresig@gmail.com"
    },
    {
      "name": "Boris Moore",
      "email": "borismoore@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/kof/node-jqtpl.git"
  },
  "keywords": [
    "template",
    "engine",
    "jquery",
    "jquery-tmpl",
    "django",
    "logicless",
    "express"
  ],
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">= 0.3.7"
  },
  "devDependencies": {
    "express": ">= 2.2.1 < 3.0.0",
    "qunit": "0.2.x",
    "underscore": "1.3.x",
    "request": "2.9.x"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "## This is a port of jQuery's Template Engine to nodejs\n\nhttp://github.com/jquery/jquery-tmpl\n\n## Full API documentation of the original plugin\n\nhttp://api.jquery.com/category/plugins/templates/\n\nNote: currently not implemented: wrap tag and tmplItem method.\n\n## Philosophy is similar to django\n\nhttp://docs.djangoproject.com/en/dev/topics/templates/\n\n * no program logic in templates\n * no embeded script language like in ejs\n   1. this is evil because it enables program logic in templates\n   1. bad usability\n   1. because of the \"var\" problem in javascript\n\n## Features\n\n * jquery tmpl plugin conform\n * extendable - you can implement new statements\n * html escaping per default\n * simple syntax\n * tiny and fast\n\n## Installation via npm\n\tnpm install jqtpl\n\n## Run tests\n    $ make test\n\n\n## Usage\n\n### require the module\n    var jqtpl = require(\"jqtpl\");\n\n### jqtpl.tmpl(markup, data, options);\n\nCompile and render a template. It uses `jqtpl.template` method.\n\n- `markup` html code string\n- `data` object or array of data\n- `options` optional options object\n\n### jqtpl.template(name, tpl)\n\nNamed templates - there is a way to precompile the template using a string, so you can render this template later using its name.\n**Template is cached after this fn call.**\n\n\t// tpl\n    <div>${a}</div>\n\n\t// code\n\n\t// precompile an cache it\n\tjqtpl.template( \"templateName\", tpl );\n\t// render\n    jqtpl.tmpl( \"templateName\", {a:1} );\n    // you can also delete the template from cache\n    delete jqtpl.template[\"templateName\"];\n\n\t// output\n    <div>1</div>\n\n### Local variables\n\n- `$data` - data object passed to render method\n- `$item` - contains $data via $item.data as well as user options - an optional map of user-defined key-value pairs.\n\nExamples:\n\n\t// tpl\n    <div>${ $item.someMethod() }</div>\n\n    // code\n\tjqtpl.tmpl( tpl, {a:1}, {\n\t\tsomeMethod: function(){ return 1; }\n\t});\n\n\t//output\n    <div>1</div>\n\n## Tags\n\n### ${} - simple output (escaped per default)\n\t// tpl\n    <div>${a}</div>\n\n\t// code\n    jqtpl.tmpl( tpl, {a:123});\n\n    // output\n    <div>123</div>\n\n### ${} - simple output but with array as data argument (escaped per default)\n\n\t//tpl\n    <div>${a}</div>\n\n\t// code\n    jqtpl.tmpl( tpl, [{a:1},{a:2},{a:3}]);\n\n\t// output\n    <div>1</div><div>2</div><div>3</div>\n\n### ${} - if property is a function - it will be called automatically (escaped per default)\n\n\t// tpl\n    <div>${a}</div>\n\n\t// code\n    jqtpl.tmpl( tpl, {\n        a:function() {\n            return 1 + 5;\n        }\n    });\n\n\t//output\n    <div>6</div>\n\n### {{if}} and {{else}}\n\n\t// tpl\n    {{if a == 6}}\n        <div>${a}</div>\n    {{else a == 5}}\n    \t<div>5</div>\n    {{else}}\n        <div>a is not 6 and not 5</div>\n    {{/if}}\n\n\t// code\n    jqtpl.tmpl( tpl, {a:6});\n\n\t// output\n    <div>6</div>\n\n\t// code\n    jqtpl.tmpl( tpl, {a:5});\n\n\t// output\n    <div>a is not 6</div>\n\n### {{each}} looping.\n\n\t// tpl\n    {{each(i, name) names}}\n        <div>${i}.${name}</div>\n    {{/each}}\n\n    // alternative syntax\n\n\t{{each names}}\n\t\t<div>${$index}.${$value}</div>\n\t{{/each}}\n\n\t// code\n    jqtpl.tmpl( tpl, {names: [\"A\", \"B\"]});\n\n\t// output\n    <div>0.A</div><div>1.B</div>\n\n### {{html}} - there is a way to avoid escaping if you know what you do :)\n\n\t// tpl\n    <div>{{html a}}</div>\n\n\t// code\n    jqtpl.tmpl( tpl, {a:'<div id=\"123\">2</div>'});\n\n\t// output\n    <div id=\"123\">2</div>\n\n\n### {{!}} - comments.\n\n\t// tpl\n    <div>{{! its a comment}}</div>\n\n\t// code\n    jqtpl.tmpl( tpl );\n\n\t// output\n    <div></div>\n\n### {{tmpl}} - subtemplates.\n\nNote: passing json object with 2 curly brackets without any separation will break the engine: {{tmpl({a: {b: 1}}) \"mypartial\"}}\n\n\t// tpl\n    <div>{{tmpl({name: \"Test\"}) '${name}'}}</div>\n\n\t// code\n    jqtpl.tmpl(tpl);\n\n\t// output\n    <div>Test</div>\n\n# Not jquery-tmpl compatible stuff\n\n## Specific tags\n\n### {{verbatim}} tag\n\nIf you want to skip a part of your template, which should be rendered on the client, you can use now verbatim tag.\n\n    // mytemplate.html\n    <div>my name is ${name}</div>\n    {{verbatim}}\n        <div>your name is ${userName}</div>\n    {{/verbatim}}\n\n    // code\n    res.render('myaction', {name: 'Kof'});\n\n    // output\n    <div>my name is Kof</div>\n    <div>your name is ${userName}</div>\n\n\n## Express specific stuff\n\n**Note: express is caching all templates in production!**\n\n### Usage\n\n    app.set(\"view engine\", \"html\");\n    app.register(\".html\", require(\"jqtpl\").express);\n\n### {{partial}} tag\n\nRead express documentation here http://expressjs.com/guide.html#res.partial()\n\n\t// tpl\n\n\t// myaction.html\n    <div>{{partial(test) \"mypartial\"}}</div>\n\n\t// mypartial.html\n\t${name}\n\n\t// code\n\tapp.get('/myaction', function(req, res) {\n\t\tres.render('myaction', {test: {name: 'Test'}});\n\t})\n\n\t// output\n    <div>Test</div>\n\nUsing array of data:\n\n\t// tpl\n\n\t// myaction.html\n    <div id=\"main\">\n    \t{{partial(test) \"mypartial\"}}\n\t</div>\n\n\t// mypartial.html\n\t<div class=\"partial\">\n\t\t${name}\n\t</div>\n\n\t// code\n\tapp.get('/myaction', function(req, res) {\n\t\tres.render('myaction', {\n\t\t\tas: global,\n\t\t\ttest: [\n\t\t\t\t{name: \"Test1\"},\n\t\t\t\t{name: \"Test2\"}\n\t\t\t]\n\t\t});\n\t})\n\n\t// output\n\t<div id=\"main\">\n\t\t<div class=\"partial\">Test1</div>\n\t\t<div class=\"partial\">Test2</div>\n    </div>\n\n### {{layout}} tag\n\nUsing layout tag in a view it is possible to define a layout within this view.\nNote: it is possible since express@2.2.1.\n\n\t// tpl\n\n\t// mylayout.html\n\t<html>\n\t{{html body}}\n    </html>\n\n    // myview.html\n    {{layout \"mylayout\"}}\n    \t<div>myview</div>\n\n    // output\n    <html>\n\t\t<div>myview</div>\n    </html>\n",
  "_id": "jqtpl@1.1.0",
  "_from": "jqtpl@latest"
}

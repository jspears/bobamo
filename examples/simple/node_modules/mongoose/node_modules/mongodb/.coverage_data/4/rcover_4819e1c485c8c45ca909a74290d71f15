{
  "files": {
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/index.js": {
      "stats": {
        "percentage": 0.89171974522293,
        "lines": [
          {
            "lineno": 108
          },
          {
            "lineno": 110
          },
          {
            "lineno": 131
          },
          {
            "lineno": 133
          },
          {
            "lineno": 138
          },
          {
            "lineno": 139
          },
          {
            "lineno": 140
          },
          {
            "lineno": 141
          },
          {
            "lineno": 142
          },
          {
            "lineno": 143
          },
          {
            "lineno": 144
          },
          {
            "lineno": 145
          },
          {
            "lineno": 146
          },
          {
            "lineno": 147
          },
          {
            "lineno": 150
          },
          {
            "lineno": 153
          },
          {
            "lineno": 156
          }
        ],
        "missing": 17,
        "seen": 140,
        "seen_lines": [
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 8,
            "e": 51
          },
          {
            "s": 8,
            "e": 51
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 38,
            "e": 38
          },
          {
            "s": 38,
            "e": 38
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 42,
            "e": 42
          },
          {
            "s": 42,
            "e": 42
          },
          {
            "s": 43,
            "e": 43
          },
          {
            "s": 43,
            "e": 43
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 54,
            "e": 107
          },
          {
            "s": 55,
            "e": 55
          },
          {
            "s": 57,
            "e": 82
          },
          {
            "s": 57,
            "e": 82
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 88,
            "e": 88
          },
          {
            "s": 88,
            "e": 88
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 90,
            "e": 90
          },
          {
            "s": 90,
            "e": 90
          },
          {
            "s": 91,
            "e": 91
          },
          {
            "s": 91,
            "e": 91
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 93,
            "e": 93
          },
          {
            "s": 93,
            "e": 93
          },
          {
            "s": 94,
            "e": 94
          },
          {
            "s": 94,
            "e": 94
          },
          {
            "s": 95,
            "e": 95
          },
          {
            "s": 95,
            "e": 95
          },
          {
            "s": 96,
            "e": 96
          },
          {
            "s": 96,
            "e": 96
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 100,
            "e": 100
          },
          {
            "s": 100,
            "e": 100
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 107,
            "e": 158
          }
        ],
        "total": 157,
        "coverage": {
          "108": {
            "partial": false,
            "source": "  var classes = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "110": {
            "partial": false,
            "source": "  [ 'commands/base_command'",
            "missing": [
              {}
            ]
          },
          "111": {
            "partial": false,
            "source": "    , 'commands/db_command'",
            "missing": [
              {}
            ]
          },
          "112": {
            "partial": false,
            "source": "    , 'commands/delete_command'",
            "missing": [
              {}
            ]
          },
          "113": {
            "partial": false,
            "source": "    , 'commands/get_more_command'",
            "missing": [
              {}
            ]
          },
          "114": {
            "partial": false,
            "source": "    , 'commands/insert_command'",
            "missing": [
              {}
            ]
          },
          "115": {
            "partial": false,
            "source": "    , 'commands/kill_cursor_command'",
            "missing": [
              {}
            ]
          },
          "116": {
            "partial": false,
            "source": "    , 'commands/query_command'",
            "missing": [
              {}
            ]
          },
          "117": {
            "partial": false,
            "source": "    , 'commands/update_command'",
            "missing": [
              {}
            ]
          },
          "118": {
            "partial": false,
            "source": "    , 'responses/mongo_reply'",
            "missing": [
              {}
            ]
          },
          "119": {
            "partial": false,
            "source": "    , 'admin'",
            "missing": [
              {}
            ]
          },
          "120": {
            "partial": false,
            "source": "    , 'collection'",
            "missing": [
              {}
            ]
          },
          "121": {
            "partial": false,
            "source": "    , 'connection/read_preference'",
            "missing": [
              {}
            ]
          },
          "122": {
            "partial": false,
            "source": "    , 'connection/connection'",
            "missing": [
              {}
            ]
          },
          "123": {
            "partial": false,
            "source": "    , 'connection/server'",
            "missing": [
              {}
            ]
          },
          "124": {
            "partial": false,
            "source": "    , 'connection/mongos'",
            "missing": [
              {}
            ]
          },
          "125": {
            "partial": false,
            "source": "    , 'connection/repl_set'",
            "missing": [
              {}
            ]
          },
          "126": {
            "partial": false,
            "source": "    , 'cursor'",
            "missing": [
              {}
            ]
          },
          "127": {
            "partial": false,
            "source": "    , 'db'",
            "missing": [
              {}
            ]
          },
          "128": {
            "partial": false,
            "source": "    , 'gridfs/grid'",
            "missing": [
              {}
            ]
          },
          "129": {
            "partial": false,
            "source": "    ,\t'gridfs/chunk'",
            "missing": [
              {}
            ]
          },
          "130": {
            "partial": false,
            "source": "    , 'gridfs/gridstore'].forEach(function (path) {",
            "missing": [
              {}
            ]
          },
          "131": {
            "partial": false,
            "source": "    \tvar module = require('./' + path);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 39
              },
              {
                "startCol": 18,
                "endCol": 38
              },
              {},
              {
                "startCol": 26,
                "endCol": 37
              },
              {
                "startCol": 33,
                "endCol": 37
              }
            ]
          },
          "132": {
            "partial": false,
            "source": "    \tfor (var i in module) {",
            "missing": [
              {}
            ]
          },
          "133": {
            "partial": false,
            "source": "    \t\tclasses[i] = module[i];",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 29
              }
            ]
          },
          "134": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "135": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "138": {
            "partial": false,
            "source": "  classes.Binary = require('bson').Binary;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 26,
                "endCol": 34
              }
            ]
          },
          "139": {
            "partial": false,
            "source": "  classes.Code = require('bson').Code;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 38
              },
              {
                "startCol": 24,
                "endCol": 32
              }
            ]
          },
          "140": {
            "partial": false,
            "source": "  classes.DBRef = require('bson').DBRef;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 40
              },
              {
                "startCol": 25,
                "endCol": 33
              }
            ]
          },
          "141": {
            "partial": false,
            "source": "  classes.Double = require('bson').Double;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 26,
                "endCol": 34
              }
            ]
          },
          "142": {
            "partial": false,
            "source": "  classes.Long = require('bson').Long;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 38
              },
              {
                "startCol": 24,
                "endCol": 32
              }
            ]
          },
          "143": {
            "partial": false,
            "source": "  classes.MinKey = require('bson').MinKey;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 26,
                "endCol": 34
              }
            ]
          },
          "144": {
            "partial": false,
            "source": "  classes.MaxKey = require('bson').MaxKey;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 26,
                "endCol": 34
              }
            ]
          },
          "145": {
            "partial": false,
            "source": "  classes.ObjectID = require('bson').ObjectID;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 28,
                "endCol": 36
              }
            ]
          },
          "146": {
            "partial": false,
            "source": "  classes.Symbol = require('bson').Symbol;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 26,
                "endCol": 34
              }
            ]
          },
          "147": {
            "partial": false,
            "source": "  classes.Timestamp = require('bson').Timestamp;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              },
              {
                "startCol": 29,
                "endCol": 37
              }
            ]
          },
          "150": {
            "partial": false,
            "source": "  classes.ReplSetServers = exports.ReplSet;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              }
            ]
          },
          "153": {
            "partial": false,
            "source": "  classes.BSON = require('bson').BSONNative.BSON;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 49
              },
              {
                "startCol": 24,
                "endCol": 32
              }
            ]
          },
          "156": {
            "partial": false,
            "source": "  return classes;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 17
              }
            ]
          }
        },
        "source": "try {\n  exports.BSONPure = require('bson').BSONPure;\n  exports.BSONNative = require('bson').BSONNative;\n} catch(err) {\n  // do nothing\n}\n\n[ 'commands/base_command'\n  , 'commands/db_command'\n  , 'commands/delete_command'\n  , 'commands/get_more_command'\n  , 'commands/insert_command'\n  , 'commands/kill_cursor_command'\n  , 'commands/query_command'\n  , 'commands/update_command'\n  , 'responses/mongo_reply'\n  , 'admin'\n  , 'collection'\n  , 'connection/read_preference'\n  , 'connection/connection'\n  , 'connection/server'\n  , 'connection/mongos'\n  , 'connection/repl_set'\n  , 'cursor'\n  , 'db'\n  , 'gridfs/grid'\n  ,\t'gridfs/chunk'\n  , 'gridfs/gridstore'].forEach(function (path) {\n  \tvar module = require('./' + path);\n  \tfor (var i in module) {\n  \t\texports[i] = module[i];\n    }\n\n    // backwards compat\n    exports.ReplSetServers = exports.ReplSet;\n    \n    // Add BSON Classes\n    exports.Binary = require('bson').Binary;\n    exports.Code = require('bson').Code;\n    exports.DBRef = require('bson').DBRef;\n    exports.Double = require('bson').Double;\n    exports.Long = require('bson').Long;\n    exports.MinKey = require('bson').MinKey;\n    exports.MaxKey = require('bson').MaxKey;\n    exports.ObjectID = require('bson').ObjectID;\n    exports.Symbol = require('bson').Symbol;\n    exports.Timestamp = require('bson').Timestamp;  \n    \n    // Add BSON Parser\n    exports.BSON = require('bson').BSONPure.BSON;\n});\n\n// Exports all the classes for the PURE JS BSON Parser\nexports.pure = function() {\n  var classes = {};\n  // Map all the classes\n  [ 'commands/base_command'\n    , 'commands/db_command'\n    , 'commands/delete_command'\n    , 'commands/get_more_command'\n    , 'commands/insert_command'\n    , 'commands/kill_cursor_command'\n    , 'commands/query_command'\n    , 'commands/update_command'\n    , 'responses/mongo_reply'\n    , 'admin'\n    , 'collection'\n    , 'connection/read_preference'\n    , 'connection/connection'\n    , 'connection/server'\n    , 'connection/mongos'\n    , 'connection/repl_set'\n    , 'cursor'\n    , 'db'\n    , 'gridfs/grid'\n    ,\t'gridfs/chunk'\n    , 'gridfs/gridstore'].forEach(function (path) {\n    \tvar module = require('./' + path);\n    \tfor (var i in module) {\n    \t\tclasses[i] = module[i];\n      }\n  });\n\n  // backwards compat\n  classes.ReplSetServers = exports.ReplSet;\n\n  // Add BSON Classes\n  classes.Binary = require('bson').Binary;\n  classes.Code = require('bson').Code;\n  classes.DBRef = require('bson').DBRef;\n  classes.Double = require('bson').Double;\n  classes.Long = require('bson').Long;\n  classes.MinKey = require('bson').MinKey;\n  classes.MaxKey = require('bson').MaxKey;\n  classes.ObjectID = require('bson').ObjectID;\n  classes.Symbol = require('bson').Symbol;\n  classes.Timestamp = require('bson').Timestamp;\n\n  // Add BSON Parser\n  classes.BSON = require('bson').BSONPure.BSON;\n\n  // Return classes list\n  return classes;\n}\n\n// Exports all the classes for the PURE JS BSON Parser\nexports.native = function() {\n  var classes = {};\n  // Map all the classes\n  [ 'commands/base_command'\n    , 'commands/db_command'\n    , 'commands/delete_command'\n    , 'commands/get_more_command'\n    , 'commands/insert_command'\n    , 'commands/kill_cursor_command'\n    , 'commands/query_command'\n    , 'commands/update_command'\n    , 'responses/mongo_reply'\n    , 'admin'\n    , 'collection'\n    , 'connection/read_preference'\n    , 'connection/connection'\n    , 'connection/server'\n    , 'connection/mongos'\n    , 'connection/repl_set'\n    , 'cursor'\n    , 'db'\n    , 'gridfs/grid'\n    ,\t'gridfs/chunk'\n    , 'gridfs/gridstore'].forEach(function (path) {\n    \tvar module = require('./' + path);\n    \tfor (var i in module) {\n    \t\tclasses[i] = module[i];\n      }\n  });\n\n  // Add BSON Classes\n  classes.Binary = require('bson').Binary;\n  classes.Code = require('bson').Code;\n  classes.DBRef = require('bson').DBRef;\n  classes.Double = require('bson').Double;\n  classes.Long = require('bson').Long;\n  classes.MinKey = require('bson').MinKey;\n  classes.MaxKey = require('bson').MaxKey;\n  classes.ObjectID = require('bson').ObjectID;\n  classes.Symbol = require('bson').Symbol;\n  classes.Timestamp = require('bson').Timestamp;\n\n  // backwards compat\n  classes.ReplSetServers = exports.ReplSet;\n\n  // Add BSON Parser\n  classes.BSON = require('bson').BSONNative.BSON;\n\n  // Return classes list\n  return classes;\n}",
        "blocks": {
          "total": 10,
          "seen": 6,
          "missing": 4,
          "percentage": 0.6
        }
      },
      "hash": "660a0d56765db9e03c5965e754d6d4c9"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/commands/base_command.js": {
      "stats": {
        "percentage": 0.9310344827586207,
        "lines": [
          {
            "lineno": 16
          },
          {
            "lineno": 17
          }
        ],
        "missing": 2,
        "seen": 27,
        "seen_lines": [
          {
            "s": 4,
            "e": 5
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 8,
            "e": 11
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 13,
            "e": 15
          },
          {
            "s": 15,
            "e": 18
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 24,
            "e": 24
          },
          {
            "s": 25,
            "e": 25
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 29,
            "e": 29
          }
        ],
        "total": 29,
        "coverage": {
          "16": {
            "partial": false,
            "source": "  this.requestId = id++;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 19,
                "endCol": 23
              }
            ]
          },
          "17": {
            "partial": false,
            "source": "  return this.requestId;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          }
        },
        "source": "/**\n  Base object used for common functionality\n**/\nvar BaseCommand = exports.BaseCommand = function BaseCommand() {\n};\n\nvar id = 1;\nBaseCommand.prototype.getRequestId = function getRequestId() {\n  if (!this.requestId) this.requestId = id++;\n  return this.requestId;\n};\n\nBaseCommand.prototype.setMongosReadPreference = function setMongosReadPreference(readPreference, tags) {}\n\nBaseCommand.prototype.updateRequestId = function() {\n  this.requestId = id++;\n  return this.requestId;\n};\n\n// OpCodes\nBaseCommand.OP_REPLY = 1;\nBaseCommand.OP_MSG = 1000;\nBaseCommand.OP_UPDATE = 2001;\nBaseCommand.OP_INSERT =\t2002;\nBaseCommand.OP_GET_BY_OID = 2003;\nBaseCommand.OP_QUERY = 2004;\nBaseCommand.OP_GET_MORE = 2005;\nBaseCommand.OP_DELETE =\t2006;\nBaseCommand.OP_KILL_CURSORS =\t2007;",
        "blocks": {
          "total": 5,
          "seen": 3,
          "missing": 2,
          "percentage": 0.6
        }
      },
      "hash": "a50ae4b0fa3eb1628f09bd6b9b2c4080"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/commands/db_command.js": {
      "stats": {
        "percentage": 0.6962616822429907,
        "lines": [
          {
            "lineno": 20
          },
          {
            "lineno": 23
          },
          {
            "lineno": 44
          },
          {
            "lineno": 48
          },
          {
            "lineno": 52
          },
          {
            "lineno": 57
          },
          {
            "lineno": 59
          },
          {
            "lineno": 60
          },
          {
            "lineno": 62
          },
          {
            "lineno": 63
          },
          {
            "lineno": 64
          },
          {
            "lineno": 66
          },
          {
            "lineno": 68
          },
          {
            "lineno": 72
          },
          {
            "lineno": 79
          },
          {
            "lineno": 86
          },
          {
            "lineno": 90
          },
          {
            "lineno": 91
          },
          {
            "lineno": 92
          },
          {
            "lineno": 98
          },
          {
            "lineno": 99
          },
          {
            "lineno": 106
          },
          {
            "lineno": 117
          },
          {
            "lineno": 121
          },
          {
            "lineno": 125
          },
          {
            "lineno": 126
          },
          {
            "lineno": 127
          },
          {
            "lineno": 130
          },
          {
            "lineno": 131
          },
          {
            "lineno": 132
          },
          {
            "lineno": 133
          },
          {
            "lineno": 134
          },
          {
            "lineno": 135
          },
          {
            "lineno": 136
          },
          {
            "lineno": 137
          },
          {
            "lineno": 138
          },
          {
            "lineno": 139
          },
          {
            "lineno": 140
          },
          {
            "lineno": 141
          },
          {
            "lineno": 142
          },
          {
            "lineno": 143
          },
          {
            "lineno": 144
          },
          {
            "lineno": 145
          },
          {
            "lineno": 151
          },
          {
            "lineno": 152
          },
          {
            "lineno": 153
          },
          {
            "lineno": 154
          },
          {
            "lineno": 155
          },
          {
            "lineno": 160
          },
          {
            "lineno": 162
          },
          {
            "lineno": 165
          },
          {
            "lineno": 167
          },
          {
            "lineno": 170
          },
          {
            "lineno": 172
          },
          {
            "lineno": 173
          },
          {
            "lineno": 177
          },
          {
            "lineno": 179
          },
          {
            "lineno": 183
          },
          {
            "lineno": 185
          },
          {
            "lineno": 189
          },
          {
            "lineno": 193
          },
          {
            "lineno": 201
          },
          {
            "lineno": 205
          },
          {
            "lineno": 209
          },
          {
            "lineno": 213
          }
        ],
        "missing": 65,
        "seen": 149,
        "seen_lines": [
          {
            "s": 1,
            "e": 4
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 9,
            "e": 25
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 14,
            "e": 14
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 20,
            "e": 20
          },
          {
            "s": 20,
            "e": 20
          },
          {
            "s": 20,
            "e": 20
          },
          {
            "s": 20,
            "e": 20
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 34,
            "e": 34
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 38,
            "e": 40
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 43,
            "e": 45
          },
          {
            "s": 47,
            "e": 49
          },
          {
            "s": 51,
            "e": 53
          },
          {
            "s": 55,
            "e": 69
          },
          {
            "s": 71,
            "e": 73
          },
          {
            "s": 75,
            "e": 83
          },
          {
            "s": 76,
            "e": 76
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 85,
            "e": 87
          },
          {
            "s": 89,
            "e": 93
          },
          {
            "s": 95,
            "e": 112
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 102,
            "e": 102
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 114,
            "e": 114
          },
          {
            "s": 116,
            "e": 118
          },
          {
            "s": 120,
            "e": 122
          },
          {
            "s": 124,
            "e": 180
          },
          {
            "s": 172,
            "e": 172
          },
          {
            "s": 172,
            "e": 172
          },
          {
            "s": 182,
            "e": 188
          },
          {
            "s": 188,
            "e": 190
          },
          {
            "s": 192,
            "e": 194
          },
          {
            "s": 196,
            "e": 198
          },
          {
            "s": 197,
            "e": 197
          },
          {
            "s": 197,
            "e": 197
          },
          {
            "s": 197,
            "e": 197
          },
          {
            "s": 197,
            "e": 197
          },
          {
            "s": 200,
            "e": 202
          },
          {
            "s": 204,
            "e": 206
          },
          {
            "s": 208,
            "e": 210
          },
          {
            "s": 212,
            "e": 214
          }
        ],
        "total": 214,
        "coverage": {
          "20": {
            "partial": true,
            "source": "  options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 35,
                "endCol": 42
              }
            ]
          },
          "23": {
            "partial": false,
            "source": "    this.serializeFunctions = true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "44": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 154
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_NAMESPACE_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, 0, selector, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 149
              },
              {
                "startCol": 27,
                "endCol": 48
              }
            ]
          },
          "52": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'getnonce':1}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 154
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "57": {
            "partial": false,
            "source": "  var md5 = crypto.createHash('md5');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 37
              },
              {
                "startCol": 12,
                "endCol": 36
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "  md5.update(username + \":mongo:\" + password);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 13,
                "endCol": 21
              },
              {
                "startCol": 36,
                "endCol": 44
              }
            ]
          },
          "60": {
            "partial": false,
            "source": "  var hash_password = md5.digest('hex');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 40
              },
              {
                "startCol": 22,
                "endCol": 39
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "  md5 = crypto.createHash('md5');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              },
              {
                "startCol": 8,
                "endCol": 32
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "  md5.update(nonce + username + hash_password);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 13,
                "endCol": 18
              },
              {
                "startCol": 21,
                "endCol": 29
              },
              {
                "startCol": 32,
                "endCol": 45
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "  var key = md5.digest('hex');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 30
              },
              {
                "startCol": 12,
                "endCol": 29
              }
            ]
          },
          "66": {
            "partial": false,
            "source": "  var selector = {'authenticate':1, 'user':username, 'nonce':nonce, 'key':key};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 79
              }
            ]
          },
          "68": {
            "partial": false,
            "source": "  return new DbCommand(db, authdb + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NONE, 0, -1, selector, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 126
              },
              {
                "startCol": 27,
                "endCol": 33
              },
              {
                "startCol": 106,
                "endCol": 108
              }
            ]
          },
          "72": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'logout':1}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 152
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "    if(options[name] != null && options[name].constructor != Function) selector[name] = options[name];",
            "missing": [
              {
                "startCol": 7,
                "endCol": 28
              },
              {
                "startCol": 32,
                "endCol": 69
              },
              {
                "startCol": 61,
                "endCol": 69
              },
              {
                "startCol": 71,
                "endCol": 102
              }
            ]
          },
          "86": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'drop':collectionName}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 163
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "90": {
            "partial": false,
            "source": "  var renameCollection = db.databaseName + \".\" + fromCollectionName;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 68
              },
              {
                "startCol": 25,
                "endCol": 46
              },
              {
                "startCol": 49,
                "endCol": 67
              }
            ]
          },
          "91": {
            "partial": false,
            "source": "  var toCollection = db.databaseName + \".\" + toCollectionName;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 62
              },
              {
                "startCol": 21,
                "endCol": 42
              },
              {
                "startCol": 45,
                "endCol": 61
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "  return new DbCommand(db, \"admin.\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'renameCollection':renameCollection, 'to':toCollection}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 183
              },
              {
                "startCol": 27,
                "endCol": 73
              },
              {
                "startCol": 115,
                "endCol": 117
              }
            ]
          },
          "98": {
            "partial": false,
            "source": "    db =  options;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 18
              }
            ]
          },
          "99": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "106": {
            "partial": false,
            "source": "      command[name] = options[name]",
            "missing": [
              {}
            ]
          },
          "107": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "117": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'getpreverror':1}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 158
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "121": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'reseterror':1}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 156
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "125": {
            "partial": false,
            "source": "  var fieldHash = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 21
              }
            ]
          },
          "126": {
            "partial": false,
            "source": "  var indexes = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "127": {
            "partial": false,
            "source": "  var keys;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 11
              }
            ]
          },
          "130": {
            "partial": false,
            "source": "  if (fieldOrSpec.constructor === String) {             // 'type'",
            "missing": [
              {
                "startCol": 6,
                "endCol": 40
              },
              {
                "startCol": 34,
                "endCol": 40
              }
            ]
          },
          "131": {
            "partial": false,
            "source": "    indexes.push(fieldOrSpec + '_' + 1);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              },
              {
                "startCol": 17,
                "endCol": 28
              }
            ]
          },
          "132": {
            "partial": false,
            "source": "    fieldHash[fieldOrSpec] = 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              }
            ]
          },
          "133": {
            "partial": false,
            "source": "  } else if (fieldOrSpec.constructor === Array) {       // [{location:'2d'}, ...]",
            "missing": [
              {
                "startCol": 13,
                "endCol": 46
              },
              {
                "startCol": 41,
                "endCol": 46
              }
            ]
          },
          "134": {
            "partial": false,
            "source": "    fieldOrSpec.forEach(function(f) {",
            "missing": [
              {}
            ]
          },
          "135": {
            "partial": false,
            "source": "      if (f.constructor === String) {                   // [{location:'2d'}, 'type']",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 34
              },
              {
                "startCol": 28,
                "endCol": 34
              }
            ]
          },
          "136": {
            "partial": false,
            "source": "        indexes.push(f + '_' + 1);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 33
              },
              {
                "startCol": 21,
                "endCol": 22
              },
              {}
            ]
          },
          "137": {
            "partial": false,
            "source": "        fieldHash[f] = 1;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 25
              }
            ]
          },
          "138": {
            "partial": false,
            "source": "      } else if (f.constructor === Array) {             // [['location', '2d'],['type', 1]]",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 40
              },
              {
                "startCol": 35,
                "endCol": 40
              }
            ]
          },
          "139": {
            "partial": false,
            "source": "        indexes.push(f[0] + '_' + (f[1] || 1));",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 47
              },
              {
                "startCol": 34,
                "endCol": 45
              },
              {
                "startCol": 21,
                "endCol": 31
              }
            ]
          },
          "140": {
            "partial": false,
            "source": "        fieldHash[f[0]] = f[1] || 1;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 36
              },
              {},
              {
                "startCol": 26,
                "endCol": 35
              }
            ]
          },
          "141": {
            "partial": false,
            "source": "      } else if (f.constructor === Object) {            // [{location:'2d'}, {type:1}]",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 41
              },
              {
                "startCol": 35,
                "endCol": 41
              }
            ]
          },
          "142": {
            "partial": false,
            "source": "        keys = Object.keys(f);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 30
              },
              {
                "startCol": 15,
                "endCol": 29
              }
            ]
          },
          "143": {
            "partial": false,
            "source": "        keys.forEach(function(k) {",
            "missing": [
              {}
            ]
          },
          "144": {
            "partial": false,
            "source": "          indexes.push(k + '_' + f[k]);",
            "missing": [
              {
                "startCol": 23,
                "endCol": 24
              },
              {},
              {
                "startCol": 10,
                "endCol": 38
              }
            ]
          },
          "145": {
            "partial": false,
            "source": "          fieldHash[k] = f[k];",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 30
              }
            ]
          },
          "146": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "147": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "148": {
            "partial": false,
            "source": "        // undefined",
            "missing": [
              {}
            ]
          },
          "149": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "150": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "151": {
            "partial": false,
            "source": "  } else if (fieldOrSpec.constructor === Object) {  // {location:'2d', type:1}",
            "missing": [
              {
                "startCol": 13,
                "endCol": 47
              },
              {
                "startCol": 41,
                "endCol": 47
              }
            ]
          },
          "152": {
            "partial": false,
            "source": "    keys = Object.keys(fieldOrSpec);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 36
              },
              {
                "startCol": 11,
                "endCol": 35
              }
            ]
          },
          "153": {
            "partial": false,
            "source": "    keys.forEach(function(key) {",
            "missing": [
              {}
            ]
          },
          "154": {
            "partial": false,
            "source": "      indexes.push(key + '_' + fieldOrSpec[key]);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 48
              },
              {
                "startCol": 19,
                "endCol": 22
              },
              {}
            ]
          },
          "155": {
            "partial": false,
            "source": "      fieldHash[key] = fieldOrSpec[key];",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 40
              }
            ]
          },
          "156": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "160": {
            "partial": false,
            "source": "  var indexName = typeof options.name == 'string' ? options.name : indexes.join(\"_\");",
            "missing": [
              {
                "startCol": 2,
                "endCol": 85
              },
              {
                "startCol": 18,
                "endCol": 37
              },
              {
                "startCol": 52,
                "endCol": 64
              },
              {
                "startCol": 67,
                "endCol": 84
              }
            ]
          },
          "162": {
            "partial": false,
            "source": "  var selector = {'ns':(db.databaseName + \".\" + collectionName), 'key':fieldHash, 'name':indexName};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 100
              },
              {
                "startCol": 23,
                "endCol": 63
              },
              {
                "startCol": 24,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 62
              }
            ]
          },
          "165": {
            "partial": false,
            "source": "  var finalUnique = options == null || 'object' === typeof options ? false : options;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 85
              },
              {
                "startCol": 20,
                "endCol": 27
              },
              {
                "startCol": 39,
                "endCol": 66
              },
              {
                "startCol": 52,
                "endCol": 66
              },
              {
                "startCol": 59,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 74
              },
              {
                "startCol": 77,
                "endCol": 84
              }
            ]
          },
          "167": {
            "partial": false,
            "source": "  options = options == null || typeof options == 'boolean' ? {} : options;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              },
              {
                "startCol": 12,
                "endCol": 19
              },
              {
                "startCol": 31,
                "endCol": 45
              },
              {
                "startCol": 38,
                "endCol": 45
              },
              {
                "startCol": 61,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 73
              }
            ]
          },
          "170": {
            "partial": false,
            "source": "  var keys = Object.keys(options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 34
              },
              {
                "startCol": 13,
                "endCol": 33
              }
            ]
          },
          "172": {
            "partial": true,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "173": {
            "partial": false,
            "source": "    selector[keys[i]] = options[keys[i]];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "177": {
            "partial": false,
            "source": "  if(selector['unique'] == null) selector['unique'] = finalUnique;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 31
              },
              {
                "startCol": 33,
                "endCol": 66
              }
            ]
          },
          "179": {
            "partial": false,
            "source": "  return new InsertCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_INDEX_COLLECTION, false).add(selector);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 111
              },
              {
                "startCol": 9,
                "endCol": 110
              },
              {
                "startCol": 31,
                "endCol": 52
              }
            ]
          },
          "183": {
            "partial": false,
            "source": "  var dbName = options != null && options['authdb'] != null ? options['authdb'] : db.databaseName;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 98
              },
              {
                "startCol": 15,
                "endCol": 22
              },
              {
                "startCol": 34,
                "endCol": 59
              },
              {
                "startCol": 62,
                "endCol": 79
              },
              {
                "startCol": 82,
                "endCol": 97
              }
            ]
          },
          "185": {
            "partial": false,
            "source": "  return new DbCommand(db, dbName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 143
              },
              {
                "startCol": 27,
                "endCol": 33
              },
              {
                "startCol": 119,
                "endCol": 121
              }
            ]
          },
          "189": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'deleteIndexes':collectionName, 'index':indexName}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 191
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "193": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'reIndex':collectionName}, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 166
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "201": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null, options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 161
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 128,
                "endCol": 130
              }
            ]
          },
          "205": {
            "partial": false,
            "source": "  return new DbCommand(db, \"admin.\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 139
              },
              {
                "startCol": 27,
                "endCol": 73
              },
              {
                "startCol": 115,
                "endCol": 117
              }
            ]
          },
          "209": {
            "partial": false,
            "source": "  return new DbCommand(db, \"admin.\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE, 0, -1, command_hash, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 165
              },
              {
                "startCol": 27,
                "endCol": 73
              },
              {
                "startCol": 75,
                "endCol": 136
              },
              {
                "startCol": 141,
                "endCol": 143
              }
            ]
          },
          "213": {
            "partial": false,
            "source": "  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE, 0, -1, command_hash, null, options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 187
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 88,
                "endCol": 149
              },
              {
                "startCol": 154,
                "endCol": 156
              }
            ]
          }
        },
        "source": "var QueryCommand = require('./query_command').QueryCommand,\n  InsertCommand = require('./insert_command').InsertCommand,\n  inherits = require('util').inherits,\n  crypto = require('crypto');\n\n/**\n  Db Command\n**/\nvar DbCommand = exports.DbCommand = function(dbInstance, collectionName, queryOptions, numberToSkip, numberToReturn, query, returnFieldSelector, options) {\n  QueryCommand.call(this);\n  this.collectionName = collectionName;\n  this.queryOptions = queryOptions;\n  this.numberToSkip = numberToSkip;\n  this.numberToReturn = numberToReturn;\n  this.query = query;\n  this.returnFieldSelector = returnFieldSelector;\n  this.db = dbInstance;\n\n  // Make sure we don't get a null exception\n  options = options == null ? {} : options;\n  // Let us defined on a command basis if we want functions to be serialized or not\n  if(options['serializeFunctions'] != null && options['serializeFunctions']) {\n    this.serializeFunctions = true;\n  }\n};\n\ninherits(DbCommand, QueryCommand);\n\n// Constants\nDbCommand.SYSTEM_NAMESPACE_COLLECTION = \"system.namespaces\";\nDbCommand.SYSTEM_INDEX_COLLECTION = \"system.indexes\";\nDbCommand.SYSTEM_PROFILE_COLLECTION = \"system.profile\";\nDbCommand.SYSTEM_USER_COLLECTION = \"system.users\";\nDbCommand.SYSTEM_COMMAND_COLLECTION = \"$cmd\";\nDbCommand.SYSTEM_JS_COLLECTION = \"system.js\";\n\n// New commands\nDbCommand.NcreateIsMasterCommand = function(db, databaseName) {\n  return new DbCommand(db, databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);\n};\n\n// Provide constructors for different db commands\nDbCommand.createIsMasterCommand = function(db) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'ismaster':1}, null);\n};\n\nDbCommand.createCollectionInfoCommand = function(db, selector) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_NAMESPACE_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, 0, selector, null);\n};\n\nDbCommand.createGetNonceCommand = function(db, options) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'getnonce':1}, null);\n};\n\nDbCommand.createAuthenticationCommand = function(db, username, password, nonce, authdb) {\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + \":mongo:\" + password);\n  var hash_password = md5.digest('hex');\n  // Final key\n  md5 = crypto.createHash('md5');\n  md5.update(nonce + username + hash_password);\n  var key = md5.digest('hex');\n  // Creat selector\n  var selector = {'authenticate':1, 'user':username, 'nonce':nonce, 'key':key};\n  // Create db command\n  return new DbCommand(db, authdb + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NONE, 0, -1, selector, null);\n};\n\nDbCommand.createLogoutCommand = function(db) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'logout':1}, null);\n};\n\nDbCommand.createCreateCollectionCommand = function(db, collectionName, options) {\n  var selector = {'create':collectionName};\n  // Modify the options to ensure correct behaviour\n  for(var name in options) {\n    if(options[name] != null && options[name].constructor != Function) selector[name] = options[name];\n  }\n  // Execute the command\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, selector, null);\n};\n\nDbCommand.createDropCollectionCommand = function(db, collectionName) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'drop':collectionName}, null);\n};\n\nDbCommand.createRenameCollectionCommand = function(db, fromCollectionName, toCollectionName) {\n  var renameCollection = db.databaseName + \".\" + fromCollectionName;\n  var toCollection = db.databaseName + \".\" + toCollectionName;\n  return new DbCommand(db, \"admin.\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'renameCollection':renameCollection, 'to':toCollection}, null);\n};\n\nDbCommand.createGetLastErrorCommand = function(options, db) {\n\n  if (typeof db === 'undefined') {\n    db =  options;\n    options = {};\n  }\n  // Final command\n  var command = {'getlasterror':1};\n  // If we have an options Object let's merge in the fields (fsync/wtimeout/w)\n  if('object' === typeof options) {\n    for(var name in options) {\n      command[name] = options[name]\n    }\n  }\n\n  // Execute command\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command, null);\n};\n\nDbCommand.createGetLastStatusCommand = DbCommand.createGetLastErrorCommand;\n\nDbCommand.createGetPreviousErrorsCommand = function(db) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'getpreverror':1}, null);\n};\n\nDbCommand.createResetErrorHistoryCommand = function(db) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'reseterror':1}, null);\n};\n\nDbCommand.createCreateIndexCommand = function(db, collectionName, fieldOrSpec, options) {\n  var fieldHash = {};\n  var indexes = [];\n  var keys;\n\n  // Get all the fields accordingly\n  if (fieldOrSpec.constructor === String) {             // 'type'\n    indexes.push(fieldOrSpec + '_' + 1);\n    fieldHash[fieldOrSpec] = 1;\n  } else if (fieldOrSpec.constructor === Array) {       // [{location:'2d'}, ...]\n    fieldOrSpec.forEach(function(f) {\n      if (f.constructor === String) {                   // [{location:'2d'}, 'type']\n        indexes.push(f + '_' + 1);\n        fieldHash[f] = 1;\n      } else if (f.constructor === Array) {             // [['location', '2d'],['type', 1]]\n        indexes.push(f[0] + '_' + (f[1] || 1));\n        fieldHash[f[0]] = f[1] || 1;\n      } else if (f.constructor === Object) {            // [{location:'2d'}, {type:1}]\n        keys = Object.keys(f);\n        keys.forEach(function(k) {\n          indexes.push(k + '_' + f[k]);\n          fieldHash[k] = f[k];\n      });\n      } else {\n        // undefined\n      }\n    });\n  } else if (fieldOrSpec.constructor === Object) {  // {location:'2d', type:1}\n    keys = Object.keys(fieldOrSpec);\n    keys.forEach(function(key) {\n      indexes.push(key + '_' + fieldOrSpec[key]);\n      fieldHash[key] = fieldOrSpec[key];\n    });\n  }\n\n  // Generate the index name\n  var indexName = typeof options.name == 'string' ? options.name : indexes.join(\"_\");\n  // Build the selector\n  var selector = {'ns':(db.databaseName + \".\" + collectionName), 'key':fieldHash, 'name':indexName};\n\n  // Ensure we have a correct finalUnique\n  var finalUnique = options == null || 'object' === typeof options ? false : options;\n  // Set up options\n  options = options == null || typeof options == 'boolean' ? {} : options;\n\n  // Add all the options\n  var keys = Object.keys(options);\n  // Add all the fields to the selector\n  for(var i = 0; i < keys.length; i++) {\n    selector[keys[i]] = options[keys[i]];\n  }\n\n  // If we don't have the unique property set on the selector\n  if(selector['unique'] == null) selector['unique'] = finalUnique;\n  // Create the insert command for the index and return the document\n  return new InsertCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_INDEX_COLLECTION, false).add(selector);\n};\n\nDbCommand.logoutCommand = function(db, command_hash, options) {\n  var dbName = options != null && options['authdb'] != null ? options['authdb'] : db.databaseName;\n  // Create logout command\n  return new DbCommand(db, dbName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null);\n}\n\nDbCommand.createDropIndexCommand = function(db, collectionName, indexName) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'deleteIndexes':collectionName, 'index':indexName}, null);\n};\n\nDbCommand.createReIndexCommand = function(db, collectionName) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'reIndex':collectionName}, null);\n};\n\nDbCommand.createDropDatabaseCommand = function(db) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, {'dropDatabase':1}, null);\n};\n\nDbCommand.createDbCommand = function(db, command_hash, options) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null, options);\n};\n\nDbCommand.createAdminDbCommand = function(db, command_hash) {\n  return new DbCommand(db, \"admin.\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT, 0, -1, command_hash, null);\n};\n\nDbCommand.createAdminDbCommandSlaveOk = function(db, command_hash) {\n  return new DbCommand(db, \"admin.\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE, 0, -1, command_hash, null);\n};\n\nDbCommand.createDbSlaveOkCommand = function(db, command_hash, options) {\n  return new DbCommand(db, db.databaseName + \".\" + DbCommand.SYSTEM_COMMAND_COLLECTION, QueryCommand.OPTS_NO_CURSOR_TIMEOUT | QueryCommand.OPTS_SLAVE, 0, -1, command_hash, null, options);\n};",
        "blocks": {
          "total": 40,
          "seen": 5,
          "missing": 35,
          "percentage": 0.125
        }
      },
      "hash": "74e27a7c0b95077af56a45e06ed85bcb"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/commands/query_command.js": {
      "stats": {
        "percentage": 0.7816091954022989,
        "lines": [
          {
            "lineno": 14
          },
          {
            "lineno": 15
          },
          {
            "lineno": 16
          },
          {
            "lineno": 17
          },
          {
            "lineno": 18
          },
          {
            "lineno": 24
          },
          {
            "lineno": 25
          },
          {
            "lineno": 26
          },
          {
            "lineno": 27
          },
          {
            "lineno": 28
          },
          {
            "lineno": 33
          },
          {
            "lineno": 49
          },
          {
            "lineno": 62
          },
          {
            "lineno": 63
          },
          {
            "lineno": 64
          },
          {
            "lineno": 65
          },
          {
            "lineno": 69
          },
          {
            "lineno": 70
          },
          {
            "lineno": 74
          },
          {
            "lineno": 75
          },
          {
            "lineno": 79
          },
          {
            "lineno": 81
          },
          {
            "lineno": 82
          },
          {
            "lineno": 84
          },
          {
            "lineno": 89
          },
          {
            "lineno": 90
          },
          {
            "lineno": 91
          },
          {
            "lineno": 93
          },
          {
            "lineno": 96
          },
          {
            "lineno": 97
          },
          {
            "lineno": 118
          },
          {
            "lineno": 124
          },
          {
            "lineno": 125
          },
          {
            "lineno": 126
          },
          {
            "lineno": 129
          },
          {
            "lineno": 196
          },
          {
            "lineno": 198
          },
          {
            "lineno": 215
          },
          {
            "lineno": 216
          },
          {
            "lineno": 217
          },
          {
            "lineno": 219
          },
          {
            "lineno": 220
          },
          {
            "lineno": 221
          },
          {
            "lineno": 222
          },
          {
            "lineno": 224
          },
          {
            "lineno": 226
          },
          {
            "lineno": 228
          },
          {
            "lineno": 230
          },
          {
            "lineno": 231
          },
          {
            "lineno": 234
          },
          {
            "lineno": 236
          },
          {
            "lineno": 239
          },
          {
            "lineno": 240
          },
          {
            "lineno": 241
          },
          {
            "lineno": 242
          },
          {
            "lineno": 244
          },
          {
            "lineno": 246
          }
        ],
        "missing": 57,
        "seen": 204,
        "seen_lines": [
          {
            "s": 1,
            "e": 2
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 7,
            "e": 51
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 11,
            "e": 12
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 37,
            "e": 37
          },
          {
            "s": 38,
            "e": 38
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 43,
            "e": 43
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 55,
            "e": 55
          },
          {
            "s": 60,
            "e": 113
          },
          {
            "s": 113,
            "e": 251
          },
          {
            "s": 115,
            "e": 115
          },
          {
            "s": 117,
            "e": 117
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 124,
            "e": 124
          },
          {
            "s": 124,
            "e": 124
          },
          {
            "s": 128,
            "e": 128
          },
          {
            "s": 133,
            "e": 133
          },
          {
            "s": 134,
            "e": 134
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 146,
            "e": 146
          },
          {
            "s": 146,
            "e": 146
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 150,
            "e": 150
          },
          {
            "s": 150,
            "e": 150
          },
          {
            "s": 151,
            "e": 151
          },
          {
            "s": 151,
            "e": 151
          },
          {
            "s": 152,
            "e": 152
          },
          {
            "s": 152,
            "e": 152
          },
          {
            "s": 153,
            "e": 153
          },
          {
            "s": 153,
            "e": 153
          },
          {
            "s": 155,
            "e": 155
          },
          {
            "s": 155,
            "e": 155
          },
          {
            "s": 155,
            "e": 155
          },
          {
            "s": 155,
            "e": 155
          },
          {
            "s": 155,
            "e": 155
          },
          {
            "s": 156,
            "e": 156
          },
          {
            "s": 156,
            "e": 156
          },
          {
            "s": 156,
            "e": 156
          },
          {
            "s": 156,
            "e": 156
          },
          {
            "s": 156,
            "e": 156
          },
          {
            "s": 157,
            "e": 157
          },
          {
            "s": 157,
            "e": 157
          },
          {
            "s": 157,
            "e": 157
          },
          {
            "s": 157,
            "e": 157
          },
          {
            "s": 157,
            "e": 157
          },
          {
            "s": 158,
            "e": 158
          },
          {
            "s": 158,
            "e": 158
          },
          {
            "s": 160,
            "e": 160
          },
          {
            "s": 160,
            "e": 160
          },
          {
            "s": 160,
            "e": 160
          },
          {
            "s": 163,
            "e": 163
          },
          {
            "s": 163,
            "e": 163
          },
          {
            "s": 163,
            "e": 163
          },
          {
            "s": 163,
            "e": 163
          },
          {
            "s": 163,
            "e": 163
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 165,
            "e": 165
          },
          {
            "s": 165,
            "e": 165
          },
          {
            "s": 165,
            "e": 165
          },
          {
            "s": 165,
            "e": 165
          },
          {
            "s": 165,
            "e": 165
          },
          {
            "s": 166,
            "e": 166
          },
          {
            "s": 166,
            "e": 166
          },
          {
            "s": 168,
            "e": 168
          },
          {
            "s": 168,
            "e": 168
          },
          {
            "s": 168,
            "e": 168
          },
          {
            "s": 171,
            "e": 171
          },
          {
            "s": 171,
            "e": 171
          },
          {
            "s": 171,
            "e": 171
          },
          {
            "s": 171,
            "e": 171
          },
          {
            "s": 171,
            "e": 171
          },
          {
            "s": 172,
            "e": 172
          },
          {
            "s": 172,
            "e": 172
          },
          {
            "s": 172,
            "e": 172
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 178,
            "e": 178
          },
          {
            "s": 178,
            "e": 178
          },
          {
            "s": 180,
            "e": 180
          },
          {
            "s": 180,
            "e": 180
          },
          {
            "s": 180,
            "e": 180
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 184,
            "e": 184
          },
          {
            "s": 184,
            "e": 184
          },
          {
            "s": 184,
            "e": 184
          },
          {
            "s": 184,
            "e": 184
          },
          {
            "s": 184,
            "e": 184
          },
          {
            "s": 185,
            "e": 185
          },
          {
            "s": 185,
            "e": 185
          },
          {
            "s": 185,
            "e": 185
          },
          {
            "s": 185,
            "e": 185
          },
          {
            "s": 185,
            "e": 185
          },
          {
            "s": 186,
            "e": 186
          },
          {
            "s": 186,
            "e": 186
          },
          {
            "s": 188,
            "e": 188
          },
          {
            "s": 188,
            "e": 188
          },
          {
            "s": 188,
            "e": 188
          },
          {
            "s": 191,
            "e": 192
          },
          {
            "s": 192,
            "e": 192
          },
          {
            "s": 195,
            "e": 195
          },
          {
            "s": 201,
            "e": 201
          },
          {
            "s": 201,
            "e": 201
          },
          {
            "s": 201,
            "e": 201
          },
          {
            "s": 201,
            "e": 201
          },
          {
            "s": 201,
            "e": 201
          },
          {
            "s": 205,
            "e": 205
          },
          {
            "s": 205,
            "e": 205
          },
          {
            "s": 205,
            "e": 205
          },
          {
            "s": 205,
            "e": 205
          },
          {
            "s": 205,
            "e": 205
          },
          {
            "s": 205,
            "e": 205
          },
          {
            "s": 206,
            "e": 206
          },
          {
            "s": 206,
            "e": 206
          },
          {
            "s": 206,
            "e": 206
          },
          {
            "s": 206,
            "e": 206
          },
          {
            "s": 206,
            "e": 206
          },
          {
            "s": 206,
            "e": 206
          },
          {
            "s": 207,
            "e": 207
          },
          {
            "s": 207,
            "e": 207
          },
          {
            "s": 207,
            "e": 207
          },
          {
            "s": 207,
            "e": 207
          },
          {
            "s": 207,
            "e": 207
          },
          {
            "s": 207,
            "e": 207
          },
          {
            "s": 208,
            "e": 208
          },
          {
            "s": 208,
            "e": 208
          },
          {
            "s": 208,
            "e": 208
          },
          {
            "s": 210,
            "e": 210
          },
          {
            "s": 210,
            "e": 210
          },
          {
            "s": 210,
            "e": 210
          },
          {
            "s": 210,
            "e": 210
          },
          {
            "s": 212,
            "e": 212
          },
          {
            "s": 212,
            "e": 212
          },
          {
            "s": 212,
            "e": 212
          },
          {
            "s": 215,
            "e": 215
          },
          {
            "s": 215,
            "e": 215
          },
          {
            "s": 228,
            "e": 228
          },
          {
            "s": 228,
            "e": 228
          },
          {
            "s": 250,
            "e": 250
          },
          {
            "s": 254,
            "e": 254
          },
          {
            "s": 255,
            "e": 255
          },
          {
            "s": 256,
            "e": 256
          },
          {
            "s": 257,
            "e": 257
          },
          {
            "s": 258,
            "e": 258
          },
          {
            "s": 259,
            "e": 259
          },
          {
            "s": 260,
            "e": 260
          },
          {
            "s": 261,
            "e": 261
          }
        ],
        "total": 261,
        "coverage": {
          "14": {
            "partial": false,
            "source": "    object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 81
              },
              {
                "startCol": 18,
                "endCol": 44
              },
              {
                "startCol": 30,
                "endCol": 44
              },
              {
                "startCol": 47,
                "endCol": 62
              },
              {
                "startCol": 65,
                "endCol": 80
              }
            ]
          },
          "15": {
            "partial": false,
            "source": "    if(object_size != object.length) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              }
            ]
          },
          "16": {
            "partial": false,
            "source": "      var error = new Error(\"query selector raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 147
              },
              {
                "startCol": 28,
                "endCol": 114
              },
              {
                "startCol": 128,
                "endCol": 139
              }
            ]
          },
          "17": {
            "partial": false,
            "source": "      error.name = 'MongoError';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "18": {
            "partial": false,
            "source": "      throw error;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "24": {
            "partial": false,
            "source": "    object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 81
              },
              {
                "startCol": 18,
                "endCol": 44
              },
              {
                "startCol": 30,
                "endCol": 44
              },
              {
                "startCol": 47,
                "endCol": 62
              },
              {
                "startCol": 65,
                "endCol": 80
              }
            ]
          },
          "25": {
            "partial": false,
            "source": "    if(object_size != object.length) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              }
            ]
          },
          "26": {
            "partial": false,
            "source": "      var error = new Error(\"query fields raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 145
              },
              {
                "startCol": 28,
                "endCol": 112
              },
              {
                "startCol": 126,
                "endCol": 137
              }
            ]
          },
          "27": {
            "partial": false,
            "source": "      error.name = 'MongoError';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "28": {
            "partial": false,
            "source": "      throw error;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "33": {
            "partial": true,
            "source": "  options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 35,
                "endCol": 42
              }
            ]
          },
          "49": {
            "partial": false,
            "source": "    this.serializeFunctions = true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "  if(readPreference == true) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "    readPreference = 'secondaryPreferred';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "  } else if(readPreference == 'false') {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 26
              }
            ]
          },
          "65": {
            "partial": false,
            "source": "    readPreference = 'primary';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              }
            ]
          },
          "69": {
            "partial": false,
            "source": "  if(readPreference != false && readPreference != 'primary') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              },
              {
                "startCol": 32,
                "endCol": 46
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "    this.queryOptions |= QueryCommand.OPTS_SLAVE;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 49
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "  if((readPreference != null || tags != null) && this.query['$query'] == null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 45
              },
              {
                "startCol": 6,
                "endCol": 20
              },
              {
                "startCol": 32,
                "endCol": 36
              },
              {
                "startCol": 49,
                "endCol": 77
              }
            ]
          },
          "75": {
            "partial": false,
            "source": "    this.query = {'$query': this.query};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "  if(readPreference == null && tags == null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              },
              {
                "startCol": 31,
                "endCol": 35
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "    if(this.queryOptions & QueryCommand.OPTS_SLAVE) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 50
              }
            ]
          },
          "82": {
            "partial": false,
            "source": "      this.query['$readPreference'] = {mode: 'secondary'}",
            "missing": [
              {}
            ]
          },
          "83": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "84": {
            "partial": false,
            "source": "      this.query['$readPreference'] = {mode: 'primary'}",
            "missing": [
              {}
            ]
          },
          "85": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "89": {
            "partial": false,
            "source": "  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 26
              },
              {
                "startCol": 12,
                "endCol": 26
              },
              {
                "startCol": 42,
                "endCol": 85
              }
            ]
          },
          "90": {
            "partial": false,
            "source": "    this.query['$readPreference'] = readPreference.toObject();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 62
              },
              {
                "startCol": 36,
                "endCol": 61
              }
            ]
          },
          "91": {
            "partial": false,
            "source": "  } else if(readPreference != null) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 26
              }
            ]
          },
          "93": {
            "partial": false,
            "source": "    this.query['$readPreference'] = {mode: readPreference};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 59
              }
            ]
          },
          "96": {
            "partial": false,
            "source": "    if(tags != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 11
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "      this.query['$readPreference']['tags'] = tags;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 51
              }
            ]
          },
          "118": {
            "partial": false,
            "source": "    totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.query.length + (4 * 4);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 112
              },
              {
                "startCol": 27,
                "endCol": 69
              },
              {
                "startCol": 31,
                "endCol": 69
              },
              {
                "startCol": 104,
                "endCol": 111
              }
            ]
          },
          "124": {
            "partial": true,
            "source": "  if(this.returnFieldSelector != null && !(Buffer.isBuffer(this.returnFieldSelector)))  {",
            "missing": [
              {
                "startCol": 41,
                "endCol": 85
              },
              {
                "startCol": 42,
                "endCol": 85
              }
            ]
          },
          "125": {
            "partial": false,
            "source": "    if(Object.keys(this.returnFieldSelector).length > 0) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 18,
                "endCol": 44
              }
            ]
          },
          "126": {
            "partial": false,
            "source": "      totalLengthOfCommand += this.db.bson.calculateObjectSize(this.returnFieldSelector, this.serializeFunctions, true);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 120
              },
              {
                "startCol": 30,
                "endCol": 119
              }
            ]
          },
          "129": {
            "partial": false,
            "source": "    totalLengthOfCommand += this.returnFieldSelector.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 60
              }
            ]
          },
          "196": {
            "partial": false,
            "source": "    documentLength = object.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "198": {
            "partial": false,
            "source": "    object.copy(_command, _index);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "215": {
            "partial": true,
            "source": "  if(this.returnFieldSelector != null && !(Buffer.isBuffer(this.returnFieldSelector)))  {",
            "missing": [
              {
                "startCol": 41,
                "endCol": 85
              },
              {
                "startCol": 42,
                "endCol": 85
              }
            ]
          },
          "216": {
            "partial": false,
            "source": "    if(Object.keys(this.returnFieldSelector).length > 0) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 18,
                "endCol": 44
              }
            ]
          },
          "217": {
            "partial": false,
            "source": "      var documentLength = this.db.bson.serializeWithBufferAndIndex(this.returnFieldSelector, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 166
              },
              {
                "startCol": 27,
                "endCol": 152
              },
              {
                "startCol": 155,
                "endCol": 161
              }
            ]
          },
          "219": {
            "partial": false,
            "source": "      _command[_index + 3] = (documentLength >> 24) & 0xff;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 59
              },
              {
                "startCol": 15,
                "endCol": 21
              },
              {
                "startCol": 29,
                "endCol": 51
              },
              {
                "startCol": 30,
                "endCol": 44
              }
            ]
          },
          "220": {
            "partial": false,
            "source": "      _command[_index + 2] = (documentLength >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 59
              },
              {
                "startCol": 15,
                "endCol": 21
              },
              {
                "startCol": 29,
                "endCol": 51
              },
              {
                "startCol": 30,
                "endCol": 44
              }
            ]
          },
          "221": {
            "partial": false,
            "source": "      _command[_index + 1] = (documentLength >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 58
              },
              {
                "startCol": 15,
                "endCol": 21
              },
              {
                "startCol": 29,
                "endCol": 50
              },
              {
                "startCol": 30,
                "endCol": 44
              }
            ]
          },
          "222": {
            "partial": false,
            "source": "      _command[_index] = documentLength & 0xff;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 47
              },
              {
                "startCol": 25,
                "endCol": 39
              }
            ]
          },
          "224": {
            "partial": false,
            "source": "      _index = _index + documentLength;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 39
              },
              {
                "startCol": 15,
                "endCol": 21
              },
              {
                "startCol": 24,
                "endCol": 38
              }
            ]
          },
          "226": {
            "partial": false,
            "source": "      _command[_index - 1] = 0;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 31
              },
              {
                "startCol": 15,
                "endCol": 21
              }
            ]
          },
          "228": {
            "partial": true,
            "source": "  } if(this.returnFieldSelector != null && Buffer.isBuffer(this.returnFieldSelector))  {",
            "missing": [
              {
                "startCol": 43,
                "endCol": 84
              }
            ]
          },
          "230": {
            "partial": false,
            "source": "    var documentLength = 0",
            "missing": [
              {}
            ]
          },
          "231": {
            "partial": false,
            "source": "    var object = this.returnFieldSelector;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "234": {
            "partial": false,
            "source": "    documentLength = object.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "236": {
            "partial": false,
            "source": "    object.copy(_command, _index);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "239": {
            "partial": false,
            "source": "    _command[_index + 3] = (documentLength >> 24) & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 57
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 49
              },
              {
                "startCol": 28,
                "endCol": 42
              }
            ]
          },
          "240": {
            "partial": false,
            "source": "    _command[_index + 2] = (documentLength >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 57
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 49
              },
              {
                "startCol": 28,
                "endCol": 42
              }
            ]
          },
          "241": {
            "partial": false,
            "source": "    _command[_index + 1] = (documentLength >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 56
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 48
              },
              {
                "startCol": 28,
                "endCol": 42
              }
            ]
          },
          "242": {
            "partial": false,
            "source": "    _command[_index] = documentLength & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 45
              },
              {
                "startCol": 23,
                "endCol": 37
              }
            ]
          },
          "244": {
            "partial": false,
            "source": "    _index = _index + documentLength;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 37
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 22,
                "endCol": 36
              }
            ]
          },
          "246": {
            "partial": false,
            "source": "    _command[_index - 1] = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              },
              {
                "startCol": 13,
                "endCol": 19
              }
            ]
          }
        },
        "source": "var BaseCommand = require('./base_command').BaseCommand,\n  inherits = require('util').inherits;\n\n/**\n  Insert Document Command\n**/\nvar QueryCommand = exports.QueryCommand = function(db, collectionName, queryOptions, numberToSkip, numberToReturn, query, returnFieldSelector, options) {\n  BaseCommand.call(this);\n\n  // Validate correctness off the selector\n  var object = query,\n    object_size;\n  if(Buffer.isBuffer(object)) {\n    object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;\n    if(object_size != object.length) {\n      var error = new Error(\"query selector raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  object = returnFieldSelector;\n  if(Buffer.isBuffer(object)) {\n    object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;\n    if(object_size != object.length) {\n      var error = new Error(\"query fields raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  // Make sure we don't get a null exception\n  options = options == null ? {} : options;\n  // Set up options\n  this.collectionName = collectionName;\n  this.queryOptions = queryOptions;\n  this.numberToSkip = numberToSkip;\n  this.numberToReturn = numberToReturn;\n\n  // Ensure we have no null query\n  query = query == null ? {} : query;\n  // Wrap query in the $query parameter so we can add read preferences for mongos\n  this.query = query;\n  this.returnFieldSelector = returnFieldSelector;\n  this.db = db;\n\n  // Let us defined on a command basis if we want functions to be serialized or not\n  if(options['serializeFunctions'] != null && options['serializeFunctions']) {\n    this.serializeFunctions = true;\n  }\n};\n\ninherits(QueryCommand, BaseCommand);\n\nQueryCommand.OP_QUERY = 2004;\n\n/*\n * Adds the read prefrence to the current command\n */\nQueryCommand.prototype.setMongosReadPreference = function(readPreference, tags) {\n  // If we have readPreference set to true set to secondary prefered\n  if(readPreference == true) {\n    readPreference = 'secondaryPreferred';\n  } else if(readPreference == 'false') {\n    readPreference = 'primary';\n  }\n\n  // Force the slave ok flag to be set if we are not using primary read preference\n  if(readPreference != false && readPreference != 'primary') {\n    this.queryOptions |= QueryCommand.OPTS_SLAVE;\n  }\n\n  // Backward compatibility, ensure $query only set on read preference so 1.8.X works\n  if((readPreference != null || tags != null) && this.query['$query'] == null) {\n    this.query = {'$query': this.query};\n  }\n\n  // If we have no readPreference set and no tags, check if the slaveOk bit is set\n  if(readPreference == null && tags == null) {\n    // If we have a slaveOk bit set the read preference for MongoS\n    if(this.queryOptions & QueryCommand.OPTS_SLAVE) {\n      this.query['$readPreference'] = {mode: 'secondary'}\n    } else {\n      this.query['$readPreference'] = {mode: 'primary'}\n    }\n  }\n\n  // Build read preference object\n  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {\n    this.query['$readPreference'] = readPreference.toObject();\n  } else if(readPreference != null) {\n    // Add the read preference\n    this.query['$readPreference'] = {mode: readPreference};\n\n    // If we have tags let's add them\n    if(tags != null) {\n      this.query['$readPreference']['tags'] = tags;\n    }\n  }\n}\n\n/*\nstruct {\n    MsgHeader header;                 // standard message header\n    int32     opts;                   // query options.  See below for details.\n    cstring   fullCollectionName;     // \"dbname.collectionname\"\n    int32     numberToSkip;           // number of documents to skip when returning results\n    int32     numberToReturn;         // number of documents to return in the first OP_REPLY\n    BSON      query ;                 // query object.  See below for details.\n  [ BSON      returnFieldSelector; ]  // OPTIONAL : selector indicating the fields to return.  See below for details.\n}\n*/\nQueryCommand.prototype.toBinary = function() {\n  // Total length of the command\n  var totalLengthOfCommand = 0;\n  // Calculate total length of the document\n  if(Buffer.isBuffer(this.query)) {\n    totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.query.length + (4 * 4);\n  } else {\n    totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 4 + this.db.bson.calculateObjectSize(this.query, this.serializeFunctions, true) + (4 * 4);\n  }\n\n  // Calculate extra fields size\n  if(this.returnFieldSelector != null && !(Buffer.isBuffer(this.returnFieldSelector)))  {\n    if(Object.keys(this.returnFieldSelector).length > 0) {\n      totalLengthOfCommand += this.db.bson.calculateObjectSize(this.returnFieldSelector, this.serializeFunctions, true);\n    }\n  } else if(Buffer.isBuffer(this.returnFieldSelector)) {\n    totalLengthOfCommand += this.returnFieldSelector.length;\n  }\n\n  // Let's build the single pass buffer command\n  var _index = 0;\n  var _command = new Buffer(totalLengthOfCommand);\n  // Write the header information to the buffer\n  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;\n  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;\n  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;\n  _command[_index] = totalLengthOfCommand & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write the request ID\n  _command[_index + 3] = (this.requestId >> 24) & 0xff;\n  _command[_index + 2] = (this.requestId >> 16) & 0xff;\n  _command[_index + 1] = (this.requestId >> 8) & 0xff;\n  _command[_index] = this.requestId & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  // Write the op_code for the command\n  _command[_index + 3] = (QueryCommand.OP_QUERY >> 24) & 0xff;\n  _command[_index + 2] = (QueryCommand.OP_QUERY >> 16) & 0xff;\n  _command[_index + 1] = (QueryCommand.OP_QUERY >> 8) & 0xff;\n  _command[_index] = QueryCommand.OP_QUERY & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Write the query options\n  _command[_index + 3] = (this.queryOptions >> 24) & 0xff;\n  _command[_index + 2] = (this.queryOptions >> 16) & 0xff;\n  _command[_index + 1] = (this.queryOptions >> 8) & 0xff;\n  _command[_index] = this.queryOptions & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Write the collection name to the command\n  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  _command[_index - 1] = 0;\n\n  // Write the number of documents to skip\n  _command[_index + 3] = (this.numberToSkip >> 24) & 0xff;\n  _command[_index + 2] = (this.numberToSkip >> 16) & 0xff;\n  _command[_index + 1] = (this.numberToSkip >> 8) & 0xff;\n  _command[_index] = this.numberToSkip & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Write the number of documents to return\n  _command[_index + 3] = (this.numberToReturn >> 24) & 0xff;\n  _command[_index + 2] = (this.numberToReturn >> 16) & 0xff;\n  _command[_index + 1] = (this.numberToReturn >> 8) & 0xff;\n  _command[_index] = this.numberToReturn & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Document binary length\n  var documentLength = 0\n  var object = this.query;\n\n  // Serialize the selector\n  if(Buffer.isBuffer(object)) {\n    documentLength = object.length;\n    // Copy the data into the current buffer\n    object.copy(_command, _index);\n  } else {\n    // Serialize the document straight to the buffer\n    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;\n  }\n\n  // Write the length to the document\n  _command[_index + 3] = (documentLength >> 24) & 0xff;\n  _command[_index + 2] = (documentLength >> 16) & 0xff;\n  _command[_index + 1] = (documentLength >> 8) & 0xff;\n  _command[_index] = documentLength & 0xff;\n  // Update index in buffer\n  _index = _index + documentLength;\n  // Add terminating 0 for the object\n  _command[_index - 1] = 0;\n\n  // Push field selector if available\n  if(this.returnFieldSelector != null && !(Buffer.isBuffer(this.returnFieldSelector)))  {\n    if(Object.keys(this.returnFieldSelector).length > 0) {\n      var documentLength = this.db.bson.serializeWithBufferAndIndex(this.returnFieldSelector, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;\n      // Write the length to the document\n      _command[_index + 3] = (documentLength >> 24) & 0xff;\n      _command[_index + 2] = (documentLength >> 16) & 0xff;\n      _command[_index + 1] = (documentLength >> 8) & 0xff;\n      _command[_index] = documentLength & 0xff;\n      // Update index in buffer\n      _index = _index + documentLength;\n      // Add terminating 0 for the object\n      _command[_index - 1] = 0;\n    }\n  } if(this.returnFieldSelector != null && Buffer.isBuffer(this.returnFieldSelector))  {\n    // Document binary length\n    var documentLength = 0\n    var object = this.returnFieldSelector;\n\n    // Serialize the selector\n    documentLength = object.length;\n    // Copy the data into the current buffer\n    object.copy(_command, _index);\n\n    // Write the length to the document\n    _command[_index + 3] = (documentLength >> 24) & 0xff;\n    _command[_index + 2] = (documentLength >> 16) & 0xff;\n    _command[_index + 1] = (documentLength >> 8) & 0xff;\n    _command[_index] = documentLength & 0xff;\n    // Update index in buffer\n    _index = _index + documentLength;\n    // Add terminating 0 for the object\n    _command[_index - 1] = 0;\n  }\n\n  // Return finished command\n  return _command;\n};\n\n// Constants\nQueryCommand.OPTS_NONE = 0;\nQueryCommand.OPTS_TAILABLE_CURSOR = 2;\nQueryCommand.OPTS_SLAVE = 4;\nQueryCommand.OPTS_OPLOG_REPLY = 8;\nQueryCommand.OPTS_NO_CURSOR_TIMEOUT = 16;\nQueryCommand.OPTS_AWAIT_DATA = 32;\nQueryCommand.OPTS_EXHAUST = 64;\nQueryCommand.OPTS_PARTIAL = 128;",
        "blocks": {
          "total": 28,
          "seen": 4,
          "missing": 24,
          "percentage": 0.14285714285714285
        }
      },
      "hash": "1724db8924b31cdfbf14be9aa9bb9677"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/commands/insert_command.js": {
      "stats": {
        "percentage": 0.9183673469387755,
        "lines": [
          {
            "lineno": 12
          },
          {
            "lineno": 18
          },
          {
            "lineno": 23
          },
          {
            "lineno": 29
          },
          {
            "lineno": 45
          },
          {
            "lineno": 46
          },
          {
            "lineno": 47
          },
          {
            "lineno": 48
          },
          {
            "lineno": 49
          },
          {
            "lineno": 71
          },
          {
            "lineno": 127
          },
          {
            "lineno": 129
          }
        ],
        "missing": 12,
        "seen": 135,
        "seen_lines": [
          {
            "s": 1,
            "e": 2
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 7,
            "e": 36
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 14,
            "e": 14
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 18,
            "e": 18
          },
          {
            "s": 18,
            "e": 18
          },
          {
            "s": 18,
            "e": 18
          },
          {
            "s": 18,
            "e": 18
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 34,
            "e": 34
          },
          {
            "s": 38,
            "e": 38
          },
          {
            "s": 38,
            "e": 38
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 43,
            "e": 55
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 65,
            "e": 147
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 69,
            "e": 69
          },
          {
            "s": 69,
            "e": 69
          },
          {
            "s": 69,
            "e": 69
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 74,
            "e": 74
          },
          {
            "s": 74,
            "e": 74
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 87,
            "e": 87
          },
          {
            "s": 87,
            "e": 87
          },
          {
            "s": 87,
            "e": 87
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 90,
            "e": 90
          },
          {
            "s": 90,
            "e": 90
          },
          {
            "s": 90,
            "e": 90
          },
          {
            "s": 90,
            "e": 90
          },
          {
            "s": 90,
            "e": 90
          },
          {
            "s": 91,
            "e": 91
          },
          {
            "s": 91,
            "e": 91
          },
          {
            "s": 91,
            "e": 91
          },
          {
            "s": 91,
            "e": 91
          },
          {
            "s": 91,
            "e": 91
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 94,
            "e": 94
          },
          {
            "s": 94,
            "e": 94
          },
          {
            "s": 94,
            "e": 94
          },
          {
            "s": 96,
            "e": 96
          },
          {
            "s": 96,
            "e": 96
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 98,
            "e": 98
          },
          {
            "s": 98,
            "e": 98
          },
          {
            "s": 99,
            "e": 99
          },
          {
            "s": 99,
            "e": 99
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 102,
            "e": 102
          },
          {
            "s": 102,
            "e": 102
          },
          {
            "s": 102,
            "e": 102
          },
          {
            "s": 102,
            "e": 102
          },
          {
            "s": 102,
            "e": 102
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 106,
            "e": 106
          },
          {
            "s": 106,
            "e": 106
          },
          {
            "s": 106,
            "e": 106
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 109,
            "e": 109
          },
          {
            "s": 109,
            "e": 109
          },
          {
            "s": 109,
            "e": 109
          },
          {
            "s": 109,
            "e": 109
          },
          {
            "s": 109,
            "e": 109
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 113,
            "e": 113
          },
          {
            "s": 113,
            "e": 113
          },
          {
            "s": 113,
            "e": 113
          },
          {
            "s": 115,
            "e": 115
          },
          {
            "s": 115,
            "e": 115
          },
          {
            "s": 115,
            "e": 115
          },
          {
            "s": 115,
            "e": 115
          },
          {
            "s": 115,
            "e": 115
          },
          {
            "s": 116,
            "e": 116
          },
          {
            "s": 116,
            "e": 116
          },
          {
            "s": 116,
            "e": 116
          },
          {
            "s": 119,
            "e": 119
          },
          {
            "s": 119,
            "e": 119
          },
          {
            "s": 119,
            "e": 119
          },
          {
            "s": 121,
            "e": 122
          },
          {
            "s": 122,
            "e": 122
          },
          {
            "s": 126,
            "e": 126
          },
          {
            "s": 132,
            "e": 132
          },
          {
            "s": 132,
            "e": 132
          },
          {
            "s": 132,
            "e": 132
          },
          {
            "s": 132,
            "e": 132
          },
          {
            "s": 132,
            "e": 132
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 146,
            "e": 146
          }
        ],
        "total": 147,
        "coverage": {
          "12": {
            "partial": true,
            "source": "  this.checkKeys = checkKeys == null ? true : checkKeys;",
            "missing": [
              {
                "startCol": 39,
                "endCol": 43
              }
            ]
          },
          "18": {
            "partial": true,
            "source": "  options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 30,
                "endCol": 32
              }
            ]
          },
          "23": {
            "partial": false,
            "source": "    this.flags = 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 19
              }
            ]
          },
          "29": {
            "partial": false,
            "source": "    this.flags = 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 19
              }
            ]
          },
          "45": {
            "partial": false,
            "source": "    var object_size = document[0] | document[1] << 8 | document[2] << 16 | document[3] << 24;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 93
              },
              {
                "startCol": 22,
                "endCol": 52
              },
              {
                "startCol": 36,
                "endCol": 52
              },
              {
                "startCol": 55,
                "endCol": 72
              },
              {
                "startCol": 75,
                "endCol": 92
              }
            ]
          },
          "46": {
            "partial": false,
            "source": "    if(object_size != document.length)  {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              }
            ]
          },
          "47": {
            "partial": false,
            "source": "      var error = new Error(\"insert raw message size does not match message header size [\" + document.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 141
              },
              {
                "startCol": 28,
                "endCol": 108
              },
              {
                "startCol": 122,
                "endCol": 133
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "      error.name = 'MongoError';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "49": {
            "partial": false,
            "source": "      throw error;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "      totalLengthOfCommand += this.documents[i].length;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 55
              }
            ]
          },
          "127": {
            "partial": false,
            "source": "      documentLength = object.length;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 37
              }
            ]
          },
          "129": {
            "partial": false,
            "source": "      object.copy(_command, _index);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 35
              }
            ]
          }
        },
        "source": "var BaseCommand = require('./base_command').BaseCommand,\n  inherits = require('util').inherits;\n\n/**\n  Insert Document Command\n**/\nvar InsertCommand = exports.InsertCommand = function(db, collectionName, checkKeys, options) {\n  BaseCommand.call(this);\n\n  this.collectionName = collectionName;\n  this.documents = [];\n  this.checkKeys = checkKeys == null ? true : checkKeys;\n  this.db = db;\n  this.flags = 0;\n  this.serializeFunctions = false;\n\n  // Ensure valid options hash\n  options = options == null ? {} : options;\n\n  // Check if we have keepGoing set -> set flag if it's the case\n  if(options['keepGoing'] != null && options['keepGoing']) {\n    // This will finish inserting all non-index violating documents even if it returns an error\n    this.flags = 1;\n  }\n\n  // Check if we have keepGoing set -> set flag if it's the case\n  if(options['continueOnError'] != null && options['continueOnError']) {\n    // This will finish inserting all non-index violating documents even if it returns an error\n    this.flags = 1;\n  }\n\n  // Let us defined on a command basis if we want functions to be serialized or not\n  if(options['serializeFunctions'] != null && options['serializeFunctions']) {\n    this.serializeFunctions = true;\n  }\n};\n\ninherits(InsertCommand, BaseCommand);\n\n// OpCodes\nInsertCommand.OP_INSERT =\t2002;\n\nInsertCommand.prototype.add = function(document) {\n  if(Buffer.isBuffer(document)) {\n    var object_size = document[0] | document[1] << 8 | document[2] << 16 | document[3] << 24;\n    if(object_size != document.length)  {\n      var error = new Error(\"insert raw message size does not match message header size [\" + document.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  this.documents.push(document);\n  return this;\n};\n\n/*\nstruct {\n    MsgHeader header;             // standard message header\n    int32     ZERO;               // 0 - reserved for future use\n    cstring   fullCollectionName; // \"dbname.collectionname\"\n    BSON[]    documents;          // one or more documents to insert into the collection\n}\n*/\nInsertCommand.prototype.toBinary = function() {\n  // Calculate total length of the document\n  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + (4 * 4);\n  // var docLength = 0\n  for(var i = 0; i < this.documents.length; i++) {\n    if(Buffer.isBuffer(this.documents[i])) {\n      totalLengthOfCommand += this.documents[i].length;\n    } else {\n      // Calculate size of document\n      totalLengthOfCommand += this.db.bson.calculateObjectSize(this.documents[i], this.serializeFunctions, true);\n    }\n  }\n\n  // Let's build the single pass buffer command\n  var _index = 0;\n  var _command = new Buffer(totalLengthOfCommand);\n  // Write the header information to the buffer\n  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;\n  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;\n  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;\n  _command[_index] = totalLengthOfCommand & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write the request ID\n  _command[_index + 3] = (this.requestId >> 24) & 0xff;\n  _command[_index + 2] = (this.requestId >> 16) & 0xff;\n  _command[_index + 1] = (this.requestId >> 8) & 0xff;\n  _command[_index] = this.requestId & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  // Write the op_code for the command\n  _command[_index + 3] = (InsertCommand.OP_INSERT >> 24) & 0xff;\n  _command[_index + 2] = (InsertCommand.OP_INSERT >> 16) & 0xff;\n  _command[_index + 1] = (InsertCommand.OP_INSERT >> 8) & 0xff;\n  _command[_index] = InsertCommand.OP_INSERT & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write flags if any\n  _command[_index + 3] = (this.flags >> 24) & 0xff;\n  _command[_index + 2] = (this.flags >> 16) & 0xff;\n  _command[_index + 1] = (this.flags >> 8) & 0xff;\n  _command[_index] = this.flags & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write the collection name to the command\n  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  _command[_index - 1] = 0;\n\n  // Write all the bson documents to the buffer at the index offset\n  for(var i = 0; i < this.documents.length; i++) {\n    // Document binary length\n    var documentLength = 0\n    var object = this.documents[i];\n\n    // Serialize the selector\n    // If we are passing a raw buffer, do minimal validation\n    if(Buffer.isBuffer(object)) {\n      documentLength = object.length;\n      // Copy the data into the current buffer\n      object.copy(_command, _index);\n    } else {\n      // Serialize the document straight to the buffer\n      documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;\n    }\n\n    // Write the length to the document\n    _command[_index + 3] = (documentLength >> 24) & 0xff;\n    _command[_index + 2] = (documentLength >> 16) & 0xff;\n    _command[_index + 1] = (documentLength >> 8) & 0xff;\n    _command[_index] = documentLength & 0xff;\n    // Update index in buffer\n    _index = _index + documentLength;\n    // Add terminating 0 for the object\n    _command[_index - 1] = 0;\n  }\n\n  return _command;\n};",
        "blocks": {
          "total": 14,
          "seen": 8,
          "missing": 6,
          "percentage": 0.5714285714285714
        }
      },
      "hash": "a63e5c6e5d649e1881850051f724691b"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/commands/delete_command.js": {
      "stats": {
        "percentage": 0.5,
        "lines": [
          {
            "lineno": 8
          },
          {
            "lineno": 11
          },
          {
            "lineno": 12
          },
          {
            "lineno": 13
          },
          {
            "lineno": 14
          },
          {
            "lineno": 15
          },
          {
            "lineno": 16
          },
          {
            "lineno": 17
          },
          {
            "lineno": 21
          },
          {
            "lineno": 22
          },
          {
            "lineno": 23
          },
          {
            "lineno": 24
          },
          {
            "lineno": 42
          },
          {
            "lineno": 44
          },
          {
            "lineno": 45
          },
          {
            "lineno": 47
          },
          {
            "lineno": 48
          },
          {
            "lineno": 49
          },
          {
            "lineno": 50
          },
          {
            "lineno": 52
          },
          {
            "lineno": 54
          },
          {
            "lineno": 55
          },
          {
            "lineno": 56
          },
          {
            "lineno": 57
          },
          {
            "lineno": 59
          },
          {
            "lineno": 61
          },
          {
            "lineno": 62
          },
          {
            "lineno": 63
          },
          {
            "lineno": 64
          },
          {
            "lineno": 66
          },
          {
            "lineno": 67
          },
          {
            "lineno": 68
          },
          {
            "lineno": 69
          },
          {
            "lineno": 71
          },
          {
            "lineno": 74
          },
          {
            "lineno": 75
          },
          {
            "lineno": 76
          },
          {
            "lineno": 77
          },
          {
            "lineno": 80
          },
          {
            "lineno": 81
          },
          {
            "lineno": 84
          },
          {
            "lineno": 85
          },
          {
            "lineno": 86
          },
          {
            "lineno": 87
          },
          {
            "lineno": 89
          },
          {
            "lineno": 92
          },
          {
            "lineno": 96
          },
          {
            "lineno": 97
          },
          {
            "lineno": 99
          },
          {
            "lineno": 101
          },
          {
            "lineno": 105
          },
          {
            "lineno": 106
          },
          {
            "lineno": 107
          },
          {
            "lineno": 108
          },
          {
            "lineno": 110
          },
          {
            "lineno": 112
          },
          {
            "lineno": 113
          }
        ],
        "missing": 57,
        "seen": 57,
        "seen_lines": [
          {
            "s": 1,
            "e": 2
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 7,
            "e": 25
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 40,
            "e": 114
          }
        ],
        "total": 114,
        "coverage": {
          "8": {
            "partial": false,
            "source": "  BaseCommand.call(this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "11": {
            "partial": false,
            "source": "  var object = selector;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "12": {
            "partial": false,
            "source": "  if(Buffer.isBuffer(object)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              }
            ]
          },
          "13": {
            "partial": false,
            "source": "    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;        ",
            "missing": [
              {
                "startCol": 4,
                "endCol": 85
              },
              {
                "startCol": 22,
                "endCol": 48
              },
              {
                "startCol": 34,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 84
              }
            ]
          },
          "14": {
            "partial": false,
            "source": "    if(object_size != object.length)  {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              }
            ]
          },
          "15": {
            "partial": false,
            "source": "      var error = new Error(\"delete raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 139
              },
              {
                "startCol": 28,
                "endCol": 106
              },
              {
                "startCol": 120,
                "endCol": 131
              }
            ]
          },
          "16": {
            "partial": false,
            "source": "      error.name = 'MongoError';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "17": {
            "partial": false,
            "source": "      throw error;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "21": {
            "partial": false,
            "source": "  this.flags = flags;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 21
              }
            ]
          },
          "22": {
            "partial": false,
            "source": "  this.collectionName = collectionName;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              }
            ]
          },
          "23": {
            "partial": false,
            "source": "  this.selector = selector;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "24": {
            "partial": false,
            "source": "  this.db = db;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "42": {
            "partial": false,
            "source": "  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.selector, false, true) + (4 * 4);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 153
              },
              {
                "startCol": 29,
                "endCol": 71
              },
              {
                "startCol": 33,
                "endCol": 71
              },
              {
                "startCol": 82,
                "endCol": 142
              },
              {
                "startCol": 145,
                "endCol": 152
              }
            ]
          },
          "44": {
            "partial": false,
            "source": "  var _index = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 17
              }
            ]
          },
          "45": {
            "partial": false,
            "source": "  var _command = new Buffer(totalLengthOfCommand);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              }
            ]
          },
          "47": {
            "partial": false,
            "source": "  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 61
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 53
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 61
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 53
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "49": {
            "partial": false,
            "source": "  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 60
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 52
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "50": {
            "partial": false,
            "source": "  _command[_index] = totalLengthOfCommand & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 49
              },
              {
                "startCol": 21,
                "endCol": 41
              }
            ]
          },
          "52": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "54": {
            "partial": false,
            "source": "  _command[_index + 3] = (this.requestId >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "  _command[_index + 2] = (this.requestId >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "56": {
            "partial": false,
            "source": "  _command[_index + 1] = (this.requestId >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 46
              }
            ]
          },
          "57": {
            "partial": false,
            "source": "  _command[_index] = this.requestId & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 21,
                "endCol": 42
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "61": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "66": {
            "partial": false,
            "source": "  _command[_index + 3] = (DeleteCommand.OP_DELETE >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 56
              }
            ]
          },
          "67": {
            "partial": false,
            "source": "  _command[_index + 2] = (DeleteCommand.OP_DELETE >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 56
              }
            ]
          },
          "68": {
            "partial": false,
            "source": "  _command[_index + 1] = (DeleteCommand.OP_DELETE >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 63
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 55
              }
            ]
          },
          "69": {
            "partial": false,
            "source": "  _command[_index] = DeleteCommand.OP_DELETE & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 52
              },
              {
                "startCol": 21,
                "endCol": 51
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "75": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "80": {
            "partial": false,
            "source": "  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 20,
                "endCol": 71
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "  _command[_index - 1] = 0;    ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "84": {
            "partial": false,
            "source": "  _command[_index + 3] = (this.flags >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 43
              }
            ]
          },
          "85": {
            "partial": false,
            "source": "  _command[_index + 2] = (this.flags >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 43
              }
            ]
          },
          "86": {
            "partial": false,
            "source": "  _command[_index + 1] = (this.flags >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 42
              }
            ]
          },
          "87": {
            "partial": false,
            "source": "  _command[_index] = this.flags & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              },
              {
                "startCol": 21,
                "endCol": 38
              }
            ]
          },
          "89": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "  var documentLength = 0",
            "missing": [
              {}
            ]
          },
          "93": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "94": {
            "partial": false,
            "source": "  // Serialize the selector",
            "missing": [
              {}
            ]
          },
          "95": {
            "partial": false,
            "source": "  // If we are passing a raw buffer, do minimal validation",
            "missing": [
              {}
            ]
          },
          "96": {
            "partial": false,
            "source": "  if(Buffer.isBuffer(this.selector)) {",
            "missing": [
              {},
              {
                "startCol": 5,
                "endCol": 35
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "    documentLength = this.selector.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "99": {
            "partial": false,
            "source": "    this.selector.copy(_command, _index);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              }
            ]
          },
          "101": {
            "partial": false,
            "source": "    documentLength = this.db.bson.serializeWithBufferAndIndex(this.selector, this.checkKeys, _command, _index) - _index + 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 124
              },
              {
                "startCol": 21,
                "endCol": 110
              },
              {
                "startCol": 113,
                "endCol": 119
              }
            ]
          },
          "105": {
            "partial": false,
            "source": "  _command[_index + 3] = (documentLength >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "106": {
            "partial": false,
            "source": "  _command[_index + 2] = (documentLength >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "107": {
            "partial": false,
            "source": "  _command[_index + 1] = (documentLength >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "108": {
            "partial": false,
            "source": "  _command[_index] = documentLength & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 21,
                "endCol": 35
              }
            ]
          },
          "110": {
            "partial": false,
            "source": "  _index = _index + documentLength;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 20,
                "endCol": 34
              }
            ]
          },
          "112": {
            "partial": false,
            "source": "  _command[_index - 1] = 0;      ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "113": {
            "partial": false,
            "source": "  return _command;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          }
        },
        "source": "var BaseCommand = require('./base_command').BaseCommand,\n  inherits = require('util').inherits;\n\n/**\n  Insert Document Command\n**/\nvar DeleteCommand = exports.DeleteCommand = function(db, collectionName, selector, flags) {\n  BaseCommand.call(this);\n\n  // Validate correctness off the selector\n  var object = selector;\n  if(Buffer.isBuffer(object)) {\n    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;        \n    if(object_size != object.length)  {\n      var error = new Error(\"delete raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n  \n  this.flags = flags;\n  this.collectionName = collectionName;\n  this.selector = selector;\n  this.db = db;\n};\n\ninherits(DeleteCommand, BaseCommand);\n\nDeleteCommand.OP_DELETE =\t2006;\n\n/*\nstruct {\n    MsgHeader header;                 // standard message header\n    int32     ZERO;                   // 0 - reserved for future use\n    cstring   fullCollectionName;     // \"dbname.collectionname\"\n    int32     ZERO;                   // 0 - reserved for future use\n    mongo.BSON      selector;               // query object.  See below for details.\n}\n*/\nDeleteCommand.prototype.toBinary = function() {\n  // Calculate total length of the document\n  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.selector, false, true) + (4 * 4);\n  // Let's build the single pass buffer command\n  var _index = 0;\n  var _command = new Buffer(totalLengthOfCommand);\n  // Write the header information to the buffer\n  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     \n  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;\n  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;\n  _command[_index] = totalLengthOfCommand & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write the request ID\n  _command[_index + 3] = (this.requestId >> 24) & 0xff;     \n  _command[_index + 2] = (this.requestId >> 16) & 0xff;\n  _command[_index + 1] = (this.requestId >> 8) & 0xff;\n  _command[_index] = this.requestId & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  // Write the op_code for the command\n  _command[_index + 3] = (DeleteCommand.OP_DELETE >> 24) & 0xff;     \n  _command[_index + 2] = (DeleteCommand.OP_DELETE >> 16) & 0xff;\n  _command[_index + 1] = (DeleteCommand.OP_DELETE >> 8) & 0xff;\n  _command[_index] = DeleteCommand.OP_DELETE & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n\n  // Write the collection name to the command\n  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  _command[_index - 1] = 0;    \n\n  // Write the flags\n  _command[_index + 3] = (this.flags >> 24) & 0xff;     \n  _command[_index + 2] = (this.flags >> 16) & 0xff;\n  _command[_index + 1] = (this.flags >> 8) & 0xff;\n  _command[_index] = this.flags & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Document binary length\n  var documentLength = 0\n\n  // Serialize the selector\n  // If we are passing a raw buffer, do minimal validation\n  if(Buffer.isBuffer(this.selector)) {\n    documentLength = this.selector.length;\n    // Copy the data into the current buffer\n    this.selector.copy(_command, _index);\n  } else {\n    documentLength = this.db.bson.serializeWithBufferAndIndex(this.selector, this.checkKeys, _command, _index) - _index + 1;\n  }\n  \n  // Write the length to the document\n  _command[_index + 3] = (documentLength >> 24) & 0xff;     \n  _command[_index + 2] = (documentLength >> 16) & 0xff;\n  _command[_index + 1] = (documentLength >> 8) & 0xff;\n  _command[_index] = documentLength & 0xff;\n  // Update index in buffer\n  _index = _index + documentLength;\n  // Add terminating 0 for the object\n  _command[_index - 1] = 0;      \n  return _command;\n};",
        "blocks": {
          "total": 6,
          "seen": 0,
          "missing": 6,
          "percentage": 0
        }
      },
      "hash": "169f541cce7a0d7026bcd857ca528046"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/commands/get_more_command.js": {
      "stats": {
        "percentage": 1,
        "lines": [],
        "missing": 0,
        "seen": 83,
        "seen_lines": [
          {
            "s": 1,
            "e": 3
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 8,
            "e": 15
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 14,
            "e": 14
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 21,
            "e": 83
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 25,
            "e": 25
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 34,
            "e": 34
          },
          {
            "s": 34,
            "e": 34
          },
          {
            "s": 34,
            "e": 34
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 37,
            "e": 37
          },
          {
            "s": 37,
            "e": 37
          },
          {
            "s": 37,
            "e": 37
          },
          {
            "s": 37,
            "e": 37
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 42,
            "e": 42
          },
          {
            "s": 42,
            "e": 42
          },
          {
            "s": 43,
            "e": 43
          },
          {
            "s": 43,
            "e": 43
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 49,
            "e": 49
          },
          {
            "s": 49,
            "e": 49
          },
          {
            "s": 49,
            "e": 49
          },
          {
            "s": 49,
            "e": 49
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 55,
            "e": 55
          },
          {
            "s": 55,
            "e": 55
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 72,
            "e": 72
          },
          {
            "s": 72,
            "e": 72
          },
          {
            "s": 72,
            "e": 72
          },
          {
            "s": 72,
            "e": 72
          },
          {
            "s": 72,
            "e": 72
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 75,
            "e": 75
          },
          {
            "s": 75,
            "e": 75
          },
          {
            "s": 77,
            "e": 77
          },
          {
            "s": 77,
            "e": 77
          },
          {
            "s": 77,
            "e": 77
          },
          {
            "s": 77,
            "e": 77
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 82,
            "e": 82
          }
        ],
        "total": 83,
        "coverage": {},
        "source": "var BaseCommand = require('./base_command').BaseCommand,\n  inherits = require('util').inherits,\n  binaryutils = require('../utils');\n\n/**\n  Get More Document Command\n**/\nvar GetMoreCommand = exports.GetMoreCommand = function(db, collectionName, numberToReturn, cursorId) {\n  BaseCommand.call(this);\n\n  this.collectionName = collectionName;\n  this.numberToReturn = numberToReturn;\n  this.cursorId = cursorId;\n  this.db = db;\n};\n\ninherits(GetMoreCommand, BaseCommand);\n\nGetMoreCommand.OP_GET_MORE = 2005;\n\nGetMoreCommand.prototype.toBinary = function() {\n  // Calculate total length of the document\n  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + 8 + (4 * 4);\n  // Let's build the single pass buffer command\n  var _index = 0;\n  var _command = new Buffer(totalLengthOfCommand);\n  // Write the header information to the buffer\n  _command[_index++] = totalLengthOfCommand & 0xff;\n  _command[_index++] = (totalLengthOfCommand >> 8) & 0xff;\n  _command[_index++] = (totalLengthOfCommand >> 16) & 0xff;\n  _command[_index++] = (totalLengthOfCommand >> 24) & 0xff;     \n\n  // Write the request ID\n  _command[_index++] = this.requestId & 0xff;\n  _command[_index++] = (this.requestId >> 8) & 0xff;\n  _command[_index++] = (this.requestId >> 16) & 0xff;\n  _command[_index++] = (this.requestId >> 24) & 0xff;     \n\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n\n  // Write the op_code for the command\n  _command[_index++] = GetMoreCommand.OP_GET_MORE & 0xff;\n  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 8) & 0xff;\n  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 16) & 0xff;\n  _command[_index++] = (GetMoreCommand.OP_GET_MORE >> 24) & 0xff;     \n\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n\n  // Write the collection name to the command\n  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  _command[_index - 1] = 0;    \n\n  // Number of documents to return\n  _command[_index++] = this.numberToReturn & 0xff;\n  _command[_index++] = (this.numberToReturn >> 8) & 0xff;\n  _command[_index++] = (this.numberToReturn >> 16) & 0xff;\n  _command[_index++] = (this.numberToReturn >> 24) & 0xff;     \n  \n  // Encode the cursor id\n  var low_bits = this.cursorId.getLowBits();\n  // Encode low bits\n  _command[_index++] = low_bits & 0xff;\n  _command[_index++] = (low_bits >> 8) & 0xff;\n  _command[_index++] = (low_bits >> 16) & 0xff;\n  _command[_index++] = (low_bits >> 24) & 0xff;     \n  \n  var high_bits = this.cursorId.getHighBits();\n  // Encode high bits\n  _command[_index++] = high_bits & 0xff;\n  _command[_index++] = (high_bits >> 8) & 0xff;\n  _command[_index++] = (high_bits >> 16) & 0xff;\n  _command[_index++] = (high_bits >> 24) & 0xff;     \n  // Return command\n  return _command;\n};",
        "blocks": {
          "total": 2,
          "seen": 2,
          "missing": 0,
          "percentage": 1
        }
      },
      "hash": "12e0a6395b55cad8adf3c5646f4d4eb5"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/utils.js": {
      "stats": {
        "percentage": 0.5945945945945946,
        "lines": [
          {
            "lineno": 5
          },
          {
            "lineno": 7
          },
          {
            "lineno": 11
          },
          {
            "lineno": 15
          },
          {
            "lineno": 17
          },
          {
            "lineno": 24
          },
          {
            "lineno": 26
          },
          {
            "lineno": 27
          },
          {
            "lineno": 28
          },
          {
            "lineno": 29
          },
          {
            "lineno": 31
          },
          {
            "lineno": 34
          },
          {
            "lineno": 35
          },
          {
            "lineno": 36
          },
          {
            "lineno": 37
          },
          {
            "lineno": 39
          },
          {
            "lineno": 43
          },
          {
            "lineno": 47
          },
          {
            "lineno": 48
          },
          {
            "lineno": 49
          },
          {
            "lineno": 50
          },
          {
            "lineno": 51
          },
          {
            "lineno": 52
          },
          {
            "lineno": 56
          },
          {
            "lineno": 57
          },
          {
            "lineno": 58
          },
          {
            "lineno": 59
          },
          {
            "lineno": 63
          },
          {
            "lineno": 64
          },
          {
            "lineno": 73
          }
        ],
        "missing": 30,
        "seen": 44,
        "seen_lines": [
          {
            "s": 4,
            "e": 21
          },
          {
            "s": 23,
            "e": 44
          },
          {
            "s": 46,
            "e": 55
          },
          {
            "s": 55,
            "e": 62
          },
          {
            "s": 62,
            "e": 67
          },
          {
            "s": 67,
            "e": 72
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 72,
            "e": 75
          }
        ],
        "total": 74,
        "coverage": {
          "5": {
            "partial": false,
            "source": "  var value = (\"\" + sortDirection).toLowerCase();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 49
              },
              {
                "startCol": 14,
                "endCol": 34
              },
              {
                "startCol": 20,
                "endCol": 33
              }
            ]
          },
          "7": {
            "partial": false,
            "source": "  switch (value) {",
            "missing": [
              {
                "startCol": 10,
                "endCol": 15
              }
            ]
          },
          "11": {
            "partial": false,
            "source": "      return 1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 15
              }
            ]
          },
          "15": {
            "partial": false,
            "source": "      return -1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 16
              },
              {
                "startCol": 13,
                "endCol": 15
              }
            ]
          },
          "17": {
            "partial": false,
            "source": "      throw new Error(\"Illegal sort clause, must be of the form \"",
            "missing": [
              {}
            ]
          },
          "18": {
            "partial": false,
            "source": "                    + \"[['field1', '(ascending|descending)'], \"",
            "missing": [
              {}
            ]
          },
          "19": {
            "partial": false,
            "source": "                    + \"['field2', '(ascending|descending)']]\");",
            "missing": [
              {}
            ]
          },
          "24": {
            "partial": false,
            "source": "  var orderBy = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "26": {
            "partial": false,
            "source": "  if (Array.isArray(sortValue)) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 30
              }
            ]
          },
          "27": {
            "partial": false,
            "source": "    for(var i = 0; i < sortValue.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 41,
                "endCol": 44
              }
            ]
          },
          "28": {
            "partial": false,
            "source": "      if(sortValue[i].constructor == String) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 43
              },
              {
                "startCol": 37,
                "endCol": 43
              }
            ]
          },
          "29": {
            "partial": false,
            "source": "        orderBy[sortValue[i]] = 1;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 34
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "        orderBy[sortValue[i][0]] = formatSortValue(sortValue[i][1]);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 68
              },
              {
                "startCol": 35,
                "endCol": 67
              }
            ]
          },
          "34": {
            "partial": false,
            "source": "  } else if(Object.prototype.toString.call(sortValue) === '[object Object]') {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 53
              }
            ]
          },
          "35": {
            "partial": false,
            "source": "    orderBy = sortValue;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "36": {
            "partial": false,
            "source": "  } else if (sortValue.constructor == String) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 44
              },
              {
                "startCol": 38,
                "endCol": 44
              }
            ]
          },
          "37": {
            "partial": false,
            "source": "    orderBy[sortValue] = 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "39": {
            "partial": false,
            "source": "    throw new Error(\"Illegal sort clause, must be of the form \" +",
            "missing": [
              {}
            ]
          },
          "40": {
            "partial": false,
            "source": "      \"[['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]\");",
            "missing": [
              {}
            ]
          },
          "43": {
            "partial": false,
            "source": "  return orderBy;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 17
              }
            ]
          },
          "47": {
            "partial": false,
            "source": "  var buffer = new Buffer(4);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 29
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "  buffer[3] = (value >> 24) & 0xff;      ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              },
              {
                "startCol": 14,
                "endCol": 27
              },
              {
                "startCol": 15,
                "endCol": 20
              }
            ]
          },
          "49": {
            "partial": false,
            "source": "  buffer[2] = (value >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              },
              {
                "startCol": 14,
                "endCol": 27
              },
              {
                "startCol": 15,
                "endCol": 20
              }
            ]
          },
          "50": {
            "partial": false,
            "source": "  buffer[1] = (value >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 34
              },
              {
                "startCol": 14,
                "endCol": 26
              },
              {
                "startCol": 15,
                "endCol": 20
              }
            ]
          },
          "51": {
            "partial": false,
            "source": "  buffer[0] = value & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              },
              {
                "startCol": 14,
                "endCol": 19
              }
            ]
          },
          "52": {
            "partial": false,
            "source": "  return buffer;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 16
              }
            ]
          },
          "56": {
            "partial": false,
            "source": "  buffer[index + 3] = (value >> 24) & 0xff;\t\t\t",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 9,
                "endCol": 14
              },
              {
                "startCol": 22,
                "endCol": 35
              },
              {
                "startCol": 23,
                "endCol": 28
              }
            ]
          },
          "57": {
            "partial": false,
            "source": "\tbuffer[index + 2] = (value >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 1,
                "endCol": 42
              },
              {
                "startCol": 8,
                "endCol": 13
              },
              {
                "startCol": 21,
                "endCol": 34
              },
              {
                "startCol": 22,
                "endCol": 27
              }
            ]
          },
          "58": {
            "partial": false,
            "source": "\tbuffer[index + 1] = (value >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 1,
                "endCol": 41
              },
              {
                "startCol": 8,
                "endCol": 13
              },
              {
                "startCol": 21,
                "endCol": 33
              },
              {
                "startCol": 22,
                "endCol": 27
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "\tbuffer[index] = value & 0xff;",
            "missing": [
              {
                "startCol": 1,
                "endCol": 30
              },
              {
                "startCol": 17,
                "endCol": 22
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "  var buf = new Buffer(string, 'utf8');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "  return [buf, new Buffer([0])];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              }
            ]
          },
          "73": {
            "partial": false,
            "source": "  return array[index];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          }
        },
        "source": "/**\n * Sort functions, Normalize and prepare sort parameters\n */\nvar formatSortValue = exports.formatSortValue = function(sortDirection) {\n  var value = (\"\" + sortDirection).toLowerCase();\n\n  switch (value) {\n    case 'ascending':\n    case 'asc':\n    case '1':\n      return 1;\n    case 'descending':\n    case 'desc':\n    case '-1':\n      return -1;\n    default:\n      throw new Error(\"Illegal sort clause, must be of the form \"\n                    + \"[['field1', '(ascending|descending)'], \"\n                    + \"['field2', '(ascending|descending)']]\");\n  }\n};\n\nvar formattedOrderClause = exports.formattedOrderClause = function(sortValue) {\n  var orderBy = {};\n\n  if (Array.isArray(sortValue)) {\n    for(var i = 0; i < sortValue.length; i++) {\n      if(sortValue[i].constructor == String) {\n        orderBy[sortValue[i]] = 1;\n      } else {\n        orderBy[sortValue[i][0]] = formatSortValue(sortValue[i][1]);\n      }      \n    }\n  } else if(Object.prototype.toString.call(sortValue) === '[object Object]') {\n    orderBy = sortValue;\n  } else if (sortValue.constructor == String) {\n    orderBy[sortValue] = 1;\n  } else {\n    throw new Error(\"Illegal sort clause, must be of the form \" +\n      \"[['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]\");\n  }\n\n  return orderBy;\n};\n\nexports.encodeInt = function(value) {\n  var buffer = new Buffer(4);\n  buffer[3] = (value >> 24) & 0xff;      \n  buffer[2] = (value >> 16) & 0xff;\n  buffer[1] = (value >> 8) & 0xff;\n  buffer[0] = value & 0xff;\n  return buffer;\n}\n\nexports.encodeIntInPlace = function(value, buffer, index) {\n  buffer[index + 3] = (value >> 24) & 0xff;\t\t\t\n\tbuffer[index + 2] = (value >> 16) & 0xff;\n\tbuffer[index + 1] = (value >> 8) & 0xff;\n\tbuffer[index] = value & 0xff;\n}\n\nexports.encodeCString = function(string) {\n  var buf = new Buffer(string, 'utf8');\n  return [buf, new Buffer([0])];\n}\n\nexports.decodeUInt32 = function(array, index) {\n  return array[index] | array[index + 1] << 8 | array[index + 2] << 16 | array[index + 3] << 24;\n}\n\n// Decode the int\nexports.decodeUInt8 = function(array, index) {\n  return array[index];\n}",
        "blocks": {
          "total": 17,
          "seen": 1,
          "missing": 16,
          "percentage": 0.058823529411764705
        }
      },
      "hash": "f8910ae76e0540e7a92893c62b280537"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/commands/kill_cursor_command.js": {
      "stats": {
        "percentage": 0.5,
        "lines": [
          {
            "lineno": 9
          },
          {
            "lineno": 11
          },
          {
            "lineno": 12
          },
          {
            "lineno": 29
          },
          {
            "lineno": 31
          },
          {
            "lineno": 32
          },
          {
            "lineno": 34
          },
          {
            "lineno": 35
          },
          {
            "lineno": 36
          },
          {
            "lineno": 37
          },
          {
            "lineno": 39
          },
          {
            "lineno": 41
          },
          {
            "lineno": 42
          },
          {
            "lineno": 43
          },
          {
            "lineno": 44
          },
          {
            "lineno": 46
          },
          {
            "lineno": 48
          },
          {
            "lineno": 49
          },
          {
            "lineno": 50
          },
          {
            "lineno": 51
          },
          {
            "lineno": 53
          },
          {
            "lineno": 54
          },
          {
            "lineno": 55
          },
          {
            "lineno": 56
          },
          {
            "lineno": 58
          },
          {
            "lineno": 61
          },
          {
            "lineno": 62
          },
          {
            "lineno": 63
          },
          {
            "lineno": 64
          },
          {
            "lineno": 67
          },
          {
            "lineno": 68
          },
          {
            "lineno": 69
          },
          {
            "lineno": 70
          },
          {
            "lineno": 71
          },
          {
            "lineno": 73
          },
          {
            "lineno": 76
          },
          {
            "lineno": 78
          },
          {
            "lineno": 80
          },
          {
            "lineno": 81
          },
          {
            "lineno": 82
          },
          {
            "lineno": 83
          },
          {
            "lineno": 85
          },
          {
            "lineno": 87
          },
          {
            "lineno": 89
          },
          {
            "lineno": 90
          },
          {
            "lineno": 91
          },
          {
            "lineno": 92
          },
          {
            "lineno": 94
          },
          {
            "lineno": 97
          }
        ],
        "missing": 49,
        "seen": 49,
        "seen_lines": [
          {
            "s": 1,
            "e": 3
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 8,
            "e": 13
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 27,
            "e": 98
          }
        ],
        "total": 98,
        "coverage": {
          "9": {
            "partial": false,
            "source": "  BaseCommand.call(this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "11": {
            "partial": false,
            "source": "  this.cursorIds = cursorIds;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 29
              }
            ]
          },
          "12": {
            "partial": false,
            "source": "  this.db = db;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "29": {
            "partial": false,
            "source": "  var totalLengthOfCommand = 4 + 4 + (4 * 4) + (this.cursorIds.length * 8);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 75
              },
              {
                "startCol": 29,
                "endCol": 34
              },
              {
                "startCol": 37,
                "endCol": 44
              },
              {
                "startCol": 47,
                "endCol": 74
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "  var _index = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 17
              }
            ]
          },
          "32": {
            "partial": false,
            "source": "  var _command = new Buffer(totalLengthOfCommand);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              }
            ]
          },
          "34": {
            "partial": false,
            "source": "  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 61
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 53
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "35": {
            "partial": false,
            "source": "  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 61
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 53
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "36": {
            "partial": false,
            "source": "  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 60
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 52
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "37": {
            "partial": false,
            "source": "  _command[_index] = totalLengthOfCommand & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 49
              },
              {
                "startCol": 21,
                "endCol": 41
              }
            ]
          },
          "39": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "41": {
            "partial": false,
            "source": "  _command[_index + 3] = (this.requestId >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "42": {
            "partial": false,
            "source": "  _command[_index + 2] = (this.requestId >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "43": {
            "partial": false,
            "source": "  _command[_index + 1] = (this.requestId >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 46
              }
            ]
          },
          "44": {
            "partial": false,
            "source": "  _command[_index] = this.requestId & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 21,
                "endCol": 42
              }
            ]
          },
          "46": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "49": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "50": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "51": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "53": {
            "partial": false,
            "source": "  _command[_index + 3] = (KillCursorCommand.OP_KILL_CURSORS >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 66
              }
            ]
          },
          "54": {
            "partial": false,
            "source": "  _command[_index + 2] = (KillCursorCommand.OP_KILL_CURSORS >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 66
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "  _command[_index + 1] = (KillCursorCommand.OP_KILL_CURSORS >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 73
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 65
              }
            ]
          },
          "56": {
            "partial": false,
            "source": "  _command[_index] = KillCursorCommand.OP_KILL_CURSORS & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 62
              },
              {
                "startCol": 21,
                "endCol": 61
              }
            ]
          },
          "58": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "61": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "67": {
            "partial": false,
            "source": "  var numberOfCursors = this.cursorIds.length;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              }
            ]
          },
          "68": {
            "partial": false,
            "source": "  _command[_index + 3] = (numberOfCursors >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 56
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 48
              },
              {
                "startCol": 26,
                "endCol": 41
              }
            ]
          },
          "69": {
            "partial": false,
            "source": "  _command[_index + 2] = (numberOfCursors >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 56
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 48
              },
              {
                "startCol": 26,
                "endCol": 41
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "  _command[_index + 1] = (numberOfCursors >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              },
              {
                "startCol": 26,
                "endCol": 41
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "  _command[_index] = numberOfCursors & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 21,
                "endCol": 36
              }
            ]
          },
          "73": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "  for(var i = 0; i < this.cursorIds.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 44,
                "endCol": 47
              }
            ]
          },
          "78": {
            "partial": false,
            "source": "    var low_bits = this.cursorIds[i].getLowBits();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              },
              {
                "startCol": 19,
                "endCol": 49
              }
            ]
          },
          "80": {
            "partial": false,
            "source": "    _command[_index + 3] = (low_bits >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 43
              },
              {
                "startCol": 28,
                "endCol": 36
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "    _command[_index + 2] = (low_bits >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 43
              },
              {
                "startCol": 28,
                "endCol": 36
              }
            ]
          },
          "82": {
            "partial": false,
            "source": "    _command[_index + 1] = (low_bits >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 42
              },
              {
                "startCol": 28,
                "endCol": 36
              }
            ]
          },
          "83": {
            "partial": false,
            "source": "    _command[_index] = low_bits & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              },
              {
                "startCol": 23,
                "endCol": 31
              }
            ]
          },
          "85": {
            "partial": false,
            "source": "    _index = _index + 4;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 19
              }
            ]
          },
          "87": {
            "partial": false,
            "source": "    var high_bits = this.cursorIds[i].getHighBits();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 20,
                "endCol": 51
              }
            ]
          },
          "89": {
            "partial": false,
            "source": "    _command[_index + 3] = (high_bits >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 44
              },
              {
                "startCol": 28,
                "endCol": 37
              }
            ]
          },
          "90": {
            "partial": false,
            "source": "    _command[_index + 2] = (high_bits >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 44
              },
              {
                "startCol": 28,
                "endCol": 37
              }
            ]
          },
          "91": {
            "partial": false,
            "source": "    _command[_index + 1] = (high_bits >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 13,
                "endCol": 19
              },
              {
                "startCol": 27,
                "endCol": 43
              },
              {
                "startCol": 28,
                "endCol": 37
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "    _command[_index] = high_bits & 0xff;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              },
              {
                "startCol": 23,
                "endCol": 32
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "    _index = _index + 4;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 19
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "  return _command;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          }
        },
        "source": "var BaseCommand = require('./base_command').BaseCommand,\n  inherits = require('util').inherits,\n  binaryutils = require('../utils');\n\n/**\n  Insert Document Command\n**/\nvar KillCursorCommand = exports.KillCursorCommand = function(db, cursorIds) {\n  BaseCommand.call(this);\n\n  this.cursorIds = cursorIds;\n  this.db = db;\n};\n\ninherits(KillCursorCommand, BaseCommand);\n\nKillCursorCommand.OP_KILL_CURSORS = 2007;\n\n/*\nstruct {\n    MsgHeader header;                 // standard message header\n    int32     ZERO;                   // 0 - reserved for future use\n    int32     numberOfCursorIDs;      // number of cursorIDs in message\n    int64[]   cursorIDs;                // array of cursorIDs to close\n}\n*/\nKillCursorCommand.prototype.toBinary = function() {\n  // Calculate total length of the document\n  var totalLengthOfCommand = 4 + 4 + (4 * 4) + (this.cursorIds.length * 8);\n  // Let's build the single pass buffer command\n  var _index = 0;\n  var _command = new Buffer(totalLengthOfCommand);\n  // Write the header information to the buffer\n  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     \n  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;\n  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;\n  _command[_index] = totalLengthOfCommand & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write the request ID\n  _command[_index + 3] = (this.requestId >> 24) & 0xff;     \n  _command[_index + 2] = (this.requestId >> 16) & 0xff;\n  _command[_index + 1] = (this.requestId >> 8) & 0xff;\n  _command[_index] = this.requestId & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  // Write the op_code for the command\n  _command[_index + 3] = (KillCursorCommand.OP_KILL_CURSORS >> 24) & 0xff;     \n  _command[_index + 2] = (KillCursorCommand.OP_KILL_CURSORS >> 16) & 0xff;\n  _command[_index + 1] = (KillCursorCommand.OP_KILL_CURSORS >> 8) & 0xff;\n  _command[_index] = KillCursorCommand.OP_KILL_CURSORS & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n\n  // Number of cursors to kill\n  var numberOfCursors = this.cursorIds.length;\n  _command[_index + 3] = (numberOfCursors >> 24) & 0xff;     \n  _command[_index + 2] = (numberOfCursors >> 16) & 0xff;\n  _command[_index + 1] = (numberOfCursors >> 8) & 0xff;\n  _command[_index] = numberOfCursors & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Encode all the cursors\n  for(var i = 0; i < this.cursorIds.length; i++) {\n    // Encode the cursor id\n    var low_bits = this.cursorIds[i].getLowBits();\n    // Encode low bits\n    _command[_index + 3] = (low_bits >> 24) & 0xff;     \n    _command[_index + 2] = (low_bits >> 16) & 0xff;\n    _command[_index + 1] = (low_bits >> 8) & 0xff;\n    _command[_index] = low_bits & 0xff;\n    // Adjust index\n    _index = _index + 4;\n      \n    var high_bits = this.cursorIds[i].getHighBits();\n    // Encode high bits\n    _command[_index + 3] = (high_bits >> 24) & 0xff;     \n    _command[_index + 2] = (high_bits >> 16) & 0xff;\n    _command[_index + 1] = (high_bits >> 8) & 0xff;\n    _command[_index] = high_bits & 0xff;\n    // Adjust index\n    _index = _index + 4;\n  }\n  \n  return _command;\n};",
        "blocks": {
          "total": 3,
          "seen": 0,
          "missing": 3,
          "percentage": 0
        }
      },
      "hash": "160e40f4f2dace97f7abd6dbb04b60e0"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/commands/update_command.js": {
      "stats": {
        "percentage": 0.4827586206896552,
        "lines": [
          {
            "lineno": 8
          },
          {
            "lineno": 10
          },
          {
            "lineno": 11
          },
          {
            "lineno": 12
          },
          {
            "lineno": 13
          },
          {
            "lineno": 14
          },
          {
            "lineno": 15
          },
          {
            "lineno": 16
          },
          {
            "lineno": 20
          },
          {
            "lineno": 21
          },
          {
            "lineno": 22
          },
          {
            "lineno": 23
          },
          {
            "lineno": 24
          },
          {
            "lineno": 25
          },
          {
            "lineno": 26
          },
          {
            "lineno": 30
          },
          {
            "lineno": 31
          },
          {
            "lineno": 32
          },
          {
            "lineno": 33
          },
          {
            "lineno": 34
          },
          {
            "lineno": 37
          },
          {
            "lineno": 38
          },
          {
            "lineno": 39
          },
          {
            "lineno": 40
          },
          {
            "lineno": 43
          },
          {
            "lineno": 45
          },
          {
            "lineno": 46
          },
          {
            "lineno": 66
          },
          {
            "lineno": 67
          },
          {
            "lineno": 70
          },
          {
            "lineno": 71
          },
          {
            "lineno": 73
          },
          {
            "lineno": 74
          },
          {
            "lineno": 75
          },
          {
            "lineno": 76
          },
          {
            "lineno": 78
          },
          {
            "lineno": 80
          },
          {
            "lineno": 81
          },
          {
            "lineno": 82
          },
          {
            "lineno": 83
          },
          {
            "lineno": 85
          },
          {
            "lineno": 87
          },
          {
            "lineno": 88
          },
          {
            "lineno": 89
          },
          {
            "lineno": 90
          },
          {
            "lineno": 92
          },
          {
            "lineno": 93
          },
          {
            "lineno": 94
          },
          {
            "lineno": 95
          },
          {
            "lineno": 97
          },
          {
            "lineno": 100
          },
          {
            "lineno": 101
          },
          {
            "lineno": 102
          },
          {
            "lineno": 103
          },
          {
            "lineno": 106
          },
          {
            "lineno": 107
          },
          {
            "lineno": 110
          },
          {
            "lineno": 111
          },
          {
            "lineno": 112
          },
          {
            "lineno": 113
          },
          {
            "lineno": 115
          },
          {
            "lineno": 118
          },
          {
            "lineno": 119
          },
          {
            "lineno": 123
          },
          {
            "lineno": 124
          },
          {
            "lineno": 125
          },
          {
            "lineno": 126
          },
          {
            "lineno": 128
          },
          {
            "lineno": 130
          },
          {
            "lineno": 134
          },
          {
            "lineno": 135
          },
          {
            "lineno": 136
          },
          {
            "lineno": 137
          },
          {
            "lineno": 139
          },
          {
            "lineno": 141
          },
          {
            "lineno": 144
          },
          {
            "lineno": 145
          },
          {
            "lineno": 149
          },
          {
            "lineno": 150
          },
          {
            "lineno": 151
          },
          {
            "lineno": 152
          },
          {
            "lineno": 154
          },
          {
            "lineno": 156
          },
          {
            "lineno": 160
          },
          {
            "lineno": 161
          },
          {
            "lineno": 162
          },
          {
            "lineno": 163
          },
          {
            "lineno": 165
          },
          {
            "lineno": 167
          },
          {
            "lineno": 169
          }
        ],
        "missing": 90,
        "seen": 84,
        "seen_lines": [
          {
            "s": 1,
            "e": 2
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 7,
            "e": 48
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 64,
            "e": 170
          },
          {
            "s": 173,
            "e": 173
          },
          {
            "s": 174,
            "e": 174
          }
        ],
        "total": 174,
        "coverage": {
          "8": {
            "partial": false,
            "source": "  BaseCommand.call(this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "10": {
            "partial": false,
            "source": "  var object = spec;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "11": {
            "partial": false,
            "source": "  if(Buffer.isBuffer(object)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              }
            ]
          },
          "12": {
            "partial": false,
            "source": "    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;    ",
            "missing": [
              {
                "startCol": 4,
                "endCol": 85
              },
              {
                "startCol": 22,
                "endCol": 48
              },
              {
                "startCol": 34,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 84
              }
            ]
          },
          "13": {
            "partial": false,
            "source": "    if(object_size != object.length)  {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              }
            ]
          },
          "14": {
            "partial": false,
            "source": "      var error = new Error(\"update spec raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 144
              },
              {
                "startCol": 28,
                "endCol": 111
              },
              {
                "startCol": 125,
                "endCol": 136
              }
            ]
          },
          "15": {
            "partial": false,
            "source": "      error.name = 'MongoError';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "16": {
            "partial": false,
            "source": "      throw error;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "20": {
            "partial": false,
            "source": "  var object = document;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "21": {
            "partial": false,
            "source": "  if(Buffer.isBuffer(object)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              }
            ]
          },
          "22": {
            "partial": false,
            "source": "    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;    ",
            "missing": [
              {
                "startCol": 4,
                "endCol": 85
              },
              {
                "startCol": 22,
                "endCol": 48
              },
              {
                "startCol": 34,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 84
              }
            ]
          },
          "23": {
            "partial": false,
            "source": "    if(object_size != object.length)  {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              }
            ]
          },
          "24": {
            "partial": false,
            "source": "      var error = new Error(\"update document raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 148
              },
              {
                "startCol": 28,
                "endCol": 115
              },
              {
                "startCol": 129,
                "endCol": 140
              }
            ]
          },
          "25": {
            "partial": false,
            "source": "      error.name = 'MongoError';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "26": {
            "partial": false,
            "source": "      throw error;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "30": {
            "partial": false,
            "source": "  this.collectionName = collectionName;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "  this.spec = spec;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "32": {
            "partial": false,
            "source": "  this.document = document;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "33": {
            "partial": false,
            "source": "  this.db = db;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "34": {
            "partial": false,
            "source": "  this.serializeFunctions = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 34
              }
            ]
          },
          "37": {
            "partial": false,
            "source": "  var db_upsert = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "38": {
            "partial": false,
            "source": "  var db_multi_update = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "39": {
            "partial": false,
            "source": "  db_upsert = options != null && options['upsert'] != null ? (options['upsert'] == true ? 1 : 0) : db_upsert;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 109
              },
              {
                "startCol": 14,
                "endCol": 21
              },
              {
                "startCol": 33,
                "endCol": 58
              },
              {
                "startCol": 61,
                "endCol": 96
              },
              {
                "startCol": 62,
                "endCol": 87
              },
              {
                "startCol": 90,
                "endCol": 91
              },
              {
                "startCol": 94,
                "endCol": 95
              },
              {
                "startCol": 99,
                "endCol": 108
              }
            ]
          },
          "40": {
            "partial": false,
            "source": "  db_multi_update = options != null && options['multi'] != null ? (options['multi'] == true ? 1 : 0) : db_multi_update;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 119
              },
              {
                "startCol": 20,
                "endCol": 27
              },
              {
                "startCol": 39,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 100
              },
              {
                "startCol": 67,
                "endCol": 91
              },
              {
                "startCol": 94,
                "endCol": 95
              },
              {
                "startCol": 98,
                "endCol": 99
              },
              {
                "startCol": 103,
                "endCol": 118
              }
            ]
          },
          "43": {
            "partial": false,
            "source": "  this.flags = parseInt(db_multi_update.toString() + db_upsert.toString(), 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 78
              },
              {
                "startCol": 15,
                "endCol": 77
              },
              {
                "startCol": 24,
                "endCol": 50
              },
              {
                "startCol": 53,
                "endCol": 73
              }
            ]
          },
          "45": {
            "partial": false,
            "source": "  if(options['serializeFunctions'] != null && options['serializeFunctions']) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 42
              }
            ]
          },
          "46": {
            "partial": false,
            "source": "    this.serializeFunctions = true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "66": {
            "partial": false,
            "source": "  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.spec, false, true) +",
            "missing": [
              {
                "startCol": 29,
                "endCol": 138
              },
              {},
              {
                "startCol": 82,
                "endCol": 138
              },
              {
                "startCol": 33,
                "endCol": 71
              }
            ]
          },
          "67": {
            "partial": false,
            "source": "      this.db.bson.calculateObjectSize(this.document, this.serializeFunctions, true) + (4 * 4);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 84
              },
              {
                "startCol": 87,
                "endCol": 94
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "  var _index = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 17
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "  var _command = new Buffer(totalLengthOfCommand);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              }
            ]
          },
          "73": {
            "partial": false,
            "source": "  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 61
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 53
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 61
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 53
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "75": {
            "partial": false,
            "source": "  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 60
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 52
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "  _command[_index] = totalLengthOfCommand & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 49
              },
              {
                "startCol": 21,
                "endCol": 41
              }
            ]
          },
          "78": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "80": {
            "partial": false,
            "source": "  _command[_index + 3] = (this.requestId >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "  _command[_index + 2] = (this.requestId >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "82": {
            "partial": false,
            "source": "  _command[_index + 1] = (this.requestId >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 46
              }
            ]
          },
          "83": {
            "partial": false,
            "source": "  _command[_index] = this.requestId & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 21,
                "endCol": 42
              }
            ]
          },
          "85": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "87": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "88": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "89": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "90": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "  _command[_index + 3] = (UpdateCommand.OP_UPDATE >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 56
              }
            ]
          },
          "93": {
            "partial": false,
            "source": "  _command[_index + 2] = (UpdateCommand.OP_UPDATE >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 56
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "  _command[_index + 1] = (UpdateCommand.OP_UPDATE >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 63
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 55
              }
            ]
          },
          "95": {
            "partial": false,
            "source": "  _command[_index] = UpdateCommand.OP_UPDATE & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 52
              },
              {
                "startCol": 21,
                "endCol": 51
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "100": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "101": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "102": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "103": {
            "partial": false,
            "source": "  _command[_index++] = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              },
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "106": {
            "partial": false,
            "source": "  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 20,
                "endCol": 71
              }
            ]
          },
          "107": {
            "partial": false,
            "source": "  _command[_index - 1] = 0;    ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "110": {
            "partial": false,
            "source": "  _command[_index + 3] = (this.flags >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 43
              }
            ]
          },
          "111": {
            "partial": false,
            "source": "  _command[_index + 2] = (this.flags >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 43
              }
            ]
          },
          "112": {
            "partial": false,
            "source": "  _command[_index + 1] = (this.flags >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 42
              }
            ]
          },
          "113": {
            "partial": false,
            "source": "  _command[_index] = this.flags & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              },
              {
                "startCol": 21,
                "endCol": 38
              }
            ]
          },
          "115": {
            "partial": false,
            "source": "  _index = _index + 4;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "118": {
            "partial": false,
            "source": "  var documentLength = 0",
            "missing": [
              {}
            ]
          },
          "119": {
            "partial": false,
            "source": "  var object = this.spec;",
            "missing": [
              {},
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "123": {
            "partial": false,
            "source": "  if(Buffer.isBuffer(object)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              }
            ]
          },
          "124": {
            "partial": false,
            "source": "    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 85
              },
              {
                "startCol": 22,
                "endCol": 48
              },
              {
                "startCol": 34,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 84
              }
            ]
          },
          "125": {
            "partial": false,
            "source": "    if(object_size != object.length) throw new Error(\"raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              },
              {
                "startCol": 37,
                "endCol": 157
              },
              {
                "startCol": 53,
                "endCol": 124
              },
              {
                "startCol": 138,
                "endCol": 149
              }
            ]
          },
          "126": {
            "partial": false,
            "source": "    documentLength = object.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "128": {
            "partial": false,
            "source": "    object.copy(_command, _index);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "130": {
            "partial": false,
            "source": "    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, false) - _index + 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 124
              },
              {
                "startCol": 21,
                "endCol": 110
              },
              {
                "startCol": 113,
                "endCol": 119
              }
            ]
          },
          "134": {
            "partial": false,
            "source": "  _command[_index + 3] = (documentLength >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "135": {
            "partial": false,
            "source": "  _command[_index + 2] = (documentLength >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "136": {
            "partial": false,
            "source": "  _command[_index + 1] = (documentLength >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "137": {
            "partial": false,
            "source": "  _command[_index] = documentLength & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 21,
                "endCol": 35
              }
            ]
          },
          "139": {
            "partial": false,
            "source": "  _index = _index + documentLength;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 20,
                "endCol": 34
              }
            ]
          },
          "141": {
            "partial": false,
            "source": "  _command[_index - 1] = 0;    ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "144": {
            "partial": false,
            "source": "  var documentLength = 0",
            "missing": [
              {}
            ]
          },
          "145": {
            "partial": false,
            "source": "  var object = this.document;",
            "missing": [
              {},
              {
                "startCol": 2,
                "endCol": 29
              }
            ]
          },
          "149": {
            "partial": false,
            "source": "  if(Buffer.isBuffer(object)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              }
            ]
          },
          "150": {
            "partial": false,
            "source": "    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 85
              },
              {
                "startCol": 22,
                "endCol": 48
              },
              {
                "startCol": 34,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 84
              }
            ]
          },
          "151": {
            "partial": false,
            "source": "    if(object_size != object.length) throw new Error(\"raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              },
              {
                "startCol": 37,
                "endCol": 157
              },
              {
                "startCol": 53,
                "endCol": 124
              },
              {
                "startCol": 138,
                "endCol": 149
              }
            ]
          },
          "152": {
            "partial": false,
            "source": "    documentLength = object.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "154": {
            "partial": false,
            "source": "    object.copy(_command, _index);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "156": {
            "partial": false,
            "source": "    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 142
              },
              {
                "startCol": 21,
                "endCol": 128
              },
              {
                "startCol": 131,
                "endCol": 137
              }
            ]
          },
          "160": {
            "partial": false,
            "source": "  _command[_index + 3] = (documentLength >> 24) & 0xff;     ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "161": {
            "partial": false,
            "source": "  _command[_index + 2] = (documentLength >> 16) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 47
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "162": {
            "partial": false,
            "source": "  _command[_index + 1] = (documentLength >> 8) & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 25,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 40
              }
            ]
          },
          "163": {
            "partial": false,
            "source": "  _command[_index] = documentLength & 0xff;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 21,
                "endCol": 35
              }
            ]
          },
          "165": {
            "partial": false,
            "source": "  _index = _index + documentLength;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 20,
                "endCol": 34
              }
            ]
          },
          "167": {
            "partial": false,
            "source": "  _command[_index - 1] = 0;    ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              },
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "169": {
            "partial": false,
            "source": "  return _command;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          }
        },
        "source": "var BaseCommand = require('./base_command').BaseCommand,\n  inherits = require('util').inherits;\n\n/**\n  Update Document Command\n**/\nvar UpdateCommand = exports.UpdateCommand = function(db, collectionName, spec, document, options) {\n  BaseCommand.call(this);\n\n  var object = spec;\n  if(Buffer.isBuffer(object)) {\n    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;    \n    if(object_size != object.length)  {\n      var error = new Error(\"update spec raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  var object = document;\n  if(Buffer.isBuffer(object)) {\n    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;    \n    if(object_size != object.length)  {\n      var error = new Error(\"update document raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  this.collectionName = collectionName;\n  this.spec = spec;\n  this.document = document;\n  this.db = db;\n  this.serializeFunctions = false;\n\n  // Generate correct flags\n  var db_upsert = 0;\n  var db_multi_update = 0;\n  db_upsert = options != null && options['upsert'] != null ? (options['upsert'] == true ? 1 : 0) : db_upsert;\n  db_multi_update = options != null && options['multi'] != null ? (options['multi'] == true ? 1 : 0) : db_multi_update;\n\n  // Flags\n  this.flags = parseInt(db_multi_update.toString() + db_upsert.toString(), 2);\n  // Let us defined on a command basis if we want functions to be serialized or not\n  if(options['serializeFunctions'] != null && options['serializeFunctions']) {\n    this.serializeFunctions = true;\n  }\n};\n\ninherits(UpdateCommand, BaseCommand);\n\nUpdateCommand.OP_UPDATE = 2001;\n\n/*\nstruct {\n    MsgHeader header;             // standard message header\n    int32     ZERO;               // 0 - reserved for future use\n    cstring   fullCollectionName; // \"dbname.collectionname\"\n    int32     flags;              // bit vector. see below\n    BSON      spec;               // the query to select the document\n    BSON      document;           // the document data to update with or insert\n}\n*/\nUpdateCommand.prototype.toBinary = function() {\n  // Calculate total length of the document\n  var totalLengthOfCommand = 4 + Buffer.byteLength(this.collectionName) + 1 + 4 + this.db.bson.calculateObjectSize(this.spec, false, true) +\n      this.db.bson.calculateObjectSize(this.document, this.serializeFunctions, true) + (4 * 4);\n\n  // Let's build the single pass buffer command\n  var _index = 0;\n  var _command = new Buffer(totalLengthOfCommand);\n  // Write the header information to the buffer\n  _command[_index + 3] = (totalLengthOfCommand >> 24) & 0xff;     \n  _command[_index + 2] = (totalLengthOfCommand >> 16) & 0xff;\n  _command[_index + 1] = (totalLengthOfCommand >> 8) & 0xff;\n  _command[_index] = totalLengthOfCommand & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write the request ID\n  _command[_index + 3] = (this.requestId >> 24) & 0xff;     \n  _command[_index + 2] = (this.requestId >> 16) & 0xff;\n  _command[_index + 1] = (this.requestId >> 8) & 0xff;\n  _command[_index] = this.requestId & 0xff;\n  // Adjust index\n  _index = _index + 4;\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  // Write the op_code for the command\n  _command[_index + 3] = (UpdateCommand.OP_UPDATE >> 24) & 0xff;     \n  _command[_index + 2] = (UpdateCommand.OP_UPDATE >> 16) & 0xff;\n  _command[_index + 1] = (UpdateCommand.OP_UPDATE >> 8) & 0xff;\n  _command[_index] = UpdateCommand.OP_UPDATE & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Write zero\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n  _command[_index++] = 0;\n\n  // Write the collection name to the command\n  _index = _index + _command.write(this.collectionName, _index, 'utf8') + 1;\n  _command[_index - 1] = 0;    \n\n  // Write the update flags\n  _command[_index + 3] = (this.flags >> 24) & 0xff;     \n  _command[_index + 2] = (this.flags >> 16) & 0xff;\n  _command[_index + 1] = (this.flags >> 8) & 0xff;\n  _command[_index] = this.flags & 0xff;\n  // Adjust index\n  _index = _index + 4;\n\n  // Document binary length\n  var documentLength = 0\n  var object = this.spec;\n\n  // Serialize the selector\n  // If we are passing a raw buffer, do minimal validation\n  if(Buffer.isBuffer(object)) {\n    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;\n    if(object_size != object.length) throw new Error(\"raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n    documentLength = object.length;\n    // Copy the data into the current buffer\n    object.copy(_command, _index);\n  } else {\n    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, false) - _index + 1;\n  }\n\n  // Write the length to the document\n  _command[_index + 3] = (documentLength >> 24) & 0xff;     \n  _command[_index + 2] = (documentLength >> 16) & 0xff;\n  _command[_index + 1] = (documentLength >> 8) & 0xff;\n  _command[_index] = documentLength & 0xff;\n  // Update index in buffer\n  _index = _index + documentLength;\n  // Add terminating 0 for the object\n  _command[_index - 1] = 0;    \n\n  // Document binary length\n  var documentLength = 0\n  var object = this.document;\n\n  // Serialize the document\n  // If we are passing a raw buffer, do minimal validation\n  if(Buffer.isBuffer(object)) {\n    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;\n    if(object_size != object.length) throw new Error(\"raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n    documentLength = object.length;\n    // Copy the data into the current buffer\n    object.copy(_command, _index);\n  } else {    \n    documentLength = this.db.bson.serializeWithBufferAndIndex(object, this.checkKeys, _command, _index, this.serializeFunctions) - _index + 1;\n  }\n\n  // Write the length to the document\n  _command[_index + 3] = (documentLength >> 24) & 0xff;     \n  _command[_index + 2] = (documentLength >> 16) & 0xff;\n  _command[_index + 1] = (documentLength >> 8) & 0xff;\n  _command[_index] = documentLength & 0xff;\n  // Update index in buffer\n  _index = _index + documentLength;\n  // Add terminating 0 for the object\n  _command[_index - 1] = 0;    \n\n  return _command;\n};\n\n// Constants\nUpdateCommand.DB_UPSERT = 0;\nUpdateCommand.DB_MULTI_UPDATE = 1;",
        "blocks": {
          "total": 13,
          "seen": 0,
          "missing": 13,
          "percentage": 0
        }
      },
      "hash": "5cdc9d49c16fe8ac74bc09e5ef21dc2b"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/responses/mongo_reply.js": {
      "stats": {
        "percentage": 0.8857142857142857,
        "lines": [
          {
            "lineno": 40
          },
          {
            "lineno": 50
          },
          {
            "lineno": 64
          },
          {
            "lineno": 70
          },
          {
            "lineno": 72
          },
          {
            "lineno": 74
          },
          {
            "lineno": 76
          },
          {
            "lineno": 78
          },
          {
            "lineno": 80
          },
          {
            "lineno": 90
          },
          {
            "lineno": 114
          },
          {
            "lineno": 123
          },
          {
            "lineno": 132
          },
          {
            "lineno": 133
          },
          {
            "lineno": 135
          },
          {
            "lineno": 139
          }
        ],
        "missing": 16,
        "seen": 124,
        "seen_lines": [
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 6,
            "e": 9
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 11,
            "e": 39
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 14,
            "e": 14
          },
          {
            "s": 14,
            "e": 14
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 23,
            "e": 23
          },
          {
            "s": 24,
            "e": 24
          },
          {
            "s": 24,
            "e": 24
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 35,
            "e": 35
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 39,
            "e": 131
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 42,
            "e": 42
          },
          {
            "s": 42,
            "e": 42
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 58,
            "e": 104
          },
          {
            "s": 58,
            "e": 104
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 61,
            "e": 103
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 86,
            "e": 86
          },
          {
            "s": 86,
            "e": 86
          },
          {
            "s": 88,
            "e": 88
          },
          {
            "s": 88,
            "e": 88
          },
          {
            "s": 88,
            "e": 88
          },
          {
            "s": 88,
            "e": 88
          },
          {
            "s": 95,
            "e": 95
          },
          {
            "s": 95,
            "e": 95
          },
          {
            "s": 95,
            "e": 95
          },
          {
            "s": 96,
            "e": 96
          },
          {
            "s": 96,
            "e": 96
          },
          {
            "s": 98,
            "e": 98
          },
          {
            "s": 98,
            "e": 98
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 110,
            "e": 110
          },
          {
            "s": 112,
            "e": 112
          },
          {
            "s": 117,
            "e": 117
          },
          {
            "s": 117,
            "e": 117
          },
          {
            "s": 117,
            "e": 117
          },
          {
            "s": 117,
            "e": 117
          },
          {
            "s": 117,
            "e": 117
          },
          {
            "s": 117,
            "e": 117
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 127,
            "e": 127
          },
          {
            "s": 127,
            "e": 127
          },
          {
            "s": 131,
            "e": 136
          },
          {
            "s": 138,
            "e": 140
          }
        ],
        "total": 140,
        "coverage": {
          "40": {
            "partial": true,
            "source": "  raw = raw == null ? false : raw;",
            "missing": [
              {
                "startCol": 22,
                "endCol": 27
              }
            ]
          },
          "50": {
            "partial": true,
            "source": "    for(var i = 50; i > 0; i--) {",
            "missing": [
              {
                "startCol": 27,
                "endCol": 30
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "          _batchSize = _numberReturned - object_index;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 54
              },
              {
                "startCol": 23,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 53
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "          for(var i = 0; i < _batchSize; i++) {",
            "missing": [
              {
                "startCol": 25,
                "endCol": 26
              },
              {
                "startCol": 29,
                "endCol": 39
              },
              {
                "startCol": 41,
                "endCol": 44
              }
            ]
          },
          "72": {
            "partial": false,
            "source": "            if(object_index <= _numberReturned) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 27
              },
              {
                "startCol": 31,
                "endCol": 46
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "              var bsonObjectSize = _binary_reply[_self.index] | _binary_reply[_self.index + 1] << 8 | _binary_reply[_self.index + 2] << 16 | _binary_reply[_self.index + 3] << 24;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 178
              },
              {
                "startCol": 35,
                "endCol": 99
              },
              {
                "startCol": 64,
                "endCol": 99
              },
              {
                "startCol": 78,
                "endCol": 93
              },
              {
                "startCol": 102,
                "endCol": 138
              },
              {
                "startCol": 116,
                "endCol": 131
              },
              {
                "startCol": 141,
                "endCol": 177
              },
              {
                "startCol": 155,
                "endCol": 170
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "              _self.documents[object_index] = binary_reply.slice(_self.index, _self.index + bsonObjectSize);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 108
              },
              {
                "startCol": 46,
                "endCol": 107
              },
              {
                "startCol": 78,
                "endCol": 106
              },
              {
                "startCol": 92,
                "endCol": 106
              }
            ]
          },
          "78": {
            "partial": false,
            "source": "              _self.index = _self.index + bsonObjectSize;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 57
              },
              {
                "startCol": 28,
                "endCol": 56
              },
              {
                "startCol": 42,
                "endCol": 56
              }
            ]
          },
          "80": {
            "partial": false,
            "source": "              object_index = object_index + 1;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 46
              },
              {
                "startCol": 29,
                "endCol": 41
              }
            ]
          },
          "90": {
            "partial": false,
            "source": "            return callback(err);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 32
              }
            ]
          },
          "114": {
            "partial": false,
            "source": "          this.documents.push(binary_reply.slice(this.index, this.index + bsonObjectSize));",
            "missing": [
              {
                "startCol": 10,
                "endCol": 90
              },
              {
                "startCol": 30,
                "endCol": 89
              },
              {
                "startCol": 61,
                "endCol": 88
              },
              {
                "startCol": 74,
                "endCol": 88
              }
            ]
          },
          "123": {
            "partial": false,
            "source": "      return callback(err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 27
              },
              {
                "startCol": 13,
                "endCol": 26
              }
            ]
          },
          "132": {
            "partial": false,
            "source": "  if(this.documents.length == 1) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 31
              }
            ]
          },
          "133": {
            "partial": false,
            "source": "    return this.documents[0].ok == 1 ? false : true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 11,
                "endCol": 36
              },
              {
                "startCol": 39,
                "endCol": 44
              },
              {
                "startCol": 47,
                "endCol": 51
              }
            ]
          },
          "135": {
            "partial": false,
            "source": "  return false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "139": {
            "partial": false,
            "source": "  return this.documents.length == 1 && this.documents[0].ok == 1 ? '' : this.documents[0].errmsg;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 97
              },
              {
                "startCol": 9,
                "endCol": 35
              },
              {
                "startCol": 39,
                "endCol": 64
              },
              {
                "startCol": 67,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 96
              }
            ]
          }
        },
        "source": "var Long = require('bson').Long;\n\n/**\n  Reply message from mongo db\n**/\nvar MongoReply = exports.MongoReply = function() {\n  this.documents = [];\n  this.index = 0;\n};\n\nMongoReply.prototype.parseHeader = function(binary_reply, bson) {\n  // Unpack the standard header first\n  this.messageLength = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n  this.index = this.index + 4;\n  // Fetch the request id for this reply\n  this.requestId = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n  this.index = this.index + 4;\n  // Fetch the id of the request that triggered the response\n  this.responseTo = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n  // Skip op-code field\n  this.index = this.index + 4 + 4;\n  // Unpack the reply message\n  this.responseFlag = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n  this.index = this.index + 4;\n  // Unpack the cursor id (a 64 bit long integer)\n  var low_bits = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n  this.index = this.index + 4;\n  var high_bits = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n  this.index = this.index + 4;\n  this.cursorId = new Long(low_bits, high_bits);\n  // Unpack the starting from\n  this.startingFrom = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n  this.index = this.index + 4;\n  // Unpack the number of objects returned\n  this.numberReturned = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n  this.index = this.index + 4;\n}\n\nMongoReply.prototype.parseBody = function(binary_reply, bson, raw, callback) {\n  raw = raw == null ? false : raw;\n  // Just set a doc limit for deserializing\n  var docLimitSize = 1024*20;\n\n  // If our message length is very long, let's switch to process.nextTick for messages\n  if(this.messageLength > docLimitSize) {\n    var batchSize = this.numberReturned;\n    this.documents = new Array(this.numberReturned);\n\n    // Just walk down until we get a positive number >= 1\n    for(var i = 50; i > 0; i--) {\n      if((this.numberReturned/i) >= 1) {\n        batchSize = i;\n        break;\n      }\n    }\n\n    // Actual main creator of the processFunction setting internal state to control the flow\n    var parseFunction = function(_self, _binary_reply, _batchSize, _numberReturned) {\n      var object_index = 0;\n      // Internal loop process that will use nextTick to ensure we yield some time\n      var processFunction = function() {\n        // Adjust batchSize if we have less results left than batchsize\n        if((_numberReturned - object_index) < _batchSize) {\n          _batchSize = _numberReturned - object_index;\n        }\n\n        // If raw just process the entries\n        if(raw) {\n          // Iterate over the batch\n          for(var i = 0; i < _batchSize; i++) {\n            // Are we done ?\n            if(object_index <= _numberReturned) {\n              // Read the size of the bson object\n              var bsonObjectSize = _binary_reply[_self.index] | _binary_reply[_self.index + 1] << 8 | _binary_reply[_self.index + 2] << 16 | _binary_reply[_self.index + 3] << 24;\n              // If we are storing the raw responses to pipe straight through\n              _self.documents[object_index] = binary_reply.slice(_self.index, _self.index + bsonObjectSize);\n              // Adjust binary index to point to next block of binary bson data\n              _self.index = _self.index + bsonObjectSize;\n              // Update number of docs parsed\n              object_index = object_index + 1;\n            }\n          }\n        } else {\n          try {\n            // Parse documents\n            _self.index = bson.deserializeStream(binary_reply, _self.index, _batchSize, _self.documents, object_index);\n            // Adjust index\n            object_index = object_index + _batchSize;\n          } catch (err) {\n            return callback(err);\n          }\n        }\n\n        // If we hav more documents process NextTick\n        if(object_index < _numberReturned) {\n          process.nextTick(processFunction);\n        } else {\n          callback(null);\n        }\n      }\n\n      // Return the process function\n      return processFunction;\n    }(this, binary_reply, batchSize, this.numberReturned)();\n  } else {\n    try {\n      // Let's unpack all the bson documents, deserialize them and store them\n      for(var object_index = 0; object_index < this.numberReturned; object_index++) {\n        // Read the size of the bson object\n        var bsonObjectSize = binary_reply[this.index] | binary_reply[this.index + 1] << 8 | binary_reply[this.index + 2] << 16 | binary_reply[this.index + 3] << 24;\n        // If we are storing the raw responses to pipe straight through\n        if(raw) {\n          // Deserialize the object and add to the documents array\n          this.documents.push(binary_reply.slice(this.index, this.index + bsonObjectSize));\n        } else {\n          // Deserialize the object and add to the documents array\n          this.documents.push(bson.deserialize(binary_reply.slice(this.index, this.index + bsonObjectSize)));\n        }\n        // Adjust binary index to point to next block of binary bson data\n        this.index = this.index + bsonObjectSize;\n      }\n    } catch(err) {\n      return callback(err);\n    }\n\n    // No error return\n    callback(null);\n  }\n}\n\nMongoReply.prototype.is_error = function(){\n  if(this.documents.length == 1) {\n    return this.documents[0].ok == 1 ? false : true;\n  }\n  return false;\n};\n\nMongoReply.prototype.error_message = function() {\n  return this.documents.length == 1 && this.documents[0].ok == 1 ? '' : this.documents[0].errmsg;\n};",
        "blocks": {
          "total": 26,
          "seen": 16,
          "missing": 10,
          "percentage": 0.6153846153846154
        }
      },
      "hash": "6ff3b57a7b60fe294b82f3dd068b7108"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/admin.js": {
      "stats": {
        "percentage": 0.7147058823529412,
        "lines": [
          {
            "lineno": 16
          },
          {
            "lineno": 17
          },
          {
            "lineno": 29
          },
          {
            "lineno": 41
          },
          {
            "lineno": 42
          },
          {
            "lineno": 43
          },
          {
            "lineno": 55
          },
          {
            "lineno": 57
          },
          {
            "lineno": 58
          },
          {
            "lineno": 59
          },
          {
            "lineno": 61
          },
          {
            "lineno": 62
          },
          {
            "lineno": 75
          },
          {
            "lineno": 77
          },
          {
            "lineno": 78
          },
          {
            "lineno": 80
          },
          {
            "lineno": 81
          },
          {
            "lineno": 82
          },
          {
            "lineno": 83
          },
          {
            "lineno": 84
          },
          {
            "lineno": 85
          },
          {
            "lineno": 87
          },
          {
            "lineno": 101
          },
          {
            "lineno": 102
          },
          {
            "lineno": 104
          },
          {
            "lineno": 117
          },
          {
            "lineno": 118
          },
          {
            "lineno": 131
          },
          {
            "lineno": 132
          },
          {
            "lineno": 151
          },
          {
            "lineno": 152
          },
          {
            "lineno": 153
          },
          {
            "lineno": 155
          },
          {
            "lineno": 157
          },
          {
            "lineno": 158
          },
          {
            "lineno": 175
          },
          {
            "lineno": 176
          },
          {
            "lineno": 177
          },
          {
            "lineno": 178
          },
          {
            "lineno": 179
          },
          {
            "lineno": 181
          },
          {
            "lineno": 182
          },
          {
            "lineno": 195
          },
          {
            "lineno": 196
          },
          {
            "lineno": 197
          },
          {
            "lineno": 199
          },
          {
            "lineno": 200
          },
          {
            "lineno": 201
          },
          {
            "lineno": 202
          },
          {
            "lineno": 203
          },
          {
            "lineno": 204
          },
          {
            "lineno": 206
          },
          {
            "lineno": 210
          },
          {
            "lineno": 212
          },
          {
            "lineno": 213
          },
          {
            "lineno": 215
          },
          {
            "lineno": 216
          },
          {
            "lineno": 217
          },
          {
            "lineno": 230
          },
          {
            "lineno": 233
          },
          {
            "lineno": 236
          },
          {
            "lineno": 250
          },
          {
            "lineno": 251
          },
          {
            "lineno": 252
          },
          {
            "lineno": 253
          },
          {
            "lineno": 256
          },
          {
            "lineno": 258
          },
          {
            "lineno": 272
          },
          {
            "lineno": 273
          },
          {
            "lineno": 274
          },
          {
            "lineno": 276
          },
          {
            "lineno": 277
          },
          {
            "lineno": 278
          },
          {
            "lineno": 281
          },
          {
            "lineno": 282
          },
          {
            "lineno": 283
          },
          {
            "lineno": 287
          },
          {
            "lineno": 288
          },
          {
            "lineno": 289
          },
          {
            "lineno": 291
          },
          {
            "lineno": 292
          },
          {
            "lineno": 293
          },
          {
            "lineno": 294
          },
          {
            "lineno": 295
          },
          {
            "lineno": 296
          },
          {
            "lineno": 297
          },
          {
            "lineno": 298
          },
          {
            "lineno": 300
          },
          {
            "lineno": 313
          },
          {
            "lineno": 314
          },
          {
            "lineno": 315
          },
          {
            "lineno": 327
          },
          {
            "lineno": 329
          },
          {
            "lineno": 330
          },
          {
            "lineno": 331
          },
          {
            "lineno": 332
          },
          {
            "lineno": 333
          }
        ],
        "missing": 97,
        "seen": 243,
        "seen_lines": [
          {
            "s": 4,
            "e": 6
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 28,
            "e": 40
          },
          {
            "s": 40,
            "e": 54
          },
          {
            "s": 54,
            "e": 65
          },
          {
            "s": 74,
            "e": 90
          },
          {
            "s": 99,
            "e": 116
          },
          {
            "s": 116,
            "e": 130
          },
          {
            "s": 130,
            "e": 150
          },
          {
            "s": 150,
            "e": 174
          },
          {
            "s": 174,
            "e": 194
          },
          {
            "s": 194,
            "e": 219
          },
          {
            "s": 228,
            "e": 238
          },
          {
            "s": 249,
            "e": 271
          },
          {
            "s": 271,
            "e": 302
          },
          {
            "s": 311,
            "e": 326
          },
          {
            "s": 326,
            "e": 335
          },
          {
            "s": 340,
            "e": 340
          }
        ],
        "total": 340,
        "coverage": {
          "16": {
            "partial": false,
            "source": "  if(!(this instanceof Admin)) return new Admin(db);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 29
              },
              {
                "startCol": 6,
                "endCol": 29
              },
              {
                "startCol": 23,
                "endCol": 28
              },
              {
                "startCol": 31,
                "endCol": 52
              }
            ]
          },
          "17": {
            "partial": false,
            "source": "  this.db = db;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "29": {
            "partial": false,
            "source": "  this.serverInfo(callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "41": {
            "partial": false,
            "source": "  this.db.executeDbAdminCommand({buildinfo:1}, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "42": {
            "partial": false,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 20,
                "endCol": 47
              },
              {},
              {
                "startCol": 7,
                "endCol": 18
              },
              {
                "startCol": 27,
                "endCol": 46
              }
            ]
          },
          "43": {
            "partial": false,
            "source": "    return callback(null, doc.documents[0]);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 44
              },
              {
                "startCol": 11,
                "endCol": 43
              }
            ]
          },
          "44": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "55": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "57": {
            "partial": false,
            "source": "  this.db.executeDbAdminCommand({serverStatus: 1}, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "58": {
            "partial": false,
            "source": "    if(err == null && doc.documents[0].ok === 1) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {},
              {
                "startCol": 22,
                "endCol": 47
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "      callback(null, doc.documents[0]);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              },
              {}
            ]
          },
          "60": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "61": {
            "partial": false,
            "source": "      if(err) return callback(err, false);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              },
              {},
              {
                "startCol": 14,
                "endCol": 42
              },
              {
                "startCol": 21,
                "endCol": 41
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "      return callback(self.db.wrap(doc.documents[0]), false);",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 52
              },
              {
                "startCol": 13,
                "endCol": 60
              },
              {
                "startCol": 6,
                "endCol": 61
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "64": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "75": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "  this.db.executeDbAdminCommand({profile:-1}, function(err, doc) {",
            "missing": [
              {},
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "78": {
            "partial": false,
            "source": "    doc = doc.documents[0];",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "80": {
            "partial": false,
            "source": "    if(err == null && doc.ok === 1) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {},
              {
                "startCol": 22,
                "endCol": 34
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "      var was = doc.was;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 24
              }
            ]
          },
          "82": {
            "partial": false,
            "source": "      if(was == 0) return callback(null, \"off\");",
            "missing": [
              {
                "startCol": 19,
                "endCol": 48
              },
              {
                "startCol": 26,
                "endCol": 47
              },
              {},
              {
                "startCol": 9,
                "endCol": 17
              }
            ]
          },
          "83": {
            "partial": false,
            "source": "      if(was == 1) return callback(null, \"slow_only\");",
            "missing": [
              {
                "startCol": 9,
                "endCol": 17
              },
              {
                "startCol": 19,
                "endCol": 54
              },
              {},
              {
                "startCol": 26,
                "endCol": 53
              }
            ]
          },
          "84": {
            "partial": false,
            "source": "      if(was == 2) return callback(null, \"all\");",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 19,
                "endCol": 48
              },
              {},
              {
                "startCol": 26,
                "endCol": 47
              }
            ]
          },
          "85": {
            "partial": false,
            "source": "        return callback(new Error(\"Error: illegal profiling level value \" + was), null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 88
              },
              {
                "startCol": 15,
                "endCol": 87
              },
              {},
              {
                "startCol": 34,
                "endCol": 79
              },
              {
                "startCol": 76,
                "endCol": 79
              }
            ]
          },
          "86": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "87": {
            "partial": false,
            "source": "      err != null ? callback(err, null) : callback(new Error(\"Error with profile command\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 9
              },
              {
                "startCol": 20,
                "endCol": 39
              },
              {},
              {
                "startCol": 42,
                "endCol": 97
              }
            ]
          },
          "88": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "89": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "101": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "102": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "104": {
            "partial": false,
            "source": "  this.db.executeDbAdminCommand({ping: 1}, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 52
              }
            ]
          },
          "117": {
            "partial": false,
            "source": "  this.db.authenticate(username, password, {authdb: 'admin'}, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "118": {
            "partial": false,
            "source": "    return callback(err, doc);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              },
              {},
              {
                "startCol": 11,
                "endCol": 29
              }
            ]
          },
          "119": {
            "partial": false,
            "source": "  })",
            "missing": [
              {}
            ]
          },
          "120": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "131": {
            "partial": false,
            "source": "  this.db.logout({authdb: 'admin'},  function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "132": {
            "partial": false,
            "source": "    return callback(err, doc);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 30
              },
              {
                "startCol": 11,
                "endCol": 29
              }
            ]
          },
          "133": {
            "partial": false,
            "source": "  })",
            "missing": [
              {}
            ]
          },
          "134": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "151": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "152": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "153": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "155": {
            "partial": false,
            "source": "  options.dbName = 'admin';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "157": {
            "partial": false,
            "source": "  this.db.addUser(username, password, options, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "158": {
            "partial": false,
            "source": "    return callback(err, doc);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 30
              },
              {
                "startCol": 11,
                "endCol": 29
              }
            ]
          },
          "159": {
            "partial": false,
            "source": "  })",
            "missing": [
              {}
            ]
          },
          "160": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "175": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "176": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "177": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "178": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "179": {
            "partial": false,
            "source": "  options.dbName = 'admin';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "181": {
            "partial": false,
            "source": "  this.db.removeUser(username, options, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "182": {
            "partial": false,
            "source": "    return callback(err, doc);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              },
              {},
              {
                "startCol": 11,
                "endCol": 29
              }
            ]
          },
          "183": {
            "partial": false,
            "source": "  })",
            "missing": [
              {}
            ]
          },
          "184": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "195": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "196": {
            "partial": false,
            "source": "  var command = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "197": {
            "partial": false,
            "source": "  var profile = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "199": {
            "partial": false,
            "source": "  if(level == \"off\") {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 10
              }
            ]
          },
          "200": {
            "partial": false,
            "source": "    profile = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "201": {
            "partial": false,
            "source": "  } else if(level == \"slow_only\") {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 17
              }
            ]
          },
          "202": {
            "partial": false,
            "source": "    profile = 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "203": {
            "partial": false,
            "source": "  } else if(level == \"all\") {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 17
              }
            ]
          },
          "204": {
            "partial": false,
            "source": "    profile = 2;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "206": {
            "partial": false,
            "source": "    return callback(new Error(\"Error: illegal profiling level value \" + level));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 80
              },
              {
                "startCol": 11,
                "endCol": 79
              },
              {
                "startCol": 30,
                "endCol": 77
              },
              {
                "startCol": 72,
                "endCol": 77
              }
            ]
          },
          "210": {
            "partial": false,
            "source": "  command['profile'] = profile;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 31
              }
            ]
          },
          "212": {
            "partial": false,
            "source": "  this.db.executeDbAdminCommand(command, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "213": {
            "partial": false,
            "source": "    doc = doc.documents[0];",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "214": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "215": {
            "partial": false,
            "source": "    if(err == null && doc.ok === 1)",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {},
              {
                "startCol": 22,
                "endCol": 34
              }
            ]
          },
          "216": {
            "partial": false,
            "source": "      return callback(null, level);",
            "missing": [
              {
                "startCol": 13,
                "endCol": 34
              },
              {},
              {
                "startCol": 6,
                "endCol": 35
              }
            ]
          },
          "217": {
            "partial": false,
            "source": "    return err != null ? callback(err, null) : callback(new Error(\"Error with profile command\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 103
              },
              {
                "startCol": 25,
                "endCol": 44
              },
              {
                "startCol": 47,
                "endCol": 102
              },
              {
                "startCol": 11,
                "endCol": 22
              },
              {}
            ]
          },
          "218": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "230": {
            "partial": false,
            "source": "    new Cursor(this.db, new Collection(this.db, DbCommand.SYSTEM_PROFILE_COLLECTION), {}, null, null, null",
            "missing": [
              {}
            ]
          },
          "231": {
            "partial": false,
            "source": "      , null, null, null, null, null, null, null, null, null, null",
            "missing": [
              {}
            ]
          },
          "232": {
            "partial": false,
            "source": "      , null, null, null, null, null, null, null, null, 'admin').toArray(function(err, items) {",
            "missing": [
              {}
            ]
          },
          "233": {
            "partial": false,
            "source": "        return callback(err, items);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 36
              },
              {
                "startCol": 15,
                "endCol": 35
              }
            ]
          },
          "234": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "236": {
            "partial": false,
            "source": "    return callback(err, null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              },
              {
                "startCol": 11,
                "endCol": 30
              }
            ]
          },
          "250": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "251": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "252": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "253": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "256": {
            "partial": false,
            "source": "  this.db.executeDbAdminCommand(command, options, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "257": {
            "partial": false,
            "source": "    // Ensure change before event loop executes",
            "missing": [
              {}
            ]
          },
          "258": {
            "partial": false,
            "source": "    return callback != null ? callback(err, doc) : null;",
            "missing": [
              {
                "startCol": 51,
                "endCol": 55
              },
              {},
              {
                "startCol": 30,
                "endCol": 48
              },
              {
                "startCol": 4,
                "endCol": 56
              },
              {
                "startCol": 11,
                "endCol": 27
              }
            ]
          },
          "259": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "272": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "273": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "274": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "276": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "277": {
            "partial": false,
            "source": "  var command = {validate: collectionName};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              }
            ]
          },
          "278": {
            "partial": false,
            "source": "  var keys = Object.keys(options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 34
              },
              {
                "startCol": 13,
                "endCol": 33
              }
            ]
          },
          "281": {
            "partial": false,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "282": {
            "partial": false,
            "source": "    if(options.hasOwnProperty(keys[i])) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 38
              }
            ]
          },
          "283": {
            "partial": false,
            "source": "      command[keys[i]] = options[keys[i]];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 42
              }
            ]
          },
          "287": {
            "partial": false,
            "source": "  this.db.executeDbCommand(command, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "288": {
            "partial": false,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 20,
                "endCol": 47
              },
              {},
              {
                "startCol": 27,
                "endCol": 46
              }
            ]
          },
          "289": {
            "partial": false,
            "source": "    doc = doc.documents[0];",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "290": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "291": {
            "partial": false,
            "source": "    if(doc.ok === 0)",
            "missing": [
              {
                "startCol": 7,
                "endCol": 19
              },
              {}
            ]
          },
          "292": {
            "partial": false,
            "source": "      return callback(new Error(\"Error with validate command\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 70
              },
              {
                "startCol": 13,
                "endCol": 69
              },
              {}
            ]
          },
          "293": {
            "partial": false,
            "source": "    if(doc.result != null && doc.result.constructor != String)",
            "missing": [
              {},
              {
                "startCol": 29,
                "endCol": 61
              },
              {
                "startCol": 55,
                "endCol": 61
              },
              {
                "startCol": 7,
                "endCol": 25
              }
            ]
          },
          "294": {
            "partial": false,
            "source": "      return callback(new Error(\"Error with validation data\"), null);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 69
              },
              {
                "startCol": 13,
                "endCol": 68
              }
            ]
          },
          "295": {
            "partial": false,
            "source": "    if(doc.result != null && doc.result.match(/exception|corrupt/) != null)",
            "missing": [
              {
                "startCol": 7,
                "endCol": 25
              },
              {
                "startCol": 29,
                "endCol": 66
              },
              {}
            ]
          },
          "296": {
            "partial": false,
            "source": "      return callback(new Error(\"Error: invalid collection \" + collectionName), null);",
            "missing": [
              {
                "startCol": 13,
                "endCol": 85
              },
              {},
              {
                "startCol": 6,
                "endCol": 86
              },
              {
                "startCol": 32,
                "endCol": 77
              },
              {
                "startCol": 63,
                "endCol": 77
              }
            ]
          },
          "297": {
            "partial": false,
            "source": "    if(doc.valid != null && !doc.valid)",
            "missing": [
              {
                "startCol": 7,
                "endCol": 24
              },
              {},
              {
                "startCol": 28,
                "endCol": 38
              }
            ]
          },
          "298": {
            "partial": false,
            "source": "      return callback(new Error(\"Error: invalid collection \" + collectionName), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 86
              },
              {},
              {
                "startCol": 13,
                "endCol": 85
              },
              {
                "startCol": 32,
                "endCol": 77
              },
              {
                "startCol": 63,
                "endCol": 77
              }
            ]
          },
          "299": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "300": {
            "partial": false,
            "source": "    return callback(null, doc);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 31
              },
              {
                "startCol": 11,
                "endCol": 30
              }
            ]
          },
          "301": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "313": {
            "partial": false,
            "source": "  this.db.executeDbAdminCommand({listDatabases:1}, {}, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "314": {
            "partial": false,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 20,
                "endCol": 47
              },
              {
                "startCol": 7,
                "endCol": 18
              },
              {
                "startCol": 27,
                "endCol": 46
              }
            ]
          },
          "315": {
            "partial": false,
            "source": "    return callback(null, doc.documents[0]);",
            "missing": [
              {
                "startCol": 11,
                "endCol": 43
              },
              {},
              {
                "startCol": 4,
                "endCol": 44
              }
            ]
          },
          "316": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "327": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "329": {
            "partial": false,
            "source": "  this.db.executeDbAdminCommand({replSetGetStatus:1}, function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "330": {
            "partial": false,
            "source": "    if(err == null && doc.documents[0].ok === 1)",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {},
              {
                "startCol": 22,
                "endCol": 47
              }
            ]
          },
          "331": {
            "partial": false,
            "source": "      return callback(null, doc.documents[0]);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 46
              },
              {
                "startCol": 13,
                "endCol": 45
              },
              {}
            ]
          },
          "332": {
            "partial": false,
            "source": "    if(err) return callback(err, false);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 40
              },
              {
                "startCol": 19,
                "endCol": 39
              },
              {
                "startCol": 7,
                "endCol": 10
              }
            ]
          },
          "333": {
            "partial": false,
            "source": "    return callback(self.db.wrap(doc.documents[0]), false);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 59
              },
              {
                "startCol": 11,
                "endCol": 58
              },
              {},
              {
                "startCol": 20,
                "endCol": 50
              }
            ]
          },
          "334": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          }
        },
        "source": "/*!\n * Module dependencies.\n */\nvar Collection = require('./collection').Collection,\n    Cursor = require('./cursor').Cursor,\n    DbCommand = require('./commands/db_command').DbCommand;\n\n/**\n * Allows the user to access the admin functionality of MongoDB\n *\n * @class Represents the Admin methods of MongoDB.\n * @param {Object} db Current db instance we wish to perform Admin operations on.\n * @return {Function} Constructor for Admin type.\n */\nfunction Admin(db) {\n  if(!(this instanceof Admin)) return new Admin(db);\n  this.db = db;\n};\n\n/**\n * Retrieve the server information for the current\n * instance of the db client\n *\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.buildInfo = function(callback) {\n  this.serverInfo(callback);\n}\n\n/**\n * Retrieve the server information for the current\n * instance of the db client\n *\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api private\n */\nAdmin.prototype.serverInfo = function(callback) {\n  this.db.executeDbAdminCommand({buildinfo:1}, function(err, doc) {\n    if(err != null) return callback(err, null);\n    return callback(null, doc.documents[0]);\n  });\n}\n\n/**\n * Retrieve this db's server status.\n *\n * @param {Function} callback returns the server status.\n * @return {null}\n * @api public\n */\nAdmin.prototype.serverStatus = function(callback) {\n  var self = this;\n\n  this.db.executeDbAdminCommand({serverStatus: 1}, function(err, doc) {\n    if(err == null && doc.documents[0].ok === 1) {\n      callback(null, doc.documents[0]);\n    } else {\n      if(err) return callback(err, false);\n      return callback(self.db.wrap(doc.documents[0]), false);\n    }\n  });\n};\n\n/**\n * Retrieve the current profiling Level for MongoDB\n *\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.profilingLevel = function(callback) {\n  var self = this;\n\n  this.db.executeDbAdminCommand({profile:-1}, function(err, doc) {\n    doc = doc.documents[0];\n\n    if(err == null && doc.ok === 1) {\n      var was = doc.was;\n      if(was == 0) return callback(null, \"off\");\n      if(was == 1) return callback(null, \"slow_only\");\n      if(was == 2) return callback(null, \"all\");\n        return callback(new Error(\"Error: illegal profiling level value \" + was), null);\n    } else {\n      err != null ? callback(err, null) : callback(new Error(\"Error with profile command\"), null);\n    }\n  });\n};\n\n/**\n * Ping the MongoDB server and retrieve results\n *\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.ping = function(options, callback) {\n  // Unpack calls\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n\n  this.db.executeDbAdminCommand({ping: 1}, callback);\n}\n\n/**\n * Authenticate against MongoDB\n *\n * @param {String} username The user name for the authentication.\n * @param {String} password The password for the authentication.\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.authenticate = function(username, password, callback) {\n  this.db.authenticate(username, password, {authdb: 'admin'}, function(err, doc) {\n    return callback(err, doc);\n  })\n}\n\n/**\n * Logout current authenticated user\n *\n * @param {Object} [options] Optional parameters to the command.\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.logout = function(callback) {\n  this.db.logout({authdb: 'admin'},  function(err, doc) {\n    return callback(err, doc);\n  })\n}\n\n/**\n * Add a user to the MongoDB server, if the user exists it will\n * overwrite the current password\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *\n * @param {String} username The user name for the authentication.\n * @param {String} password The password for the authentication.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.addUser = function(username, password, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  options.dbName = 'admin';\n  // Add user\n  this.db.addUser(username, password, options, function(err, doc) {\n    return callback(err, doc);\n  })\n}\n\n/**\n * Remove a user from the MongoDB server\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *\n * @param {String} username The user name for the authentication.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.removeUser = function(username, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  options.dbName = 'admin';\n\n  this.db.removeUser(username, options, function(err, doc) {\n    return callback(err, doc);\n  })\n}\n\n/**\n * Set the current profiling level of MongoDB\n *\n * @param {String} level The new profiling level (off, slow_only, all)\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.setProfilingLevel = function(level, callback) {\n  var self = this;\n  var command = {};\n  var profile = 0;\n\n  if(level == \"off\") {\n    profile = 0;\n  } else if(level == \"slow_only\") {\n    profile = 1;\n  } else if(level == \"all\") {\n    profile = 2;\n  } else {\n    return callback(new Error(\"Error: illegal profiling level value \" + level));\n  }\n\n  // Set up the profile number\n  command['profile'] = profile;\n\n  this.db.executeDbAdminCommand(command, function(err, doc) {\n    doc = doc.documents[0];\n\n    if(err == null && doc.ok === 1)\n      return callback(null, level);\n    return err != null ? callback(err, null) : callback(new Error(\"Error with profile command\"), null);\n  });\n};\n\n/**\n * Retrive the current profiling information for MongoDB\n *\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.profilingInfo = function(callback) {\n  try {\n    new Cursor(this.db, new Collection(this.db, DbCommand.SYSTEM_PROFILE_COLLECTION), {}, null, null, null\n      , null, null, null, null, null, null, null, null, null, null\n      , null, null, null, null, null, null, null, null, 'admin').toArray(function(err, items) {\n        return callback(err, items);\n    });\n  } catch (err) {\n    return callback(err, null);\n  }\n};\n\n/**\n * Execute a db command against the Admin database\n *\n * @param {Object} command A command object `{ping:1}`.\n * @param {Object} [options] Optional parameters to the command.\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.command = function(command, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  // Execute a command\n  this.db.executeDbAdminCommand(command, options, function(err, doc) {\n    // Ensure change before event loop executes\n    return callback != null ? callback(err, doc) : null;\n  });\n}\n\n/**\n * Validate an existing collection\n *\n * @param {String} collectionName The name of the collection to validate.\n * @param {Object} [options] Optional parameters to the command.\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.validateCollection = function(collectionName, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  var self = this;\n  var command = {validate: collectionName};\n  var keys = Object.keys(options);\n\n  // Decorate command with extra options\n  for(var i = 0; i < keys.length; i++) {\n    if(options.hasOwnProperty(keys[i])) {\n      command[keys[i]] = options[keys[i]];\n    }\n  }\n\n  this.db.executeDbCommand(command, function(err, doc) {\n    if(err != null) return callback(err, null);\n    doc = doc.documents[0];\n\n    if(doc.ok === 0)\n      return callback(new Error(\"Error with validate command\"), null);\n    if(doc.result != null && doc.result.constructor != String)\n      return callback(new Error(\"Error with validation data\"), null);\n    if(doc.result != null && doc.result.match(/exception|corrupt/) != null)\n      return callback(new Error(\"Error: invalid collection \" + collectionName), null);\n    if(doc.valid != null && !doc.valid)\n      return callback(new Error(\"Error: invalid collection \" + collectionName), null);\n\n    return callback(null, doc);\n  });\n};\n\n/**\n * List the available databases\n *\n * @param {Function} callback Callback function of format `function(err, result) {}`.\n * @return {null} Returns no result\n * @api public\n */\nAdmin.prototype.listDatabases = function(callback) {\n  // Execute the listAllDatabases command\n  this.db.executeDbAdminCommand({listDatabases:1}, {}, function(err, doc) {\n    if(err != null) return callback(err, null);\n    return callback(null, doc.documents[0]);\n  });\n}\n\n/**\n * Get ReplicaSet status\n *\n * @param {Function} callback returns the replica set status (if available).\n * @return {null}\n * @api public\n */\nAdmin.prototype.replSetGetStatus = function(callback) {\n  var self = this;\n\n  this.db.executeDbAdminCommand({replSetGetStatus:1}, function(err, doc) {\n    if(err == null && doc.documents[0].ok === 1)\n      return callback(null, doc.documents[0]);\n    if(err) return callback(err, false);\n    return callback(self.db.wrap(doc.documents[0]), false);\n  });\n};\n\n/**\n * @ignore\n */\nexports.Admin = Admin;",
        "blocks": {
          "total": 56,
          "seen": 0,
          "missing": 56,
          "percentage": 0
        }
      },
      "hash": "0cbcfa4a5f0c1cbec721075312a6c53b"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/collection.js": {
      "stats": {
        "percentage": 0.7178065311152187,
        "lines": [
          {
            "lineno": 44
          },
          {
            "lineno": 52
          },
          {
            "lineno": 53
          },
          {
            "lineno": 54
          },
          {
            "lineno": 56
          },
          {
            "lineno": 57
          },
          {
            "lineno": 81
          },
          {
            "lineno": 94
          },
          {
            "lineno": 98
          },
          {
            "lineno": 102
          },
          {
            "lineno": 103
          },
          {
            "lineno": 107
          },
          {
            "lineno": 125
          },
          {
            "lineno": 126
          },
          {
            "lineno": 127
          },
          {
            "lineno": 128
          },
          {
            "lineno": 129
          },
          {
            "lineno": 130
          },
          {
            "lineno": 134
          },
          {
            "lineno": 135
          },
          {
            "lineno": 137
          },
          {
            "lineno": 139
          },
          {
            "lineno": 142
          },
          {
            "lineno": 144
          },
          {
            "lineno": 145
          },
          {
            "lineno": 149
          },
          {
            "lineno": 151
          },
          {
            "lineno": 155
          },
          {
            "lineno": 156
          },
          {
            "lineno": 157
          },
          {
            "lineno": 158
          },
          {
            "lineno": 161
          },
          {
            "lineno": 163
          },
          {
            "lineno": 165
          },
          {
            "lineno": 167
          },
          {
            "lineno": 169
          },
          {
            "lineno": 171
          },
          {
            "lineno": 172
          },
          {
            "lineno": 173
          },
          {
            "lineno": 174
          },
          {
            "lineno": 179
          },
          {
            "lineno": 180
          },
          {
            "lineno": 181
          },
          {
            "lineno": 183
          },
          {
            "lineno": 184
          },
          {
            "lineno": 185
          },
          {
            "lineno": 186
          },
          {
            "lineno": 188
          },
          {
            "lineno": 192
          },
          {
            "lineno": 194
          },
          {
            "lineno": 196
          },
          {
            "lineno": 197
          },
          {
            "lineno": 200
          },
          {
            "lineno": 213
          },
          {
            "lineno": 215
          },
          {
            "lineno": 217
          },
          {
            "lineno": 218
          },
          {
            "lineno": 219
          },
          {
            "lineno": 221
          },
          {
            "lineno": 223
          },
          {
            "lineno": 225
          },
          {
            "lineno": 226
          },
          {
            "lineno": 227
          },
          {
            "lineno": 237
          },
          {
            "lineno": 238
          },
          {
            "lineno": 245
          },
          {
            "lineno": 250
          },
          {
            "lineno": 287
          },
          {
            "lineno": 291
          },
          {
            "lineno": 300
          },
          {
            "lineno": 306
          },
          {
            "lineno": 307
          },
          {
            "lineno": 308
          },
          {
            "lineno": 315
          },
          {
            "lineno": 318
          },
          {
            "lineno": 320
          },
          {
            "lineno": 330
          },
          {
            "lineno": 331
          },
          {
            "lineno": 334
          },
          {
            "lineno": 352
          },
          {
            "lineno": 353
          },
          {
            "lineno": 354
          },
          {
            "lineno": 356
          },
          {
            "lineno": 357
          },
          {
            "lineno": 359
          },
          {
            "lineno": 361
          },
          {
            "lineno": 362
          },
          {
            "lineno": 364
          },
          {
            "lineno": 365
          },
          {
            "lineno": 367
          },
          {
            "lineno": 368
          },
          {
            "lineno": 370
          },
          {
            "lineno": 393
          },
          {
            "lineno": 394
          },
          {
            "lineno": 395
          },
          {
            "lineno": 398
          },
          {
            "lineno": 400
          },
          {
            "lineno": 401
          },
          {
            "lineno": 406
          },
          {
            "lineno": 407
          },
          {
            "lineno": 409
          },
          {
            "lineno": 412
          },
          {
            "lineno": 414
          },
          {
            "lineno": 419
          },
          {
            "lineno": 421
          },
          {
            "lineno": 422
          },
          {
            "lineno": 423
          },
          {
            "lineno": 426
          },
          {
            "lineno": 429
          },
          {
            "lineno": 431
          },
          {
            "lineno": 433
          },
          {
            "lineno": 435
          },
          {
            "lineno": 437
          },
          {
            "lineno": 438
          },
          {
            "lineno": 439
          },
          {
            "lineno": 440
          },
          {
            "lineno": 445
          },
          {
            "lineno": 446
          },
          {
            "lineno": 447
          },
          {
            "lineno": 449
          },
          {
            "lineno": 450
          },
          {
            "lineno": 451
          },
          {
            "lineno": 452
          },
          {
            "lineno": 455
          },
          {
            "lineno": 460
          },
          {
            "lineno": 462
          },
          {
            "lineno": 464
          },
          {
            "lineno": 465
          },
          {
            "lineno": 468
          },
          {
            "lineno": 486
          },
          {
            "lineno": 487
          },
          {
            "lineno": 488
          },
          {
            "lineno": 489
          },
          {
            "lineno": 491
          },
          {
            "lineno": 498
          },
          {
            "lineno": 500
          },
          {
            "lineno": 502
          },
          {
            "lineno": 503
          },
          {
            "lineno": 504
          },
          {
            "lineno": 505
          },
          {
            "lineno": 506
          },
          {
            "lineno": 507
          },
          {
            "lineno": 526
          },
          {
            "lineno": 527
          },
          {
            "lineno": 537
          },
          {
            "lineno": 542
          },
          {
            "lineno": 558
          },
          {
            "lineno": 560
          },
          {
            "lineno": 561
          },
          {
            "lineno": 575
          },
          {
            "lineno": 596
          },
          {
            "lineno": 597
          },
          {
            "lineno": 598
          },
          {
            "lineno": 599
          },
          {
            "lineno": 600
          },
          {
            "lineno": 601
          },
          {
            "lineno": 603
          },
          {
            "lineno": 606
          },
          {
            "lineno": 609
          },
          {
            "lineno": 610
          },
          {
            "lineno": 611
          },
          {
            "lineno": 614
          },
          {
            "lineno": 617
          },
          {
            "lineno": 618
          },
          {
            "lineno": 623
          },
          {
            "lineno": 624
          },
          {
            "lineno": 626
          },
          {
            "lineno": 630
          },
          {
            "lineno": 631
          },
          {
            "lineno": 632
          },
          {
            "lineno": 635
          },
          {
            "lineno": 637
          },
          {
            "lineno": 639
          },
          {
            "lineno": 641
          },
          {
            "lineno": 643
          },
          {
            "lineno": 644
          },
          {
            "lineno": 648
          },
          {
            "lineno": 649
          },
          {
            "lineno": 650
          },
          {
            "lineno": 652
          },
          {
            "lineno": 655
          },
          {
            "lineno": 656
          },
          {
            "lineno": 657
          },
          {
            "lineno": 661
          },
          {
            "lineno": 663
          },
          {
            "lineno": 664
          },
          {
            "lineno": 665
          },
          {
            "lineno": 666
          },
          {
            "lineno": 667
          },
          {
            "lineno": 669
          },
          {
            "lineno": 670
          },
          {
            "lineno": 689
          },
          {
            "lineno": 690
          },
          {
            "lineno": 691
          },
          {
            "lineno": 692
          },
          {
            "lineno": 694
          },
          {
            "lineno": 696
          },
          {
            "lineno": 753
          },
          {
            "lineno": 756
          },
          {
            "lineno": 760
          },
          {
            "lineno": 761
          },
          {
            "lineno": 764
          },
          {
            "lineno": 765
          },
          {
            "lineno": 766
          },
          {
            "lineno": 768
          },
          {
            "lineno": 769
          },
          {
            "lineno": 770
          },
          {
            "lineno": 775
          },
          {
            "lineno": 776
          },
          {
            "lineno": 777
          },
          {
            "lineno": 779
          },
          {
            "lineno": 781
          },
          {
            "lineno": 782
          },
          {
            "lineno": 784
          },
          {
            "lineno": 785
          },
          {
            "lineno": 788
          },
          {
            "lineno": 792
          },
          {
            "lineno": 796
          },
          {
            "lineno": 800
          },
          {
            "lineno": 801
          },
          {
            "lineno": 802
          },
          {
            "lineno": 803
          },
          {
            "lineno": 804
          },
          {
            "lineno": 811
          },
          {
            "lineno": 812
          },
          {
            "lineno": 813
          },
          {
            "lineno": 814
          },
          {
            "lineno": 815
          },
          {
            "lineno": 821
          },
          {
            "lineno": 826
          },
          {
            "lineno": 827
          },
          {
            "lineno": 829
          },
          {
            "lineno": 830
          },
          {
            "lineno": 831
          },
          {
            "lineno": 833
          },
          {
            "lineno": 834
          },
          {
            "lineno": 838
          },
          {
            "lineno": 843
          },
          {
            "lineno": 844
          },
          {
            "lineno": 845
          },
          {
            "lineno": 846
          },
          {
            "lineno": 847
          },
          {
            "lineno": 849
          },
          {
            "lineno": 854
          },
          {
            "lineno": 856
          },
          {
            "lineno": 858
          },
          {
            "lineno": 863
          },
          {
            "lineno": 883
          },
          {
            "lineno": 885
          },
          {
            "lineno": 887
          },
          {
            "lineno": 888
          },
          {
            "lineno": 889
          },
          {
            "lineno": 891
          },
          {
            "lineno": 892
          },
          {
            "lineno": 894
          },
          {
            "lineno": 897
          },
          {
            "lineno": 898
          },
          {
            "lineno": 899
          },
          {
            "lineno": 900
          },
          {
            "lineno": 906
          },
          {
            "lineno": 955
          },
          {
            "lineno": 957
          },
          {
            "lineno": 984
          },
          {
            "lineno": 985
          },
          {
            "lineno": 986
          },
          {
            "lineno": 987
          },
          {
            "lineno": 988
          },
          {
            "lineno": 991
          },
          {
            "lineno": 992
          },
          {
            "lineno": 993
          },
          {
            "lineno": 996
          },
          {
            "lineno": 999
          },
          {
            "lineno": 1025
          },
          {
            "lineno": 1026
          },
          {
            "lineno": 1027
          },
          {
            "lineno": 1030
          },
          {
            "lineno": 1031
          },
          {
            "lineno": 1035
          },
          {
            "lineno": 1036
          },
          {
            "lineno": 1037
          },
          {
            "lineno": 1040
          },
          {
            "lineno": 1043
          },
          {
            "lineno": 1059
          },
          {
            "lineno": 1060
          },
          {
            "lineno": 1061
          },
          {
            "lineno": 1063
          },
          {
            "lineno": 1075
          },
          {
            "lineno": 1086
          },
          {
            "lineno": 1087
          },
          {
            "lineno": 1088
          },
          {
            "lineno": 1089
          },
          {
            "lineno": 1090
          },
          {
            "lineno": 1092
          },
          {
            "lineno": 1116
          },
          {
            "lineno": 1142
          },
          {
            "lineno": 1144
          },
          {
            "lineno": 1145
          },
          {
            "lineno": 1148
          },
          {
            "lineno": 1149
          },
          {
            "lineno": 1152
          },
          {
            "lineno": 1153
          },
          {
            "lineno": 1156
          },
          {
            "lineno": 1157
          },
          {
            "lineno": 1160
          },
          {
            "lineno": 1168
          },
          {
            "lineno": 1172
          },
          {
            "lineno": 1174
          },
          {
            "lineno": 1175
          },
          {
            "lineno": 1179
          },
          {
            "lineno": 1180
          },
          {
            "lineno": 1182
          },
          {
            "lineno": 1183
          },
          {
            "lineno": 1184
          },
          {
            "lineno": 1188
          },
          {
            "lineno": 1189
          },
          {
            "lineno": 1193
          },
          {
            "lineno": 1194
          },
          {
            "lineno": 1195
          },
          {
            "lineno": 1196
          },
          {
            "lineno": 1200
          },
          {
            "lineno": 1204
          },
          {
            "lineno": 1207
          },
          {
            "lineno": 1208
          },
          {
            "lineno": 1209
          },
          {
            "lineno": 1212
          },
          {
            "lineno": 1216
          },
          {
            "lineno": 1217
          },
          {
            "lineno": 1221
          },
          {
            "lineno": 1230
          },
          {
            "lineno": 1231
          },
          {
            "lineno": 1232
          },
          {
            "lineno": 1234
          },
          {
            "lineno": 1235
          },
          {
            "lineno": 1236
          },
          {
            "lineno": 1238
          },
          {
            "lineno": 1239
          },
          {
            "lineno": 1240
          },
          {
            "lineno": 1243
          },
          {
            "lineno": 1245
          },
          {
            "lineno": 1246
          },
          {
            "lineno": 1247
          },
          {
            "lineno": 1248
          },
          {
            "lineno": 1251
          },
          {
            "lineno": 1254
          },
          {
            "lineno": 1275
          },
          {
            "lineno": 1276
          },
          {
            "lineno": 1278
          },
          {
            "lineno": 1279
          },
          {
            "lineno": 1280
          },
          {
            "lineno": 1281
          },
          {
            "lineno": 1284
          },
          {
            "lineno": 1285
          },
          {
            "lineno": 1286
          },
          {
            "lineno": 1289
          },
          {
            "lineno": 1290
          },
          {
            "lineno": 1293
          },
          {
            "lineno": 1294
          },
          {
            "lineno": 1297
          },
          {
            "lineno": 1298
          },
          {
            "lineno": 1302
          },
          {
            "lineno": 1305
          },
          {
            "lineno": 1306
          },
          {
            "lineno": 1307
          },
          {
            "lineno": 1308
          },
          {
            "lineno": 1310
          },
          {
            "lineno": 1321
          },
          {
            "lineno": 1323
          },
          {
            "lineno": 1324
          },
          {
            "lineno": 1325
          },
          {
            "lineno": 1326
          },
          {
            "lineno": 1328
          },
          {
            "lineno": 1329
          },
          {
            "lineno": 1330
          },
          {
            "lineno": 1332
          },
          {
            "lineno": 1335
          },
          {
            "lineno": 1337
          },
          {
            "lineno": 1339
          },
          {
            "lineno": 1340
          },
          {
            "lineno": 1342
          },
          {
            "lineno": 1343
          },
          {
            "lineno": 1344
          },
          {
            "lineno": 1347
          },
          {
            "lineno": 1352
          },
          {
            "lineno": 1353
          },
          {
            "lineno": 1354
          },
          {
            "lineno": 1356
          },
          {
            "lineno": 1357
          },
          {
            "lineno": 1358
          },
          {
            "lineno": 1359
          },
          {
            "lineno": 1362
          },
          {
            "lineno": 1364
          },
          {
            "lineno": 1365
          },
          {
            "lineno": 1366
          },
          {
            "lineno": 1379
          },
          {
            "lineno": 1380
          },
          {
            "lineno": 1381
          },
          {
            "lineno": 1382
          },
          {
            "lineno": 1395
          },
          {
            "lineno": 1396
          },
          {
            "lineno": 1397
          },
          {
            "lineno": 1399
          },
          {
            "lineno": 1413
          },
          {
            "lineno": 1415
          },
          {
            "lineno": 1417
          },
          {
            "lineno": 1418
          },
          {
            "lineno": 1419
          },
          {
            "lineno": 1420
          },
          {
            "lineno": 1425
          },
          {
            "lineno": 1427
          },
          {
            "lineno": 1453
          },
          {
            "lineno": 1454
          },
          {
            "lineno": 1456
          },
          {
            "lineno": 1459
          },
          {
            "lineno": 1465
          },
          {
            "lineno": 1466
          },
          {
            "lineno": 1467
          },
          {
            "lineno": 1468
          },
          {
            "lineno": 1469
          },
          {
            "lineno": 1470
          },
          {
            "lineno": 1471
          },
          {
            "lineno": 1474
          },
          {
            "lineno": 1494
          },
          {
            "lineno": 1495
          },
          {
            "lineno": 1497
          },
          {
            "lineno": 1500
          },
          {
            "lineno": 1506
          },
          {
            "lineno": 1507
          },
          {
            "lineno": 1508
          },
          {
            "lineno": 1509
          },
          {
            "lineno": 1512
          },
          {
            "lineno": 1524
          },
          {
            "lineno": 1541
          },
          {
            "lineno": 1542
          },
          {
            "lineno": 1543
          },
          {
            "lineno": 1545
          },
          {
            "lineno": 1548
          },
          {
            "lineno": 1549
          },
          {
            "lineno": 1551
          },
          {
            "lineno": 1555
          },
          {
            "lineno": 1557
          },
          {
            "lineno": 1559
          },
          {
            "lineno": 1560
          },
          {
            "lineno": 1564
          },
          {
            "lineno": 1565
          },
          {
            "lineno": 1566
          },
          {
            "lineno": 1567
          },
          {
            "lineno": 1568
          },
          {
            "lineno": 1569
          },
          {
            "lineno": 1570
          },
          {
            "lineno": 1572
          },
          {
            "lineno": 1590
          },
          {
            "lineno": 1591
          },
          {
            "lineno": 1593
          },
          {
            "lineno": 1596
          },
          {
            "lineno": 1601
          },
          {
            "lineno": 1604
          },
          {
            "lineno": 1613
          },
          {
            "lineno": 1616
          }
        ],
        "missing": 458,
        "seen": 1165,
        "seen_lines": [
          {
            "s": 5,
            "e": 13
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 25,
            "e": 25
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 49,
            "e": 49
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 57,
            "e": 57
          },
          {
            "s": 57,
            "e": 57
          },
          {
            "s": 57,
            "e": 57
          },
          {
            "s": 59,
            "e": 61
          },
          {
            "s": 60,
            "e": 60
          },
          {
            "s": 61,
            "e": 61
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 80,
            "e": 87
          },
          {
            "s": 81,
            "e": 81
          },
          {
            "s": 81,
            "e": 81
          },
          {
            "s": 81,
            "e": 81
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 86,
            "e": 86
          },
          {
            "s": 92,
            "e": 109
          },
          {
            "s": 93,
            "e": 93
          },
          {
            "s": 93,
            "e": 93
          },
          {
            "s": 93,
            "e": 93
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 101,
            "e": 102
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 106,
            "e": 106
          },
          {
            "s": 106,
            "e": 106
          },
          {
            "s": 124,
            "e": 202
          },
          {
            "s": 212,
            "e": 231
          },
          {
            "s": 236,
            "e": 336
          },
          {
            "s": 237,
            "e": 237
          },
          {
            "s": 237,
            "e": 237
          },
          {
            "s": 237,
            "e": 237
          },
          {
            "s": 238,
            "e": 238
          },
          {
            "s": 238,
            "e": 238
          },
          {
            "s": 239,
            "e": 239
          },
          {
            "s": 239,
            "e": 239
          },
          {
            "s": 239,
            "e": 239
          },
          {
            "s": 239,
            "e": 239
          },
          {
            "s": 239,
            "e": 239
          },
          {
            "s": 242,
            "e": 242
          },
          {
            "s": 244,
            "e": 244
          },
          {
            "s": 249,
            "e": 249
          },
          {
            "s": 254,
            "e": 254
          },
          {
            "s": 256,
            "e": 256
          },
          {
            "s": 256,
            "e": 256
          },
          {
            "s": 257,
            "e": 257
          },
          {
            "s": 262,
            "e": 262
          },
          {
            "s": 263,
            "e": 263
          },
          {
            "s": 265,
            "e": 265
          },
          {
            "s": 269,
            "e": 271
          },
          {
            "s": 271,
            "e": 271
          },
          {
            "s": 271,
            "e": 271
          },
          {
            "s": 271,
            "e": 271
          },
          {
            "s": 274,
            "e": 274
          },
          {
            "s": 274,
            "e": 274
          },
          {
            "s": 274,
            "e": 274
          },
          {
            "s": 274,
            "e": 274
          },
          {
            "s": 275,
            "e": 275
          },
          {
            "s": 278,
            "e": 278
          },
          {
            "s": 278,
            "e": 278
          },
          {
            "s": 278,
            "e": 278
          },
          {
            "s": 278,
            "e": 278
          },
          {
            "s": 278,
            "e": 278
          },
          {
            "s": 278,
            "e": 278
          },
          {
            "s": 279,
            "e": 279
          },
          {
            "s": 279,
            "e": 279
          },
          {
            "s": 282,
            "e": 282
          },
          {
            "s": 282,
            "e": 282
          },
          {
            "s": 286,
            "e": 286
          },
          {
            "s": 286,
            "e": 286
          },
          {
            "s": 286,
            "e": 286
          },
          {
            "s": 286,
            "e": 286
          },
          {
            "s": 287,
            "e": 287
          },
          {
            "s": 287,
            "e": 287
          },
          {
            "s": 287,
            "e": 287
          },
          {
            "s": 287,
            "e": 287
          },
          {
            "s": 287,
            "e": 287
          },
          {
            "s": 287,
            "e": 287
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 291,
            "e": 291
          },
          {
            "s": 291,
            "e": 291
          },
          {
            "s": 291,
            "e": 291
          },
          {
            "s": 291,
            "e": 291
          },
          {
            "s": 291,
            "e": 291
          },
          {
            "s": 291,
            "e": 291
          },
          {
            "s": 291,
            "e": 291
          },
          {
            "s": 294,
            "e": 294
          },
          {
            "s": 296,
            "e": 296
          },
          {
            "s": 296,
            "e": 296
          },
          {
            "s": 296,
            "e": 296
          },
          {
            "s": 296,
            "e": 296
          },
          {
            "s": 298,
            "e": 298
          },
          {
            "s": 300,
            "e": 300
          },
          {
            "s": 300,
            "e": 300
          },
          {
            "s": 303,
            "e": 303
          },
          {
            "s": 305,
            "e": 305
          },
          {
            "s": 305,
            "e": 305
          },
          {
            "s": 305,
            "e": 305
          },
          {
            "s": 313,
            "e": 324
          },
          {
            "s": 313,
            "e": 324
          },
          {
            "s": 314,
            "e": 314
          },
          {
            "s": 314,
            "e": 314
          },
          {
            "s": 314,
            "e": 314
          },
          {
            "s": 315,
            "e": 315
          },
          {
            "s": 315,
            "e": 315
          },
          {
            "s": 317,
            "e": 317
          },
          {
            "s": 319,
            "e": 319
          },
          {
            "s": 322,
            "e": 322
          },
          {
            "s": 322,
            "e": 322
          },
          {
            "s": 326,
            "e": 326
          },
          {
            "s": 326,
            "e": 326
          },
          {
            "s": 328,
            "e": 328
          },
          {
            "s": 328,
            "e": 328
          },
          {
            "s": 328,
            "e": 328
          },
          {
            "s": 351,
            "e": 374
          },
          {
            "s": 392,
            "e": 470
          },
          {
            "s": 485,
            "e": 509
          },
          {
            "s": 523,
            "e": 564
          },
          {
            "s": 524,
            "e": 524
          },
          {
            "s": 524,
            "e": 524
          },
          {
            "s": 525,
            "e": 525
          },
          {
            "s": 525,
            "e": 525
          },
          {
            "s": 526,
            "e": 526
          },
          {
            "s": 526,
            "e": 526
          },
          {
            "s": 527,
            "e": 527
          },
          {
            "s": 527,
            "e": 527
          },
          {
            "s": 530,
            "e": 534
          },
          {
            "s": 537,
            "e": 537
          },
          {
            "s": 537,
            "e": 537
          },
          {
            "s": 540,
            "e": 540
          },
          {
            "s": 541,
            "e": 541
          },
          {
            "s": 545,
            "e": 553
          },
          {
            "s": 547,
            "e": 547
          },
          {
            "s": 550,
            "e": 550
          },
          {
            "s": 555,
            "e": 555
          },
          {
            "s": 556,
            "e": 563
          },
          {
            "s": 556,
            "e": 563
          },
          {
            "s": 557,
            "e": 557
          },
          {
            "s": 557,
            "e": 557
          },
          {
            "s": 557,
            "e": 557
          },
          {
            "s": 558,
            "e": 558
          },
          {
            "s": 558,
            "e": 558
          },
          {
            "s": 560,
            "e": 560
          },
          {
            "s": 561,
            "e": 561
          },
          {
            "s": 561,
            "e": 561
          },
          {
            "s": 562,
            "e": 562
          },
          {
            "s": 562,
            "e": 562
          },
          {
            "s": 574,
            "e": 576
          },
          {
            "s": 595,
            "e": 688
          },
          {
            "s": 688,
            "e": 699
          },
          {
            "s": 699,
            "e": 702
          },
          {
            "s": 748,
            "e": 873
          },
          {
            "s": 749,
            "e": 756
          },
          {
            "s": 750,
            "e": 750
          },
          {
            "s": 751,
            "e": 751
          },
          {
            "s": 751,
            "e": 751
          },
          {
            "s": 751,
            "e": 751
          },
          {
            "s": 752,
            "e": 752
          },
          {
            "s": 752,
            "e": 752
          },
          {
            "s": 753,
            "e": 753
          },
          {
            "s": 753,
            "e": 753
          },
          {
            "s": 753,
            "e": 753
          },
          {
            "s": 753,
            "e": 753
          },
          {
            "s": 755,
            "e": 755
          },
          {
            "s": 755,
            "e": 755
          },
          {
            "s": 755,
            "e": 755
          },
          {
            "s": 755,
            "e": 755
          },
          {
            "s": 756,
            "e": 756
          },
          {
            "s": 756,
            "e": 756
          },
          {
            "s": 756,
            "e": 756
          },
          {
            "s": 758,
            "e": 758
          },
          {
            "s": 758,
            "e": 758
          },
          {
            "s": 758,
            "e": 758
          },
          {
            "s": 758,
            "e": 758
          },
          {
            "s": 764,
            "e": 764
          },
          {
            "s": 764,
            "e": 764
          },
          {
            "s": 764,
            "e": 764
          },
          {
            "s": 781,
            "e": 781
          },
          {
            "s": 781,
            "e": 781
          },
          {
            "s": 781,
            "e": 781
          },
          {
            "s": 781,
            "e": 781
          },
          {
            "s": 791,
            "e": 791
          },
          {
            "s": 791,
            "e": 791
          },
          {
            "s": 796,
            "e": 796
          },
          {
            "s": 796,
            "e": 796
          },
          {
            "s": 796,
            "e": 796
          },
          {
            "s": 796,
            "e": 796
          },
          {
            "s": 798,
            "e": 798
          },
          {
            "s": 799,
            "e": 799
          },
          {
            "s": 809,
            "e": 809
          },
          {
            "s": 810,
            "e": 810
          },
          {
            "s": 820,
            "e": 820
          },
          {
            "s": 820,
            "e": 820
          },
          {
            "s": 820,
            "e": 820
          },
          {
            "s": 826,
            "e": 826
          },
          {
            "s": 826,
            "e": 826
          },
          {
            "s": 826,
            "e": 826
          },
          {
            "s": 842,
            "e": 842
          },
          {
            "s": 842,
            "e": 842
          },
          {
            "s": 842,
            "e": 842
          },
          {
            "s": 843,
            "e": 843
          },
          {
            "s": 843,
            "e": 843
          },
          {
            "s": 843,
            "e": 843
          },
          {
            "s": 843,
            "e": 843
          },
          {
            "s": 843,
            "e": 843
          },
          {
            "s": 844,
            "e": 844
          },
          {
            "s": 844,
            "e": 844
          },
          {
            "s": 844,
            "e": 844
          },
          {
            "s": 844,
            "e": 844
          },
          {
            "s": 844,
            "e": 844
          },
          {
            "s": 845,
            "e": 845
          },
          {
            "s": 845,
            "e": 845
          },
          {
            "s": 845,
            "e": 845
          },
          {
            "s": 845,
            "e": 845
          },
          {
            "s": 846,
            "e": 846
          },
          {
            "s": 846,
            "e": 846
          },
          {
            "s": 846,
            "e": 846
          },
          {
            "s": 847,
            "e": 847
          },
          {
            "s": 847,
            "e": 847
          },
          {
            "s": 847,
            "e": 847
          },
          {
            "s": 847,
            "e": 847
          },
          {
            "s": 847,
            "e": 847
          },
          {
            "s": 847,
            "e": 847
          },
          {
            "s": 847,
            "e": 847
          },
          {
            "s": 849,
            "e": 849
          },
          {
            "s": 849,
            "e": 849
          },
          {
            "s": 849,
            "e": 849
          },
          {
            "s": 852,
            "e": 852
          },
          {
            "s": 854,
            "e": 854
          },
          {
            "s": 856,
            "e": 856
          },
          {
            "s": 856,
            "e": 856
          },
          {
            "s": 858,
            "e": 858
          },
          {
            "s": 858,
            "e": 858
          },
          {
            "s": 858,
            "e": 858
          },
          {
            "s": 861,
            "e": 861
          },
          {
            "s": 868,
            "e": 871
          },
          {
            "s": 882,
            "e": 907
          },
          {
            "s": 948,
            "e": 959
          },
          {
            "s": 949,
            "e": 949
          },
          {
            "s": 950,
            "e": 950
          },
          {
            "s": 950,
            "e": 950
          },
          {
            "s": 951,
            "e": 951
          },
          {
            "s": 951,
            "e": 951
          },
          {
            "s": 952,
            "e": 952
          },
          {
            "s": 952,
            "e": 952
          },
          {
            "s": 952,
            "e": 952
          },
          {
            "s": 952,
            "e": 952
          },
          {
            "s": 952,
            "e": 952
          },
          {
            "s": 954,
            "e": 958
          },
          {
            "s": 954,
            "e": 958
          },
          {
            "s": 955,
            "e": 955
          },
          {
            "s": 955,
            "e": 955
          },
          {
            "s": 956,
            "e": 956
          },
          {
            "s": 956,
            "e": 956
          },
          {
            "s": 956,
            "e": 956
          },
          {
            "s": 982,
            "e": 1000
          },
          {
            "s": 1023,
            "e": 1044
          },
          {
            "s": 1057,
            "e": 1064
          },
          {
            "s": 1074,
            "e": 1076
          },
          {
            "s": 1085,
            "e": 1095
          },
          {
            "s": 1105,
            "e": 1105
          },
          {
            "s": 1115,
            "e": 1141
          },
          {
            "s": 1141,
            "e": 1223
          },
          {
            "s": 1229,
            "e": 1255
          },
          {
            "s": 1229,
            "e": 1255
          },
          {
            "s": 1274,
            "e": 1369
          },
          {
            "s": 1378,
            "e": 1385
          },
          {
            "s": 1394,
            "e": 1402
          },
          {
            "s": 1412,
            "e": 1452
          },
          {
            "s": 1452,
            "e": 1493
          },
          {
            "s": 1493,
            "e": 1522
          },
          {
            "s": 1522,
            "e": 1539
          },
          {
            "s": 1539,
            "e": 1589
          },
          {
            "s": 1589,
            "e": 1610
          },
          {
            "s": 1610,
            "e": 1618
          },
          {
            "s": 1610,
            "e": 1618
          },
          {
            "s": 1623,
            "e": 1623
          }
        ],
        "total": 1623,
        "coverage": {
          "44": {
            "partial": true,
            "source": "  if(!(this instanceof Collection)) return new Collection(db, collectionName, pkFactory, options);",
            "missing": [
              {
                "startCol": 36,
                "endCol": 98
              }
            ]
          },
          "52": {
            "partial": true,
            "source": "  this.slaveOk = options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk;",
            "missing": [
              {
                "startCol": 75,
                "endCol": 90
              }
            ]
          },
          "53": {
            "partial": true,
            "source": "  this.serializeFunctions = options == null || options.serializeFunctions == null ? db.serializeFunctions : options.serializeFunctions;",
            "missing": [
              {
                "startCol": 108,
                "endCol": 134
              }
            ]
          },
          "54": {
            "partial": true,
            "source": "  this.raw = options == null || options.raw == null ? db.raw : options.raw;",
            "missing": [
              {
                "startCol": 63,
                "endCol": 74
              }
            ]
          },
          "56": {
            "partial": true,
            "source": "  this.readPreference = options == null || options.readPreference == null ? db.serverConfig.readPreference : options.readPreference;",
            "missing": [
              {
                "startCol": 109,
                "endCol": 131
              }
            ]
          },
          "57": {
            "partial": true,
            "source": "  this.readPreference = this.readPreference == null ? 'primary' : this.readPreference;",
            "missing": [
              {
                "startCol": 54,
                "endCol": 63
              }
            ]
          },
          "81": {
            "partial": true,
            "source": "  if ('function' === typeof options) callback = options, options = {};",
            "missing": [
              {
                "startCol": 37,
                "endCol": 70
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "    throw Error(\"collection name must be a String\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 10,
                "endCol": 51
              }
            ]
          },
          "98": {
            "partial": false,
            "source": "    throw Error(\"collection names cannot be empty\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 10,
                "endCol": 51
              }
            ]
          },
          "102": {
            "partial": false,
            "source": "      collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 56
              }
            ]
          },
          "103": {
            "partial": false,
            "source": "    throw Error(\"collection names must not contain '$'\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 57
              },
              {
                "startCol": 10,
                "endCol": 56
              }
            ]
          },
          "107": {
            "partial": false,
            "source": "    throw Error(\"collection names must not start or end with '.'\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 67
              },
              {
                "startCol": 10,
                "endCol": 66
              }
            ]
          },
          "125": {
            "partial": false,
            "source": "  if ('function' === typeof selector) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 36
              },
              {
                "startCol": 21,
                "endCol": 36
              },
              {
                "startCol": 28,
                "endCol": 36
              }
            ]
          },
          "126": {
            "partial": false,
            "source": "    callback = selector;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "127": {
            "partial": false,
            "source": "    selector = options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 28
              }
            ]
          },
          "128": {
            "partial": false,
            "source": "  } else if ('function' === typeof options) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 42
              },
              {
                "startCol": 28,
                "endCol": 42
              },
              {
                "startCol": 35,
                "endCol": 42
              }
            ]
          },
          "129": {
            "partial": false,
            "source": "    callback = options;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "130": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "134": {
            "partial": false,
            "source": "  if(options == null) options = {};",
            "missing": [
              {
                "startCol": 5,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "135": {
            "partial": false,
            "source": "  if(!('function' === typeof callback)) callback = null;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 38
              },
              {
                "startCol": 6,
                "endCol": 38
              },
              {
                "startCol": 22,
                "endCol": 37
              },
              {
                "startCol": 29,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 56
              }
            ]
          },
          "137": {
            "partial": false,
            "source": "  selector = selector == null ? {} : selector;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 13,
                "endCol": 21
              },
              {
                "startCol": 32,
                "endCol": 34
              },
              {
                "startCol": 37,
                "endCol": 45
              }
            ]
          },
          "139": {
            "partial": false,
            "source": "  var flags = 0 | (options.single ? 1 : 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 14,
                "endCol": 42
              },
              {
                "startCol": 36,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 41
              }
            ]
          },
          "142": {
            "partial": false,
            "source": "  var dbName = options['dbName'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              }
            ]
          },
          "144": {
            "partial": false,
            "source": "  if(dbName == null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 11
              }
            ]
          },
          "145": {
            "partial": false,
            "source": "    dbName = this.db.databaseName;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "149": {
            "partial": false,
            "source": "  var deleteCommand = new DeleteCommand(",
            "missing": [
              {}
            ]
          },
          "150": {
            "partial": false,
            "source": "      this.db",
            "missing": [
              {}
            ]
          },
          "151": {
            "partial": false,
            "source": "    , dbName + \".\" + this.collectionName",
            "missing": [
              {
                "startCol": 6,
                "endCol": 12
              },
              {}
            ]
          },
          "152": {
            "partial": false,
            "source": "    , selector",
            "missing": [
              {}
            ]
          },
          "153": {
            "partial": false,
            "source": "    , flags);",
            "missing": [
              {}
            ]
          },
          "155": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "156": {
            "partial": false,
            "source": "  var errorOptions = options.safe != null ? options.safe : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 21,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 63
              }
            ]
          },
          "157": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "158": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "161": {
            "partial": false,
            "source": "  if(errorOptions && errorOptions['safe'] != false && typeof callback !== 'function') throw new Error(\"safe cannot be used without a callback\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 21,
                "endCol": 50
              },
              {
                "startCol": 54,
                "endCol": 69
              },
              {
                "startCol": 61,
                "endCol": 69
              },
              {
                "startCol": 86,
                "endCol": 144
              }
            ]
          },
          "163": {
            "partial": false,
            "source": "  if (options && options.safe || this.opts.safe != null || this.db.strict) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 13
              },
              {
                "startCol": 33,
                "endCol": 55
              }
            ]
          },
          "165": {
            "partial": false,
            "source": "    var commandOptions = {read:false};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 38
              }
            ]
          },
          "167": {
            "partial": false,
            "source": "    if(errorOptions == null) commandOptions['async'] = true;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 19
              },
              {
                "startCol": 29,
                "endCol": 60
              }
            ]
          },
          "169": {
            "partial": false,
            "source": "    commandOptions['safe'] = true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "171": {
            "partial": false,
            "source": "    if(typeof errorOptions == 'object') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 26
              },
              {
                "startCol": 14,
                "endCol": 26
              }
            ]
          },
          "172": {
            "partial": false,
            "source": "      var keys = Object.keys(errorOptions);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 43
              },
              {
                "startCol": 17,
                "endCol": 42
              }
            ]
          },
          "173": {
            "partial": false,
            "source": "      for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 38,
                "endCol": 41
              }
            ]
          },
          "174": {
            "partial": false,
            "source": "        commandOptions[keys[i]] = errorOptions[keys[i]];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 56
              }
            ]
          },
          "179": {
            "partial": false,
            "source": "    this.db._executeRemoveCommand(deleteCommand, commandOptions, function (err, error) {",
            "missing": [
              {}
            ]
          },
          "180": {
            "partial": false,
            "source": "      error = error && error.documents;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 39
              },
              {
                "startCol": 14,
                "endCol": 19
              }
            ]
          },
          "181": {
            "partial": false,
            "source": "      if(!callback) return;",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 18
              },
              {
                "startCol": 10,
                "endCol": 18
              },
              {
                "startCol": 20,
                "endCol": 27
              }
            ]
          },
          "182": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "183": {
            "partial": false,
            "source": "      if(err) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              }
            ]
          },
          "184": {
            "partial": false,
            "source": "        callback(err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 21
              },
              {}
            ]
          },
          "185": {
            "partial": false,
            "source": "      } else if(error[0].err || error[0].errmsg) {",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 47
              }
            ]
          },
          "186": {
            "partial": false,
            "source": "        callback(self.db.wrap(error[0]));",
            "missing": [
              {
                "startCol": 8,
                "endCol": 40
              },
              {
                "startCol": 17,
                "endCol": 39
              },
              {}
            ]
          },
          "187": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "188": {
            "partial": false,
            "source": "        callback(null, error[0].n);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 34
              }
            ]
          },
          "189": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "190": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "192": {
            "partial": false,
            "source": "    var result = this.db._executeRemoveCommand(deleteCommand);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 62
              },
              {
                "startCol": 17,
                "endCol": 61
              }
            ]
          },
          "194": {
            "partial": false,
            "source": "    if (!callback) return;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 17
              },
              {
                "startCol": 9,
                "endCol": 17
              },
              {
                "startCol": 19,
                "endCol": 26
              }
            ]
          },
          "196": {
            "partial": false,
            "source": "    if (result instanceof Error) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 14
              },
              {
                "startCol": 26,
                "endCol": 31
              }
            ]
          },
          "197": {
            "partial": false,
            "source": "      return callback(result);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 30
              },
              {
                "startCol": 13,
                "endCol": 29
              }
            ]
          },
          "200": {
            "partial": false,
            "source": "    return callback();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 21
              }
            ]
          },
          "213": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "215": {
            "partial": false,
            "source": "  checkCollectionName(newName);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 30
              }
            ]
          },
          "217": {
            "partial": false,
            "source": "  self.db._executeQueryCommand(DbCommand.createRenameCollectionCommand(self.db, self.collectionName, newName), function(err, result) {",
            "missing": [
              {},
              {
                "startCol": 31,
                "endCol": 109
              }
            ]
          },
          "218": {
            "partial": false,
            "source": "    if(err == null && result.documents[0].ok == 1) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {},
              {
                "startCol": 22,
                "endCol": 49
              }
            ]
          },
          "219": {
            "partial": false,
            "source": "      if(callback != null) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 17
              }
            ]
          },
          "220": {
            "partial": false,
            "source": "        // Set current object to point to the new name",
            "missing": [
              {}
            ]
          },
          "221": {
            "partial": false,
            "source": "        self.collectionName = newName;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 38
              },
              {}
            ]
          },
          "222": {
            "partial": false,
            "source": "        // Return the current collection",
            "missing": [
              {}
            ]
          },
          "223": {
            "partial": false,
            "source": "        callback(null, self);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "224": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "225": {
            "partial": false,
            "source": "    } else if(result.documents[0].errmsg != null) {",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 48
              }
            ]
          },
          "226": {
            "partial": false,
            "source": "      if(callback != null) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 17
              }
            ]
          },
          "227": {
            "partial": false,
            "source": "        err != null ? callback(err, null) : callback(self.db.wrap(result.documents[0]), null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 11
              },
              {
                "startCol": 22,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 93
              },
              {},
              {
                "startCol": 53,
                "endCol": 86
              }
            ]
          },
          "228": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "229": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "230": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "237": {
            "partial": true,
            "source": "  if('function' === typeof options) callback = options, options = {};",
            "missing": [
              {
                "startCol": 36,
                "endCol": 69
              }
            ]
          },
          "238": {
            "partial": true,
            "source": "  if(options == null) options = {};",
            "missing": [
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "245": {
            "partial": false,
            "source": "    insertFlags['keepGoing'] = options['keepGoing'];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              }
            ]
          },
          "250": {
            "partial": false,
            "source": "    insertFlags['continueOnError'] = options['continueOnError'];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 64
              }
            ]
          },
          "287": {
            "partial": true,
            "source": "  errorOptions = errorOptions == null && self.opts.safe != null ? self.opts.safe : errorOptions;",
            "missing": [
              {
                "startCol": 66,
                "endCol": 80
              }
            ]
          },
          "291": {
            "partial": true,
            "source": "  if(errorOptions && errorOptions['safe'] != false && typeof callback !== 'function') throw new Error(\"safe cannot be used without a callback\");",
            "missing": [
              {
                "startCol": 86,
                "endCol": 144
              }
            ]
          },
          "300": {
            "partial": true,
            "source": "    if(errorOptions == null) commandOptions['async'] = true;",
            "missing": [
              {
                "startCol": 29,
                "endCol": 60
              }
            ]
          },
          "306": {
            "partial": false,
            "source": "      var keys = Object.keys(errorOptions);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 43
              },
              {
                "startCol": 17,
                "endCol": 42
              }
            ]
          },
          "307": {
            "partial": false,
            "source": "      for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 38,
                "endCol": 41
              }
            ]
          },
          "308": {
            "partial": false,
            "source": "        commandOptions[keys[i]] = errorOptions[keys[i]];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 56
              }
            ]
          },
          "315": {
            "partial": true,
            "source": "      if(!callback) return;",
            "missing": [
              {
                "startCol": 20,
                "endCol": 27
              }
            ]
          },
          "318": {
            "partial": false,
            "source": "        callback(err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 21
              }
            ]
          },
          "320": {
            "partial": false,
            "source": "        callback(self.db.wrap(error[0]));",
            "missing": [
              {
                "startCol": 8,
                "endCol": 40
              },
              {
                "startCol": 17,
                "endCol": 39
              }
            ]
          },
          "330": {
            "partial": false,
            "source": "    if(result instanceof Error) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 13
              },
              {
                "startCol": 25,
                "endCol": 30
              }
            ]
          },
          "331": {
            "partial": false,
            "source": "      return callback(result);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 30
              },
              {
                "startCol": 13,
                "endCol": 29
              }
            ]
          },
          "334": {
            "partial": false,
            "source": "    return callback(null, docs);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 32
              },
              {
                "startCol": 11,
                "endCol": 31
              }
            ]
          },
          "352": {
            "partial": false,
            "source": "  if('function' === typeof options) callback = options, options = null;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 34
              },
              {
                "startCol": 20,
                "endCol": 34
              },
              {
                "startCol": 27,
                "endCol": 34
              },
              {
                "startCol": 36,
                "endCol": 71
              }
            ]
          },
          "353": {
            "partial": false,
            "source": "  if(options == null) options = {};",
            "missing": [
              {
                "startCol": 5,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "354": {
            "partial": false,
            "source": "  if(!('function' === typeof callback)) callback = null;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 38
              },
              {
                "startCol": 6,
                "endCol": 38
              },
              {
                "startCol": 22,
                "endCol": 37
              },
              {
                "startCol": 29,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 56
              }
            ]
          },
          "356": {
            "partial": false,
            "source": "  var errorOptions = options.safe != null ? options.safe : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 65
              },
              {
                "startCol": 21,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 64
              }
            ]
          },
          "357": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "359": {
            "partial": false,
            "source": "  var id = doc['_id'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "361": {
            "partial": false,
            "source": "  if(id) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 7
              }
            ]
          },
          "362": {
            "partial": false,
            "source": "    this.update({ _id: id }, doc, { upsert: true, safe: errorOptions }, callback);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 81
              }
            ]
          },
          "364": {
            "partial": false,
            "source": "    this.insert(doc, { safe: errorOptions }, callback && function (err, docs) {",
            "missing": [
              {},
              {
                "startCol": 45,
                "endCol": 53
              }
            ]
          },
          "365": {
            "partial": false,
            "source": "      if (err) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 13
              },
              {
                "startCol": 15,
                "endCol": 42
              },
              {
                "startCol": 22,
                "endCol": 41
              }
            ]
          },
          "366": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "367": {
            "partial": false,
            "source": "      if (Array.isArray(docs)) {",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 29
              }
            ]
          },
          "368": {
            "partial": false,
            "source": "        callback(err, docs[0]);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 30
              },
              {}
            ]
          },
          "369": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "370": {
            "partial": false,
            "source": "        callback(err, docs);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 27
              }
            ]
          },
          "371": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "372": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "393": {
            "partial": false,
            "source": "  if('function' === typeof options) callback = options, options = null;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 34
              },
              {
                "startCol": 20,
                "endCol": 34
              },
              {
                "startCol": 27,
                "endCol": 34
              },
              {
                "startCol": 36,
                "endCol": 71
              }
            ]
          },
          "394": {
            "partial": false,
            "source": "  if(options == null) options = {};",
            "missing": [
              {
                "startCol": 5,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "395": {
            "partial": false,
            "source": "  if(!('function' === typeof callback)) callback = null;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 38
              },
              {
                "startCol": 6,
                "endCol": 38
              },
              {
                "startCol": 22,
                "endCol": 37
              },
              {
                "startCol": 29,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 56
              }
            ]
          },
          "398": {
            "partial": false,
            "source": "  var dbName = options['dbName'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              }
            ]
          },
          "400": {
            "partial": false,
            "source": "  if(dbName == null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 11
              }
            ]
          },
          "401": {
            "partial": false,
            "source": "    dbName = this.db.databaseName;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "406": {
            "partial": false,
            "source": "  if(options['serializeFunctions'] != null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 42
              }
            ]
          },
          "407": {
            "partial": false,
            "source": "    options['serializeFunctions'] = options['serializeFunctions'];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 66
              }
            ]
          },
          "409": {
            "partial": false,
            "source": "    options['serializeFunctions'] = this.serializeFunctions;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 60
              }
            ]
          },
          "412": {
            "partial": false,
            "source": "  var updateCommand = new UpdateCommand(",
            "missing": [
              {}
            ]
          },
          "413": {
            "partial": false,
            "source": "      this.db",
            "missing": [
              {}
            ]
          },
          "414": {
            "partial": false,
            "source": "    , dbName + \".\" + this.collectionName",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 12
              }
            ]
          },
          "415": {
            "partial": false,
            "source": "    , selector",
            "missing": [
              {}
            ]
          },
          "416": {
            "partial": false,
            "source": "    , document",
            "missing": [
              {}
            ]
          },
          "417": {
            "partial": false,
            "source": "    , options);",
            "missing": [
              {}
            ]
          },
          "419": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "421": {
            "partial": false,
            "source": "  var errorOptions = (options && options.safe != null) ? options.safe : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 77
              },
              {
                "startCol": 21,
                "endCol": 54
              },
              {
                "startCol": 22,
                "endCol": 29
              },
              {
                "startCol": 33,
                "endCol": 53
              },
              {
                "startCol": 57,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 76
              }
            ]
          },
          "422": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "423": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "426": {
            "partial": false,
            "source": "  if(errorOptions && errorOptions['safe'] != false && typeof callback !== 'function') throw new Error(\"safe cannot be used without a callback\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 21,
                "endCol": 50
              },
              {
                "startCol": 54,
                "endCol": 69
              },
              {
                "startCol": 61,
                "endCol": 69
              },
              {
                "startCol": 86,
                "endCol": 144
              }
            ]
          },
          "429": {
            "partial": false,
            "source": "  if(errorOptions && errorOptions != false) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 21,
                "endCol": 33
              }
            ]
          },
          "431": {
            "partial": false,
            "source": "    var commandOptions = {read:false};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 38
              }
            ]
          },
          "433": {
            "partial": false,
            "source": "    if(errorOptions == null) commandOptions['async'] = true;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 19
              },
              {
                "startCol": 29,
                "endCol": 60
              }
            ]
          },
          "435": {
            "partial": false,
            "source": "    commandOptions['safe'] = true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "437": {
            "partial": false,
            "source": "    if(typeof errorOptions == 'object') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 26
              },
              {
                "startCol": 14,
                "endCol": 26
              }
            ]
          },
          "438": {
            "partial": false,
            "source": "      var keys = Object.keys(errorOptions);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 43
              },
              {
                "startCol": 17,
                "endCol": 42
              }
            ]
          },
          "439": {
            "partial": false,
            "source": "      for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 38,
                "endCol": 41
              }
            ]
          },
          "440": {
            "partial": false,
            "source": "        commandOptions[keys[i]] = errorOptions[keys[i]];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 56
              }
            ]
          },
          "445": {
            "partial": false,
            "source": "    this.db._executeUpdateCommand(updateCommand, commandOptions, function (err, error) {",
            "missing": [
              {}
            ]
          },
          "446": {
            "partial": false,
            "source": "      error = error && error.documents;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 39
              },
              {
                "startCol": 14,
                "endCol": 19
              }
            ]
          },
          "447": {
            "partial": false,
            "source": "      if(!callback) return;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 18
              },
              {
                "startCol": 20,
                "endCol": 27
              },
              {},
              {
                "startCol": 9,
                "endCol": 18
              }
            ]
          },
          "448": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "449": {
            "partial": false,
            "source": "      if(err) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              },
              {}
            ]
          },
          "450": {
            "partial": false,
            "source": "        callback(err);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 21
              }
            ]
          },
          "451": {
            "partial": false,
            "source": "      } else if(error[0].err || error[0].errmsg) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 47
              },
              {}
            ]
          },
          "452": {
            "partial": false,
            "source": "        callback(self.db.wrap(error[0]));",
            "missing": [
              {
                "startCol": 8,
                "endCol": 40
              },
              {
                "startCol": 17,
                "endCol": 39
              },
              {}
            ]
          },
          "453": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "454": {
            "partial": false,
            "source": "        // Perform the callback",
            "missing": [
              {}
            ]
          },
          "455": {
            "partial": false,
            "source": "        callback(null, error[0].n, error[0]);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 44
              }
            ]
          },
          "456": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "457": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "460": {
            "partial": false,
            "source": "    var result = this.db._executeUpdateCommand(updateCommand);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 62
              },
              {
                "startCol": 17,
                "endCol": 61
              }
            ]
          },
          "462": {
            "partial": false,
            "source": "    if (!callback) return;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 17
              },
              {
                "startCol": 9,
                "endCol": 17
              },
              {
                "startCol": 19,
                "endCol": 26
              }
            ]
          },
          "464": {
            "partial": false,
            "source": "    if (result instanceof Error) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 14
              },
              {
                "startCol": 26,
                "endCol": 31
              }
            ]
          },
          "465": {
            "partial": false,
            "source": "      return callback(result);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 30
              },
              {
                "startCol": 13,
                "endCol": 29
              }
            ]
          },
          "468": {
            "partial": false,
            "source": "    return callback();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              },
              {
                "startCol": 11,
                "endCol": 21
              }
            ]
          },
          "486": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "487": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "488": {
            "partial": false,
            "source": "  query = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 24,
                "endCol": 36
              },
              {
                "startCol": 39,
                "endCol": 41
              }
            ]
          },
          "489": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "491": {
            "partial": false,
            "source": "  var mapCommandHash = {",
            "missing": [
              {}
            ]
          },
          "492": {
            "partial": false,
            "source": "      'distinct': this.collectionName",
            "missing": [
              {}
            ]
          },
          "493": {
            "partial": false,
            "source": "    , 'query': query",
            "missing": [
              {}
            ]
          },
          "494": {
            "partial": false,
            "source": "    , 'key': key",
            "missing": [
              {}
            ]
          },
          "495": {
            "partial": false,
            "source": "  };",
            "missing": [
              {}
            ]
          },
          "498": {
            "partial": false,
            "source": "  var readPreference = options['readPreference'] ? options['readPreference'] : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 85
              },
              {
                "startCol": 51,
                "endCol": 76
              },
              {
                "startCol": 79,
                "endCol": 84
              }
            ]
          },
          "500": {
            "partial": false,
            "source": "  var cmd = DbCommand.createDbSlaveOkCommand(this.db, mapCommandHash);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 70
              },
              {
                "startCol": 12,
                "endCol": 69
              }
            ]
          },
          "502": {
            "partial": false,
            "source": "  this.db._executeQueryCommand(cmd, {read:readPreference}, function (err, result) {",
            "missing": [
              {}
            ]
          },
          "503": {
            "partial": false,
            "source": "    if(err)",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              }
            ]
          },
          "504": {
            "partial": false,
            "source": "      return callback(err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 27
              },
              {
                "startCol": 13,
                "endCol": 26
              },
              {}
            ]
          },
          "505": {
            "partial": false,
            "source": "    if(result.documents[0].ok != 1)",
            "missing": [
              {
                "startCol": 7,
                "endCol": 34
              },
              {}
            ]
          },
          "506": {
            "partial": false,
            "source": "      return callback(new Error(result.documents[0].errmsg));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 61
              },
              {
                "startCol": 13,
                "endCol": 60
              },
              {}
            ]
          },
          "507": {
            "partial": false,
            "source": "    callback(null, result.documents[0].values);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 46
              },
              {}
            ]
          },
          "508": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "526": {
            "partial": true,
            "source": "  query = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 24,
                "endCol": 36
              }
            ]
          },
          "527": {
            "partial": true,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 26,
                "endCol": 38
              }
            ]
          },
          "537": {
            "partial": true,
            "source": "  var readPreference = options['readPreference'] ? options['readPreference'] : false;",
            "missing": [
              {
                "startCol": 51,
                "endCol": 76
              }
            ]
          },
          "542": {
            "partial": false,
            "source": "    queryOptions |= QueryCommand.OPTS_SLAVE;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 44
              }
            ]
          },
          "558": {
            "partial": true,
            "source": "    if(!callback) return;",
            "missing": [
              {
                "startCol": 18,
                "endCol": 25
              }
            ]
          },
          "560": {
            "partial": true,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 32
              }
            ]
          },
          "561": {
            "partial": true,
            "source": "    if (result[0].ok != 1 || result[0].errmsg) return callback(self.db.wrap(result[0]));",
            "missing": [
              {
                "startCol": 47,
                "endCol": 88
              },
              {
                "startCol": 54,
                "endCol": 87
              },
              {
                "startCol": 63,
                "endCol": 86
              }
            ]
          },
          "575": {
            "partial": false,
            "source": "  this.db.dropCollection(this.collectionName, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              }
            ]
          },
          "596": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "597": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "598": {
            "partial": false,
            "source": "  sort = args.length ? args.shift() : [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 41
              },
              {
                "startCol": 23,
                "endCol": 35
              },
              {
                "startCol": 38,
                "endCol": 40
              }
            ]
          },
          "599": {
            "partial": false,
            "source": "  doc = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 22,
                "endCol": 34
              },
              {
                "startCol": 37,
                "endCol": 41
              }
            ]
          },
          "600": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "601": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "603": {
            "partial": false,
            "source": "  var queryObject = {",
            "missing": [
              {}
            ]
          },
          "604": {
            "partial": false,
            "source": "      'findandmodify': this.collectionName",
            "missing": [
              {}
            ]
          },
          "605": {
            "partial": false,
            "source": "    , 'query': query",
            "missing": [
              {}
            ]
          },
          "606": {
            "partial": false,
            "source": "    , 'sort': utils.formattedOrderClause(sort)",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 46
              }
            ]
          },
          "607": {
            "partial": false,
            "source": "  };",
            "missing": [
              {}
            ]
          },
          "609": {
            "partial": false,
            "source": "  queryObject.new = options.new ? 1 : 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 40
              },
              {
                "startCol": 34,
                "endCol": 35
              },
              {
                "startCol": 38,
                "endCol": 39
              }
            ]
          },
          "610": {
            "partial": false,
            "source": "  queryObject.remove = options.remove ? 1 : 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 40,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 45
              }
            ]
          },
          "611": {
            "partial": false,
            "source": "  queryObject.upsert = options.upsert ? 1 : 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 40,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 45
              }
            ]
          },
          "614": {
            "partial": false,
            "source": "    queryObject.fields = options.fields;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              }
            ]
          },
          "617": {
            "partial": false,
            "source": "  if (doc && !options.remove) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 9
              },
              {
                "startCol": 13,
                "endCol": 28
              }
            ]
          },
          "618": {
            "partial": false,
            "source": "    queryObject.update = doc;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "623": {
            "partial": false,
            "source": "  if(options['serializeFunctions'] != null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 42
              }
            ]
          },
          "624": {
            "partial": false,
            "source": "    options['serializeFunctions'] = options['serializeFunctions'];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 66
              }
            ]
          },
          "626": {
            "partial": false,
            "source": "    options['serializeFunctions'] = this.serializeFunctions;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 60
              }
            ]
          },
          "630": {
            "partial": false,
            "source": "  var errorOptions = (options && options.safe != null) ? options.safe : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 77
              },
              {
                "startCol": 21,
                "endCol": 54
              },
              {
                "startCol": 22,
                "endCol": 29
              },
              {
                "startCol": 33,
                "endCol": 53
              },
              {
                "startCol": 57,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 76
              }
            ]
          },
          "631": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "632": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "635": {
            "partial": false,
            "source": "  if(errorOptions != null && typeof errorOptions == 'object') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 29,
                "endCol": 48
              },
              {
                "startCol": 36,
                "endCol": 48
              }
            ]
          },
          "637": {
            "partial": false,
            "source": "    var commands = [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "639": {
            "partial": false,
            "source": "    commands.push(DbCommand.createDbCommand(this.db, queryObject, options));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 75
              },
              {
                "startCol": 18,
                "endCol": 74
              }
            ]
          },
          "641": {
            "partial": false,
            "source": "    var chainedCommands = errorOptions != null ? true : false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 62
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 49,
                "endCol": 53
              },
              {
                "startCol": 56,
                "endCol": 61
              }
            ]
          },
          "643": {
            "partial": false,
            "source": "    if(chainedCommands) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              }
            ]
          },
          "644": {
            "partial": false,
            "source": "      commands.push(DbCommand.createGetLastErrorCommand(errorOptions, this.db));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 79
              },
              {
                "startCol": 20,
                "endCol": 78
              }
            ]
          },
          "648": {
            "partial": false,
            "source": "    this.db._executeQueryCommand(commands, {read:false}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "649": {
            "partial": false,
            "source": "      if(err != null) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 43
              },
              {
                "startCol": 29,
                "endCol": 42
              }
            ]
          },
          "650": {
            "partial": false,
            "source": "      result = result && result.documents;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 42
              },
              {
                "startCol": 15,
                "endCol": 21
              }
            ]
          },
          "651": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "652": {
            "partial": false,
            "source": "      if(result[0].err != null) return callback(self.db.wrap(result[0]), null);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 30
              },
              {
                "startCol": 32,
                "endCol": 79
              },
              {
                "startCol": 48,
                "endCol": 71
              },
              {},
              {
                "startCol": 39,
                "endCol": 78
              }
            ]
          },
          "653": {
            "partial": false,
            "source": "      // Workaround due to 1.8.X returning an error on no matching object",
            "missing": [
              {}
            ]
          },
          "654": {
            "partial": false,
            "source": "      // while 2.0.X does not not, making 2.0.X behaviour standard",
            "missing": [
              {}
            ]
          },
          "655": {
            "partial": false,
            "source": "      if(result[0].errmsg != null && !result[0].errmsg.match(eErrorMessages))",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 76
              },
              {
                "startCol": 37,
                "endCol": 76
              },
              {
                "startCol": 38,
                "endCol": 76
              }
            ]
          },
          "656": {
            "partial": false,
            "source": "        return callback(self.db.wrap(result[0]), null, result[0]);",
            "missing": [
              {},
              {
                "startCol": 24,
                "endCol": 47
              },
              {
                "startCol": 15,
                "endCol": 65
              },
              {
                "startCol": 8,
                "endCol": 66
              }
            ]
          },
          "657": {
            "partial": false,
            "source": "      return callback(null, result[0].value, result[0]);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 56
              },
              {
                "startCol": 13,
                "endCol": 55
              }
            ]
          },
          "658": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "661": {
            "partial": false,
            "source": "    var command = DbCommand.createDbCommand(this.db, queryObject, options)",
            "missing": [
              {},
              {
                "startCol": 18,
                "endCol": 74
              }
            ]
          },
          "662": {
            "partial": false,
            "source": "    // Execute command",
            "missing": [
              {}
            ]
          },
          "663": {
            "partial": false,
            "source": "    this.db._executeQueryCommand(command, {read:false}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "664": {
            "partial": false,
            "source": "      if(err != null) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 43
              },
              {
                "startCol": 29,
                "endCol": 42
              }
            ]
          },
          "665": {
            "partial": false,
            "source": "      result = result && result.documents;",
            "missing": [
              {
                "startCol": 15,
                "endCol": 41
              },
              {},
              {
                "startCol": 6,
                "endCol": 42
              }
            ]
          },
          "666": {
            "partial": false,
            "source": "      if(result[0].errmsg != null && !result[0].errmsg.match(eErrorMessages))",
            "missing": [
              {
                "startCol": 9,
                "endCol": 33
              },
              {
                "startCol": 37,
                "endCol": 76
              },
              {},
              {
                "startCol": 38,
                "endCol": 76
              }
            ]
          },
          "667": {
            "partial": false,
            "source": "        return callback(self.db.wrap(result[0]), null, result[0]);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 66
              },
              {
                "startCol": 15,
                "endCol": 65
              },
              {},
              {
                "startCol": 24,
                "endCol": 47
              }
            ]
          },
          "668": {
            "partial": false,
            "source": "      // If we have an error return it",
            "missing": [
              {}
            ]
          },
          "669": {
            "partial": false,
            "source": "      if(result[0].lastErrorObject && result[0].lastErrorObject.err != null) return callback(self.db.wrap(result[0].lastErrorObject), null);",
            "missing": [
              {
                "startCol": 84,
                "endCol": 139
              },
              {},
              {
                "startCol": 93,
                "endCol": 132
              },
              {
                "startCol": 77,
                "endCol": 140
              },
              {
                "startCol": 9,
                "endCol": 75
              },
              {
                "startCol": 38,
                "endCol": 75
              }
            ]
          },
          "670": {
            "partial": false,
            "source": "      return callback(null, result[0].value, result[0]);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 56
              },
              {
                "startCol": 13,
                "endCol": 55
              }
            ]
          },
          "671": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "689": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "690": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "691": {
            "partial": false,
            "source": "  sort = args.length ? args.shift() : [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 41
              },
              {
                "startCol": 23,
                "endCol": 35
              },
              {
                "startCol": 38,
                "endCol": 40
              }
            ]
          },
          "692": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "694": {
            "partial": false,
            "source": "  options['remove'] = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "696": {
            "partial": false,
            "source": "  this.findAndModify(query, sort, null, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 58
              }
            ]
          },
          "753": {
            "partial": true,
            "source": "    , callback = has_callback ? args.pop() : (has_weird_callback ? args.shift() : null)",
            "missing": [
              {
                "startCol": 32,
                "endCol": 42
              },
              {
                "startCol": 67,
                "endCol": 79
              }
            ]
          },
          "756": {
            "partial": true,
            "source": "    , fields = len >= 2 ? args[1] : undefined;",
            "missing": [
              {
                "startCol": 26,
                "endCol": 33
              }
            ]
          },
          "760": {
            "partial": false,
            "source": "    selector = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 18
              }
            ]
          },
          "761": {
            "partial": false,
            "source": "    options = args[0];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "764": {
            "partial": true,
            "source": "  if(len === 2 && !Array.isArray(fields)) {",
            "missing": [
              {
                "startCol": 18,
                "endCol": 40
              },
              {
                "startCol": 19,
                "endCol": 40
              }
            ]
          },
          "765": {
            "partial": false,
            "source": "    var fieldKeys = Object.getOwnPropertyNames(fields);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 55
              },
              {
                "startCol": 20,
                "endCol": 54
              }
            ]
          },
          "766": {
            "partial": false,
            "source": "    var is_option = false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "768": {
            "partial": false,
            "source": "    for(var i = 0; i < fieldKeys.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 41,
                "endCol": 44
              }
            ]
          },
          "769": {
            "partial": false,
            "source": "      if(testForFields[fieldKeys[i]] != null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 44
              }
            ]
          },
          "770": {
            "partial": false,
            "source": "        is_option = true;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 25
              }
            ]
          },
          "775": {
            "partial": false,
            "source": "    if(is_option) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 16
              }
            ]
          },
          "776": {
            "partial": false,
            "source": "      options = fields;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 23
              }
            ]
          },
          "777": {
            "partial": false,
            "source": "      fields = undefined;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 25
              }
            ]
          },
          "779": {
            "partial": false,
            "source": "      options = {};",
            "missing": [
              {
                "startCol": 6,
                "endCol": 19
              }
            ]
          },
          "781": {
            "partial": true,
            "source": "  } else if(len === 2 && Array.isArray(fields) && !Array.isArray(fields[0])) {",
            "missing": [
              {
                "startCol": 25,
                "endCol": 46
              },
              {
                "startCol": 50,
                "endCol": 75
              },
              {
                "startCol": 51,
                "endCol": 75
              }
            ]
          },
          "782": {
            "partial": false,
            "source": "    var newFields = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "784": {
            "partial": false,
            "source": "    for(var i = 0; i < fields.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 38,
                "endCol": 41
              }
            ]
          },
          "785": {
            "partial": false,
            "source": "      newFields[fields[i]] = 1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 31
              }
            ]
          },
          "788": {
            "partial": false,
            "source": "    fields = newFields;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "792": {
            "partial": false,
            "source": "    options = args[2];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "796": {
            "partial": true,
            "source": "  selector = selector == null ? {} : selector;",
            "missing": [
              {
                "startCol": 32,
                "endCol": 34
              }
            ]
          },
          "800": {
            "partial": false,
            "source": "    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 85
              },
              {
                "startCol": 22,
                "endCol": 48
              },
              {
                "startCol": 34,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 84
              }
            ]
          },
          "801": {
            "partial": false,
            "source": "    if(object_size != object.length)  {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              }
            ]
          },
          "802": {
            "partial": false,
            "source": "      var error = new Error(\"query selector raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 147
              },
              {
                "startCol": 28,
                "endCol": 114
              },
              {
                "startCol": 128,
                "endCol": 139
              }
            ]
          },
          "803": {
            "partial": false,
            "source": "      error.name = 'MongoError';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "804": {
            "partial": false,
            "source": "      throw error;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "811": {
            "partial": false,
            "source": "    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 85
              },
              {
                "startCol": 22,
                "endCol": 48
              },
              {
                "startCol": 34,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 84
              }
            ]
          },
          "812": {
            "partial": false,
            "source": "    if(object_size != object.length)  {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              }
            ]
          },
          "813": {
            "partial": false,
            "source": "      var error = new Error(\"query fields raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 145
              },
              {
                "startCol": 28,
                "endCol": 112
              },
              {
                "startCol": 126,
                "endCol": 137
              }
            ]
          },
          "814": {
            "partial": false,
            "source": "      error.name = 'MongoError';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "815": {
            "partial": false,
            "source": "      throw error;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "821": {
            "partial": false,
            "source": "    selector = {_id:selector};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              }
            ]
          },
          "826": {
            "partial": true,
            "source": "  if(options && options.fields && !(Buffer.isBuffer(options.fields))) {",
            "missing": [
              {
                "startCol": 34,
                "endCol": 68
              },
              {
                "startCol": 35,
                "endCol": 68
              }
            ]
          },
          "827": {
            "partial": false,
            "source": "    fields = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "829": {
            "partial": false,
            "source": "    if(Array.isArray(options.fields)) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 36
              }
            ]
          },
          "830": {
            "partial": false,
            "source": "      if(!options.fields.length) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 31
              }
            ]
          },
          "831": {
            "partial": false,
            "source": "        fields['_id'] = 1;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 26
              }
            ]
          },
          "833": {
            "partial": false,
            "source": "        for (var i = 0, l = options.fields.length; i < l; i++) {",
            "missing": [
              {
                "startCol": 51,
                "endCol": 52
              },
              {
                "startCol": 55,
                "endCol": 56
              },
              {
                "startCol": 58,
                "endCol": 61
              }
            ]
          },
          "834": {
            "partial": false,
            "source": "          fields[options.fields[i]] = 1;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 40
              }
            ]
          },
          "838": {
            "partial": false,
            "source": "      fields = options.fields;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 30
              }
            ]
          },
          "843": {
            "partial": true,
            "source": "  options.skip = len > 3 ? args[2] : options.skip ? options.skip : 0;",
            "missing": [
              {
                "startCol": 27,
                "endCol": 34
              },
              {
                "startCol": 52,
                "endCol": 64
              }
            ]
          },
          "844": {
            "partial": true,
            "source": "  options.limit = len > 3 ? args[3] : options.limit ? options.limit : 0;",
            "missing": [
              {
                "startCol": 28,
                "endCol": 35
              },
              {
                "startCol": 54,
                "endCol": 67
              }
            ]
          },
          "845": {
            "partial": true,
            "source": "  options.raw = options.raw != null && typeof options.raw === 'boolean' ? options.raw : this.raw;",
            "missing": [
              {
                "startCol": 39,
                "endCol": 57
              },
              {
                "startCol": 74,
                "endCol": 85
              }
            ]
          },
          "846": {
            "partial": true,
            "source": "  options.hint = options.hint != null ? normalizeHintField(options.hint) : this.internalHint;",
            "missing": [
              {
                "startCol": 40,
                "endCol": 72
              }
            ]
          },
          "847": {
            "partial": true,
            "source": "  options.timeout = len == 5 ? args[4] : typeof options.timeout === 'undefined' ? undefined : options.timeout;",
            "missing": [
              {
                "startCol": 31,
                "endCol": 38
              },
              {
                "startCol": 94,
                "endCol": 109
              }
            ]
          },
          "849": {
            "partial": true,
            "source": "  options.slaveOk = options.slaveOk != null ? options.slaveOk : this.db.slaveOk;",
            "missing": [
              {
                "startCol": 46,
                "endCol": 61
              }
            ]
          },
          "854": {
            "partial": true,
            "source": "  if(o[\"read\"] != null) o[\"readPreference\"] = o[\"read\"];",
            "missing": [
              {
                "startCol": 24,
                "endCol": 56
              }
            ]
          },
          "856": {
            "partial": true,
            "source": "  o.read = o[\"readPreference\"] ? o.readPreference : this.readPreference;",
            "missing": [
              {
                "startCol": 33,
                "endCol": 49
              }
            ]
          },
          "858": {
            "partial": true,
            "source": "  if(o.read == \"secondary\" || o.read == \"secondaryOnly\") options.slaveOk = true;",
            "missing": [
              {
                "startCol": 57,
                "endCol": 80
              }
            ]
          },
          "863": {
            "partial": false,
            "source": "    callback(null, new Cursor(this.db, this, selector, fields, o.skip, o.limit",
            "missing": [
              {}
            ]
          },
          "864": {
            "partial": false,
            "source": "      , o.sort, o.hint, o.explain, o.snapshot, o.timeout, o.tailable, o.batchSize",
            "missing": [
              {}
            ]
          },
          "865": {
            "partial": false,
            "source": "      , o.slaveOk, o.raw, o.read, o.returnKey, o.maxScan, o.min, o.max, o.showDiskLoc, o.comment, o.awaitdata",
            "missing": [
              {}
            ]
          },
          "866": {
            "partial": false,
            "source": "      , o.numberOfRetries, o.dbName, o.tailableRetryInterval, o.exhaust));",
            "missing": [
              {}
            ]
          },
          "883": {
            "partial": false,
            "source": "  var finalHint = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "885": {
            "partial": false,
            "source": "  if (null != hint) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              },
              {
                "startCol": 14,
                "endCol": 18
              }
            ]
          },
          "887": {
            "partial": false,
            "source": "      case String:",
            "missing": [
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "888": {
            "partial": false,
            "source": "        finalHint = {};",
            "missing": [
              {
                "startCol": 8,
                "endCol": 23
              }
            ]
          },
          "889": {
            "partial": false,
            "source": "        finalHint[hint] = 1;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "891": {
            "partial": false,
            "source": "      case Object:",
            "missing": [
              {
                "startCol": 11,
                "endCol": 17
              }
            ]
          },
          "892": {
            "partial": false,
            "source": "        finalHint = {};",
            "missing": [
              {
                "startCol": 8,
                "endCol": 23
              }
            ]
          },
          "894": {
            "partial": false,
            "source": "          finalHint[name] = hint[name];",
            "missing": [
              {
                "startCol": 10,
                "endCol": 39
              }
            ]
          },
          "897": {
            "partial": false,
            "source": "      case Array:",
            "missing": [
              {
                "startCol": 11,
                "endCol": 16
              }
            ]
          },
          "898": {
            "partial": false,
            "source": "        finalHint = {};",
            "missing": [
              {
                "startCol": 8,
                "endCol": 23
              }
            ]
          },
          "899": {
            "partial": false,
            "source": "        hint.forEach(function(param) {",
            "missing": [
              {}
            ]
          },
          "900": {
            "partial": false,
            "source": "          finalHint[param] = 1;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 31
              },
              {}
            ]
          },
          "901": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "906": {
            "partial": false,
            "source": "  return finalHint;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "955": {
            "partial": true,
            "source": "    if(err != null) return callback(err instanceof Error ? err : self.db.wrap(new Error(err)), null);",
            "missing": [
              {
                "startCol": 20,
                "endCol": 101
              },
              {
                "startCol": 27,
                "endCol": 100
              },
              {
                "startCol": 36,
                "endCol": 39
              },
              {
                "startCol": 51,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 62
              },
              {
                "startCol": 65,
                "endCol": 93
              }
            ]
          },
          "957": {
            "partial": false,
            "source": "    callback(null, null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "984": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "985": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "986": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "987": {
            "partial": false,
            "source": "  options = typeof callback === 'function' ? options : callback;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 12,
                "endCol": 27
              },
              {
                "startCol": 19,
                "endCol": 27
              },
              {
                "startCol": 45,
                "endCol": 52
              },
              {
                "startCol": 55,
                "endCol": 63
              }
            ]
          },
          "988": {
            "partial": false,
            "source": "  options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 12,
                "endCol": 19
              },
              {
                "startCol": 30,
                "endCol": 32
              },
              {
                "startCol": 35,
                "endCol": 42
              }
            ]
          },
          "991": {
            "partial": false,
            "source": "  var errorOptions = options.safe != null ? options.safe : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 21,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 63
              }
            ]
          },
          "992": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "993": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "996": {
            "partial": false,
            "source": "  if(errorOptions != null && errorOptions != false && (typeof callback !== 'function' && typeof options !== 'function')) throw new Error(\"safe cannot be used without a callback\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 29,
                "endCol": 41
              },
              {
                "startCol": 54,
                "endCol": 119
              },
              {
                "startCol": 55,
                "endCol": 70
              },
              {
                "startCol": 62,
                "endCol": 70
              },
              {
                "startCol": 89,
                "endCol": 103
              },
              {
                "startCol": 96,
                "endCol": 103
              },
              {
                "startCol": 121,
                "endCol": 179
              }
            ]
          },
          "999": {
            "partial": false,
            "source": "  this.db.createIndex(this.collectionName, fieldOrSpec, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              }
            ]
          },
          "1025": {
            "partial": false,
            "source": "  if (typeof callback === 'undefined' && typeof options === 'function') {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 21
              },
              {
                "startCol": 13,
                "endCol": 21
              },
              {
                "startCol": 41,
                "endCol": 55
              },
              {
                "startCol": 48,
                "endCol": 55
              }
            ]
          },
          "1026": {
            "partial": false,
            "source": "    callback = options;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "1027": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1030": {
            "partial": false,
            "source": "  if (options == null) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 13
              }
            ]
          },
          "1031": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1035": {
            "partial": false,
            "source": "  var errorOptions = options.safe != null ? options.safe : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 21,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 63
              }
            ]
          },
          "1036": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "1037": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 95
              }
            ]
          },
          "1040": {
            "partial": false,
            "source": "  if(errorOptions != null && errorOptions != false && (typeof callback !== 'function' && typeof options !== 'function')) throw new Error(\"safe cannot be used without a callback\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 29,
                "endCol": 41
              },
              {
                "startCol": 54,
                "endCol": 119
              },
              {
                "startCol": 55,
                "endCol": 70
              },
              {
                "startCol": 62,
                "endCol": 70
              },
              {
                "startCol": 89,
                "endCol": 103
              },
              {
                "startCol": 96,
                "endCol": 103
              },
              {
                "startCol": 121,
                "endCol": 179
              }
            ]
          },
          "1043": {
            "partial": false,
            "source": "  this.db.ensureIndex(this.collectionName, fieldOrSpec, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              }
            ]
          },
          "1059": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1060": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1061": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1063": {
            "partial": false,
            "source": "  this.db.indexInformation(this.collectionName, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 66
              }
            ]
          },
          "1075": {
            "partial": false,
            "source": "  this.db.dropIndex(this.collectionName, name, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 56
              }
            ]
          },
          "1086": {
            "partial": false,
            "source": "  this.db.dropIndex(this.collectionName, '*', function (err, result) {",
            "missing": [
              {}
            ]
          },
          "1087": {
            "partial": false,
            "source": "    if(err != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {}
            ]
          },
          "1088": {
            "partial": false,
            "source": "      callback(err, false);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 26
              }
            ]
          },
          "1089": {
            "partial": false,
            "source": "    } else if(result.documents[0].errmsg == null) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 48
              },
              {}
            ]
          },
          "1090": {
            "partial": false,
            "source": "      callback(null, true);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 26
              },
              {}
            ]
          },
          "1091": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1092": {
            "partial": false,
            "source": "      callback(new Error(result.documents[0].errmsg), false);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 60
              }
            ]
          },
          "1093": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1094": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1116": {
            "partial": false,
            "source": "  this.db.reIndex(this.collectionName, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              }
            ]
          },
          "1142": {
            "partial": false,
            "source": "  if ('function' === typeof options) callback = options, options = {};",
            "missing": [
              {
                "startCol": 6,
                "endCol": 35
              },
              {
                "startCol": 21,
                "endCol": 35
              },
              {
                "startCol": 28,
                "endCol": 35
              },
              {
                "startCol": 37,
                "endCol": 70
              }
            ]
          },
          "1144": {
            "partial": false,
            "source": "  if(null == options.out) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 24
              }
            ]
          },
          "1145": {
            "partial": false,
            "source": "    throw new Error(\"the out option parameter must be defined, see mongodb docs for possible values\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 102
              }
            ]
          },
          "1148": {
            "partial": false,
            "source": "  if ('function' === typeof map) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 31
              },
              {
                "startCol": 21,
                "endCol": 31
              },
              {
                "startCol": 28,
                "endCol": 31
              }
            ]
          },
          "1149": {
            "partial": false,
            "source": "    map = map.toString();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              },
              {
                "startCol": 10,
                "endCol": 24
              }
            ]
          },
          "1152": {
            "partial": false,
            "source": "  if ('function' === typeof reduce) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 34
              },
              {
                "startCol": 21,
                "endCol": 34
              },
              {
                "startCol": 28,
                "endCol": 34
              }
            ]
          },
          "1153": {
            "partial": false,
            "source": "    reduce = reduce.toString();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              },
              {
                "startCol": 13,
                "endCol": 30
              }
            ]
          },
          "1156": {
            "partial": false,
            "source": "  if ('function' === typeof options.finalize) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 44
              },
              {
                "startCol": 21,
                "endCol": 44
              }
            ]
          },
          "1157": {
            "partial": false,
            "source": "    options.finalize = options.finalize.toString();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 23,
                "endCol": 50
              }
            ]
          },
          "1160": {
            "partial": false,
            "source": "  var mapCommandHash = {",
            "missing": [
              {}
            ]
          },
          "1161": {
            "partial": false,
            "source": "      mapreduce: this.collectionName",
            "missing": [
              {}
            ]
          },
          "1162": {
            "partial": false,
            "source": "    , map: map",
            "missing": [
              {}
            ]
          },
          "1163": {
            "partial": false,
            "source": "    , reduce: reduce",
            "missing": [
              {}
            ]
          },
          "1164": {
            "partial": false,
            "source": "  };",
            "missing": [
              {}
            ]
          },
          "1168": {
            "partial": false,
            "source": "    mapCommandHash[name] = options[name];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "1172": {
            "partial": false,
            "source": "  var readPreference = options['readPreference'] ? options['readPreference'] : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 85
              },
              {
                "startCol": 51,
                "endCol": 76
              },
              {
                "startCol": 79,
                "endCol": 84
              }
            ]
          },
          "1174": {
            "partial": false,
            "source": "  if(readPreference != false && options['out'] != 'inline') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              },
              {
                "startCol": 32,
                "endCol": 58
              }
            ]
          },
          "1175": {
            "partial": false,
            "source": "    throw new Error(\"a readPreference can only be provided when performing an inline mapReduce\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 97
              }
            ]
          },
          "1179": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "1180": {
            "partial": false,
            "source": "  var cmd = DbCommand.createDbCommand(this.db, mapCommandHash);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 63
              },
              {
                "startCol": 12,
                "endCol": 62
              }
            ]
          },
          "1182": {
            "partial": false,
            "source": "  this.db._executeQueryCommand(cmd, {read:readPreference}, function (err, result) {",
            "missing": [
              {}
            ]
          },
          "1183": {
            "partial": false,
            "source": "    if (err) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 11
              },
              {}
            ]
          },
          "1184": {
            "partial": false,
            "source": "      return callback(err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 27
              },
              {
                "startCol": 13,
                "endCol": 26
              },
              {}
            ]
          },
          "1185": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1186": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1187": {
            "partial": false,
            "source": "    //",
            "missing": [
              {}
            ]
          },
          "1188": {
            "partial": false,
            "source": "    if (1 != result.documents[0].ok || result.documents[0].err || result.documents[0].errmsg) {",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 35
              }
            ]
          },
          "1189": {
            "partial": false,
            "source": "      return callback(self.db.wrap(result.documents[0]));",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 57
              },
              {
                "startCol": 13,
                "endCol": 56
              },
              {
                "startCol": 22,
                "endCol": 55
              }
            ]
          },
          "1190": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1191": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1192": {
            "partial": false,
            "source": "    // Create statistics value",
            "missing": [
              {}
            ]
          },
          "1193": {
            "partial": false,
            "source": "    var stats = {};",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 19
              }
            ]
          },
          "1194": {
            "partial": false,
            "source": "    if(result.documents[0].timeMillis) stats['processtime'] = result.documents[0].timeMillis;",
            "missing": [
              {
                "startCol": 39,
                "endCol": 93
              },
              {}
            ]
          },
          "1195": {
            "partial": false,
            "source": "    if(result.documents[0].counts) stats['counts'] = result.documents[0].counts;",
            "missing": [
              {
                "startCol": 35,
                "endCol": 80
              },
              {}
            ]
          },
          "1196": {
            "partial": false,
            "source": "    if(result.documents[0].timing) stats['timing'] = result.documents[0].timing;",
            "missing": [
              {
                "startCol": 35,
                "endCol": 80
              },
              {}
            ]
          },
          "1197": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1198": {
            "partial": false,
            "source": "    // invoked with inline?",
            "missing": [
              {}
            ]
          },
          "1199": {
            "partial": false,
            "source": "    if(result.documents[0].results) {",
            "missing": [
              {}
            ]
          },
          "1200": {
            "partial": false,
            "source": "      return callback(null, result.documents[0].results, stats);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 64
              },
              {},
              {
                "startCol": 13,
                "endCol": 63
              }
            ]
          },
          "1201": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1202": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1203": {
            "partial": false,
            "source": "    // The returned collection",
            "missing": [
              {}
            ]
          },
          "1204": {
            "partial": false,
            "source": "    var collection = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              },
              {}
            ]
          },
          "1205": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1206": {
            "partial": false,
            "source": "    // If we have an object it's a different db",
            "missing": [
              {}
            ]
          },
          "1207": {
            "partial": false,
            "source": "    if(result.documents[0].result != null && typeof result.documents[0].result == 'object') {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 41
              },
              {
                "startCol": 45,
                "endCol": 78
              }
            ]
          },
          "1208": {
            "partial": false,
            "source": "      var doc = result.documents[0].result;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 43
              }
            ]
          },
          "1209": {
            "partial": false,
            "source": "      collection = self.db.db(doc.db).collection(doc.collection);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 65
              },
              {
                "startCol": 19,
                "endCol": 64
              },
              {
                "startCol": 29,
                "endCol": 37
              },
              {}
            ]
          },
          "1210": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1211": {
            "partial": false,
            "source": "      // Create a collection object that wraps the result collection",
            "missing": [
              {}
            ]
          },
          "1212": {
            "partial": false,
            "source": "      collection = self.db.collection(result.documents[0].result)",
            "missing": [
              {
                "startCol": 19,
                "endCol": 65
              },
              {}
            ]
          },
          "1213": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1214": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1215": {
            "partial": false,
            "source": "    // If we wish for no verbosity",
            "missing": [
              {}
            ]
          },
          "1216": {
            "partial": false,
            "source": "    if(options['verbose'] == null || !options['verbose']) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 33
              },
              {},
              {
                "startCol": 37,
                "endCol": 56
              }
            ]
          },
          "1217": {
            "partial": false,
            "source": "      return callback(err, collection);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 39
              },
              {
                "startCol": 13,
                "endCol": 38
              }
            ]
          },
          "1218": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1219": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1220": {
            "partial": false,
            "source": "    // Return stats as third set of values",
            "missing": [
              {}
            ]
          },
          "1221": {
            "partial": false,
            "source": "    callback(err, collection, stats);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 36
              }
            ]
          },
          "1222": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1230": {
            "partial": false,
            "source": "  var c = db[ns].find(condition);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              },
              {
                "startCol": 10,
                "endCol": 32
              }
            ]
          },
          "1231": {
            "partial": false,
            "source": "  var map = new Map();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "1232": {
            "partial": false,
            "source": "  var reduce_function = reduce;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 31
              }
            ]
          },
          "1234": {
            "partial": false,
            "source": "  while (c.hasNext()) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 20
              }
            ]
          },
          "1235": {
            "partial": false,
            "source": "    var obj = c.next();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "1236": {
            "partial": false,
            "source": "    var key = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1238": {
            "partial": false,
            "source": "    for (var i = 0, len = keys.length; i < len; ++i) {",
            "missing": [
              {
                "startCol": 39,
                "endCol": 40
              },
              {
                "startCol": 43,
                "endCol": 46
              },
              {
                "startCol": 48,
                "endCol": 51
              }
            ]
          },
          "1239": {
            "partial": false,
            "source": "      var k = keys[i];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "1240": {
            "partial": false,
            "source": "      key[k] = obj[k];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "1243": {
            "partial": false,
            "source": "    var aggObj = map.get(key);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              },
              {
                "startCol": 17,
                "endCol": 29
              }
            ]
          },
          "1245": {
            "partial": false,
            "source": "    if (aggObj == null) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 14
              }
            ]
          },
          "1246": {
            "partial": false,
            "source": "      var newObj = Object.extend({}, key);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 42
              },
              {
                "startCol": 19,
                "endCol": 41
              }
            ]
          },
          "1247": {
            "partial": false,
            "source": "      aggObj = Object.extend(newObj, initial);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 46
              },
              {
                "startCol": 15,
                "endCol": 45
              }
            ]
          },
          "1248": {
            "partial": false,
            "source": "      map.put(key, aggObj);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 26
              }
            ]
          },
          "1251": {
            "partial": false,
            "source": "    reduce_function(obj, aggObj);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 32
              }
            ]
          },
          "1254": {
            "partial": false,
            "source": "  return { \"result\": map.values() };",
            "missing": [
              {
                "startCol": 2,
                "endCol": 36
              },
              {
                "startCol": 21,
                "endCol": 33
              }
            ]
          },
          "1275": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 3);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1276": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1278": {
            "partial": false,
            "source": "  reduce = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 25,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 44
              }
            ]
          },
          "1279": {
            "partial": false,
            "source": "  finalize = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 47
              },
              {
                "startCol": 27,
                "endCol": 39
              },
              {
                "startCol": 42,
                "endCol": 46
              }
            ]
          },
          "1280": {
            "partial": false,
            "source": "  command = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 45
              }
            ]
          },
          "1281": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1284": {
            "partial": false,
            "source": "  if(!(typeof finalize == 'function')) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 37
              },
              {
                "startCol": 6,
                "endCol": 37
              },
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "1285": {
            "partial": false,
            "source": "    command = finalize;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "1286": {
            "partial": false,
            "source": "    finalize = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "1289": {
            "partial": false,
            "source": "  if (!Array.isArray(keys) && keys instanceof Object && typeof(keys) !== 'function' && !(keys instanceof Code)) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 26
              },
              {
                "startCol": 7,
                "endCol": 26
              },
              {
                "startCol": 30,
                "endCol": 34
              },
              {
                "startCol": 46,
                "endCol": 52
              },
              {
                "startCol": 56,
                "endCol": 68
              },
              {
                "startCol": 62,
                "endCol": 68
              },
              {
                "startCol": 87,
                "endCol": 110
              },
              {
                "startCol": 88,
                "endCol": 110
              },
              {
                "startCol": 89,
                "endCol": 93
              },
              {
                "startCol": 105,
                "endCol": 109
              }
            ]
          },
          "1290": {
            "partial": false,
            "source": "    keys = Object.keys(keys);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              },
              {
                "startCol": 11,
                "endCol": 28
              }
            ]
          },
          "1293": {
            "partial": false,
            "source": "  if(typeof reduce === 'function') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 18
              },
              {
                "startCol": 12,
                "endCol": 18
              }
            ]
          },
          "1294": {
            "partial": false,
            "source": "    reduce = reduce.toString();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              },
              {
                "startCol": 13,
                "endCol": 30
              }
            ]
          },
          "1297": {
            "partial": false,
            "source": "  if(typeof finalize === 'function') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 20
              },
              {
                "startCol": 12,
                "endCol": 20
              }
            ]
          },
          "1298": {
            "partial": false,
            "source": "    finalize = finalize.toString();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              },
              {
                "startCol": 15,
                "endCol": 34
              }
            ]
          },
          "1302": {
            "partial": false,
            "source": "  command = command == null ? true : command;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 12,
                "endCol": 19
              },
              {
                "startCol": 30,
                "endCol": 34
              },
              {
                "startCol": 37,
                "endCol": 44
              }
            ]
          },
          "1305": {
            "partial": false,
            "source": "  if(command) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 12
              }
            ]
          },
          "1306": {
            "partial": false,
            "source": "    var reduceFunction = reduce instanceof Code",
            "missing": [
              {},
              {
                "startCol": 25,
                "endCol": 31
              },
              {
                "startCol": 43,
                "endCol": 47
              }
            ]
          },
          "1307": {
            "partial": false,
            "source": "        ? reduce",
            "missing": [
              {
                "startCol": 10,
                "endCol": 16
              },
              {}
            ]
          },
          "1308": {
            "partial": false,
            "source": "        : new Code(reduce);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 26
              }
            ]
          },
          "1310": {
            "partial": false,
            "source": "    var selector = {",
            "missing": [
              {}
            ]
          },
          "1311": {
            "partial": false,
            "source": "      group: {",
            "missing": [
              {}
            ]
          },
          "1312": {
            "partial": false,
            "source": "          'ns': this.collectionName",
            "missing": [
              {}
            ]
          },
          "1313": {
            "partial": false,
            "source": "        , '$reduce': reduceFunction",
            "missing": [
              {}
            ]
          },
          "1314": {
            "partial": false,
            "source": "        , 'cond': condition",
            "missing": [
              {}
            ]
          },
          "1315": {
            "partial": false,
            "source": "        , 'initial': initial",
            "missing": [
              {}
            ]
          },
          "1316": {
            "partial": false,
            "source": "        , 'out': \"inline\"",
            "missing": [
              {}
            ]
          },
          "1317": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "1318": {
            "partial": false,
            "source": "    };",
            "missing": [
              {}
            ]
          },
          "1321": {
            "partial": false,
            "source": "    if(finalize != null) selector.group['finalize'] = finalize;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 15
              },
              {
                "startCol": 25,
                "endCol": 63
              }
            ]
          },
          "1323": {
            "partial": false,
            "source": "    if ('function' === typeof keys || keys instanceof Code) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 34
              },
              {
                "startCol": 23,
                "endCol": 34
              },
              {
                "startCol": 30,
                "endCol": 34
              },
              {
                "startCol": 38,
                "endCol": 42
              },
              {
                "startCol": 54,
                "endCol": 58
              }
            ]
          },
          "1324": {
            "partial": false,
            "source": "      selector.group.$keyf = keys instanceof Code",
            "missing": [
              {},
              {
                "startCol": 29,
                "endCol": 33
              },
              {
                "startCol": 45,
                "endCol": 49
              }
            ]
          },
          "1325": {
            "partial": false,
            "source": "        ? keys",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 14
              }
            ]
          },
          "1326": {
            "partial": false,
            "source": "        : new Code(keys);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 24
              }
            ]
          },
          "1328": {
            "partial": false,
            "source": "      var hash = {};",
            "missing": [
              {
                "startCol": 6,
                "endCol": 20
              }
            ]
          },
          "1329": {
            "partial": false,
            "source": "      keys.forEach(function (key) {",
            "missing": [
              {}
            ]
          },
          "1330": {
            "partial": false,
            "source": "        hash[key] = 1;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 22
              },
              {}
            ]
          },
          "1331": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "1332": {
            "partial": false,
            "source": "      selector.group.key = hash;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "1335": {
            "partial": false,
            "source": "    var cmd = DbCommand.createDbSlaveOkCommand(this.db, selector);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 66
              },
              {
                "startCol": 14,
                "endCol": 65
              }
            ]
          },
          "1337": {
            "partial": false,
            "source": "    var readPreference = options['readPreference'] ? options['readPreference'] : false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 87
              },
              {
                "startCol": 53,
                "endCol": 78
              },
              {
                "startCol": 81,
                "endCol": 86
              }
            ]
          },
          "1339": {
            "partial": false,
            "source": "    this.db._executeQueryCommand(cmd, {read:readPreference}, function (err, result) {",
            "missing": [
              {}
            ]
          },
          "1340": {
            "partial": false,
            "source": "      if(err != null) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 29,
                "endCol": 42
              },
              {
                "startCol": 22,
                "endCol": 43
              }
            ]
          },
          "1341": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1342": {
            "partial": false,
            "source": "      var document = result.documents[0];",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 41
              }
            ]
          },
          "1343": {
            "partial": false,
            "source": "      if (null == document.retval) {",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 33
              }
            ]
          },
          "1344": {
            "partial": false,
            "source": "        return callback(new Error(\"group command failed: \" + document.errmsg));",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 78
              },
              {
                "startCol": 34,
                "endCol": 76
              },
              {
                "startCol": 8,
                "endCol": 79
              }
            ]
          },
          "1345": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "1346": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1347": {
            "partial": false,
            "source": "      callback(null, document.retval);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 37
              }
            ]
          },
          "1348": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1352": {
            "partial": false,
            "source": "    var scope = reduce != null && reduce instanceof Code",
            "missing": [
              {
                "startCol": 16,
                "endCol": 22
              },
              {},
              {
                "startCol": 34,
                "endCol": 40
              },
              {
                "startCol": 52,
                "endCol": 56
              }
            ]
          },
          "1353": {
            "partial": false,
            "source": "      ? reduce.scope",
            "missing": [
              {
                "startCol": 8,
                "endCol": 20
              },
              {}
            ]
          },
          "1354": {
            "partial": false,
            "source": "      : {};",
            "missing": [
              {
                "startCol": 8,
                "endCol": 10
              },
              {}
            ]
          },
          "1356": {
            "partial": false,
            "source": "    scope.ns = this.collectionName;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "1357": {
            "partial": false,
            "source": "    scope.keys = keys;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "1358": {
            "partial": false,
            "source": "    scope.condition = condition;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 32
              }
            ]
          },
          "1359": {
            "partial": false,
            "source": "    scope.initial = initial;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 28
              }
            ]
          },
          "1362": {
            "partial": false,
            "source": "    var groupfn = groupFunction.replace(/ reduce;/, reduce.toString() + ';');",
            "missing": [
              {
                "startCol": 4,
                "endCol": 77
              },
              {
                "startCol": 18,
                "endCol": 76
              },
              {
                "startCol": 52,
                "endCol": 69
              }
            ]
          },
          "1364": {
            "partial": false,
            "source": "    this.db.eval(new Code(groupfn, scope), function (err, results) {",
            "missing": [
              {}
            ]
          },
          "1365": {
            "partial": false,
            "source": "      if (err) return callback(err, null);",
            "missing": [
              {
                "startCol": 22,
                "endCol": 41
              },
              {},
              {
                "startCol": 15,
                "endCol": 42
              },
              {
                "startCol": 10,
                "endCol": 13
              }
            ]
          },
          "1366": {
            "partial": false,
            "source": "      callback(null, results.result || results);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 47
              },
              {
                "startCol": 21,
                "endCol": 46
              },
              {
                "startCol": 39,
                "endCol": 46
              },
              {}
            ]
          },
          "1367": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1379": {
            "partial": false,
            "source": "  this.db.collectionsInfo(this.collectionName, function (err, cursor) {",
            "missing": [
              {}
            ]
          },
          "1380": {
            "partial": false,
            "source": "    if (err) return callback(err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 11
              },
              {},
              {
                "startCol": 13,
                "endCol": 34
              },
              {
                "startCol": 20,
                "endCol": 33
              }
            ]
          },
          "1381": {
            "partial": false,
            "source": "    cursor.nextObject(function (err, document) {",
            "missing": [
              {}
            ]
          },
          "1382": {
            "partial": false,
            "source": "      callback(err, document && document.options || null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 57
              },
              {},
              {
                "startCol": 20,
                "endCol": 28
              }
            ]
          },
          "1383": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1384": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1395": {
            "partial": false,
            "source": "  this.options(function(err, document) {",
            "missing": [
              {}
            ]
          },
          "1396": {
            "partial": false,
            "source": "    if(err != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              },
              {}
            ]
          },
          "1397": {
            "partial": false,
            "source": "      callback(err);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 19
              }
            ]
          },
          "1398": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1399": {
            "partial": false,
            "source": "      callback(null, document && document.capped);",
            "missing": [
              {
                "startCol": 21,
                "endCol": 29
              },
              {},
              {
                "startCol": 6,
                "endCol": 49
              }
            ]
          },
          "1400": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1401": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1413": {
            "partial": false,
            "source": " this.indexInformation(function(err, indexInformation) {",
            "missing": [
              {}
            ]
          },
          "1414": {
            "partial": false,
            "source": "   // If we have an error return",
            "missing": [
              {}
            ]
          },
          "1415": {
            "partial": false,
            "source": "   if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 9
              },
              {},
              {
                "startCol": 19,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 45
              }
            ]
          },
          "1416": {
            "partial": false,
            "source": "   // Let's check for the index names",
            "missing": [
              {}
            ]
          },
          "1417": {
            "partial": false,
            "source": "   if(Array.isArray(indexes)) {",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 28
              }
            ]
          },
          "1418": {
            "partial": false,
            "source": "     for(var i = 0; i < indexes.length; i++) {",
            "missing": [
              {
                "startCol": 20,
                "endCol": 21
              },
              {
                "startCol": 40,
                "endCol": 43
              },
              {}
            ]
          },
          "1419": {
            "partial": false,
            "source": "       if(indexInformation[indexes[i]] == null) {",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 46
              }
            ]
          },
          "1420": {
            "partial": false,
            "source": "         return callback(null, false);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 38
              },
              {
                "startCol": 16,
                "endCol": 37
              }
            ]
          },
          "1421": {
            "partial": false,
            "source": "       }",
            "missing": [
              {}
            ]
          },
          "1422": {
            "partial": false,
            "source": "     }",
            "missing": [
              {}
            ]
          },
          "1423": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1424": {
            "partial": false,
            "source": "     // All keys found return true",
            "missing": [
              {}
            ]
          },
          "1425": {
            "partial": false,
            "source": "     return callback(null, true);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 33
              },
              {
                "startCol": 12,
                "endCol": 32
              },
              {}
            ]
          },
          "1426": {
            "partial": false,
            "source": "   } else {",
            "missing": [
              {}
            ]
          },
          "1427": {
            "partial": false,
            "source": "     return callback(null, indexInformation[indexes] != null);",
            "missing": [
              {},
              {
                "startCol": 5,
                "endCol": 62
              },
              {
                "startCol": 12,
                "endCol": 61
              },
              {
                "startCol": 27,
                "endCol": 60
              }
            ]
          },
          "1428": {
            "partial": false,
            "source": "   }",
            "missing": [
              {}
            ]
          },
          "1429": {
            "partial": false,
            "source": " });",
            "missing": [
              {}
            ]
          },
          "1453": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1454": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1456": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1459": {
            "partial": false,
            "source": "  var commandObject = {",
            "missing": [
              {}
            ]
          },
          "1460": {
            "partial": false,
            "source": "    geoNear:this.collectionName,",
            "missing": [
              {}
            ]
          },
          "1461": {
            "partial": false,
            "source": "    near: [x, y]",
            "missing": [
              {}
            ]
          },
          "1462": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "1463": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1464": {
            "partial": false,
            "source": "  // Decorate object if any with known properties",
            "missing": [
              {}
            ]
          },
          "1465": {
            "partial": false,
            "source": "  if(options['num'] != null) commandObject['num'] = options['num'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 27
              },
              {},
              {
                "startCol": 29,
                "endCol": 67
              }
            ]
          },
          "1466": {
            "partial": false,
            "source": "  if(options['maxDistance'] != null) commandObject['maxDistance'] = options['maxDistance'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 35
              },
              {
                "startCol": 37,
                "endCol": 91
              }
            ]
          },
          "1467": {
            "partial": false,
            "source": "  if(options['distanceMultiplier'] != null) commandObject['distanceMultiplier'] = options['distanceMultiplier'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 42
              },
              {
                "startCol": 44,
                "endCol": 112
              }
            ]
          },
          "1468": {
            "partial": false,
            "source": "  if(options['query'] != null) commandObject['query'] = options['query'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 29
              },
              {
                "startCol": 31,
                "endCol": 73
              }
            ]
          },
          "1469": {
            "partial": false,
            "source": "  if(options['spherical'] != null) commandObject['spherical'] = options['spherical'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 33
              },
              {
                "startCol": 35,
                "endCol": 85
              }
            ]
          },
          "1470": {
            "partial": false,
            "source": "  if(options['uniqueDocs'] != null) commandObject['uniqueDocs'] = options['uniqueDocs'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 34
              },
              {
                "startCol": 36,
                "endCol": 88
              }
            ]
          },
          "1471": {
            "partial": false,
            "source": "  if(options['includeLocs'] != null) commandObject['includeLocs'] = options['includeLocs'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 35
              },
              {
                "startCol": 37,
                "endCol": 91
              }
            ]
          },
          "1474": {
            "partial": false,
            "source": "  this.db.command(commandObject, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              }
            ]
          },
          "1494": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1495": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1497": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1500": {
            "partial": false,
            "source": "  var commandObject = {",
            "missing": [
              {}
            ]
          },
          "1501": {
            "partial": false,
            "source": "    geoSearch:this.collectionName,",
            "missing": [
              {}
            ]
          },
          "1502": {
            "partial": false,
            "source": "    near: [x, y]",
            "missing": [
              {}
            ]
          },
          "1503": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "1504": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1505": {
            "partial": false,
            "source": "  // Decorate object if any with known properties",
            "missing": [
              {}
            ]
          },
          "1506": {
            "partial": false,
            "source": "  if(options['maxDistance'] != null) commandObject['maxDistance'] = options['maxDistance'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 35
              },
              {},
              {
                "startCol": 37,
                "endCol": 91
              }
            ]
          },
          "1507": {
            "partial": false,
            "source": "  if(options['query'] != null) commandObject['search'] = options['query'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 29
              },
              {
                "startCol": 31,
                "endCol": 74
              }
            ]
          },
          "1508": {
            "partial": false,
            "source": "  if(options['search'] != null) commandObject['search'] = options['search'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 30
              },
              {
                "startCol": 32,
                "endCol": 76
              }
            ]
          },
          "1509": {
            "partial": false,
            "source": "  if(options['limit'] != null) commandObject['limit'] = options['limit'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 29
              },
              {
                "startCol": 31,
                "endCol": 73
              }
            ]
          },
          "1512": {
            "partial": false,
            "source": "  this.db.command(commandObject, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              }
            ]
          },
          "1524": {
            "partial": false,
            "source": "  this.db.indexInformation(this.collectionName, {full:true}, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 70
              }
            ]
          },
          "1541": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1542": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1543": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "1545": {
            "partial": false,
            "source": "  options = args[args.length - 1].explain ? args.pop() : {}",
            "missing": [
              {},
              {
                "startCol": 44,
                "endCol": 54
              },
              {
                "startCol": 17,
                "endCol": 32
              },
              {
                "startCol": 57,
                "endCol": 59
              }
            ]
          },
          "1546": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1547": {
            "partial": false,
            "source": "  // Convert operations to an array",
            "missing": [
              {}
            ]
          },
          "1548": {
            "partial": false,
            "source": "  if(!Array.isArray(args[0])) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              },
              {},
              {
                "startCol": 6,
                "endCol": 28
              }
            ]
          },
          "1549": {
            "partial": false,
            "source": "    pipeline = [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 18
              }
            ]
          },
          "1551": {
            "partial": false,
            "source": "    for(var i = 0; i < args.length; i++) pipeline.push(args[i]);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              },
              {
                "startCol": 41,
                "endCol": 63
              }
            ]
          },
          "1555": {
            "partial": false,
            "source": "  var command = { aggregate : this.collectionName, pipeline : pipeline};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 72
              }
            ]
          },
          "1557": {
            "partial": false,
            "source": "  var keys = Object.keys(options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 34
              },
              {
                "startCol": 13,
                "endCol": 33
              }
            ]
          },
          "1559": {
            "partial": false,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "1560": {
            "partial": false,
            "source": "    command[keys[i]] = options[keys[i]];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              }
            ]
          },
          "1564": {
            "partial": false,
            "source": "  this.db.command(command, options, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "1565": {
            "partial": false,
            "source": "    if(err) {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              }
            ]
          },
          "1566": {
            "partial": false,
            "source": "      callback(err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 20
              },
              {}
            ]
          },
          "1567": {
            "partial": false,
            "source": "    } else if(result['err'] || result['errmsg']) {",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 47
              }
            ]
          },
          "1568": {
            "partial": false,
            "source": "      callback(self.db.wrap(result));",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 37
              },
              {
                "startCol": 15,
                "endCol": 35
              }
            ]
          },
          "1569": {
            "partial": false,
            "source": "    } else if(typeof result == 'object' && result['serverPipeline']) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 27
              },
              {},
              {
                "startCol": 21,
                "endCol": 27
              }
            ]
          },
          "1570": {
            "partial": false,
            "source": "      callback(null, result);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 28
              },
              {}
            ]
          },
          "1571": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1572": {
            "partial": false,
            "source": "      callback(null, result.result);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 35
              }
            ]
          },
          "1573": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1574": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1590": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1591": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1593": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1596": {
            "partial": false,
            "source": "  var commandObject = {",
            "missing": [
              {}
            ]
          },
          "1597": {
            "partial": false,
            "source": "    collStats:this.collectionName,",
            "missing": [
              {}
            ]
          },
          "1598": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "1599": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1600": {
            "partial": false,
            "source": "  // Check if we have the scale value",
            "missing": [
              {}
            ]
          },
          "1601": {
            "partial": false,
            "source": "  if(options['scale'] != null) commandObject['scale'] = options['scale'];",
            "missing": [
              {
                "startCol": 31,
                "endCol": 73
              },
              {
                "startCol": 5,
                "endCol": 29
              },
              {}
            ]
          },
          "1604": {
            "partial": false,
            "source": "  this.db.command(commandObject, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              }
            ]
          },
          "1613": {
            "partial": false,
            "source": "      return this.internalHint;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 31
              }
            ]
          },
          "1616": {
            "partial": false,
            "source": "      this.internalHint = normalizeHintField(v);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 48
              },
              {
                "startCol": 26,
                "endCol": 47
              }
            ]
          }
        },
        "source": "/**\n * Module dependencies.\n * @ignore\n */\nvar InsertCommand = require('./commands/insert_command').InsertCommand\n  , QueryCommand = require('./commands/query_command').QueryCommand\n  , DeleteCommand = require('./commands/delete_command').DeleteCommand\n  , UpdateCommand = require('./commands/update_command').UpdateCommand\n  , DbCommand = require('./commands/db_command').DbCommand\n  , ObjectID = require('bson').ObjectID\n  , Code = require('bson').Code\n  , Cursor = require('./cursor').Cursor\n  , utils = require('./utils');\n\n/**\n * Precompiled regexes\n * @ignore\n**/\nconst eErrorMessages = /No matching object found/;\n\n/**\n * toString helper.\n * @ignore\n */\nvar toString = Object.prototype.toString;\n\n/**\n * Create a new Collection instance\n *\n * Options\n *  - **slaveOk** {Boolean, default:false}, Allow reads from secondaries.\n *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.\n *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.\n *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.\n *\n * @class Represents a Collection\n * @param {Object} db db instance.\n * @param {String} collectionName collection name.\n * @param {Object} [pkFactory] alternative primary key factory.\n * @param {Object} [options] additional options for the collection.\n * @return {Object} a collection instance.\n */\nfunction Collection (db, collectionName, pkFactory, options) {\n  if(!(this instanceof Collection)) return new Collection(db, collectionName, pkFactory, options);\n\n  checkCollectionName(collectionName);\n\n  this.db = db;\n  this.collectionName = collectionName;\n  this.internalHint = null;\n  this.opts = options != null && ('object' === typeof options) ? options : {};\n  this.slaveOk = options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk;\n  this.serializeFunctions = options == null || options.serializeFunctions == null ? db.serializeFunctions : options.serializeFunctions;\n  this.raw = options == null || options.raw == null ? db.raw : options.raw;\n\n  this.readPreference = options == null || options.readPreference == null ? db.serverConfig.readPreference : options.readPreference;\n  this.readPreference = this.readPreference == null ? 'primary' : this.readPreference;\n\n  this.pkFactory = pkFactory == null\n    ? ObjectID\n    : pkFactory;\n\n  var self = this;\n}\n\n/**\n * Inserts a single document or a an array of documents into MongoDB.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *  - **continueOnError/keepGoing** {Boolean, default:false}, keep inserting documents even if one document has an error, *mongodb 1.9.1 >*.\n *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.\n *\n * @param {Array|Object} docs\n * @param {Object} [options] optional options for insert command\n * @param {Function} [callback] optional callback for the function, must be provided when using `safe` or `strict` mode\n * @return {null}\n * @api public\n */\nCollection.prototype.insert = function insert (docs, options, callback) {\n  if ('function' === typeof options) callback = options, options = {};\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n  var self = this;\n  insertAll(self, Array.isArray(docs) ? docs : [docs], options, callback);\n  return this;\n};\n\n/**\n * @ignore\n */\nvar checkCollectionName = function checkCollectionName (collectionName) {\n  if ('string' !== typeof collectionName) {\n    throw Error(\"collection name must be a String\");\n  }\n\n  if (!collectionName || collectionName.indexOf('..') != -1) {\n    throw Error(\"collection names cannot be empty\");\n  }\n\n  if (collectionName.indexOf('$') != -1 &&\n      collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null) {\n    throw Error(\"collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    throw Error(\"collection names must not start or end with '.'\");\n  }\n};\n\n/**\n * Removes documents specified by `selector` from the db.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *  - **single** {Boolean, default:false}, removes the first document found.\n *\n * @param {Object} [selector] optional select, no selector is equivalent to removing all documents.\n * @param {Object} [options] additional options during remove.\n * @param {Function} [callback] must be provided if you performing a safe remove\n * @return {null}\n * @api public\n */\nCollection.prototype.remove = function remove(selector, options, callback) {\n  if ('function' === typeof selector) {\n    callback = selector;\n    selector = options = {};\n  } else if ('function' === typeof options) {\n    callback = options;\n    options = {};\n  }\n\n  // Ensure options\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n  // Ensure we have at least an empty selector\n  selector = selector == null ? {} : selector;\n  // Set up flags for the command, if we have a single document remove\n  var flags = 0 | (options.single ? 1 : 0);\n\n  // DbName\n  var dbName = options['dbName'];\n  // If no dbname defined use the db one\n  if(dbName == null) {\n    dbName = this.db.databaseName;\n  }\n\n  // Create a delete command\n  var deleteCommand = new DeleteCommand(\n      this.db\n    , dbName + \".\" + this.collectionName\n    , selector\n    , flags);\n\n  var self = this;\n  var errorOptions = options.safe != null ? options.safe : null;\n  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;\n  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;\n\n  // If we have a write concern set and no callback throw error\n  if(errorOptions && errorOptions['safe'] != false && typeof callback !== 'function') throw new Error(\"safe cannot be used without a callback\");\n  // Execute the command, do not add a callback as it's async\n  if (options && options.safe || this.opts.safe != null || this.db.strict) {\n    // Insert options\n    var commandOptions = {read:false};\n    // If we have safe set set async to false\n    if(errorOptions == null) commandOptions['async'] = true;\n    // Set safe option\n    commandOptions['safe'] = true;\n    // If we have an error option\n    if(typeof errorOptions == 'object') {\n      var keys = Object.keys(errorOptions);\n      for(var i = 0; i < keys.length; i++) {\n        commandOptions[keys[i]] = errorOptions[keys[i]];\n      }\n    }\n\n    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)\n    this.db._executeRemoveCommand(deleteCommand, commandOptions, function (err, error) {\n      error = error && error.documents;\n      if(!callback) return;\n\n      if(err) {\n        callback(err);\n      } else if(error[0].err || error[0].errmsg) {\n        callback(self.db.wrap(error[0]));\n      } else {\n        callback(null, error[0].n);\n      }\n    });\n  } else {\n    var result = this.db._executeRemoveCommand(deleteCommand);\n    // If no callback just return\n    if (!callback) return;\n    // If error return error\n    if (result instanceof Error) {\n      return callback(result);\n    }\n    // Otherwise just return\n    return callback();\n  }\n};\n\n/**\n * Renames the collection.\n *\n * @param {String} newName the new name of the collection.\n * @param {Function} callback the callback accepting the result\n * @return {null}\n * @api public\n */\nCollection.prototype.rename = function rename (newName, callback) {\n  var self = this;\n  // Ensure the new name is valid\n  checkCollectionName(newName);\n  // Execute the command, return the new renamed collection if successful\n  self.db._executeQueryCommand(DbCommand.createRenameCollectionCommand(self.db, self.collectionName, newName), function(err, result) {\n    if(err == null && result.documents[0].ok == 1) {\n      if(callback != null) {\n        // Set current object to point to the new name\n        self.collectionName = newName;\n        // Return the current collection\n        callback(null, self);\n      }\n    } else if(result.documents[0].errmsg != null) {\n      if(callback != null) {\n        err != null ? callback(err, null) : callback(self.db.wrap(result.documents[0]), null);\n      }\n    }\n  });\n};\n\n/**\n * @ignore\n */\nvar insertAll = function insertAll (self, docs, options, callback) {\n  if('function' === typeof options) callback = options, options = {};\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n\n  // Insert options (flags for insert)\n  var insertFlags = {};\n  // If we have a mongodb version >= 1.9.1 support keepGoing attribute\n  if(options['keepGoing'] != null) {\n    insertFlags['keepGoing'] = options['keepGoing'];\n  }\n\n  // If we have a mongodb version >= 1.9.1 support keepGoing attribute\n  if(options['continueOnError'] != null) {\n    insertFlags['continueOnError'] = options['continueOnError'];\n  }\n\n  // DbName\n  var dbName = options['dbName'];\n  // If no dbname defined use the db one\n  if(dbName == null) {\n    dbName = self.db.databaseName;\n  }\n\n  // Either use override on the function, or go back to default on either the collection\n  // level or db\n  if(options['serializeFunctions'] != null) {\n    insertFlags['serializeFunctions'] = options['serializeFunctions'];\n  } else {\n    insertFlags['serializeFunctions'] = self.serializeFunctions;\n  }\n\n  // Pass in options\n  var insertCommand = new InsertCommand(\n      self.db\n    , dbName + \".\" + self.collectionName, true, insertFlags);\n\n  // Add the documents and decorate them with id's if they have none\n  for (var index = 0, len = docs.length; index < len; ++index) {\n    var doc = docs[index];\n\n    // Add id to each document if it's not already defined\n    if (!(Buffer.isBuffer(doc)) && doc['_id'] == null && self.db.forceServerObjectId != true) {\n      doc['_id'] = self.pkFactory.createPk();\n    }\n\n    insertCommand.add(doc);\n  }\n\n  // Collect errorOptions\n  var errorOptions = options.safe != null ? options.safe : null;\n  errorOptions = errorOptions == null && self.opts.safe != null ? self.opts.safe : errorOptions;\n  errorOptions = errorOptions == null && self.db.strict != null ? self.db.strict : errorOptions;\n\n  // If we have a write concern set and no callback throw error\n  if(errorOptions && errorOptions['safe'] != false && typeof callback !== 'function') throw new Error(\"safe cannot be used without a callback\");\n\n  // Default command options\n  var commandOptions = {};\n  // If safe is defined check for error message\n  if(errorOptions && errorOptions != false) {\n    // Insert options\n    commandOptions['read'] = false;\n    // If we have safe set set async to false\n    if(errorOptions == null) commandOptions['async'] = true;\n\n    // Set safe option\n    commandOptions['safe'] = errorOptions;\n    // If we have an error option\n    if(typeof errorOptions == 'object') {\n      var keys = Object.keys(errorOptions);\n      for(var i = 0; i < keys.length; i++) {\n        commandOptions[keys[i]] = errorOptions[keys[i]];\n      }\n    }\n\n    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)\n    self.db._executeInsertCommand(insertCommand, commandOptions, function (err, error) {\n      error = error && error.documents;\n      if(!callback) return;\n\n      if (err) {\n        callback(err);\n      } else if(error[0].err || error[0].errmsg) {\n        callback(self.db.wrap(error[0]));\n      } else {\n        callback(null, docs);\n      }\n    });\n  } else {\n    var result = self.db._executeInsertCommand(insertCommand, commandOptions, callback);\n    // If no callback just return\n    if(!callback) return;\n    // If error return error\n    if(result instanceof Error) {\n      return callback(result);\n    }\n    // Otherwise just return\n    return callback(null, docs);\n  }\n};\n\n/**\n * Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic\n * operators and update instead for more efficient operations.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *\n * @param {Object} [doc] the document to save\n * @param {Object} [options] additional options during remove.\n * @param {Function} [callback] must be provided if you performing a safe save\n * @return {null}\n * @api public\n */\nCollection.prototype.save = function save(doc, options, callback) {\n  if('function' === typeof options) callback = options, options = null;\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n\n  var errorOptions = options.safe != null ? options.safe : false;\n  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;\n  // Extract the id, if we have one we need to do a update command\n  var id = doc['_id'];\n\n  if(id) {\n    this.update({ _id: id }, doc, { upsert: true, safe: errorOptions }, callback);\n  } else {\n    this.insert(doc, { safe: errorOptions }, callback && function (err, docs) {\n      if (err) return callback(err, null);\n\n      if (Array.isArray(docs)) {\n        callback(err, docs[0]);\n      } else {\n        callback(err, docs);\n      }\n    });\n  }\n};\n\n/**\n * Updates documents.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *  - **upsert** {Boolean, default:false}, perform an upsert operation.\n *  - **multi** {Boolean, default:false}, update all documents matching the selector.\n *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.\n *\n * @param {Object} selector the query to select the document/documents to be updated\n * @param {Object} document the fields/vals to be updated, or in the case of an upsert operation, inserted.\n * @param {Object} [options] additional options during update.\n * @param {Function} [callback] must be provided if you performing a safe update\n * @return {null}\n * @api public\n */\nCollection.prototype.update = function update(selector, document, options, callback) {\n  if('function' === typeof options) callback = options, options = null;\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n\n  // DbName\n  var dbName = options['dbName'];\n  // If no dbname defined use the db one\n  if(dbName == null) {\n    dbName = this.db.databaseName;\n  }\n\n  // Either use override on the function, or go back to default on either the collection\n  // level or db\n  if(options['serializeFunctions'] != null) {\n    options['serializeFunctions'] = options['serializeFunctions'];\n  } else {\n    options['serializeFunctions'] = this.serializeFunctions;\n  }\n\n  var updateCommand = new UpdateCommand(\n      this.db\n    , dbName + \".\" + this.collectionName\n    , selector\n    , document\n    , options);\n\n  var self = this;\n  // Unpack the error options if any\n  var errorOptions = (options && options.safe != null) ? options.safe : null;\n  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;\n  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;\n\n  // If we have a write concern set and no callback throw error\n  if(errorOptions && errorOptions['safe'] != false && typeof callback !== 'function') throw new Error(\"safe cannot be used without a callback\");\n\n  // If we are executing in strict mode or safe both the update and the safe command must happen on the same line\n  if(errorOptions && errorOptions != false) {\n    // Insert options\n    var commandOptions = {read:false};\n    // If we have safe set set async to false\n    if(errorOptions == null) commandOptions['async'] = true;\n    // Set safe option\n    commandOptions['safe'] = true;\n    // If we have an error option\n    if(typeof errorOptions == 'object') {\n      var keys = Object.keys(errorOptions);\n      for(var i = 0; i < keys.length; i++) {\n        commandOptions[keys[i]] = errorOptions[keys[i]];\n      }\n    }\n\n    // Execute command with safe options (rolls up both command and safe command into one and executes them on the same connection)\n    this.db._executeUpdateCommand(updateCommand, commandOptions, function (err, error) {\n      error = error && error.documents;\n      if(!callback) return;\n\n      if(err) {\n        callback(err);\n      } else if(error[0].err || error[0].errmsg) {\n        callback(self.db.wrap(error[0]));\n      } else {\n        // Perform the callback\n        callback(null, error[0].n, error[0]);\n      }\n    });\n  } else {\n    // Execute update\n    var result = this.db._executeUpdateCommand(updateCommand);\n    // If no callback just return\n    if (!callback) return;\n    // If error return error\n    if (result instanceof Error) {\n      return callback(result);\n    }\n    // Otherwise just return\n    return callback();\n  }\n};\n\n/**\n * The distinct command returns returns a list of distinct values for the given key across a collection.\n *\n * Options\n *  - **readPreference** {String}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {String} key key to run distinct against.\n * @param {Object} [query] option query to narrow the returned objects.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback must be provided.\n * @return {null}\n * @api public\n */\nCollection.prototype.distinct = function distinct(key, query, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  query = args.length ? args.shift() : {};\n  options = args.length ? args.shift() : {};\n\n  var mapCommandHash = {\n      'distinct': this.collectionName\n    , 'query': query\n    , 'key': key\n  };\n\n  // Set read preference if we set one\n  var readPreference = options['readPreference'] ? options['readPreference'] : false;\n  // Create the command\n  var cmd = DbCommand.createDbSlaveOkCommand(this.db, mapCommandHash);\n\n  this.db._executeQueryCommand(cmd, {read:readPreference}, function (err, result) {\n    if(err)\n      return callback(err);\n    if(result.documents[0].ok != 1)\n      return callback(new Error(result.documents[0].errmsg));\n    callback(null, result.documents[0].values);\n  });\n};\n\n/**\n * Count number of matching documents in the db to a query.\n *\n * Options\n *  - **readPreference** {String}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {Object} [query] query to filter by before performing count.\n * @param {Object} [options] additional options during count.\n * @param {Function} callback must be provided.\n * @return {null}\n * @api public\n */\nCollection.prototype.count = function count (query, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  query = args.length ? args.shift() : {};\n  options = args.length ? args.shift() : {};\n\n  // Final query\n  var final_query = {\n      'count': this.collectionName\n    , 'query': query\n    , 'fields': null\n  };\n\n  // Set read preference if we set one\n  var readPreference = options['readPreference'] ? options['readPreference'] : false;\n\n  // Set up query options\n  var queryOptions = QueryCommand.OPTS_NO_CURSOR_TIMEOUT;\n  if (this.slaveOk || this.db.slaveOk) {\n    queryOptions |= QueryCommand.OPTS_SLAVE;\n  }\n\n  var queryCommand = new QueryCommand(\n      this.db\n    , this.db.databaseName + \".$cmd\"\n    , queryOptions\n    , 0\n    , -1\n    , final_query\n    , null\n  );\n\n  var self = this;\n  this.db._executeQueryCommand(queryCommand, {read:readPreference}, function (err, result) {\n    result = result && result.documents;\n    if(!callback) return;\n\n    if(err) return callback(err);\n    if (result[0].ok != 1 || result[0].errmsg) return callback(self.db.wrap(result[0]));\n    callback(null, result[0].n);\n  });\n};\n\n\n/**\n * Drop the collection\n *\n * @param {Function} [callback] provide a callback to be notified when command finished executing\n * @return {null}\n * @api public\n */\nCollection.prototype.drop = function drop(callback) {\n  this.db.dropCollection(this.collectionName, callback);\n};\n\n/**\n * Find and update a document.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *  - **remove** {Boolean, default:false}, set to true to remove the object before returning.\n *  - **upsert** {Boolean, default:false}, perform an upsert operation.\n *  - **new** {Boolean, default:false}, set to true if you want to return the modified object rather than the original. Ignored for remove.\n *\n * @param {Object} query query object to locate the object to modify\n * @param {Array}  sort - if multiple docs match, choose the first one in the specified sort order as the object to manipulate\n * @param {Object} doc - the fields/vals to be updated\n * @param {Object} [options] additional options during update.\n * @param {Function} [callback] returns results.\n * @return {null}\n * @api public\n */\nCollection.prototype.findAndModify = function findAndModify (query, sort, doc, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  sort = args.length ? args.shift() : [];\n  doc = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n  var self = this;\n\n  var queryObject = {\n      'findandmodify': this.collectionName\n    , 'query': query\n    , 'sort': utils.formattedOrderClause(sort)\n  };\n\n  queryObject.new = options.new ? 1 : 0;\n  queryObject.remove = options.remove ? 1 : 0;\n  queryObject.upsert = options.upsert ? 1 : 0;\n\n  if (options.fields) {\n    queryObject.fields = options.fields;\n  }\n\n  if (doc && !options.remove) {\n    queryObject.update = doc;\n  }\n\n  // Either use override on the function, or go back to default on either the collection\n  // level or db\n  if(options['serializeFunctions'] != null) {\n    options['serializeFunctions'] = options['serializeFunctions'];\n  } else {\n    options['serializeFunctions'] = this.serializeFunctions;\n  }\n\n  // Unpack the error options if any\n  var errorOptions = (options && options.safe != null) ? options.safe : null;\n  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;\n  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;\n\n  // If we have j, w or something else do the getLast Error path\n  if(errorOptions != null && typeof errorOptions == 'object') {\n    // Commands to send\n    var commands = [];\n    // Add the find and modify command\n    commands.push(DbCommand.createDbCommand(this.db, queryObject, options));\n    // If we have safe defined we need to return both call results\n    var chainedCommands = errorOptions != null ? true : false;\n    // Add error command if we have one\n    if(chainedCommands) {\n      commands.push(DbCommand.createGetLastErrorCommand(errorOptions, this.db));\n    }\n\n    // Fire commands and\n    this.db._executeQueryCommand(commands, {read:false}, function(err, result) {\n      if(err != null) return callback(err);\n      result = result && result.documents;\n\n      if(result[0].err != null) return callback(self.db.wrap(result[0]), null);\n      // Workaround due to 1.8.X returning an error on no matching object\n      // while 2.0.X does not not, making 2.0.X behaviour standard\n      if(result[0].errmsg != null && !result[0].errmsg.match(eErrorMessages))\n        return callback(self.db.wrap(result[0]), null, result[0]);\n      return callback(null, result[0].value, result[0]);\n    });\n  } else {\n    // Only run command and rely on getLastError command\n    var command = DbCommand.createDbCommand(this.db, queryObject, options)\n    // Execute command\n    this.db._executeQueryCommand(command, {read:false}, function(err, result) {\n      if(err != null) return callback(err);\n      result = result && result.documents;\n      if(result[0].errmsg != null && !result[0].errmsg.match(eErrorMessages))\n        return callback(self.db.wrap(result[0]), null, result[0]);\n      // If we have an error return it\n      if(result[0].lastErrorObject && result[0].lastErrorObject.err != null) return callback(self.db.wrap(result[0].lastErrorObject), null);\n      return callback(null, result[0].value, result[0]);\n    });\n  }\n}\n\n/**\n * Find and remove a document\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *\n * @param {Object} query query object to locate the object to modify\n * @param {Array}  sort - if multiple docs match, choose the first one in the specified sort order as the object to manipulate\n * @param {Object} [options] additional options during update.\n * @param {Function} [callback] returns results.\n * @return {null}\n * @api public\n */\nCollection.prototype.findAndRemove = function(query, sort, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  sort = args.length ? args.shift() : [];\n  options = args.length ? args.shift() : {};\n  // Add the remove option\n  options['remove'] = true;\n  // Execute the callback\n  this.findAndModify(query, sort, null, options, callback);\n}\n\nvar testForFields = {'limit' : 1, 'sort' : 1, 'fields' : 1, 'skip' : 1, 'hint' : 1, 'explain' : 1, 'snapshot' : 1\n  , 'timeout' : 1, 'tailable' : 1, 'batchSize' : 1, 'raw' : 1, 'read' : 1\n  , 'returnKey' : 1, 'maxScan' : 1, 'min' : 1, 'max' : 1, 'showDiskLoc' : 1, 'comment' : 1, 'dbName' : 1, 'exhaust': 1\n  , 'tailableRetryInterval': 1};\n\n/**\n * Creates a cursor for a query that can be used to iterate over results from MongoDB\n *\n * Various argument possibilities\n *  - callback?\n *  - selector, callback?,\n *  - selector, fields, callback?\n *  - selector, options, callback?\n *  - selector, fields, options, callback?\n *  - selector, fields, skip, limit, callback?\n *  - selector, fields, skip, limit, timeout, callback?\n *\n * Options\n *  - **limit** {Number, default:0}, sets the limit of documents returned in the query.\n *  - **sort** {Array | Object}, set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n *  - **fields** {Object}, the fields to return in the query. Object of fields to include or exclude (not both), {'a':1}\n *  - **skip** {Number, default:0}, set to skip N documents ahead in your query (useful for pagination).\n *  - **hint** {Object}, tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}\n *  - **explain** {Boolean, default:false}, explain the query instead of returning the data.\n *  - **snapshot** {Boolean, default:false}, snapshot query.\n *  - **timeout** {Boolean, default:false}, specify if the cursor can timeout.\n *  - **tailable** {Boolean, default:false}, specify if the cursor is tailable.\n *  - **tailableRetryInterval** {Number, default:100}, specify the miliseconds between getMores on tailable cursor.\n *  - **numberOfRetries** {Number, default:5}, specify the number of times to retry the tailable cursor.\n *  - **awaitdata** {Boolean, default:false} allow the cursor to wait for data, only applicable for tailable cursor.\n *  - **exhaust** {Boolean, default:false} have the server send all the documents at once as getMore packets, not recommended.\n *  - **batchSize** {Number, default:0}, set the batchSize for the getMoreCommand when iterating over the query results.\n *  - **returnKey** {Boolean, default:false}, only return the index key.\n *  - **maxScan** {Number}, Limit the number of items to scan.\n *  - **min** {Number}, Set index bounds.\n *  - **max** {Number}, Set index bounds.\n *  - **showDiskLoc** {Boolean, default:false}, Show disk location of results.\n *  - **comment** {String}, You can put a $comment field on a query to make looking in the profiler logs simpler.\n *  - **raw** {Boolean, default:false}, Return all BSON documents as Raw Buffer documents.\n *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *  - **numberOfRetries** {Number, default:5}, if using awaidata specifies the number of times to retry on timeout.\n *  - **partial** {Boolean, default:false}, specify if the cursor should return partial results when querying against a sharded system\n *\n * @param {Object} query query object to locate the object to modify\n * @param {Object} [options] additional options during update.\n * @param {Function} [callback] optional callback for cursor.\n * @return {Cursor} returns a cursor to the query\n * @api public\n */\nCollection.prototype.find = function find () {\n  var options\n    , args = Array.prototype.slice.call(arguments, 0)\n    , has_callback = typeof args[args.length - 1] === 'function'\n    , has_weird_callback = typeof args[0] === 'function'\n    , callback = has_callback ? args.pop() : (has_weird_callback ? args.shift() : null)\n    , len = args.length\n    , selector = len >= 1 ? args[0] : {}\n    , fields = len >= 2 ? args[1] : undefined;\n\n  if(len === 1 && has_weird_callback) {\n    // backwards compat for callback?, options case\n    selector = {};\n    options = args[0];\n  }\n\n  if(len === 2 && !Array.isArray(fields)) {\n    var fieldKeys = Object.getOwnPropertyNames(fields);\n    var is_option = false;\n\n    for(var i = 0; i < fieldKeys.length; i++) {\n      if(testForFields[fieldKeys[i]] != null) {\n        is_option = true;\n        break;\n      }\n    }\n\n    if(is_option) {\n      options = fields;\n      fields = undefined;\n    } else {\n      options = {};\n    }\n  } else if(len === 2 && Array.isArray(fields) && !Array.isArray(fields[0])) {\n    var newFields = {};\n    // Rewrite the array\n    for(var i = 0; i < fields.length; i++) {\n      newFields[fields[i]] = 1;\n    }\n    // Set the fields\n    fields = newFields;\n  }\n\n  if(3 === len) {\n    options = args[2];\n  }\n\n  // Ensure selector is not null\n  selector = selector == null ? {} : selector;\n  // Validate correctness off the selector\n  var object = selector;\n  if(Buffer.isBuffer(object)) {\n    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;\n    if(object_size != object.length)  {\n      var error = new Error(\"query selector raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  // Validate correctness of the field selector\n  var object = fields;\n  if(Buffer.isBuffer(object)) {\n    var object_size = object[0] | object[1] << 8 | object[2] << 16 | object[3] << 24;\n    if(object_size != object.length)  {\n      var error = new Error(\"query fields raw message size does not match message header size [\" + object.length + \"] != [\" + object_size + \"]\");\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  // Check special case where we are using an objectId\n  if(selector instanceof ObjectID) {\n    selector = {_id:selector};\n  }\n\n  // If it's a serialized fields field we need to just let it through\n  // user be warned it better be good\n  if(options && options.fields && !(Buffer.isBuffer(options.fields))) {\n    fields = {};\n\n    if(Array.isArray(options.fields)) {\n      if(!options.fields.length) {\n        fields['_id'] = 1;\n      } else {\n        for (var i = 0, l = options.fields.length; i < l; i++) {\n          fields[options.fields[i]] = 1;\n        }\n      }\n    } else {\n      fields = options.fields;\n    }\n  }\n\n  if (!options) options = {};\n  options.skip = len > 3 ? args[2] : options.skip ? options.skip : 0;\n  options.limit = len > 3 ? args[3] : options.limit ? options.limit : 0;\n  options.raw = options.raw != null && typeof options.raw === 'boolean' ? options.raw : this.raw;\n  options.hint = options.hint != null ? normalizeHintField(options.hint) : this.internalHint;\n  options.timeout = len == 5 ? args[4] : typeof options.timeout === 'undefined' ? undefined : options.timeout;\n  // If we have overridden slaveOk otherwise use the default db setting\n  options.slaveOk = options.slaveOk != null ? options.slaveOk : this.db.slaveOk;\n\n  // Set option\n  var o = options;\n  // Support read/readPreference\n  if(o[\"read\"] != null) o[\"readPreference\"] = o[\"read\"];\n  // Set the read preference\n  o.read = o[\"readPreference\"] ? o.readPreference : this.readPreference;\n  // Adjust slave ok if read preference is secondary or secondary only\n  if(o.read == \"secondary\" || o.read == \"secondaryOnly\") options.slaveOk = true;\n\n  // callback for backward compatibility\n  if(callback) {\n    // TODO refactor Cursor args\n    callback(null, new Cursor(this.db, this, selector, fields, o.skip, o.limit\n      , o.sort, o.hint, o.explain, o.snapshot, o.timeout, o.tailable, o.batchSize\n      , o.slaveOk, o.raw, o.read, o.returnKey, o.maxScan, o.min, o.max, o.showDiskLoc, o.comment, o.awaitdata\n      , o.numberOfRetries, o.dbName, o.tailableRetryInterval, o.exhaust));\n  } else {\n    return new Cursor(this.db, this, selector, fields, o.skip, o.limit\n      , o.sort, o.hint, o.explain, o.snapshot, o.timeout, o.tailable, o.batchSize\n      , o.slaveOk, o.raw, o.read, o.returnKey, o.maxScan, o.min, o.max, o.showDiskLoc, o.comment, o.awaitdata\n      , o.numberOfRetries, o.dbName, o.tailableRetryInterval, o.exhaust);\n  }\n};\n\n/**\n * Normalizes a `hint` argument.\n *\n * @param {String|Object|Array} hint\n * @return {Object}\n * @api private\n */\nvar normalizeHintField = function normalizeHintField(hint) {\n  var finalHint = null;\n\n  if (null != hint) {\n    switch (hint.constructor) {\n      case String:\n        finalHint = {};\n        finalHint[hint] = 1;\n        break;\n      case Object:\n        finalHint = {};\n        for (var name in hint) {\n          finalHint[name] = hint[name];\n        }\n        break;\n      case Array:\n        finalHint = {};\n        hint.forEach(function(param) {\n          finalHint[param] = 1;\n        });\n        break;\n    }\n  }\n\n  return finalHint;\n};\n\n/**\n * Finds a single document based on the query\n *\n * Various argument possibilities\n *  - callback?\n *  - selector, callback?,\n *  - selector, fields, callback?\n *  - selector, options, callback?\n *  - selector, fields, options, callback?\n *  - selector, fields, skip, limit, callback?\n *  - selector, fields, skip, limit, timeout, callback?\n *\n * Options\n *  - **limit** {Number, default:0}, sets the limit of documents returned in the query.\n *  - **sort** {Array | Object}, set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n *  - **fields** {Object}, the fields to return in the query. Object of fields to include or exclude (not both), {'a':1}\n *  - **skip** {Number, default:0}, set to skip N documents ahead in your query (useful for pagination).\n *  - **hint** {Object}, tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}\n *  - **explain** {Boolean, default:false}, explain the query instead of returning the data.\n *  - **snapshot** {Boolean, default:false}, snapshot query.\n *  - **timeout** {Boolean, default:false}, specify if the cursor can timeout.\n *  - **tailable** {Boolean, default:false}, specify if the cursor is tailable.\n *  - **batchSize** {Number, default:0}, set the batchSize for the getMoreCommand when iterating over the query results.\n *  - **returnKey** {Boolean, default:false}, only return the index key.\n *  - **maxScan** {Number}, Limit the number of items to scan.\n *  - **min** {Number}, Set index bounds.\n *  - **max** {Number}, Set index bounds.\n *  - **showDiskLoc** {Boolean, default:false}, Show disk location of results.\n *  - **comment** {String}, You can put a $comment field on a query to make looking in the profiler logs simpler.\n *  - **raw** {Boolean, default:false}, Return all BSON documents as Raw Buffer documents.\n *  - **readPreference** {String}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *  - **partial** {Boolean, default:false}, specify if the cursor should return partial results when querying against a sharded system\n *\n * @param {Object} query query object to locate the object to modify\n * @param {Object} [options] additional options during update.\n * @param {Function} [callback] optional callback for cursor.\n * @return {Cursor} returns a cursor to the query\n * @api public\n */\nCollection.prototype.findOne = function findOne () {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var cursor = this.find.apply(this, args).limit(-1).batchSize(1);\n  // Return the item\n  cursor.toArray(function(err, items) {\n    if(err != null) return callback(err instanceof Error ? err : self.db.wrap(new Error(err)), null);\n    if(items.length == 1) return callback(null, items[0]);\n    callback(null, null);\n  });\n};\n\n/**\n * Creates an index on the collection.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a\n *  - **unique** {Boolean, default:false}, creates an unique index.\n *  - **sparse** {Boolean, default:false}, creates a sparse index.\n *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.\n *  - **dropDups** {Boolean, default:false}, a unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.\n *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.\n *  - **v** {Number}, specify the format version of the indexes.\n *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n *\n * @param {Object} fieldOrSpec fieldOrSpec that defines the index.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback for results.\n * @return {null}\n * @api public\n */\nCollection.prototype.createIndex = function createIndex (fieldOrSpec, options, callback) {\n  // Clean up call\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  options = typeof callback === 'function' ? options : callback;\n  options = options == null ? {} : options;\n\n  // Collect errorOptions\n  var errorOptions = options.safe != null ? options.safe : null;\n  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;\n  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;\n\n  // If we have a write concern set and no callback throw error\n  if(errorOptions != null && errorOptions != false && (typeof callback !== 'function' && typeof options !== 'function')) throw new Error(\"safe cannot be used without a callback\");\n\n  // Execute create index\n  this.db.createIndex(this.collectionName, fieldOrSpec, options, callback);\n};\n\n/**\n * Ensures that an index exists, if it does not it creates it\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a\n *  - **unique** {Boolean, default:false}, creates an unique index.\n *  - **sparse** {Boolean, default:false}, creates a sparse index.\n *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.\n *  - **dropDups** {Boolean, default:false}, a unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.\n *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.\n *  - **v** {Number}, specify the format version of the indexes.\n *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n *\n * @param {Object} fieldOrSpec fieldOrSpec that defines the index.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback for results.\n * @return {null}\n * @api public\n */\nCollection.prototype.ensureIndex = function ensureIndex (fieldOrSpec, options, callback) {\n  // Clean up call\n  if (typeof callback === 'undefined' && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  if (options == null) {\n    options = {};\n  }\n\n  // Collect errorOptions\n  var errorOptions = options.safe != null ? options.safe : null;\n  errorOptions = errorOptions == null && this.opts.safe != null ? this.opts.safe : errorOptions;\n  errorOptions = errorOptions == null && this.db.strict != null ? this.db.strict : errorOptions;\n\n  // If we have a write concern set and no callback throw error\n  if(errorOptions != null && errorOptions != false && (typeof callback !== 'function' && typeof options !== 'function')) throw new Error(\"safe cannot be used without a callback\");\n\n  // Execute create index\n  this.db.ensureIndex(this.collectionName, fieldOrSpec, options, callback);\n};\n\n/**\n * Retrieves this collections index info.\n *\n * Options\n *  - **full** {Boolean, default:false}, returns the full raw index information.\n *\n * @param {Object} [options] additional options during update.\n * @param {Function} callback returns the index information.\n * @return {null}\n * @api public\n */\nCollection.prototype.indexInformation = function indexInformation (options, callback) {\n  // Unpack calls\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  // Call the index information\n  this.db.indexInformation(this.collectionName, options, callback);\n};\n\n/**\n * Drops an index from this collection.\n *\n * @param {String} name\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nCollection.prototype.dropIndex = function dropIndex (name, callback) {\n  this.db.dropIndex(this.collectionName, name, callback);\n};\n\n/**\n * Drops all indexes from this collection.\n *\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nCollection.prototype.dropAllIndexes = function dropIndexes (callback) {\n  this.db.dropIndex(this.collectionName, '*', function (err, result) {\n    if(err != null) {\n      callback(err, false);\n    } else if(result.documents[0].errmsg == null) {\n      callback(null, true);\n    } else {\n      callback(new Error(result.documents[0].errmsg), false);\n    }\n  });\n};\n\n/**\n * Drops all indexes from this collection.\n *\n * @deprecated\n * @param {Function} callback returns the results.\n * @return {null}\n * @api private\n */\nCollection.prototype.dropIndexes = Collection.prototype.dropAllIndexes;\n\n/**\n * Reindex all indexes on the collection\n * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n *\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n**/\nCollection.prototype.reIndex = function(callback) {\n  this.db.reIndex(this.collectionName, callback);\n}\n\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * Options\n *  - **out** {Object, default:*{inline:1}*}, sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*\n *  - **query** {Object}, query filter object.\n *  - **sort** {Object}, sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\n *  - **limit** {Number}, number of objects to return from collection.\n *  - **keeptemp** {Boolean, default:false}, keep temporary data.\n *  - **finalize** {Function | String}, finalize function.\n *  - **scope** {Object}, can pass in variables that can be access from map/reduce/finalize.\n *  - **jsMode** {Boolean, default:false}, it is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.\n *  - **verbose** {Boolean, default:false}, provide statistics on job execution time.\n *  - **readPreference** {String, only for inline results}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {Function|String} map the mapping function.\n * @param {Function|String} reduce the reduce function.\n * @param {Objects} [options] options for the map reduce job.\n * @param {Function} callback returns the result of the map reduce job, (error, results, [stats])\n * @return {null}\n * @api public\n */\nCollection.prototype.mapReduce = function mapReduce (map, reduce, options, callback) {\n  if ('function' === typeof options) callback = options, options = {};\n  // Out must allways be defined (make sure we don't break weirdly on pre 1.8+ servers)\n  if(null == options.out) {\n    throw new Error(\"the out option parameter must be defined, see mongodb docs for possible values\");\n  }\n\n  if ('function' === typeof map) {\n    map = map.toString();\n  }\n\n  if ('function' === typeof reduce) {\n    reduce = reduce.toString();\n  }\n\n  if ('function' === typeof options.finalize) {\n    options.finalize = options.finalize.toString();\n  }\n\n  var mapCommandHash = {\n      mapreduce: this.collectionName\n    , map: map\n    , reduce: reduce\n  };\n\n  // Add any other options passed in\n  for (var name in options) {\n    mapCommandHash[name] = options[name];\n  }\n\n  // Set read preference if we set one\n  var readPreference = options['readPreference'] ? options['readPreference'] : false;\n  // If we have a read preference and inline is not set as output fail hard\n  if(readPreference != false && options['out'] != 'inline') {\n    throw new Error(\"a readPreference can only be provided when performing an inline mapReduce\");\n  }\n\n  // self\n  var self = this;\n  var cmd = DbCommand.createDbCommand(this.db, mapCommandHash);\n\n  this.db._executeQueryCommand(cmd, {read:readPreference}, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n\n    //\n    if (1 != result.documents[0].ok || result.documents[0].err || result.documents[0].errmsg) {\n      return callback(self.db.wrap(result.documents[0]));\n    }\n\n    // Create statistics value\n    var stats = {};\n    if(result.documents[0].timeMillis) stats['processtime'] = result.documents[0].timeMillis;\n    if(result.documents[0].counts) stats['counts'] = result.documents[0].counts;\n    if(result.documents[0].timing) stats['timing'] = result.documents[0].timing;\n\n    // invoked with inline?\n    if(result.documents[0].results) {\n      return callback(null, result.documents[0].results, stats);\n    }\n\n    // The returned collection\n    var collection = null;\n\n    // If we have an object it's a different db\n    if(result.documents[0].result != null && typeof result.documents[0].result == 'object') {\n      var doc = result.documents[0].result;\n      collection = self.db.db(doc.db).collection(doc.collection);\n    } else {\n      // Create a collection object that wraps the result collection\n      collection = self.db.collection(result.documents[0].result)\n    }\n\n    // If we wish for no verbosity\n    if(options['verbose'] == null || !options['verbose']) {\n      return callback(err, collection);\n    }\n\n    // Return stats as third set of values\n    callback(err, collection, stats);\n  });\n};\n\n/**\n * Group function helper\n * @ignore\n */\nvar groupFunction = function () {\n  var c = db[ns].find(condition);\n  var map = new Map();\n  var reduce_function = reduce;\n\n  while (c.hasNext()) {\n    var obj = c.next();\n    var key = {};\n\n    for (var i = 0, len = keys.length; i < len; ++i) {\n      var k = keys[i];\n      key[k] = obj[k];\n    }\n\n    var aggObj = map.get(key);\n\n    if (aggObj == null) {\n      var newObj = Object.extend({}, key);\n      aggObj = Object.extend(newObj, initial);\n      map.put(key, aggObj);\n    }\n\n    reduce_function(obj, aggObj);\n  }\n\n  return { \"result\": map.values() };\n}.toString();\n\n/**\n * Run a group command across a collection\n  *\n * Options\n *  - **readPreference** {String}, the preferred read preference (Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {Object|Array|Function|Code} keys an object, array or function expressing the keys to group by.\n * @param {Object} condition an optional condition that must be true for a row to be considered.\n * @param {Object} initial initial value of the aggregation counter object.\n * @param {Function|Code} reduce the reduce function aggregates (reduces) the objects iterated\n * @param {Function|Code} finalize an optional function to be run on each item in the result set just before the item is returned.\n * @param {Boolean} command specify if you wish to run using the internal group command or using eval, default is true.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nCollection.prototype.group = function group(keys, condition, initial, reduce, finalize, command, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 3);\n  callback = args.pop();\n  // Fetch all commands\n  reduce = args.length ? args.shift() : null;\n  finalize = args.length ? args.shift() : null;\n  command = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  // Make sure we are backward compatible\n  if(!(typeof finalize == 'function')) {\n    command = finalize;\n    finalize = null;\n  }\n\n  if (!Array.isArray(keys) && keys instanceof Object && typeof(keys) !== 'function' && !(keys instanceof Code)) {\n    keys = Object.keys(keys);\n  }\n\n  if(typeof reduce === 'function') {\n    reduce = reduce.toString();\n  }\n\n  if(typeof finalize === 'function') {\n    finalize = finalize.toString();\n  }\n\n  // Set up the command as default\n  command = command == null ? true : command;\n\n  // Execute using the command\n  if(command) {\n    var reduceFunction = reduce instanceof Code\n        ? reduce\n        : new Code(reduce);\n\n    var selector = {\n      group: {\n          'ns': this.collectionName\n        , '$reduce': reduceFunction\n        , 'cond': condition\n        , 'initial': initial\n        , 'out': \"inline\"\n      }\n    };\n\n    // if finalize is defined\n    if(finalize != null) selector.group['finalize'] = finalize;\n    // Set up group selector\n    if ('function' === typeof keys || keys instanceof Code) {\n      selector.group.$keyf = keys instanceof Code\n        ? keys\n        : new Code(keys);\n    } else {\n      var hash = {};\n      keys.forEach(function (key) {\n        hash[key] = 1;\n      });\n      selector.group.key = hash;\n    }\n\n    var cmd = DbCommand.createDbSlaveOkCommand(this.db, selector);\n    // Set read preference if we set one\n    var readPreference = options['readPreference'] ? options['readPreference'] : false;\n\n    this.db._executeQueryCommand(cmd, {read:readPreference}, function (err, result) {\n      if(err != null) return callback(err);\n\n      var document = result.documents[0];\n      if (null == document.retval) {\n        return callback(new Error(\"group command failed: \" + document.errmsg));\n      }\n\n      callback(null, document.retval);\n    });\n\n  } else {\n    // Create execution scope\n    var scope = reduce != null && reduce instanceof Code\n      ? reduce.scope\n      : {};\n\n    scope.ns = this.collectionName;\n    scope.keys = keys;\n    scope.condition = condition;\n    scope.initial = initial;\n\n    // Pass in the function text to execute within mongodb.\n    var groupfn = groupFunction.replace(/ reduce;/, reduce.toString() + ';');\n\n    this.db.eval(new Code(groupfn, scope), function (err, results) {\n      if (err) return callback(err, null);\n      callback(null, results.result || results);\n    });\n  }\n};\n\n/**\n * Returns the options of the collection.\n *\n * @param {Function} callback returns option results.\n * @return {null}\n * @api public\n */\nCollection.prototype.options = function options(callback) {\n  this.db.collectionsInfo(this.collectionName, function (err, cursor) {\n    if (err) return callback(err);\n    cursor.nextObject(function (err, document) {\n      callback(err, document && document.options || null);\n    });\n  });\n};\n\n/**\n * Returns if the collection is a capped collection\n *\n * @param {Function} callback returns if collection is capped.\n * @return {null}\n * @api public\n */\nCollection.prototype.isCapped = function isCapped(callback) {\n  this.options(function(err, document) {\n    if(err != null) {\n      callback(err);\n    } else {\n      callback(null, document && document.capped);\n    }\n  });\n};\n\n/**\n * Checks if one or more indexes exist on the collection\n *\n * @param {String|Array} indexNames check if one or more indexes exist on the collection.\n * @param {Function} callback returns if the indexes exist.\n * @return {null}\n * @api public\n */\nCollection.prototype.indexExists = function indexExists(indexes, callback) {\n this.indexInformation(function(err, indexInformation) {\n   // If we have an error return\n   if(err != null) return callback(err, null);\n   // Let's check for the index names\n   if(Array.isArray(indexes)) {\n     for(var i = 0; i < indexes.length; i++) {\n       if(indexInformation[indexes[i]] == null) {\n         return callback(null, false);\n       }\n     }\n\n     // All keys found return true\n     return callback(null, true);\n   } else {\n     return callback(null, indexInformation[indexes] != null);\n   }\n });\n}\n\n/**\n * Execute the geoNear command to search for items in the collection\n *\n * Options\n *  - **num** {Number}, max number of results to return.\n *  - **maxDistance** {Number}, include results up to maxDistance from the point.\n *  - **distanceMultiplier** {Number}, include a value to multiply the distances with allowing for range conversions.\n *  - **query** {Object}, filter the results by a query.\n *  - **spherical** {Boolean, default:false}, perform query using a spherical model.\n *  - **uniqueDocs** {Boolean, default:false}, the closest location in a document to the center of the search region will always be returned MongoDB > 2.X.\n *  - **includeLocs** {Boolean, default:false}, include the location data fields in the top level of the results MongoDB > 2.X.\n *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {Number} x point to search on the x axis, ensure the indexes are ordered in the same order.\n * @param {Number} y point to search on the y axis, ensure the indexes are ordered in the same order.\n * @param {Objects} [options] options for the map reduce job.\n * @param {Function} callback returns matching documents.\n * @return {null}\n * @api public\n */\nCollection.prototype.geoNear = function geoNear(x, y, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  // Fetch all commands\n  options = args.length ? args.shift() : {};\n\n  // Build command object\n  var commandObject = {\n    geoNear:this.collectionName,\n    near: [x, y]\n  }\n\n  // Decorate object if any with known properties\n  if(options['num'] != null) commandObject['num'] = options['num'];\n  if(options['maxDistance'] != null) commandObject['maxDistance'] = options['maxDistance'];\n  if(options['distanceMultiplier'] != null) commandObject['distanceMultiplier'] = options['distanceMultiplier'];\n  if(options['query'] != null) commandObject['query'] = options['query'];\n  if(options['spherical'] != null) commandObject['spherical'] = options['spherical'];\n  if(options['uniqueDocs'] != null) commandObject['uniqueDocs'] = options['uniqueDocs'];\n  if(options['includeLocs'] != null) commandObject['includeLocs'] = options['includeLocs'];\n\n  // Execute the command\n  this.db.command(commandObject, options, callback);\n}\n\n/**\n * Execute a geo search using a geo haystack index on a collection.\n *\n * Options\n *  - **maxDistance** {Number}, include results up to maxDistance from the point.\n *  - **search** {Object}, filter the results by a query.\n *  - **limit** {Number}, max number of results to return.\n *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {Number} x point to search on the x axis, ensure the indexes are ordered in the same order.\n * @param {Number} y point to search on the y axis, ensure the indexes are ordered in the same order.\n * @param {Objects} [options] options for the map reduce job.\n * @param {Function} callback returns matching documents.\n * @return {null}\n * @api public\n */\nCollection.prototype.geoHaystackSearch = function geoHaystackSearch(x, y, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  // Fetch all commands\n  options = args.length ? args.shift() : {};\n\n  // Build command object\n  var commandObject = {\n    geoSearch:this.collectionName,\n    near: [x, y]\n  }\n\n  // Decorate object if any with known properties\n  if(options['maxDistance'] != null) commandObject['maxDistance'] = options['maxDistance'];\n  if(options['query'] != null) commandObject['search'] = options['query'];\n  if(options['search'] != null) commandObject['search'] = options['search'];\n  if(options['limit'] != null) commandObject['limit'] = options['limit'];\n\n  // Execute the command\n  this.db.command(commandObject, options, callback);\n}\n\n/**\n * Retrieve all the indexes on the collection.\n *\n * @param {Function} callback returns index information.\n * @return {null}\n * @api public\n */\nCollection.prototype.indexes = function indexes(callback) {\n  // Return all the index information\n  this.db.indexInformation(this.collectionName, {full:true}, callback);\n}\n\n/**\n * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.1\n *\n * Options\n *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {Array} array containing all the aggregation framework commands for the execution.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback returns matching documents.\n * @return {null}\n * @api public\n */\nCollection.prototype.aggregate = function(pipeline, options, callback) {\n  // *  - **explain** {Boolean}, return the query plan for the aggregation pipeline instead of the results. 2.3, 2.4\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  var self = this;\n  // Get the right options\n  options = args[args.length - 1].explain ? args.pop() : {}\n\n  // Convert operations to an array\n  if(!Array.isArray(args[0])) {\n    pipeline = [];\n    // Push all the operations to the pipeline\n    for(var i = 0; i < args.length; i++) pipeline.push(args[i]);\n  }\n\n  // Build the command\n  var command = { aggregate : this.collectionName, pipeline : pipeline};\n  // Add all options\n  var keys = Object.keys(options);\n  // Add all options\n  for(var i = 0; i < keys.length; i++) {\n    command[keys[i]] = options[keys[i]];\n  }\n\n  // Execute the command\n  this.db.command(command, options, function(err, result) {\n    if(err) {\n      callback(err);\n    } else if(result['err'] || result['errmsg']) {\n      callback(self.db.wrap(result));\n    } else if(typeof result == 'object' && result['serverPipeline']) {\n      callback(null, result);\n    } else {\n      callback(null, result.result);\n    }\n  });\n}\n\n/**\n * Get all the collection statistics.\n *\n * Options\n *  - **scale** {Number}, divide the returned sizes by scale value.\n *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {Objects} [options] options for the stats command.\n * @param {Function} callback returns statistical information for the collection.\n * @return {null}\n * @api public\n */\nCollection.prototype.stats = function stats(options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  // Fetch all commands\n  options = args.length ? args.shift() : {};\n\n  // Build command object\n  var commandObject = {\n    collStats:this.collectionName,\n  }\n\n  // Check if we have the scale value\n  if(options['scale'] != null) commandObject['scale'] = options['scale'];\n\n  // Execute the command\n  this.db.command(commandObject, options, callback);\n}\n\n/**\n * @ignore\n */\nObject.defineProperty(Collection.prototype, \"hint\", {\n    enumerable: true\n  , get: function () {\n      return this.internalHint;\n    }\n  , set: function (v) {\n      this.internalHint = normalizeHintField(v);\n    }\n});\n\n/**\n * Expose.\n */\nexports.Collection = Collection;",
        "blocks": {
          "total": 249,
          "seen": 25,
          "missing": 224,
          "percentage": 0.10040160642570281
        }
      },
      "hash": "03b75de06e3bb1c60f4297095de9c135"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/cursor.js": {
      "stats": {
        "percentage": 0.7836185819070904,
        "lines": [
          {
            "lineno": 56
          },
          {
            "lineno": 59
          },
          {
            "lineno": 61
          },
          {
            "lineno": 90
          },
          {
            "lineno": 92
          },
          {
            "lineno": 104
          },
          {
            "lineno": 106
          },
          {
            "lineno": 107
          },
          {
            "lineno": 108
          },
          {
            "lineno": 111
          },
          {
            "lineno": 112
          },
          {
            "lineno": 113
          },
          {
            "lineno": 114
          },
          {
            "lineno": 115
          },
          {
            "lineno": 116
          },
          {
            "lineno": 119
          },
          {
            "lineno": 137
          },
          {
            "lineno": 141
          },
          {
            "lineno": 146
          },
          {
            "lineno": 159
          },
          {
            "lineno": 179
          },
          {
            "lineno": 188
          },
          {
            "lineno": 200
          },
          {
            "lineno": 212
          },
          {
            "lineno": 229
          },
          {
            "lineno": 230
          },
          {
            "lineno": 233
          },
          {
            "lineno": 234
          },
          {
            "lineno": 235
          },
          {
            "lineno": 237
          },
          {
            "lineno": 239
          },
          {
            "lineno": 240
          },
          {
            "lineno": 243
          },
          {
            "lineno": 244
          },
          {
            "lineno": 246
          },
          {
            "lineno": 259
          },
          {
            "lineno": 260
          },
          {
            "lineno": 262
          },
          {
            "lineno": 265
          },
          {
            "lineno": 266
          },
          {
            "lineno": 268
          },
          {
            "lineno": 272
          },
          {
            "lineno": 273
          },
          {
            "lineno": 275
          },
          {
            "lineno": 279
          },
          {
            "lineno": 295
          },
          {
            "lineno": 296
          },
          {
            "lineno": 298
          },
          {
            "lineno": 299
          },
          {
            "lineno": 300
          },
          {
            "lineno": 301
          },
          {
            "lineno": 302
          },
          {
            "lineno": 304
          },
          {
            "lineno": 307
          },
          {
            "lineno": 319
          },
          {
            "lineno": 322
          },
          {
            "lineno": 323
          },
          {
            "lineno": 324
          },
          {
            "lineno": 326
          },
          {
            "lineno": 327
          },
          {
            "lineno": 329
          },
          {
            "lineno": 330
          },
          {
            "lineno": 334
          },
          {
            "lineno": 347
          },
          {
            "lineno": 348
          },
          {
            "lineno": 350
          },
          {
            "lineno": 353
          },
          {
            "lineno": 354
          },
          {
            "lineno": 356
          },
          {
            "lineno": 360
          },
          {
            "lineno": 379
          },
          {
            "lineno": 380
          },
          {
            "lineno": 401
          },
          {
            "lineno": 405
          },
          {
            "lineno": 406
          },
          {
            "lineno": 409
          },
          {
            "lineno": 410
          },
          {
            "lineno": 415
          },
          {
            "lineno": 419
          },
          {
            "lineno": 423
          },
          {
            "lineno": 435
          },
          {
            "lineno": 436
          },
          {
            "lineno": 437
          },
          {
            "lineno": 438
          },
          {
            "lineno": 439
          },
          {
            "lineno": 440
          },
          {
            "lineno": 441
          },
          {
            "lineno": 442
          },
          {
            "lineno": 443
          },
          {
            "lineno": 444
          },
          {
            "lineno": 446
          },
          {
            "lineno": 447
          },
          {
            "lineno": 448
          },
          {
            "lineno": 452
          },
          {
            "lineno": 465
          },
          {
            "lineno": 480
          },
          {
            "lineno": 497
          },
          {
            "lineno": 501
          },
          {
            "lineno": 504
          },
          {
            "lineno": 519
          },
          {
            "lineno": 520
          },
          {
            "lineno": 521
          },
          {
            "lineno": 529
          },
          {
            "lineno": 531
          },
          {
            "lineno": 560
          },
          {
            "lineno": 561
          },
          {
            "lineno": 562
          },
          {
            "lineno": 563
          },
          {
            "lineno": 581
          },
          {
            "lineno": 584
          },
          {
            "lineno": 592
          },
          {
            "lineno": 594
          },
          {
            "lineno": 595
          },
          {
            "lineno": 608
          },
          {
            "lineno": 610
          },
          {
            "lineno": 611
          },
          {
            "lineno": 612
          },
          {
            "lineno": 613
          },
          {
            "lineno": 616
          },
          {
            "lineno": 618
          },
          {
            "lineno": 619
          },
          {
            "lineno": 621
          },
          {
            "lineno": 626
          },
          {
            "lineno": 632
          },
          {
            "lineno": 633
          },
          {
            "lineno": 636
          },
          {
            "lineno": 637
          },
          {
            "lineno": 649
          },
          {
            "lineno": 651
          },
          {
            "lineno": 656
          },
          {
            "lineno": 657
          },
          {
            "lineno": 659
          },
          {
            "lineno": 660
          },
          {
            "lineno": 661
          },
          {
            "lineno": 670
          },
          {
            "lineno": 671
          },
          {
            "lineno": 672
          },
          {
            "lineno": 674
          },
          {
            "lineno": 677
          },
          {
            "lineno": 679
          },
          {
            "lineno": 682
          },
          {
            "lineno": 684
          },
          {
            "lineno": 687
          },
          {
            "lineno": 688
          },
          {
            "lineno": 689
          },
          {
            "lineno": 690
          },
          {
            "lineno": 691
          },
          {
            "lineno": 694
          },
          {
            "lineno": 695
          },
          {
            "lineno": 696
          },
          {
            "lineno": 697
          },
          {
            "lineno": 698
          },
          {
            "lineno": 701
          },
          {
            "lineno": 702
          },
          {
            "lineno": 703
          },
          {
            "lineno": 704
          },
          {
            "lineno": 705
          },
          {
            "lineno": 708
          },
          {
            "lineno": 710
          },
          {
            "lineno": 711
          },
          {
            "lineno": 712
          },
          {
            "lineno": 714
          },
          {
            "lineno": 715
          },
          {
            "lineno": 718
          },
          {
            "lineno": 720
          },
          {
            "lineno": 721
          },
          {
            "lineno": 723
          },
          {
            "lineno": 724
          },
          {
            "lineno": 728
          },
          {
            "lineno": 730
          },
          {
            "lineno": 731
          },
          {
            "lineno": 737
          },
          {
            "lineno": 747
          },
          {
            "lineno": 759
          },
          {
            "lineno": 763
          },
          {
            "lineno": 764
          },
          {
            "lineno": 790
          }
        ],
        "missing": 177,
        "seen": 641,
        "seen_lines": [
          {
            "s": 1,
            "e": 7
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 49,
            "e": 49
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 53,
            "e": 53
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 55,
            "e": 55
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 56,
            "e": 56
          },
          {
            "s": 57,
            "e": 57
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 60,
            "e": 60
          },
          {
            "s": 61,
            "e": 61
          },
          {
            "s": 61,
            "e": 61
          },
          {
            "s": 61,
            "e": 61
          },
          {
            "s": 61,
            "e": 61
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 66,
            "e": 66
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 68,
            "e": 68
          },
          {
            "s": 69,
            "e": 69
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 72,
            "e": 72
          },
          {
            "s": 72,
            "e": 72
          },
          {
            "s": 72,
            "e": 72
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 75,
            "e": 75
          },
          {
            "s": 76,
            "e": 76
          },
          {
            "s": 77,
            "e": 77
          },
          {
            "s": 77,
            "e": 77
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 86,
            "e": 86
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 103,
            "e": 120
          },
          {
            "s": 133,
            "e": 161
          },
          {
            "s": 134,
            "e": 134
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 142,
            "e": 142
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 145,
            "e": 157
          },
          {
            "s": 145,
            "e": 157
          },
          {
            "s": 146,
            "e": 146
          },
          {
            "s": 146,
            "e": 146
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 149,
            "e": 149
          },
          {
            "s": 149,
            "e": 149
          },
          {
            "s": 151,
            "e": 151
          },
          {
            "s": 152,
            "e": 152
          },
          {
            "s": 153,
            "e": 153
          },
          {
            "s": 155,
            "e": 155
          },
          {
            "s": 155,
            "e": 155
          },
          {
            "s": 175,
            "e": 202
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 178,
            "e": 178
          },
          {
            "s": 178,
            "e": 178
          },
          {
            "s": 182,
            "e": 182
          },
          {
            "s": 184,
            "e": 198
          },
          {
            "s": 184,
            "e": 198
          },
          {
            "s": 185,
            "e": 187
          },
          {
            "s": 187,
            "e": 197
          },
          {
            "s": 187,
            "e": 197
          },
          {
            "s": 188,
            "e": 188
          },
          {
            "s": 188,
            "e": 188
          },
          {
            "s": 189,
            "e": 189
          },
          {
            "s": 189,
            "e": 189
          },
          {
            "s": 190,
            "e": 190
          },
          {
            "s": 190,
            "e": 190
          },
          {
            "s": 191,
            "e": 191
          },
          {
            "s": 191,
            "e": 191
          },
          {
            "s": 194,
            "e": 194
          },
          {
            "s": 195,
            "e": 195
          },
          {
            "s": 195,
            "e": 195
          },
          {
            "s": 211,
            "e": 213
          },
          {
            "s": 228,
            "e": 247
          },
          {
            "s": 257,
            "e": 284
          },
          {
            "s": 264,
            "e": 264
          },
          {
            "s": 264,
            "e": 264
          },
          {
            "s": 264,
            "e": 264
          },
          {
            "s": 271,
            "e": 271
          },
          {
            "s": 271,
            "e": 271
          },
          {
            "s": 271,
            "e": 271
          },
          {
            "s": 271,
            "e": 271
          },
          {
            "s": 271,
            "e": 271
          },
          {
            "s": 278,
            "e": 278
          },
          {
            "s": 279,
            "e": 279
          },
          {
            "s": 283,
            "e": 283
          },
          {
            "s": 294,
            "e": 318
          },
          {
            "s": 318,
            "e": 335
          },
          {
            "s": 345,
            "e": 364
          },
          {
            "s": 346,
            "e": 346
          },
          {
            "s": 352,
            "e": 352
          },
          {
            "s": 352,
            "e": 352
          },
          {
            "s": 352,
            "e": 352
          },
          {
            "s": 352,
            "e": 352
          },
          {
            "s": 352,
            "e": 352
          },
          {
            "s": 359,
            "e": 359
          },
          {
            "s": 360,
            "e": 360
          },
          {
            "s": 360,
            "e": 360
          },
          {
            "s": 363,
            "e": 363
          },
          {
            "s": 373,
            "e": 387
          },
          {
            "s": 374,
            "e": 374
          },
          {
            "s": 375,
            "e": 375
          },
          {
            "s": 375,
            "e": 375
          },
          {
            "s": 376,
            "e": 376
          },
          {
            "s": 376,
            "e": 376
          },
          {
            "s": 378,
            "e": 378
          },
          {
            "s": 378,
            "e": 378
          },
          {
            "s": 383,
            "e": 383
          },
          {
            "s": 386,
            "e": 386
          },
          {
            "s": 397,
            "e": 456
          },
          {
            "s": 399,
            "e": 399
          },
          {
            "s": 400,
            "e": 400
          },
          {
            "s": 404,
            "e": 404
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 430,
            "e": 432
          },
          {
            "s": 430,
            "e": 432
          },
          {
            "s": 430,
            "e": 431
          },
          {
            "s": 430,
            "e": 431
          },
          {
            "s": 430,
            "e": 431
          },
          {
            "s": 430,
            "e": 431
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 431,
            "e": 431
          },
          {
            "s": 431,
            "e": 431
          },
          {
            "s": 431,
            "e": 431
          },
          {
            "s": 431,
            "e": 431
          },
          {
            "s": 432,
            "e": 432
          },
          {
            "s": 432,
            "e": 432
          },
          {
            "s": 454,
            "e": 454
          },
          {
            "s": 464,
            "e": 466
          },
          {
            "s": 479,
            "e": 481
          },
          {
            "s": 489,
            "e": 556
          },
          {
            "s": 490,
            "e": 490
          },
          {
            "s": 492,
            "e": 492
          },
          {
            "s": 493,
            "e": 493
          },
          {
            "s": 495,
            "e": 495
          },
          {
            "s": 495,
            "e": 495
          },
          {
            "s": 500,
            "e": 524
          },
          {
            "s": 501,
            "e": 501
          },
          {
            "s": 501,
            "e": 501
          },
          {
            "s": 501,
            "e": 501
          },
          {
            "s": 503,
            "e": 503
          },
          {
            "s": 503,
            "e": 503
          },
          {
            "s": 503,
            "e": 503
          },
          {
            "s": 503,
            "e": 503
          },
          {
            "s": 507,
            "e": 507
          },
          {
            "s": 508,
            "e": 508
          },
          {
            "s": 509,
            "e": 509
          },
          {
            "s": 510,
            "e": 510
          },
          {
            "s": 514,
            "e": 514
          },
          {
            "s": 514,
            "e": 514
          },
          {
            "s": 514,
            "e": 514
          },
          {
            "s": 515,
            "e": 515
          },
          {
            "s": 515,
            "e": 515
          },
          {
            "s": 519,
            "e": 519
          },
          {
            "s": 521,
            "e": 521
          },
          {
            "s": 521,
            "e": 521
          },
          {
            "s": 522,
            "e": 522
          },
          {
            "s": 522,
            "e": 522
          },
          {
            "s": 527,
            "e": 527
          },
          {
            "s": 529,
            "e": 529
          },
          {
            "s": 529,
            "e": 529
          },
          {
            "s": 529,
            "e": 529
          },
          {
            "s": 529,
            "e": 529
          },
          {
            "s": 536,
            "e": 536
          },
          {
            "s": 536,
            "e": 536
          },
          {
            "s": 538,
            "e": 538
          },
          {
            "s": 540,
            "e": 540
          },
          {
            "s": 540,
            "e": 540
          },
          {
            "s": 540,
            "e": 540
          },
          {
            "s": 541,
            "e": 541
          },
          {
            "s": 541,
            "e": 541
          },
          {
            "s": 542,
            "e": 542
          },
          {
            "s": 542,
            "e": 542
          },
          {
            "s": 545,
            "e": 545
          },
          {
            "s": 545,
            "e": 545
          },
          {
            "s": 545,
            "e": 545
          },
          {
            "s": 545,
            "e": 545
          },
          {
            "s": 556,
            "e": 648
          },
          {
            "s": 557,
            "e": 557
          },
          {
            "s": 559,
            "e": 559
          },
          {
            "s": 559,
            "e": 559
          },
          {
            "s": 559,
            "e": 559
          },
          {
            "s": 567,
            "e": 572
          },
          {
            "s": 570,
            "e": 570
          },
          {
            "s": 575,
            "e": 575
          },
          {
            "s": 578,
            "e": 628
          },
          {
            "s": 578,
            "e": 628
          },
          {
            "s": 580,
            "e": 580
          },
          {
            "s": 580,
            "e": 580
          },
          {
            "s": 584,
            "e": 584
          },
          {
            "s": 584,
            "e": 584
          },
          {
            "s": 584,
            "e": 584
          },
          {
            "s": 586,
            "e": 586
          },
          {
            "s": 587,
            "e": 587
          },
          {
            "s": 590,
            "e": 590
          },
          {
            "s": 591,
            "e": 591
          },
          {
            "s": 600,
            "e": 600
          },
          {
            "s": 602,
            "e": 602
          },
          {
            "s": 602,
            "e": 602
          },
          {
            "s": 602,
            "e": 602
          },
          {
            "s": 603,
            "e": 603
          },
          {
            "s": 603,
            "e": 603
          },
          {
            "s": 607,
            "e": 607
          },
          {
            "s": 607,
            "e": 607
          },
          {
            "s": 607,
            "e": 607
          },
          {
            "s": 624,
            "e": 624
          },
          {
            "s": 630,
            "e": 630
          },
          {
            "s": 648,
            "e": 664
          },
          {
            "s": 669,
            "e": 738
          },
          {
            "s": 746,
            "e": 757
          },
          {
            "s": 757,
            "e": 781
          },
          {
            "s": 758,
            "e": 759
          },
          {
            "s": 759,
            "e": 759
          },
          {
            "s": 759,
            "e": 759
          },
          {
            "s": 761,
            "e": 761
          },
          {
            "s": 761,
            "e": 761
          },
          {
            "s": 761,
            "e": 761
          },
          {
            "s": 761,
            "e": 761
          },
          {
            "s": 761,
            "e": 761
          },
          {
            "s": 769,
            "e": 769
          },
          {
            "s": 771,
            "e": 771
          },
          {
            "s": 771,
            "e": 771
          },
          {
            "s": 773,
            "e": 773
          },
          {
            "s": 775,
            "e": 775
          },
          {
            "s": 776,
            "e": 776
          },
          {
            "s": 776,
            "e": 776
          },
          {
            "s": 777,
            "e": 777
          },
          {
            "s": 780,
            "e": 780
          },
          {
            "s": 789,
            "e": 791
          },
          {
            "s": 798,
            "e": 798
          },
          {
            "s": 805,
            "e": 805
          },
          {
            "s": 812,
            "e": 812
          },
          {
            "s": 818,
            "e": 818
          }
        ],
        "total": 818,
        "coverage": {
          "56": {
            "partial": true,
            "source": "  this.timeout = timeout == null ? true : timeout;",
            "missing": [
              {
                "startCol": 42,
                "endCol": 49
              }
            ]
          },
          "59": {
            "partial": true,
            "source": "  this.numberOfRetries = numberOfRetries == null ? 5 : numberOfRetries;",
            "missing": [
              {
                "startCol": 55,
                "endCol": 70
              }
            ]
          },
          "61": {
            "partial": true,
            "source": "  this.batchSizeValue = batchSize == null ? 0 : batchSize;",
            "missing": [
              {
                "startCol": 48,
                "endCol": 57
              }
            ]
          },
          "90": {
            "partial": false,
            "source": "    this.collectionName = this.dbName + \".\" + this.collection.collectionName;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 77
              },
              {
                "startCol": 26,
                "endCol": 43
              }
            ]
          },
          "92": {
            "partial": true,
            "source": "    this.collectionName = (this.db.databaseName ? this.db.databaseName + \".\" : '') + this.collection.collectionName;",
            "missing": [
              {
                "startCol": 79,
                "endCol": 81
              }
            ]
          },
          "104": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "106": {
            "partial": false,
            "source": "  if (self.state != Cursor.INIT) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 31
              }
            ]
          },
          "107": {
            "partial": false,
            "source": "    if (self.state != Cursor.CLOSED) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 35
              }
            ]
          },
          "108": {
            "partial": false,
            "source": "      self.close(function() {});",
            "missing": [
              {
                "startCol": 6,
                "endCol": 31
              }
            ]
          },
          "111": {
            "partial": false,
            "source": "    self.numberOfReturned = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              }
            ]
          },
          "112": {
            "partial": false,
            "source": "    self.totalNumberOfRecords = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "113": {
            "partial": false,
            "source": "    self.items = [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "114": {
            "partial": false,
            "source": "    self.cursorId = Long.fromInt(0);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 36
              },
              {
                "startCol": 20,
                "endCol": 35
              }
            ]
          },
          "115": {
            "partial": false,
            "source": "    self.state = Cursor.INIT;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "116": {
            "partial": false,
            "source": "    self.queryRun = false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "119": {
            "partial": false,
            "source": "  return self;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "137": {
            "partial": false,
            "source": "    throw new Error('callback is mandatory');",
            "missing": [
              {
                "startCol": 4,
                "endCol": 45
              }
            ]
          },
          "141": {
            "partial": false,
            "source": "    callback(new Error(\"Tailable cursor cannot be converted to array\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 77
              }
            ]
          },
          "146": {
            "partial": true,
            "source": "      if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 22,
                "endCol": 49
              },
              {
                "startCol": 29,
                "endCol": 48
              }
            ]
          },
          "159": {
            "partial": false,
            "source": "    callback(new Error(\"Cursor is closed\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 49
              }
            ]
          },
          "179": {
            "partial": false,
            "source": "    throw new Error('callback is mandatory');",
            "missing": [
              {
                "startCol": 4,
                "endCol": 45
              }
            ]
          },
          "188": {
            "partial": true,
            "source": "        if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 24,
                "endCol": 51
              },
              {
                "startCol": 31,
                "endCol": 50
              }
            ]
          },
          "200": {
            "partial": false,
            "source": "    callback(new Error(\"Cursor is closed\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 49
              }
            ]
          },
          "212": {
            "partial": false,
            "source": "  this.collection.count(this.selector, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              }
            ]
          },
          "229": {
            "partial": false,
            "source": "  callback = callback || function(){};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 38
              },
              {
                "startCol": 13,
                "endCol": 21
              }
            ]
          },
          "230": {
            "partial": false,
            "source": "  if(typeof direction === \"function\") { callback = direction; direction = null; }",
            "missing": [
              {
                "startCol": 5,
                "endCol": 21
              },
              {
                "startCol": 12,
                "endCol": 21
              },
              {
                "startCol": 40,
                "endCol": 61
              },
              {
                "startCol": 62,
                "endCol": 79
              }
            ]
          },
          "233": {
            "partial": false,
            "source": "    callback(new Error(\"Tailable cursor doesn't support sorting\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 72
              }
            ]
          },
          "234": {
            "partial": false,
            "source": "  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 37,
                "endCol": 64
              }
            ]
          },
          "235": {
            "partial": false,
            "source": "    callback(new Error(\"Cursor is closed\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 49
              }
            ]
          },
          "237": {
            "partial": false,
            "source": "    var order = keyOrList;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "239": {
            "partial": false,
            "source": "    if(direction != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 16
              }
            ]
          },
          "240": {
            "partial": false,
            "source": "      order = [[keyOrList, direction]];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 39
              }
            ]
          },
          "243": {
            "partial": false,
            "source": "    this.sortValue = order;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "244": {
            "partial": false,
            "source": "    callback(null, this);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "246": {
            "partial": false,
            "source": "  return this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "259": {
            "partial": false,
            "source": "    if(callback) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 15
              }
            ]
          },
          "260": {
            "partial": false,
            "source": "      callback(new Error(\"Tailable cursor doesn't support limit\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 72
              }
            ]
          },
          "262": {
            "partial": false,
            "source": "      throw new Error(\"Tailable cursor doesn't support limit\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 63
              }
            ]
          },
          "265": {
            "partial": false,
            "source": "    if(callback) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 15
              }
            ]
          },
          "266": {
            "partial": false,
            "source": "      callback(new Error(\"Cursor is closed\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 51
              }
            ]
          },
          "268": {
            "partial": false,
            "source": "      throw new Error(\"Cursor is closed\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 42
              }
            ]
          },
          "272": {
            "partial": false,
            "source": "      if(callback) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 17
              }
            ]
          },
          "273": {
            "partial": false,
            "source": "        callback(new Error(\"limit requires an integer\"), null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 62
              }
            ]
          },
          "275": {
            "partial": false,
            "source": "        throw new Error(\"limit requires an integer\");",
            "missing": [
              {
                "startCol": 8,
                "endCol": 53
              }
            ]
          },
          "279": {
            "partial": true,
            "source": "      if(callback) return callback(null, this);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 47
              },
              {
                "startCol": 26,
                "endCol": 46
              }
            ]
          },
          "295": {
            "partial": false,
            "source": "  if(typeof tags == 'function') callback = tags;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 16
              },
              {
                "startCol": 12,
                "endCol": 16
              },
              {
                "startCol": 32,
                "endCol": 48
              }
            ]
          },
          "296": {
            "partial": false,
            "source": "  callback = callback || function() {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              },
              {
                "startCol": 13,
                "endCol": 21
              }
            ]
          },
          "298": {
            "partial": false,
            "source": "  if(this.queryRun == true || this.state == Cursor.CLOSED) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 26
              },
              {
                "startCol": 30,
                "endCol": 57
              }
            ]
          },
          "299": {
            "partial": false,
            "source": "    callback(new Error(\"Cannot change read preference on executed query or closed cursor\"));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 91
              }
            ]
          },
          "300": {
            "partial": false,
            "source": "  } else if(readPreference == null && readPreference != 'primary'",
            "missing": [
              {
                "startCol": 12,
                "endCol": 65
              },
              {
                "startCol": 38,
                "endCol": 65
              },
              {}
            ]
          },
          "301": {
            "partial": false,
            "source": "    && readPreference != 'secondaryOnly' && readPreference != 'secondary') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 21
              },
              {
                "startCol": 44,
                "endCol": 58
              },
              {}
            ]
          },
          "302": {
            "partial": false,
            "source": "      callback(new Error(\"only readPreference of primary, secondary or secondaryOnly supported\"));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 97
              }
            ]
          },
          "304": {
            "partial": false,
            "source": "    this.read = readPreference;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              }
            ]
          },
          "307": {
            "partial": false,
            "source": "  return this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "319": {
            "partial": false,
            "source": "  callback = callback || function(){};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 38
              },
              {
                "startCol": 13,
                "endCol": 21
              }
            ]
          },
          "322": {
            "partial": false,
            "source": "    callback(new Error(\"Tailable cursor doesn't support skip\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 69
              }
            ]
          },
          "323": {
            "partial": false,
            "source": "  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 37,
                "endCol": 64
              }
            ]
          },
          "324": {
            "partial": false,
            "source": "    callback(new Error(\"Cursor is closed\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 49
              }
            ]
          },
          "326": {
            "partial": false,
            "source": "    if(skip != null && skip.constructor != Number) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 11
              },
              {
                "startCol": 23,
                "endCol": 49
              },
              {
                "startCol": 43,
                "endCol": 49
              }
            ]
          },
          "327": {
            "partial": false,
            "source": "      callback(new Error(\"skip requires an integer\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 59
              }
            ]
          },
          "329": {
            "partial": false,
            "source": "      this.skipValue = skip;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 28
              }
            ]
          },
          "330": {
            "partial": false,
            "source": "      callback(null, this);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 26
              }
            ]
          },
          "334": {
            "partial": false,
            "source": "  return this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "347": {
            "partial": false,
            "source": "    if(callback != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 15
              }
            ]
          },
          "348": {
            "partial": false,
            "source": "      return callback(new Error(\"Cursor is closed\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 59
              },
              {
                "startCol": 13,
                "endCol": 58
              }
            ]
          },
          "350": {
            "partial": false,
            "source": "      throw new Error(\"Cursor is closed\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 42
              }
            ]
          },
          "353": {
            "partial": false,
            "source": "    if(callback != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 15
              }
            ]
          },
          "354": {
            "partial": false,
            "source": "      return callback(new Error(\"batchSize requires an integer\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 72
              },
              {
                "startCol": 13,
                "endCol": 71
              }
            ]
          },
          "356": {
            "partial": false,
            "source": "      throw new Error(\"batchSize requires an integer\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 55
              }
            ]
          },
          "360": {
            "partial": true,
            "source": "    if(callback != null) return callback(null, this);",
            "missing": [
              {
                "startCol": 25,
                "endCol": 53
              },
              {
                "startCol": 32,
                "endCol": 52
              }
            ]
          },
          "379": {
            "partial": false,
            "source": "    if (absBatchValue > 0) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 21
              }
            ]
          },
          "380": {
            "partial": false,
            "source": "      requestedLimit = Math.min(absLimitValue, absBatchValue);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 62
              },
              {
                "startCol": 23,
                "endCol": 61
              }
            ]
          },
          "401": {
            "partial": false,
            "source": "    queryOptions |= QueryCommand.OPTS_NO_CURSOR_TIMEOUT;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 56
              }
            ]
          },
          "405": {
            "partial": false,
            "source": "    queryOptions |= QueryCommand.OPTS_TAILABLE_CURSOR;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 54
              }
            ]
          },
          "406": {
            "partial": false,
            "source": "    self.skipValue = self.limitValue = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "409": {
            "partial": false,
            "source": "    if(self.awaitdata != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 29
              }
            ]
          },
          "410": {
            "partial": false,
            "source": "      queryOptions |= QueryCommand.OPTS_AWAIT_DATA;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 51
              }
            ]
          },
          "415": {
            "partial": false,
            "source": "    queryOptions |= QueryCommand.OPTS_EXHAUST;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 46
              }
            ]
          },
          "419": {
            "partial": false,
            "source": "    queryOptions |= QueryCommand.OPTS_SLAVE;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 44
              }
            ]
          },
          "423": {
            "partial": false,
            "source": "    queryOptions |= QueryCommand.OPTS_PARTIAL;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 46
              }
            ]
          },
          "435": {
            "partial": false,
            "source": "    var specialSelector = {'$query':self.selector};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              }
            ]
          },
          "436": {
            "partial": false,
            "source": "    if(self.sortValue != null) specialSelector['orderby'] = utils.formattedOrderClause(self.sortValue);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 29
              },
              {
                "startCol": 31,
                "endCol": 103
              },
              {
                "startCol": 60,
                "endCol": 102
              }
            ]
          },
          "437": {
            "partial": false,
            "source": "    if(self.hint != null && self.hint.constructor == Object) specialSelector['$hint'] = self.hint;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 24
              },
              {
                "startCol": 28,
                "endCol": 59
              },
              {
                "startCol": 53,
                "endCol": 59
              },
              {
                "startCol": 61,
                "endCol": 98
              }
            ]
          },
          "438": {
            "partial": false,
            "source": "    if(self.snapshot != null) specialSelector['$snapshot'] = true;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 28
              },
              {
                "startCol": 30,
                "endCol": 66
              }
            ]
          },
          "439": {
            "partial": false,
            "source": "    if(self.returnKey != null) specialSelector['$returnKey'] = self.returnKey;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 29
              },
              {
                "startCol": 31,
                "endCol": 78
              }
            ]
          },
          "440": {
            "partial": false,
            "source": "    if(self.maxScan != null) specialSelector['$maxScan'] = self.maxScan;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 27
              },
              {
                "startCol": 29,
                "endCol": 72
              }
            ]
          },
          "441": {
            "partial": false,
            "source": "    if(self.min != null) specialSelector['$min'] = self.min;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 23
              },
              {
                "startCol": 25,
                "endCol": 60
              }
            ]
          },
          "442": {
            "partial": false,
            "source": "    if(self.max != null) specialSelector['$max'] = self.max;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 23
              },
              {
                "startCol": 25,
                "endCol": 60
              }
            ]
          },
          "443": {
            "partial": false,
            "source": "    if(self.showDiskLoc != null) specialSelector['$showDiskLoc'] = self.showDiskLoc;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 31
              },
              {
                "startCol": 33,
                "endCol": 84
              }
            ]
          },
          "444": {
            "partial": false,
            "source": "    if(self.comment != null) specialSelector['$comment'] = self.comment;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 27
              },
              {
                "startCol": 29,
                "endCol": 72
              }
            ]
          },
          "446": {
            "partial": false,
            "source": "    if(self.explainValue != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 32
              }
            ]
          },
          "447": {
            "partial": false,
            "source": "      numberToReturn = (-1)*Math.abs(numberToReturn);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 53
              },
              {
                "startCol": 23,
                "endCol": 27
              },
              {
                "startCol": 28,
                "endCol": 52
              }
            ]
          },
          "448": {
            "partial": false,
            "source": "      specialSelector['$explain'] = true;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 41
              }
            ]
          },
          "452": {
            "partial": false,
            "source": "    return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, specialSelector, self.fields);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 134
              }
            ]
          },
          "465": {
            "partial": false,
            "source": "  return utils.formattedOrderClause(this.sortValue);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 52
              },
              {
                "startCol": 9,
                "endCol": 51
              }
            ]
          },
          "480": {
            "partial": false,
            "source": "  return utils.formatSortValue(sortDirection);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 9,
                "endCol": 45
              }
            ]
          },
          "497": {
            "partial": false,
            "source": "      return callback(err, null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 33
              },
              {
                "startCol": 13,
                "endCol": 32
              }
            ]
          },
          "501": {
            "partial": true,
            "source": "      if(err != null && result == null) return callback(err, null);",
            "missing": [
              {
                "startCol": 24,
                "endCol": 30
              },
              {
                "startCol": 40,
                "endCol": 67
              },
              {
                "startCol": 47,
                "endCol": 66
              }
            ]
          },
          "504": {
            "partial": false,
            "source": "        return self.close(function() {callback(result.documents[0]['$err'], null);});",
            "missing": [
              {
                "startCol": 8,
                "endCol": 85
              },
              {
                "startCol": 15,
                "endCol": 84
              },
              {
                "startCol": 38,
                "endCol": 81
              }
            ]
          },
          "519": {
            "partial": true,
            "source": "      if(self.exhaust && result.cursorId.toString() == \"0\") {",
            "missing": [
              {
                "startCol": 25,
                "endCol": 51
              }
            ]
          },
          "520": {
            "partial": false,
            "source": "        self.nextObject(callback);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 33
              }
            ]
          },
          "521": {
            "partial": true,
            "source": "      } else if(self.exhaust == false || self.exhaust == null) {",
            "missing": [
              {
                "startCol": 41,
                "endCol": 61
              }
            ]
          },
          "529": {
            "partial": true,
            "source": "        self.connection = this.read == null ? self.db.serverConfig.checkoutWriter() : self.db.serverConfig.checkoutReader(this.read);",
            "missing": [
              {
                "startCol": 46,
                "endCol": 83
              }
            ]
          },
          "531": {
            "partial": false,
            "source": "        return callback(err, null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 35
              },
              {
                "startCol": 15,
                "endCol": 34
              }
            ]
          },
          "560": {
            "partial": false,
            "source": "    limit = self.limitValue - self.totalNumberOfRecords;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 56
              },
              {
                "startCol": 12,
                "endCol": 55
              }
            ]
          },
          "561": {
            "partial": false,
            "source": "    if (limit < 1) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 13
              }
            ]
          },
          "562": {
            "partial": false,
            "source": "      self.close(function() {callback(null, null);});",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              },
              {
                "startCol": 29,
                "endCol": 49
              }
            ]
          },
          "563": {
            "partial": false,
            "source": "      return;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 13
              }
            ]
          },
          "581": {
            "partial": false,
            "source": "          return callback(err, null);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 37
              },
              {
                "startCol": 17,
                "endCol": 36
              }
            ]
          },
          "584": {
            "partial": true,
            "source": "        var isDead = 1 === result.responseFlag && result.cursorId.isZero();",
            "missing": [
              {
                "startCol": 50,
                "endCol": 74
              }
            ]
          },
          "592": {
            "partial": false,
            "source": "            var excessResult = self.totalNumberOfRecords - self.limitValue;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 75
              },
              {
                "startCol": 31,
                "endCol": 74
              }
            ]
          },
          "594": {
            "partial": false,
            "source": "            if (excessResult > 0) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 28
              }
            ]
          },
          "595": {
            "partial": false,
            "source": "              result.documents.splice(-1 * excessResult, excessResult);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 70
              },
              {
                "startCol": 38,
                "endCol": 40
              },
              {
                "startCol": 43,
                "endCol": 55
              }
            ]
          },
          "608": {
            "partial": false,
            "source": "        } else if(self.tailable && !isDead && self.awaitdata) {",
            "missing": [
              {
                "startCol": 18,
                "endCol": 42
              },
              {
                "startCol": 35,
                "endCol": 42
              },
              {
                "startCol": 36,
                "endCol": 42
              }
            ]
          },
          "610": {
            "partial": false,
            "source": "          self.currentNumberOfRetries = self.currentNumberOfRetries - 1;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 72
              },
              {
                "startCol": 40,
                "endCol": 71
              }
            ]
          },
          "611": {
            "partial": false,
            "source": "          if(self.currentNumberOfRetries == 0) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 45
              }
            ]
          },
          "612": {
            "partial": false,
            "source": "            self.close(function() {",
            "missing": [
              {}
            ]
          },
          "613": {
            "partial": false,
            "source": "              callback(new Error(\"tailable cursor timed out\"), null);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 68
              },
              {}
            ]
          },
          "614": {
            "partial": false,
            "source": "            });",
            "missing": [
              {}
            ]
          },
          "616": {
            "partial": false,
            "source": "            process.nextTick(function() { getMore(self, callback); });",
            "missing": [
              {
                "startCol": 12,
                "endCol": 69
              },
              {
                "startCol": 42,
                "endCol": 65
              }
            ]
          },
          "618": {
            "partial": false,
            "source": "        } else if(self.tailable && !isDead) {",
            "missing": [
              {
                "startCol": 18,
                "endCol": 42
              },
              {
                "startCol": 35,
                "endCol": 42
              },
              {
                "startCol": 36,
                "endCol": 42
              }
            ]
          },
          "619": {
            "partial": false,
            "source": "          self.getMoreTimer = setTimeout(function() { getMore(self, callback); }, self.tailableRetryInterval);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 110
              },
              {
                "startCol": 30,
                "endCol": 109
              },
              {
                "startCol": 54,
                "endCol": 77
              }
            ]
          },
          "621": {
            "partial": false,
            "source": "          self.close(function() {callback(null, null); });",
            "missing": [
              {
                "startCol": 10,
                "endCol": 57
              },
              {
                "startCol": 33,
                "endCol": 53
              }
            ]
          },
          "626": {
            "partial": false,
            "source": "        callback(err, null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 27
              }
            ]
          },
          "632": {
            "partial": false,
            "source": "    var handleClose = function() {",
            "missing": [
              {}
            ]
          },
          "633": {
            "partial": false,
            "source": "      callback(err, null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 25
              },
              {}
            ]
          },
          "634": {
            "partial": false,
            "source": "    };",
            "missing": [
              {}
            ]
          },
          "636": {
            "partial": false,
            "source": "    self.close(handleClose);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "637": {
            "partial": false,
            "source": "    handleClose = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "649": {
            "partial": false,
            "source": "  var limit = (-1)*Math.abs(this.limitValue);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 14,
                "endCol": 18
              },
              {
                "startCol": 19,
                "endCol": 44
              }
            ]
          },
          "651": {
            "partial": false,
            "source": "  var cursor = new Cursor(this.db, this.collection, this.selector, this.fields, this.skipValue, limit",
            "missing": [
              {}
            ]
          },
          "652": {
            "partial": false,
            "source": "                          , this.sortValue, this.hint, true, this.snapshot, this.timeout, this.tailable, this.batchSizeValue",
            "missing": [
              {}
            ]
          },
          "653": {
            "partial": false,
            "source": "                          , this.slaveOk, this.raw, this.read, this.returnKey, this.maxScan, this.min, this.max, this.showDiskLoc",
            "missing": [
              {}
            ]
          },
          "654": {
            "partial": false,
            "source": "                          , this.comment, this.awaitdata, this.numberOfRetries, this.dbName);",
            "missing": [
              {}
            ]
          },
          "656": {
            "partial": false,
            "source": "  cursor.nextObject(function(err, item) {",
            "missing": [
              {}
            ]
          },
          "657": {
            "partial": false,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 20,
                "endCol": 47
              },
              {},
              {
                "startCol": 27,
                "endCol": 46
              }
            ]
          },
          "658": {
            "partial": false,
            "source": "    // close the cursor",
            "missing": [
              {}
            ]
          },
          "659": {
            "partial": false,
            "source": "    cursor.close(function(err, result) {",
            "missing": [
              {}
            ]
          },
          "660": {
            "partial": false,
            "source": "      if(err != null) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 49
              },
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 29,
                "endCol": 48
              }
            ]
          },
          "661": {
            "partial": false,
            "source": "      callback(null, item);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 26
              },
              {}
            ]
          },
          "662": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "663": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "670": {
            "partial": false,
            "source": "  console.log(\"[WARNING] streamRecords method is deprecated, please use stream method which is much faster\");",
            "missing": [
              {
                "startCol": 2,
                "endCol": 108
              }
            ]
          },
          "671": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "672": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "674": {
            "partial": false,
            "source": "  var",
            "missing": [
              {}
            ]
          },
          "675": {
            "partial": false,
            "source": "    self = this,",
            "missing": [
              {}
            ]
          },
          "676": {
            "partial": false,
            "source": "    stream = new process.EventEmitter(),",
            "missing": [
              {}
            ]
          },
          "677": {
            "partial": false,
            "source": "    recordLimitValue = this.limitValue || 0,",
            "missing": [
              {},
              {
                "startCol": 23,
                "endCol": 43
              }
            ]
          },
          "678": {
            "partial": false,
            "source": "    emittedRecordCount = 0,",
            "missing": [
              {}
            ]
          },
          "679": {
            "partial": false,
            "source": "    queryCommand = generateQueryCommand(self);",
            "missing": [
              {},
              {
                "startCol": 19,
                "endCol": 45
              }
            ]
          },
          "682": {
            "partial": false,
            "source": "  queryCommand.numberToReturn = options.fetchSize ? options.fetchSize : 500;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 52,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 75
              }
            ]
          },
          "684": {
            "partial": false,
            "source": "  execute(queryCommand);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "687": {
            "partial": false,
            "source": "    self.db._executeQueryCommand(command, {exhaust: self.exhaust, read:self.read, raw:self.raw, connection:self.connection}, function(err,result) {",
            "missing": [
              {}
            ]
          },
          "688": {
            "partial": false,
            "source": "      if(err) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              }
            ]
          },
          "689": {
            "partial": false,
            "source": "        stream.emit('error', err);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 33
              }
            ]
          },
          "690": {
            "partial": false,
            "source": "        self.close(function(){});",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 32
              }
            ]
          },
          "691": {
            "partial": false,
            "source": "        return;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 15
              },
              {}
            ]
          },
          "692": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "693": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "694": {
            "partial": false,
            "source": "      if (!self.queryRun && result) {",
            "missing": [
              {},
              {
                "startCol": 28,
                "endCol": 34
              },
              {
                "startCol": 10,
                "endCol": 34
              }
            ]
          },
          "695": {
            "partial": false,
            "source": "        self.queryRun = true;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 29
              },
              {}
            ]
          },
          "696": {
            "partial": false,
            "source": "        self.cursorId = result.cursorId;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 40
              }
            ]
          },
          "697": {
            "partial": false,
            "source": "        self.state = Cursor.OPEN;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 33
              }
            ]
          },
          "698": {
            "partial": false,
            "source": "        self.getMoreCommand = new GetMoreCommand(self.db, self.collectionName, queryCommand.numberToReturn, result.cursorId);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 125
              },
              {}
            ]
          },
          "699": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "700": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "701": {
            "partial": false,
            "source": "      var resflagsMap = {",
            "missing": [
              {}
            ]
          },
          "702": {
            "partial": false,
            "source": "        CursorNotFound:1<<0,",
            "missing": [
              {},
              {
                "startCol": 23,
                "endCol": 27
              }
            ]
          },
          "703": {
            "partial": false,
            "source": "        QueryFailure:1<<1,",
            "missing": [
              {},
              {
                "startCol": 21,
                "endCol": 25
              }
            ]
          },
          "704": {
            "partial": false,
            "source": "        ShardConfigStale:1<<2,",
            "missing": [
              {},
              {
                "startCol": 25,
                "endCol": 29
              }
            ]
          },
          "705": {
            "partial": false,
            "source": "        AwaitCapable:1<<3",
            "missing": [
              {
                "startCol": 21,
                "endCol": 25
              },
              {}
            ]
          },
          "706": {
            "partial": false,
            "source": "      };",
            "missing": [
              {}
            ]
          },
          "707": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "708": {
            "partial": false,
            "source": "      if(result.documents && result.documents.length && !(result.responseFlag & resflagsMap.QueryFailure)) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 52
              },
              {},
              {
                "startCol": 56,
                "endCol": 105
              },
              {
                "startCol": 57,
                "endCol": 105
              }
            ]
          },
          "709": {
            "partial": false,
            "source": "        try {",
            "missing": [
              {}
            ]
          },
          "710": {
            "partial": false,
            "source": "          result.documents.forEach(function(doc){",
            "missing": [
              {}
            ]
          },
          "711": {
            "partial": false,
            "source": "            if(recordLimitValue && emittedRecordCount>=recordLimitValue) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 31
              },
              {
                "startCol": 35,
                "endCol": 53
              },
              {},
              {
                "startCol": 55,
                "endCol": 71
              }
            ]
          },
          "712": {
            "partial": false,
            "source": "              throw(\"done\");",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 28
              }
            ]
          },
          "713": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "714": {
            "partial": false,
            "source": "            emittedRecordCount++;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              },
              {}
            ]
          },
          "715": {
            "partial": false,
            "source": "            stream.emit('data', doc);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 36
              },
              {}
            ]
          },
          "716": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "717": {
            "partial": false,
            "source": "        } catch(err) {",
            "missing": [
              {}
            ]
          },
          "718": {
            "partial": false,
            "source": "          if (err != \"done\") { throw err; }",
            "missing": [
              {
                "startCol": 14,
                "endCol": 17
              },
              {},
              {
                "startCol": 31,
                "endCol": 41
              }
            ]
          },
          "719": {
            "partial": false,
            "source": "          else {",
            "missing": [
              {}
            ]
          },
          "720": {
            "partial": false,
            "source": "            self.close(function(){",
            "missing": [
              {}
            ]
          },
          "721": {
            "partial": false,
            "source": "              stream.emit('end', recordLimitValue);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 51
              }
            ]
          },
          "722": {
            "partial": false,
            "source": "            });",
            "missing": [
              {}
            ]
          },
          "723": {
            "partial": false,
            "source": "            self.close(function(){});",
            "missing": [
              {
                "startCol": 12,
                "endCol": 36
              },
              {}
            ]
          },
          "724": {
            "partial": false,
            "source": "            return;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 19
              }
            ]
          },
          "725": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "726": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "727": {
            "partial": false,
            "source": "        // rinse & repeat",
            "missing": [
              {}
            ]
          },
          "728": {
            "partial": false,
            "source": "        execute(self.getMoreCommand);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 37
              }
            ]
          },
          "729": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "730": {
            "partial": false,
            "source": "        self.close(function(){",
            "missing": [
              {}
            ]
          },
          "731": {
            "partial": false,
            "source": "          stream.emit('end', recordLimitValue);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 46
              }
            ]
          },
          "732": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "733": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "734": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "737": {
            "partial": false,
            "source": "  return stream;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 16
              }
            ]
          },
          "747": {
            "partial": false,
            "source": "  return new CursorStream(this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              }
            ]
          },
          "759": {
            "partial": true,
            "source": "  this.getMoreTimer && clearTimeout(this.getMoreTimer);",
            "missing": [
              {
                "startCol": 23,
                "endCol": 54
              }
            ]
          },
          "763": {
            "partial": false,
            "source": "      var command = new KillCursorCommand(this.db, [this.cursorId]);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 68
              }
            ]
          },
          "764": {
            "partial": false,
            "source": "      this.db._executeQueryCommand(command, {read:self.read, raw:self.raw, connection:self.connection}, null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 109
              }
            ]
          },
          "790": {
            "partial": false,
            "source": "  return this.state == Cursor.CLOSED ? true : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 52
              },
              {
                "startCol": 9,
                "endCol": 36
              },
              {
                "startCol": 39,
                "endCol": 43
              },
              {
                "startCol": 46,
                "endCol": 51
              }
            ]
          }
        },
        "source": "var QueryCommand = require('./commands/query_command').QueryCommand,\n  GetMoreCommand = require('./commands/get_more_command').GetMoreCommand,\n  KillCursorCommand = require('./commands/kill_cursor_command').KillCursorCommand,\n  Long = require('bson').Long,\n  ReadPreference = require('./connection/read_preference').ReadPreference,\n  CursorStream = require('./cursorstream'),\n  utils = require('./utils');\n\n/**\n * Constructor for a cursor object that handles all the operations on query result\n * using find. This cursor object is unidirectional and cannot traverse backwards. Clients should not be creating a cursor directly,\n * but use find to acquire a cursor.\n *\n * @class Represents a Cursor.\n * @param {Db} db the database object to work with.\n * @param {Collection} collection the collection to query.\n * @param {Object} selector the query selector.\n * @param {Object} fields an object containing what fields to include or exclude from objects returned.\n * @param {Number} skip number of documents to skip.\n * @param {Number} limit the number of results to return. -1 has a special meaning and is used by Db.eval. A value of 1 will also be treated as if it were -1.\n * @param {String|Array|Object} sort the required sorting for the query.\n * @param {Object} hint force the query to use a specific index.\n * @param {Boolean} explain return the explaination of the query.\n * @param {Boolean} snapshot Snapshot mode assures no duplicates are returned.\n * @param {Boolean} timeout allow the query to timeout.\n * @param {Boolean} tailable allow the cursor to be tailable.\n * @param {Boolean} awaitdata allow the cursor to wait for data, only applicable for tailable cursor.\n * @param {Number} batchSize the number of the subset of results to request the database to return for every request. This should initially be greater than 1 otherwise the database will automatically close the cursor. The batch size can be set to 1 with cursorInstance.batchSize after performing the initial query to the database.\n * @param {Boolean} raw return all query documents as raw buffers (default false).\n * @param {Boolean} read specify override of read from source (primary/secondary).\n * @param {Boolean} returnKey only return the index key.\n * @param {Number} maxScan limit the number of items to scan.\n * @param {Number} min set index bounds.\n * @param {Number} max set index bounds.\n * @param {Boolean} showDiskLoc show disk location of results.\n * @param {String} comment you can put a $comment field on a query to make looking in the profiler logs simpler.\n * @param {Number} numberOfRetries if using awaidata specifies the number of times to retry on timeout.\n * @param {String} dbName override the default dbName.\n * @param {Number} tailableRetryInterval specify the miliseconds between getMores on tailable cursor.\n * @param {Boolean} exhaust have the server send all the documents at once as getMore packets.\n * @param {Boolean} partial have the sharded system return a partial result from mongos.\n */\nfunction Cursor(db, collection, selector, fields, skip, limit\n  , sort, hint, explain, snapshot, timeout, tailable, batchSize, slaveOk, raw, read\n  , returnKey, maxScan, min, max, showDiskLoc, comment, awaitdata, numberOfRetries, dbName, tailableRetryInterval, exhaust, partial) {\n  this.db = db;\n  this.collection = collection;\n  this.selector = selector;\n  this.fields = fields;\n  this.skipValue = skip == null ? 0 : skip;\n  this.limitValue = limit == null ? 0 : limit;\n  this.sortValue = sort;\n  this.hint = hint;\n  this.explainValue = explain;\n  this.snapshot = snapshot;\n  this.timeout = timeout == null ? true : timeout;\n  this.tailable = tailable;\n  this.awaitdata = awaitdata;\n  this.numberOfRetries = numberOfRetries == null ? 5 : numberOfRetries;\n  this.currentNumberOfRetries = this.numberOfRetries;\n  this.batchSizeValue = batchSize == null ? 0 : batchSize;\n  this.slaveOk = slaveOk == null ? collection.slaveOk : slaveOk;\n  this.raw = raw == null ? false : raw;\n  this.read = read == null ? ReadPreference.PRIMARY : read;\n  this.returnKey = returnKey;\n  this.maxScan = maxScan;\n  this.min = min;\n  this.max = max;\n  this.showDiskLoc = showDiskLoc;\n  this.comment = comment;\n  this.tailableRetryInterval = tailableRetryInterval || 100;\n  this.exhaust = exhaust || false;\n  this.partial = partial || false;\n\n  this.totalNumberOfRecords = 0;\n  this.items = [];\n  this.cursorId = Long.fromInt(0);\n\n  // This name\n  this.dbName = dbName;\n\n  // State variables for the cursor\n  this.state = Cursor.INIT;\n  // Keep track of the current query run\n  this.queryRun = false;\n  this.getMoreTimer = false;\n\n  // If we are using a specific db execute against it\n  if(this.dbName != null) {\n    this.collectionName = this.dbName + \".\" + this.collection.collectionName;\n  } else {\n    this.collectionName = (this.db.databaseName ? this.db.databaseName + \".\" : '') + this.collection.collectionName;\n  }\n};\n\n/**\n * Resets this cursor to its initial state. All settings like the query string,\n * tailable, batchSizeValue, skipValue and limits are preserved.\n *\n * @return {Cursor} returns itself with rewind applied.\n * @api public\n */\nCursor.prototype.rewind = function() {\n  var self = this;\n\n  if (self.state != Cursor.INIT) {\n    if (self.state != Cursor.CLOSED) {\n      self.close(function() {});\n    }\n\n    self.numberOfReturned = 0;\n    self.totalNumberOfRecords = 0;\n    self.items = [];\n    self.cursorId = Long.fromInt(0);\n    self.state = Cursor.INIT;\n    self.queryRun = false;\n  }\n\n  return self;\n};\n\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n *\n * @param {Function} callback This will be called after executing this method successfully. The first paramter will contain the Error object if an error occured, or null otherwise. The second paramter will contain an array of BSON deserialized objects as a result of the query.\n * @return {null}\n * @api public\n */\nCursor.prototype.toArray = function(callback) {\n  var self = this;\n\n  if(!callback) {\n    throw new Error('callback is mandatory');\n  }\n\n  if(this.tailable) {\n    callback(new Error(\"Tailable cursor cannot be converted to array\"), null);\n  } else if(this.state != Cursor.CLOSED) {\n    var items = [];\n\n    this.each(function(err, item) {\n      if(err != null) return callback(err, null);\n\n      if(item != null && Array.isArray(items)) {\n        items.push(item);\n      } else {\n        var resultItems = items;\n        items = null;\n        self.items = [];\n        // Returns items\n        callback(err, resultItems);\n      }\n    });\n  } else {\n    callback(new Error(\"Cursor is closed\"), null);\n  }\n};\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n *\n * @param {Function} callback this will be called for while iterating every document of the query result. The first paramter will contain the Error object if an error occured, or null otherwise. While the second paramter will contain the document.\n * @return {null}\n * @api public\n */\nCursor.prototype.each = function(callback) {\n  var self = this;\n\n  if (!callback) {\n    throw new Error('callback is mandatory');\n  }\n\n  if(this.state != Cursor.CLOSED) {\n    //FIX: stack overflow (on deep callback) (cred: https://github.com/limp/node-mongodb-native/commit/27da7e4b2af02035847f262b29837a94bbbf6ce2)\n    process.nextTick(function(){\n      var s = new Date()\n      // Fetch the next object until there is no more objects\n      self.nextObject(function(err, item) {\n        if(err != null) return callback(err, null);\n        if(item != null) {\n          callback(null, item);\n          self.each(callback);\n        } else {\n          // Close the cursor if done\n          self.state = Cursor.CLOSED;\n          callback(err, null);\n        }\n      });\n    });\n  } else {\n    callback(new Error(\"Cursor is closed\"), null);\n  }\n};\n\n/**\n * Determines how many result the query for this cursor will return\n *\n * @param {Function} callback this will be after executing this method. The first paramter will contain the Error object if an error occured, or null otherwise. While the second paramter will contain the number of results or null if an error occured.\n * @return {null}\n * @api public\n */\nCursor.prototype.count = function(callback) {\n  this.collection.count(this.selector, callback);\n};\n\n/**\n * Sets the sort parameter of this cursor to the given value.\n *\n * This method has the following method signatures:\n * (keyOrList, callback)\n * (keyOrList, direction, callback)\n *\n * @param {String|Array|Object} keyOrList This can be a string or an array. If passed as a string, the string will be the field to sort. If passed an array, each element will represent a field to be sorted and should be an array that contains the format [string, direction].\n * @param {String|Number} direction this determines how the results are sorted. \"asc\", \"ascending\" or 1 for asceding order while \"desc\", \"desceding or -1 for descending order. Note that the strings are case insensitive.\n * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.\n * @return {Cursor} an instance of this object.\n * @api public\n */\nCursor.prototype.sort = function(keyOrList, direction, callback) {\n  callback = callback || function(){};\n  if(typeof direction === \"function\") { callback = direction; direction = null; }\n\n  if(this.tailable) {\n    callback(new Error(\"Tailable cursor doesn't support sorting\"), null);\n  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {\n    callback(new Error(\"Cursor is closed\"), null);\n  } else {\n    var order = keyOrList;\n\n    if(direction != null) {\n      order = [[keyOrList, direction]];\n    }\n\n    this.sortValue = order;\n    callback(null, this);\n  }\n  return this;\n};\n\n/**\n * Sets the limit parameter of this cursor to the given value.\n *\n * @param {Number} limit the new limit.\n * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the limit given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.\n * @return {Cursor} an instance of this object.\n * @api public\n */\nCursor.prototype.limit = function(limit, callback) {\n  if(this.tailable) {\n    if(callback) {\n      callback(new Error(\"Tailable cursor doesn't support limit\"), null);\n    } else {\n      throw new Error(\"Tailable cursor doesn't support limit\");\n    }\n  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {\n    if(callback) {\n      callback(new Error(\"Cursor is closed\"), null);\n    } else {\n      throw new Error(\"Cursor is closed\");\n    }\n  } else {\n    if(limit != null && limit.constructor != Number) {\n      if(callback) {\n        callback(new Error(\"limit requires an integer\"), null);\n      } else {\n        throw new Error(\"limit requires an integer\");\n      }\n    } else {\n      this.limitValue = limit;\n      if(callback) return callback(null, this);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Sets the read preference for the cursor\n *\n * @param {String} the read preference for the cursor, one of Server.READ_PRIMARY, Server.READ_SECONDARY, Server.READ_SECONDARY_ONLY\n * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the read preference given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.\n * @return {Cursor} an instance of this object.\n * @api public\n */\nCursor.prototype.setReadPreference = function(readPreference, tags, callback) {\n  if(typeof tags == 'function') callback = tags;\n  callback = callback || function() {};\n\n  if(this.queryRun == true || this.state == Cursor.CLOSED) {\n    callback(new Error(\"Cannot change read preference on executed query or closed cursor\"));\n  } else if(readPreference == null && readPreference != 'primary'\n    && readPreference != 'secondaryOnly' && readPreference != 'secondary') {\n      callback(new Error(\"only readPreference of primary, secondary or secondaryOnly supported\"));\n  } else {\n    this.read = readPreference;\n  }\n\n  return this;\n}\n\n/**\n * Sets the skip parameter of this cursor to the given value.\n *\n * @param {Number} skip the new skip value.\n * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the skip value given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.\n * @return {Cursor} an instance of this object.\n * @api public\n */\nCursor.prototype.skip = function(skip, callback) {\n  callback = callback || function(){};\n\n  if(this.tailable) {\n    callback(new Error(\"Tailable cursor doesn't support skip\"), null);\n  } else if(this.queryRun == true || this.state == Cursor.CLOSED) {\n    callback(new Error(\"Cursor is closed\"), null);\n  } else {\n    if(skip != null && skip.constructor != Number) {\n      callback(new Error(\"skip requires an integer\"), null);\n    } else {\n      this.skipValue = skip;\n      callback(null, this);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Sets the batch size parameter of this cursor to the given value.\n *\n * @param {Number} batchSize the new batch size.\n * @param {Function} [callback] this optional callback will be called after executing this method. The first parameter will contain an error object when the batchSize given is not a valid number or when the cursor is already closed while the second parameter will contain a reference to this object upon successful execution.\n * @return {Cursor} an instance of this object.\n * @api public\n */\nCursor.prototype.batchSize = function(batchSize, callback) {\n  if(this.state == Cursor.CLOSED) {\n    if(callback != null) {\n      return callback(new Error(\"Cursor is closed\"), null);\n    } else {\n      throw new Error(\"Cursor is closed\");\n    }\n  } else if(batchSize != null && batchSize.constructor != Number) {\n    if(callback != null) {\n      return callback(new Error(\"batchSize requires an integer\"), null);\n    } else {\n      throw new Error(\"batchSize requires an integer\");\n    }\n  } else {\n    this.batchSizeValue = batchSize;\n    if(callback != null) return callback(null, this);\n  }\n\n  return this;\n};\n\n/**\n * The limit used for the getMore command\n *\n * @return {Number} The number of records to request per batch.\n * @ignore\n * @api private\n */\nvar limitRequest = function(self) {\n  var requestedLimit = self.limitValue;\n  var absLimitValue = Math.abs(self.limitValue);\n  var absBatchValue = Math.abs(self.batchSizeValue);\n\n  if(absLimitValue > 0) {\n    if (absBatchValue > 0) {\n      requestedLimit = Math.min(absLimitValue, absBatchValue);\n    }\n  } else {\n    requestedLimit = self.batchSizeValue;\n  }\n\n  return requestedLimit;\n};\n\n\n/**\n * Generates a QueryCommand object using the parameters of this cursor.\n *\n * @return {QueryCommand} The command object\n * @ignore\n * @api private\n */\nvar generateQueryCommand = function(self) {\n  // Unpack the options\n  var queryOptions = QueryCommand.OPTS_NONE;\n  if(!self.timeout) {\n    queryOptions |= QueryCommand.OPTS_NO_CURSOR_TIMEOUT;\n  }\n\n  if(self.tailable != null) {\n    queryOptions |= QueryCommand.OPTS_TAILABLE_CURSOR;\n    self.skipValue = self.limitValue = 0;\n\n    // if awaitdata is set\n    if(self.awaitdata != null) {\n      queryOptions |= QueryCommand.OPTS_AWAIT_DATA;\n    }\n  }\n\n  if(self.exhaust) {\n    queryOptions |= QueryCommand.OPTS_EXHAUST;\n  }\n\n  if(self.slaveOk) {\n    queryOptions |= QueryCommand.OPTS_SLAVE;\n  }\n\n  if(self.partial) {\n    queryOptions |= QueryCommand.OPTS_PARTIAL;\n  }\n\n  // limitValue of -1 is a special case used by Db#eval\n  var numberToReturn = self.limitValue == -1 ? -1 : limitRequest(self);\n\n  // Check if we need a special selector\n  if(self.sortValue != null || self.explainValue != null || self.hint != null || self.snapshot != null\n      || self.returnKey != null || self.maxScan != null || self.min != null || self.max != null\n      || self.showDiskLoc != null || self.comment != null) {\n\n    // Build special selector\n    var specialSelector = {'$query':self.selector};\n    if(self.sortValue != null) specialSelector['orderby'] = utils.formattedOrderClause(self.sortValue);\n    if(self.hint != null && self.hint.constructor == Object) specialSelector['$hint'] = self.hint;\n    if(self.snapshot != null) specialSelector['$snapshot'] = true;\n    if(self.returnKey != null) specialSelector['$returnKey'] = self.returnKey;\n    if(self.maxScan != null) specialSelector['$maxScan'] = self.maxScan;\n    if(self.min != null) specialSelector['$min'] = self.min;\n    if(self.max != null) specialSelector['$max'] = self.max;\n    if(self.showDiskLoc != null) specialSelector['$showDiskLoc'] = self.showDiskLoc;\n    if(self.comment != null) specialSelector['$comment'] = self.comment;\n    // If we have explain set only return a single document with automatic cursor close\n    if(self.explainValue != null) {\n      numberToReturn = (-1)*Math.abs(numberToReturn);\n      specialSelector['$explain'] = true;\n    }\n\n    // Return the query\n    return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, specialSelector, self.fields);\n  } else {\n    return new QueryCommand(self.db, self.collectionName, queryOptions, self.skipValue, numberToReturn, self.selector, self.fields);\n  }\n};\n\n/**\n * @return {Object} Returns an object containing the sort value of this cursor with\n *     the proper formatting that can be used internally in this cursor.\n * @ignore\n * @api private\n */\nCursor.prototype.formattedOrderClause = function() {\n  return utils.formattedOrderClause(this.sortValue);\n};\n\n/**\n * Converts the value of the sort direction into its equivalent numerical value.\n *\n * @param sortDirection {String|number} Range of acceptable values:\n *     'ascending', 'descending', 'asc', 'desc', 1, -1\n *\n * @return {number} The equivalent numerical value\n * @throws Error if the given sortDirection is invalid\n * @ignore\n * @api private\n */\nCursor.prototype.formatSortValue = function(sortDirection) {\n  return utils.formatSortValue(sortDirection);\n};\n\n/**\n * Gets the next document from the cursor.\n *\n * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object on error while the second parameter will contain a document from the returned result or null if there are no more results.\n * @api public\n */\nCursor.prototype.nextObject = function(callback) {\n  var self = this;\n\n  if(self.state == Cursor.INIT) {\n    var cmd;\n    try {\n      cmd = generateQueryCommand(self);\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    var commandHandler = function(err, result) {\n      if(err != null && result == null) return callback(err, null);\n\n      if(!err && result.documents[0] && result.documents[0]['$err']) {\n        return self.close(function() {callback(result.documents[0]['$err'], null);});\n      }\n\n      self.queryRun = true;\n      self.state = Cursor.OPEN; // Adjust the state of the cursor\n      self.cursorId = result.cursorId;\n      self.totalNumberOfRecords = result.numberReturned;\n\n      // Add the new documents to the list of items, using forloop to avoid\n      // new array allocations and copying\n      for(var i = 0; i < result.documents.length; i++) {\n        self.items.push(result.documents[i]);\n      }\n\n      // Ignore callbacks until the cursor is dead for exhausted\n      if(self.exhaust && result.cursorId.toString() == \"0\") {\n        self.nextObject(callback);\n      } else if(self.exhaust == false || self.exhaust == null) {\n        self.nextObject(callback);\n      }\n    };\n\n    // If we have no connection set on this cursor check one out\n    if(self.connection == null) {\n      try {\n        self.connection = this.read == null ? self.db.serverConfig.checkoutWriter() : self.db.serverConfig.checkoutReader(this.read);\n      } catch(err) {\n        return callback(err, null);\n      }\n    }\n\n    // Execute the command\n    self.db._executeQueryCommand(cmd, {exhaust: self.exhaust, raw:self.raw, read:this.read, connection:self.connection}, commandHandler);\n    // Set the command handler to null\n    commandHandler = null;\n  } else if(self.items.length) {\n    callback(null, self.items.shift());\n  } else if(self.cursorId.greaterThan(Long.fromInt(0))) {\n    getMore(self, callback);\n  } else {\n    // Force cursor to stay open\n    return self.close(function() {callback(null, null);});\n  }\n}\n\n/**\n * Gets more results from the database if any.\n *\n * @param {Function} callback this will be called after executing this method. The first parameter will contain an error object on error while the second parameter will contain a document from the returned result or null if there are no more results.\n * @ignore\n * @api private\n */\nvar getMore = function(self, callback) {\n  var limit = 0;\n\n  if (!self.tailable && self.limitValue > 0) {\n    limit = self.limitValue - self.totalNumberOfRecords;\n    if (limit < 1) {\n      self.close(function() {callback(null, null);});\n      return;\n    }\n  }\n  try {\n    var getMoreCommand = new GetMoreCommand(\n        self.db\n      , self.collectionName\n      , limitRequest(self)\n      , self.cursorId\n    );\n\n    // Set up options\n    var options = {read: self.read, raw: self.raw, connection:self.connection };\n\n    // Execute the command\n    self.db._executeQueryCommand(getMoreCommand, options, function(err, result) {\n      try {\n        if(err != null) {\n          return callback(err, null);\n        }\n\n        var isDead = 1 === result.responseFlag && result.cursorId.isZero();\n\n        self.cursorId = result.cursorId;\n        self.totalNumberOfRecords += result.numberReturned;\n\n        // Determine if there's more documents to fetch\n        if(result.numberReturned > 0) {\n          if (self.limitValue > 0) {\n            var excessResult = self.totalNumberOfRecords - self.limitValue;\n\n            if (excessResult > 0) {\n              result.documents.splice(-1 * excessResult, excessResult);\n            }\n          }\n\n          // Reset the tries for awaitdata if we are using it\n          self.currentNumberOfRetries = self.numberOfRetries;\n          // Get the documents\n          for(var i = 0; i < result.documents.length; i++) {\n            self.items.push(result.documents[i]);\n          }\n\n          // result = null;\n          callback(null, self.items.shift());\n        } else if(self.tailable && !isDead && self.awaitdata) {\n          // Excute the tailable cursor once more, will timeout after ~4 sec if awaitdata used\n          self.currentNumberOfRetries = self.currentNumberOfRetries - 1;\n          if(self.currentNumberOfRetries == 0) {\n            self.close(function() {\n              callback(new Error(\"tailable cursor timed out\"), null);\n            });\n          } else {\n            process.nextTick(function() { getMore(self, callback); });\n          }\n        } else if(self.tailable && !isDead) {\n          self.getMoreTimer = setTimeout(function() { getMore(self, callback); }, self.tailableRetryInterval);\n        } else {\n          self.close(function() {callback(null, null); });\n        }\n\n        result = null;\n      } catch(err) {\n        callback(err, null);\n      }\n    });\n\n    getMoreCommand = null;\n  } catch(err) {\n    var handleClose = function() {\n      callback(err, null);\n    };\n\n    self.close(handleClose);\n    handleClose = null;\n  }\n}\n\n/**\n * Gets a detailed information about how the query is performed on this cursor and how\n * long it took the database to process it.\n *\n * @param {Function} callback this will be called after executing this method. The first parameter will always be null while the second parameter will be an object containing the details.\n * @api public\n */\nCursor.prototype.explain = function(callback) {\n  var limit = (-1)*Math.abs(this.limitValue);\n  // Create a new cursor and fetch the plan\n  var cursor = new Cursor(this.db, this.collection, this.selector, this.fields, this.skipValue, limit\n                          , this.sortValue, this.hint, true, this.snapshot, this.timeout, this.tailable, this.batchSizeValue\n                          , this.slaveOk, this.raw, this.read, this.returnKey, this.maxScan, this.min, this.max, this.showDiskLoc\n                          , this.comment, this.awaitdata, this.numberOfRetries, this.dbName);\n  // Fetch the explaination document\n  cursor.nextObject(function(err, item) {\n    if(err != null) return callback(err, null);\n    // close the cursor\n    cursor.close(function(err, result) {\n      if(err != null) return callback(err, null);\n      callback(null, item);\n    });\n  });\n};\n\n/**\n * @ignore\n */\nCursor.prototype.streamRecords = function(options) {\n  console.log(\"[WARNING] streamRecords method is deprecated, please use stream method which is much faster\");\n  var args = Array.prototype.slice.call(arguments, 0);\n  options = args.length ? args.shift() : {};\n\n  var\n    self = this,\n    stream = new process.EventEmitter(),\n    recordLimitValue = this.limitValue || 0,\n    emittedRecordCount = 0,\n    queryCommand = generateQueryCommand(self);\n\n  // see http://www.mongodb.org/display/DOCS/Mongo+Wire+Protocol\n  queryCommand.numberToReturn = options.fetchSize ? options.fetchSize : 500;\n  // Execute the query\n  execute(queryCommand);\n\n  function execute(command) {\n    self.db._executeQueryCommand(command, {exhaust: self.exhaust, read:self.read, raw:self.raw, connection:self.connection}, function(err,result) {\n      if(err) {\n        stream.emit('error', err);\n        self.close(function(){});\n        return;\n      }\n\n      if (!self.queryRun && result) {\n        self.queryRun = true;\n        self.cursorId = result.cursorId;\n        self.state = Cursor.OPEN;\n        self.getMoreCommand = new GetMoreCommand(self.db, self.collectionName, queryCommand.numberToReturn, result.cursorId);\n      }\n\n      var resflagsMap = {\n        CursorNotFound:1<<0,\n        QueryFailure:1<<1,\n        ShardConfigStale:1<<2,\n        AwaitCapable:1<<3\n      };\n\n      if(result.documents && result.documents.length && !(result.responseFlag & resflagsMap.QueryFailure)) {\n        try {\n          result.documents.forEach(function(doc){\n            if(recordLimitValue && emittedRecordCount>=recordLimitValue) {\n              throw(\"done\");\n            }\n            emittedRecordCount++;\n            stream.emit('data', doc);\n          });\n        } catch(err) {\n          if (err != \"done\") { throw err; }\n          else {\n            self.close(function(){\n              stream.emit('end', recordLimitValue);\n            });\n            self.close(function(){});\n            return;\n          }\n        }\n        // rinse & repeat\n        execute(self.getMoreCommand);\n      } else {\n        self.close(function(){\n          stream.emit('end', recordLimitValue);\n        });\n      }\n    });\n  }\n\n  return stream;\n};\n\n/**\n * Returns a Node ReadStream interface for this cursor.\n *\n * @return {CursorStream} returns a stream object.\n * @api public\n */\nCursor.prototype.stream = function stream () {\n  return new CursorStream(this);\n}\n\n/**\n * Close the cursor.\n *\n * @param {Function} callback this will be called after executing this method. The first parameter will always contain null while the second parameter will contain a reference to this cursor.\n * @return {null}\n * @api public\n */\nCursor.prototype.close = function(callback) {\n  var self = this\n  this.getMoreTimer && clearTimeout(this.getMoreTimer);\n  // Close the cursor if not needed\n  if(this.cursorId instanceof Long && this.cursorId.greaterThan(Long.fromInt(0))) {\n    try {\n      var command = new KillCursorCommand(this.db, [this.cursorId]);\n      this.db._executeQueryCommand(command, {read:self.read, raw:self.raw, connection:self.connection}, null);\n    } catch(err) {}\n  }\n\n  // Null out the connection\n  self.connection = null;\n  // Reset cursor id\n  this.cursorId = Long.fromInt(0);\n  // Set to closed status\n  this.state = Cursor.CLOSED;\n\n  if(callback) {\n    callback(null, self);\n    self.items = [];\n  }\n\n  return this;\n};\n\n/**\n * Check if the cursor is closed or open.\n *\n * @return {Boolean} returns the state of the cursor.\n * @api public\n */\nCursor.prototype.isClosed = function() {\n  return this.state == Cursor.CLOSED ? true : false;\n};\n\n/**\n * Init state\n *\n * @classconstant INIT\n **/\nCursor.INIT = 0;\n\n/**\n * Cursor open\n *\n * @classconstant OPEN\n **/\nCursor.OPEN = 1;\n\n/**\n * Cursor closed\n *\n * @classconstant CLOSED\n **/\nCursor.CLOSED = 2;\n\n/**\n * @ignore\n * @api private\n */\nexports.Cursor =  Cursor;",
        "blocks": {
          "total": 164,
          "seen": 42,
          "missing": 122,
          "percentage": 0.25609756097560976
        }
      },
      "hash": "29322589c730edb3dcd283b52505f99f"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/read_preference.js": {
      "stats": {
        "percentage": 0.7878787878787878,
        "lines": [
          {
            "lineno": 17
          },
          {
            "lineno": 18
          },
          {
            "lineno": 19
          },
          {
            "lineno": 20
          },
          {
            "lineno": 21
          },
          {
            "lineno": 28
          },
          {
            "lineno": 29
          },
          {
            "lineno": 30
          },
          {
            "lineno": 37
          },
          {
            "lineno": 38
          },
          {
            "lineno": 45
          },
          {
            "lineno": 47
          },
          {
            "lineno": 48
          },
          {
            "lineno": 51
          }
        ],
        "missing": 14,
        "seen": 52,
        "seen_lines": [
          {
            "s": 16,
            "e": 27
          },
          {
            "s": 27,
            "e": 36
          },
          {
            "s": 36,
            "e": 44
          },
          {
            "s": 44,
            "e": 57
          },
          {
            "s": 57,
            "e": 57
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 60,
            "e": 60
          },
          {
            "s": 61,
            "e": 66
          },
          {
            "s": 66,
            "e": 66
          }
        ],
        "total": 66,
        "coverage": {
          "17": {
            "partial": false,
            "source": "  if(!(this instanceof ReadPreference))",
            "missing": [
              {
                "startCol": 5,
                "endCol": 38
              },
              {
                "startCol": 6,
                "endCol": 38
              },
              {
                "startCol": 23,
                "endCol": 37
              }
            ]
          },
          "18": {
            "partial": false,
            "source": "    return new ReadPreference(mode, tags);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "19": {
            "partial": false,
            "source": "  this._type = 'ReadPreference';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              }
            ]
          },
          "20": {
            "partial": false,
            "source": "  this.mode = mode;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "21": {
            "partial": false,
            "source": "  this.tags = tags;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "28": {
            "partial": false,
            "source": "  return (_mode == ReadPreference.PRIMARY || _mode == ReadPreference.PRIMARY_PREFERRED",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 41
              },
              {
                "startCol": 45,
                "endCol": 86
              }
            ]
          },
          "29": {
            "partial": false,
            "source": "    || _mode == ReadPreference.SECONDARY || _mode == ReadPreference.SECONDARY_PREFERRED",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 40
              },
              {
                "startCol": 44,
                "endCol": 87
              }
            ]
          },
          "30": {
            "partial": false,
            "source": "    || _mode == ReadPreference.NEAREST);",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 12
              }
            ]
          },
          "37": {
            "partial": false,
            "source": "  var _mode = typeof mode == 'string' ? mode : this.mode;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 57
              },
              {
                "startCol": 14,
                "endCol": 25
              },
              {
                "startCol": 21,
                "endCol": 25
              },
              {
                "startCol": 40,
                "endCol": 44
              },
              {
                "startCol": 47,
                "endCol": 56
              }
            ]
          },
          "38": {
            "partial": false,
            "source": "  return ReadPreference.isValid(_mode);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              },
              {
                "startCol": 9,
                "endCol": 38
              }
            ]
          },
          "45": {
            "partial": false,
            "source": "  var object = {mode:this.mode};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              }
            ]
          },
          "47": {
            "partial": false,
            "source": "  if(this.tags != null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 22
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "    object['tags'] = this.tags;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              }
            ]
          },
          "51": {
            "partial": false,
            "source": "  return object;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 16
              }
            ]
          }
        },
        "source": "/**\n * A class representation of the Read Preference.\n *\n * Read Preferences\n *  - **ReadPreference.PRIMARY**, Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).\n *  - **ReadPreference.PRIMARY_PREFERRED**, Read from primary if available, otherwise a secondary.\n *  - **ReadPreference.SECONDARY**, Read from secondary if available, otherwise error.\n *  - **ReadPreference.SECONDARY_PREFERRED**, Read from a secondary if available, otherwise read from the primary.\n *  - **ReadPreference.NEAREST**, All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.\n *\n * @class Represents a Read Preference.\n * @param {String} the read preference type\n * @param {Object} tags\n * @return {ReadPreference}\n */\nvar ReadPreference = function(mode, tags) {\n  if(!(this instanceof ReadPreference))\n    return new ReadPreference(mode, tags);\n  this._type = 'ReadPreference';\n  this.mode = mode;\n  this.tags = tags;\n}\n\n/**\n * @ignore\n */\nReadPreference.isValid = function(_mode) {\n  return (_mode == ReadPreference.PRIMARY || _mode == ReadPreference.PRIMARY_PREFERRED\n    || _mode == ReadPreference.SECONDARY || _mode == ReadPreference.SECONDARY_PREFERRED\n    || _mode == ReadPreference.NEAREST);\n}\n\n/**\n * @ignore\n */\nReadPreference.prototype.isValid = function(mode) {\n  var _mode = typeof mode == 'string' ? mode : this.mode;\n  return ReadPreference.isValid(_mode);\n}\n\n/**\n * @ignore\n */\nReadPreference.prototype.toObject = function() {\n  var object = {mode:this.mode};\n\n  if(this.tags != null) {\n    object['tags'] = this.tags;\n  }\n\n  return object;\n}\n\n/**\n * @ignore\n */\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest'\n\n/**\n * @ignore\n */\nexports.ReadPreference  = ReadPreference;",
        "blocks": {
          "total": 6,
          "seen": 0,
          "missing": 6,
          "percentage": 0
        }
      },
      "hash": "455ae4009a7b54b843d82fe963b9aab2"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/cursorstream.js": {
      "stats": {
        "percentage": 0.7687074829931972,
        "lines": [
          {
            "lineno": 21
          },
          {
            "lineno": 23
          },
          {
            "lineno": 25
          },
          {
            "lineno": 26
          },
          {
            "lineno": 27
          },
          {
            "lineno": 28
          },
          {
            "lineno": 31
          },
          {
            "lineno": 32
          },
          {
            "lineno": 33
          },
          {
            "lineno": 60
          },
          {
            "lineno": 61
          },
          {
            "lineno": 70
          },
          {
            "lineno": 72
          },
          {
            "lineno": 76
          },
          {
            "lineno": 77
          },
          {
            "lineno": 78
          },
          {
            "lineno": 89
          },
          {
            "lineno": 92
          },
          {
            "lineno": 93
          },
          {
            "lineno": 94
          },
          {
            "lineno": 97
          },
          {
            "lineno": 98
          },
          {
            "lineno": 107
          },
          {
            "lineno": 116
          },
          {
            "lineno": 117
          },
          {
            "lineno": 118
          },
          {
            "lineno": 119
          },
          {
            "lineno": 130
          },
          {
            "lineno": 131
          },
          {
            "lineno": 132
          },
          {
            "lineno": 134
          },
          {
            "lineno": 136
          },
          {
            "lineno": 137
          },
          {
            "lineno": 140
          }
        ],
        "missing": 34,
        "seen": 113,
        "seen_lines": [
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 42,
            "e": 42
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 59,
            "e": 69
          },
          {
            "s": 69,
            "e": 88
          },
          {
            "s": 88,
            "e": 106
          },
          {
            "s": 106,
            "e": 115
          },
          {
            "s": 115,
            "e": 129
          },
          {
            "s": 129,
            "e": 147
          },
          {
            "s": 147,
            "e": 147
          }
        ],
        "total": 147,
        "coverage": {
          "21": {
            "partial": false,
            "source": "  if(!(this instanceof CursorStream)) return new CursorStream(cursor);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 36
              },
              {
                "startCol": 6,
                "endCol": 36
              },
              {
                "startCol": 23,
                "endCol": 35
              },
              {
                "startCol": 38,
                "endCol": 70
              }
            ]
          },
          "23": {
            "partial": false,
            "source": "  Stream.call(this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "25": {
            "partial": false,
            "source": "  this.readable = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "26": {
            "partial": false,
            "source": "  this.paused = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "27": {
            "partial": false,
            "source": "  this._cursor = cursor;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "28": {
            "partial": false,
            "source": "  this._destroyed = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "32": {
            "partial": false,
            "source": "  process.nextTick(function () {",
            "missing": [
              {}
            ]
          },
          "33": {
            "partial": false,
            "source": "    self._init();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              },
              {}
            ]
          },
          "34": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "60": {
            "partial": false,
            "source": "  if (this._destroyed) return;",
            "missing": [
              {
                "startCol": 23,
                "endCol": 30
              }
            ]
          },
          "61": {
            "partial": false,
            "source": "  this._next();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "  if (this.paused || this._destroyed) return;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 36
              },
              {
                "startCol": 38,
                "endCol": 45
              }
            ]
          },
          "72": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "  process.nextTick(function () {",
            "missing": [
              {}
            ]
          },
          "77": {
            "partial": false,
            "source": "    self._cursor.nextObject(function (err, doc) {",
            "missing": [
              {}
            ]
          },
          "78": {
            "partial": false,
            "source": "      self._onNextObject(err, doc);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 35
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "80": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "89": {
            "partial": false,
            "source": "  if (err) return this.destroy(err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 9
              },
              {
                "startCol": 11,
                "endCol": 36
              },
              {
                "startCol": 18,
                "endCol": 35
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "  if (!doc) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 10
              },
              {
                "startCol": 7,
                "endCol": 10
              }
            ]
          },
          "93": {
            "partial": false,
            "source": "    this.emit('end')",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "    return this.destroy();",
            "missing": [
              {
                "startCol": 11,
                "endCol": 25
              },
              {},
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "  this.emit('data', doc);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "98": {
            "partial": false,
            "source": "  this._next();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "107": {
            "partial": false,
            "source": "  this.paused = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 21
              }
            ]
          },
          "116": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "117": {
            "partial": false,
            "source": "  process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "118": {
            "partial": false,
            "source": "    self.paused = false;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "119": {
            "partial": false,
            "source": "    self._next();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              },
              {}
            ]
          },
          "120": {
            "partial": false,
            "source": "  })",
            "missing": [
              {}
            ]
          },
          "121": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "130": {
            "partial": false,
            "source": "  if (this._destroyed) return;",
            "missing": [
              {
                "startCol": 23,
                "endCol": 30
              }
            ]
          },
          "131": {
            "partial": false,
            "source": "  this._destroyed = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "132": {
            "partial": false,
            "source": "  this.readable = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "134": {
            "partial": false,
            "source": "  this._cursor.close();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "136": {
            "partial": false,
            "source": "  if (err) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 9
              }
            ]
          },
          "137": {
            "partial": false,
            "source": "    this.emit('error', err);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "140": {
            "partial": false,
            "source": "  this.emit('close');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          }
        },
        "source": "/**\n * Module dependecies.\n */\nvar Stream = require('stream').Stream;\n\n/**\n * CursorStream\n *\n * Returns a stream interface for the **cursor**.\n *\n * Events\n *  - **data** {function(item) {}} the data event triggers when a document is ready.\n *  - **error** {function(err) {}} the error event triggers if an error happens.\n *  - **close** {function() {}} the end event triggers when there is no more documents available.\n *\n * @class Represents a CursorStream.\n * @param {Cursor} cursor a cursor object that the stream wraps.\n * @return {Stream}\n */\nfunction CursorStream(cursor) {\n  if(!(this instanceof CursorStream)) return new CursorStream(cursor);\n\n  Stream.call(this);\n\n  this.readable = true;\n  this.paused = false;\n  this._cursor = cursor;\n  this._destroyed = null;\n\n  // give time to hook up events\n  var self = this;\n  process.nextTick(function () {\n    self._init();\n  });\n}\n\n/**\n * Inherit from Stream\n * @ignore\n * @api private\n */\nCursorStream.prototype.__proto__ = Stream.prototype;\n\n/**\n * Flag stating whether or not this stream is readable.\n */\nCursorStream.prototype.readable;\n\n/**\n * Flag stating whether or not this stream is paused.\n */\nCursorStream.prototype.paused;\n\n/**\n * Initialize the cursor.\n * @ignore\n * @api private\n */\nCursorStream.prototype._init = function () {\n  if (this._destroyed) return;\n  this._next();\n}\n\n/**\n * Pull the next document from the cursor.\n * @ignore\n * @api private\n */\nCursorStream.prototype._next = function () {\n  if (this.paused || this._destroyed) return;\n\n  var self = this;\n\n  // nextTick is necessary to avoid stack overflows when\n  // dealing with large result sets.\n  process.nextTick(function () {\n    self._cursor.nextObject(function (err, doc) {\n      self._onNextObject(err, doc);\n    });\n  });\n}\n\n/**\n * Handle each document as its returned from the cursor.\n * @ignore\n * @api private\n */\nCursorStream.prototype._onNextObject = function (err, doc) {\n  if (err) return this.destroy(err);\n\n  // when doc is null we hit the end of the cursor\n  if (!doc) {\n    this.emit('end')\n    return this.destroy();\n  }\n\n  this.emit('data', doc);\n  this._next();\n}\n\n/**\n * Pauses the stream.\n *\n * @api public\n */\nCursorStream.prototype.pause = function () {\n  this.paused = true;\n}\n\n/**\n * Resumes the stream.\n *\n * @api public\n */\nCursorStream.prototype.resume = function () {\n  var self = this;\n  process.nextTick(function() {\n    self.paused = false;\n    self._next();\n  })\n}\n\n/**\n * Destroys the stream, closing the underlying\n * cursor. No more events will be emitted.\n *\n * @api public\n */\nCursorStream.prototype.destroy = function (err) {\n  if (this._destroyed) return;\n  this._destroyed = true;\n  this.readable = false;\n\n  this._cursor.close();\n\n  if (err) {\n    this.emit('error', err);\n  }\n\n  this.emit('close');\n}\n\n// TODO - maybe implement the raw option to pass binary?\n//CursorStream.prototype.setEncoding = function () {\n//}\n\nmodule.exports = exports = CursorStream;",
        "blocks": {
          "total": 18,
          "seen": 0,
          "missing": 18,
          "percentage": 0
        }
      },
      "hash": "4fbdab6901a324c678d3e108708c48ff"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/connection.js": {
      "stats": {
        "percentage": 0.7621247113163973,
        "lines": [
          {
            "lineno": 13
          },
          {
            "lineno": 26
          },
          {
            "lineno": 53
          },
          {
            "lineno": 55
          },
          {
            "lineno": 57
          },
          {
            "lineno": 59
          },
          {
            "lineno": 60
          },
          {
            "lineno": 61
          },
          {
            "lineno": 63
          },
          {
            "lineno": 68
          },
          {
            "lineno": 70
          },
          {
            "lineno": 71
          },
          {
            "lineno": 74
          },
          {
            "lineno": 76
          },
          {
            "lineno": 77
          },
          {
            "lineno": 79
          },
          {
            "lineno": 81
          },
          {
            "lineno": 82
          },
          {
            "lineno": 83
          },
          {
            "lineno": 84
          },
          {
            "lineno": 86
          },
          {
            "lineno": 87
          },
          {
            "lineno": 88
          },
          {
            "lineno": 95
          },
          {
            "lineno": 98
          },
          {
            "lineno": 101
          },
          {
            "lineno": 109
          },
          {
            "lineno": 129
          },
          {
            "lineno": 140
          },
          {
            "lineno": 142
          },
          {
            "lineno": 149
          },
          {
            "lineno": 152
          },
          {
            "lineno": 157
          },
          {
            "lineno": 170
          },
          {
            "lineno": 198
          },
          {
            "lineno": 211
          },
          {
            "lineno": 213
          },
          {
            "lineno": 215
          },
          {
            "lineno": 217
          },
          {
            "lineno": 219
          },
          {
            "lineno": 222
          },
          {
            "lineno": 225
          },
          {
            "lineno": 227
          },
          {
            "lineno": 231
          },
          {
            "lineno": 233
          },
          {
            "lineno": 234
          },
          {
            "lineno": 235
          },
          {
            "lineno": 236
          },
          {
            "lineno": 238
          },
          {
            "lineno": 240
          },
          {
            "lineno": 244
          },
          {
            "lineno": 246
          },
          {
            "lineno": 255
          },
          {
            "lineno": 257
          },
          {
            "lineno": 258
          },
          {
            "lineno": 259
          },
          {
            "lineno": 261
          },
          {
            "lineno": 264
          },
          {
            "lineno": 265
          },
          {
            "lineno": 266
          },
          {
            "lineno": 267
          },
          {
            "lineno": 272
          },
          {
            "lineno": 274
          },
          {
            "lineno": 276
          },
          {
            "lineno": 278
          },
          {
            "lineno": 286
          },
          {
            "lineno": 290
          },
          {
            "lineno": 292
          },
          {
            "lineno": 293
          },
          {
            "lineno": 298
          },
          {
            "lineno": 300
          },
          {
            "lineno": 302
          },
          {
            "lineno": 304
          },
          {
            "lineno": 306
          },
          {
            "lineno": 308
          },
          {
            "lineno": 323
          },
          {
            "lineno": 327
          },
          {
            "lineno": 329
          },
          {
            "lineno": 332
          },
          {
            "lineno": 337
          },
          {
            "lineno": 339
          },
          {
            "lineno": 342
          },
          {
            "lineno": 343
          },
          {
            "lineno": 344
          },
          {
            "lineno": 345
          },
          {
            "lineno": 347
          },
          {
            "lineno": 362
          },
          {
            "lineno": 366
          },
          {
            "lineno": 368
          },
          {
            "lineno": 374
          },
          {
            "lineno": 376
          },
          {
            "lineno": 378
          },
          {
            "lineno": 387
          },
          {
            "lineno": 389
          },
          {
            "lineno": 391
          },
          {
            "lineno": 397
          },
          {
            "lineno": 409
          },
          {
            "lineno": 411
          },
          {
            "lineno": 418
          },
          {
            "lineno": 420
          },
          {
            "lineno": 422
          },
          {
            "lineno": 425
          },
          {
            "lineno": 427
          }
        ],
        "missing": 103,
        "seen": 330,
        "seen_lines": [
          {
            "s": 1,
            "e": 7
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 9,
            "e": 44
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 26,
            "e": 26
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 34,
            "e": 34
          },
          {
            "s": 37,
            "e": 37
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 49,
            "e": 128
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 93,
            "e": 93
          },
          {
            "s": 93,
            "e": 93
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 97,
            "e": 97
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 105,
            "e": 105
          },
          {
            "s": 105,
            "e": 105
          },
          {
            "s": 105,
            "e": 105
          },
          {
            "s": 106,
            "e": 106
          },
          {
            "s": 107,
            "e": 107
          },
          {
            "s": 107,
            "e": 107
          },
          {
            "s": 114,
            "e": 114
          },
          {
            "s": 116,
            "e": 116
          },
          {
            "s": 116,
            "e": 116
          },
          {
            "s": 116,
            "e": 116
          },
          {
            "s": 118,
            "e": 118
          },
          {
            "s": 118,
            "e": 118
          },
          {
            "s": 118,
            "e": 118
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 120,
            "e": 120
          },
          {
            "s": 121,
            "e": 121
          },
          {
            "s": 121,
            "e": 121
          },
          {
            "s": 121,
            "e": 121
          },
          {
            "s": 122,
            "e": 122
          },
          {
            "s": 122,
            "e": 122
          },
          {
            "s": 122,
            "e": 122
          },
          {
            "s": 123,
            "e": 123
          },
          {
            "s": 123,
            "e": 123
          },
          {
            "s": 123,
            "e": 123
          },
          {
            "s": 128,
            "e": 133
          },
          {
            "s": 133,
            "e": 162
          },
          {
            "s": 136,
            "e": 136
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 138,
            "e": 139
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 147,
            "e": 148
          },
          {
            "s": 147,
            "e": 147
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 148,
            "e": 148
          },
          {
            "s": 151,
            "e": 151
          },
          {
            "s": 151,
            "e": 151
          },
          {
            "s": 154,
            "e": 154
          },
          {
            "s": 154,
            "e": 154
          },
          {
            "s": 162,
            "e": 175
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 166,
            "e": 168
          },
          {
            "s": 166,
            "e": 166
          },
          {
            "s": 168,
            "e": 168
          },
          {
            "s": 168,
            "e": 168
          },
          {
            "s": 169,
            "e": 169
          },
          {
            "s": 169,
            "e": 169
          },
          {
            "s": 175,
            "e": 193
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 179,
            "e": 179
          },
          {
            "s": 179,
            "e": 179
          },
          {
            "s": 179,
            "e": 179
          },
          {
            "s": 180,
            "e": 180
          },
          {
            "s": 180,
            "e": 180
          },
          {
            "s": 182,
            "e": 182
          },
          {
            "s": 182,
            "e": 182
          },
          {
            "s": 182,
            "e": 182
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 193,
            "e": 204
          },
          {
            "s": 194,
            "e": 202
          },
          {
            "s": 196,
            "e": 196
          },
          {
            "s": 198,
            "e": 198
          },
          {
            "s": 198,
            "e": 198
          },
          {
            "s": 198,
            "e": 198
          },
          {
            "s": 198,
            "e": 198
          },
          {
            "s": 200,
            "e": 200
          },
          {
            "s": 200,
            "e": 200
          },
          {
            "s": 204,
            "e": 386
          },
          {
            "s": 207,
            "e": 384
          },
          {
            "s": 209,
            "e": 209
          },
          {
            "s": 211,
            "e": 211
          },
          {
            "s": 211,
            "e": 211
          },
          {
            "s": 252,
            "e": 252
          },
          {
            "s": 252,
            "e": 252
          },
          {
            "s": 252,
            "e": 252
          },
          {
            "s": 281,
            "e": 281
          },
          {
            "s": 283,
            "e": 283
          },
          {
            "s": 283,
            "e": 283
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 297,
            "e": 297
          },
          {
            "s": 297,
            "e": 297
          },
          {
            "s": 297,
            "e": 297
          },
          {
            "s": 297,
            "e": 297
          },
          {
            "s": 297,
            "e": 297
          },
          {
            "s": 297,
            "e": 297
          },
          {
            "s": 297,
            "e": 297
          },
          {
            "s": 297,
            "e": 297
          },
          {
            "s": 310,
            "e": 310
          },
          {
            "s": 310,
            "e": 310
          },
          {
            "s": 310,
            "e": 310
          },
          {
            "s": 310,
            "e": 310
          },
          {
            "s": 310,
            "e": 310
          },
          {
            "s": 310,
            "e": 310
          },
          {
            "s": 310,
            "e": 310
          },
          {
            "s": 310,
            "e": 310
          },
          {
            "s": 312,
            "e": 312
          },
          {
            "s": 314,
            "e": 314
          },
          {
            "s": 315,
            "e": 315
          },
          {
            "s": 316,
            "e": 316
          },
          {
            "s": 317,
            "e": 317
          },
          {
            "s": 319,
            "e": 319
          },
          {
            "s": 321,
            "e": 321
          },
          {
            "s": 321,
            "e": 321
          },
          {
            "s": 331,
            "e": 331
          },
          {
            "s": 331,
            "e": 331
          },
          {
            "s": 331,
            "e": 331
          },
          {
            "s": 331,
            "e": 331
          },
          {
            "s": 331,
            "e": 331
          },
          {
            "s": 351,
            "e": 351
          },
          {
            "s": 351,
            "e": 351
          },
          {
            "s": 353,
            "e": 353
          },
          {
            "s": 354,
            "e": 354
          },
          {
            "s": 355,
            "e": 355
          },
          {
            "s": 356,
            "e": 356
          },
          {
            "s": 358,
            "e": 358
          },
          {
            "s": 358,
            "e": 358
          },
          {
            "s": 360,
            "e": 360
          },
          {
            "s": 360,
            "e": 360
          },
          {
            "s": 386,
            "e": 395
          },
          {
            "s": 395,
            "e": 401
          },
          {
            "s": 396,
            "e": 399
          },
          {
            "s": 401,
            "e": 406
          },
          {
            "s": 402,
            "e": 404
          },
          {
            "s": 406,
            "e": 415
          },
          {
            "s": 407,
            "e": 413
          },
          {
            "s": 415,
            "e": 433
          },
          {
            "s": 416,
            "e": 430
          },
          {
            "s": 433,
            "e": 433
          }
        ],
        "total": 433,
        "coverage": {
          "13": {
            "partial": true,
            "source": "  this.socketOptions = socketOptions ? socketOptions : {host:'localhost', port:27017, domainSocket:false};",
            "missing": [
              {
                "startCol": 55,
                "endCol": 105
              }
            ]
          },
          "26": {
            "partial": true,
            "source": "  this.maxBsonSize = socketOptions.maxBsonSize ? socketOptions.maxBsonSize : Connection.DEFAULT_MAX_BSON_SIZE;",
            "missing": [
              {
                "startCol": 49,
                "endCol": 74
              }
            ]
          },
          "53": {
            "partial": false,
            "source": "    this.connection = new net.Socket();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 142
              },
              {
                "startCol": 31,
                "endCol": 74
              },
              {
                "startCol": 77,
                "endCol": 112
              },
              {
                "startCol": 115,
                "endCol": 141
              }
            ]
          },
          "57": {
            "partial": false,
            "source": "    if(process.version.indexOf(\"v0.4\") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 38
              },
              {
                "startCol": 42,
                "endCol": 44
              },
              {
                "startCol": 46,
                "endCol": 100
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "    if(process.version.indexOf(\"v0.4\") == -1) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 38
              },
              {
                "startCol": 42,
                "endCol": 44
              }
            ]
          },
          "60": {
            "partial": false,
            "source": "      if(this.socketOptions.keepAlive > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 41
              }
            ]
          },
          "61": {
            "partial": false,
            "source": "        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 72
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "        this.connection.setKeepAlive(false);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 43
              }
            ]
          },
          "68": {
            "partial": false,
            "source": "    var pair = this.pair = tls.createSecurePair(false);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 55
              },
              {
                "startCol": 27,
                "endCol": 54
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "    this.pair.encrypted.pipe(this.connection);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 45
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "    this.connection.pipe(this.pair.encrypted);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 45
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "    this.writeSteam = this.pair.cleartext;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "    this.pair.on(\"secure\", connectHandler(this));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 48
              },
              {
                "startCol": 27,
                "endCol": 47
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "    this.pair.cleartext.on(\"data\", createDataHandler(this));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 59
              },
              {
                "startCol": 35,
                "endCol": 58
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "    this.connection.on(\"error\", errorHandler(this));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 32,
                "endCol": 50
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "    this.connection.on(\"end\", endHandler(this));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 47
              },
              {
                "startCol": 30,
                "endCol": 46
              }
            ]
          },
          "82": {
            "partial": false,
            "source": "    this.connection.on(\"timeout\", timeoutHandler(this));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 55
              },
              {
                "startCol": 34,
                "endCol": 54
              }
            ]
          },
          "83": {
            "partial": false,
            "source": "    this.connection.on(\"drain\", drainHandler(this));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 32,
                "endCol": 50
              }
            ]
          },
          "84": {
            "partial": false,
            "source": "    this.writeSteam.on(\"close\", closeHandler(this));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 32,
                "endCol": 50
              }
            ]
          },
          "86": {
            "partial": false,
            "source": "    this.connection.connect(this.socketOptions.port, this.socketOptions.host);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 77
              }
            ]
          },
          "87": {
            "partial": false,
            "source": "    if(this.logger != null && this.logger.doDebug){",
            "missing": [
              {
                "startCol": 7,
                "endCol": 26
              }
            ]
          },
          "88": {
            "partial": false,
            "source": "      this.logger.debug(\"opened connection\", this.socketOptions);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 64
              }
            ]
          },
          "95": {
            "partial": false,
            "source": "      this.connection = net.createConnection(this.socketOptions.host);            ",
            "missing": [
              {
                "startCol": 6,
                "endCol": 70
              },
              {
                "startCol": 24,
                "endCol": 69
              }
            ]
          },
          "98": {
            "partial": false,
            "source": "      this.logger.debug(\"opened connection\", this.socketOptions);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 64
              }
            ]
          },
          "101": {
            "partial": true,
            "source": "    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);",
            "missing": [
              {
                "startCol": 77,
                "endCol": 112
              }
            ]
          },
          "109": {
            "partial": false,
            "source": "        this.connection.setKeepAlive(false);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 43
              }
            ]
          },
          "129": {
            "partial": false,
            "source": "  return this.connected && !this.connection.destroyed && this.connection.writable && this.connection.readable;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 110
              },
              {
                "startCol": 9,
                "endCol": 53
              },
              {
                "startCol": 27,
                "endCol": 53
              }
            ]
          },
          "140": {
            "partial": false,
            "source": "          return callback(new Error(\"Document exceeds maximal allowed bson size of \" + this.maxBsonSize + \" bytes\"));",
            "missing": [
              {
                "startCol": 10,
                "endCol": 117
              },
              {
                "startCol": 17,
                "endCol": 116
              },
              {
                "startCol": 36,
                "endCol": 103
              }
            ]
          },
          "142": {
            "partial": false,
            "source": "          this.logger.debug(\"writing command to mongodb\", binaryCommand);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 72
              }
            ]
          },
          "149": {
            "partial": false,
            "source": "        return callback(new Error(\"Document exceeds maximal allowed bson size of \" + this.maxBsonSize + \" bytes\"));",
            "missing": [
              {
                "startCol": 8,
                "endCol": 115
              },
              {
                "startCol": 15,
                "endCol": 114
              },
              {
                "startCol": 34,
                "endCol": 101
              }
            ]
          },
          "152": {
            "partial": false,
            "source": "        this.logger.debug(\"writing command to mongodb\", binaryCommand);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 70
              }
            ]
          },
          "157": {
            "partial": false,
            "source": "    if(typeof callback === 'function') callback(err);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              },
              {
                "startCol": 39,
                "endCol": 52
              }
            ]
          },
          "170": {
            "partial": false,
            "source": "    this.logger.debug(\"closed connection\", this.connection);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 59
              }
            ]
          },
          "198": {
            "partial": true,
            "source": "    self.connection.setTimeout(self.socketOptions.socketTimeoutMS != null ? self.socketOptions.socketTimeoutMS : self.socketOptions.timeout);",
            "missing": [
              {
                "startCol": 76,
                "endCol": 110
              }
            ]
          },
          "211": {
            "partial": true,
            "source": "      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {",
            "missing": [
              {
                "startCol": 31,
                "endCol": 53
              }
            ]
          },
          "213": {
            "partial": false,
            "source": "        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 71
              },
              {
                "startCol": 35,
                "endCol": 70
              }
            ]
          },
          "215": {
            "partial": false,
            "source": "        if(remainingBytesToRead > data.length) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 31
              }
            ]
          },
          "217": {
            "partial": false,
            "source": "          data.copy(self.buffer, self.bytesRead);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 48
              }
            ]
          },
          "219": {
            "partial": false,
            "source": "          self.bytesRead = self.bytesRead + data.length;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 56
              },
              {
                "startCol": 27,
                "endCol": 55
              }
            ]
          },
          "222": {
            "partial": false,
            "source": "          data = new Buffer(0);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 31
              }
            ]
          },
          "225": {
            "partial": false,
            "source": "          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 73
              }
            ]
          },
          "227": {
            "partial": false,
            "source": "          data = data.slice(remainingBytesToRead);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 50
              },
              {
                "startCol": 17,
                "endCol": 49
              }
            ]
          },
          "231": {
            "partial": false,
            "source": "            var emitBuffer = self.buffer;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 41
              }
            ]
          },
          "233": {
            "partial": false,
            "source": "            self.buffer = null;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              }
            ]
          },
          "234": {
            "partial": false,
            "source": "            self.sizeOfMessage = 0;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 35
              }
            ]
          },
          "235": {
            "partial": false,
            "source": "            self.bytesRead = 0;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              }
            ]
          },
          "236": {
            "partial": false,
            "source": "            self.stubBuffer = null;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 35
              }
            ]
          },
          "238": {
            "partial": false,
            "source": "            self.emit(\"message\", emitBuffer, self);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 50
              }
            ]
          },
          "240": {
            "partial": false,
            "source": "            var errorObject = {err:\"socketHandler\", trace:err, bin:buffer, parseState:{",
            "missing": [
              {}
            ]
          },
          "241": {
            "partial": false,
            "source": "              sizeOfMessage:self.sizeOfMessage,",
            "missing": [
              {}
            ]
          },
          "242": {
            "partial": false,
            "source": "              bytesRead:self.bytesRead,",
            "missing": [
              {}
            ]
          },
          "243": {
            "partial": false,
            "source": "              stubBuffer:self.stubBuffer}};",
            "missing": [
              {}
            ]
          },
          "244": {
            "partial": false,
            "source": "            if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);",
            "missing": [
              {
                "startCol": 15,
                "endCol": 34
              },
              {
                "startCol": 59,
                "endCol": 103
              }
            ]
          },
          "246": {
            "partial": false,
            "source": "            self.emit(\"parseError\", errorObject, self);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 54
              }
            ]
          },
          "255": {
            "partial": false,
            "source": "          if(self.stubBuffer.length + data.length > 4) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 49
              }
            ]
          },
          "257": {
            "partial": false,
            "source": "            var newData = new Buffer(self.stubBuffer.length + data.length);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 75
              },
              {
                "startCol": 37,
                "endCol": 73
              }
            ]
          },
          "258": {
            "partial": false,
            "source": "            self.stubBuffer.copy(newData, 0);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 44
              }
            ]
          },
          "259": {
            "partial": false,
            "source": "            data.copy(newData, self.stubBuffer.length);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 54
              }
            ]
          },
          "261": {
            "partial": false,
            "source": "            data = newData;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 27
              }
            ]
          },
          "264": {
            "partial": false,
            "source": "            self.buffer = null;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              }
            ]
          },
          "265": {
            "partial": false,
            "source": "            self.sizeOfMessage = 0;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 35
              }
            ]
          },
          "266": {
            "partial": false,
            "source": "            self.bytesRead = 0;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              }
            ]
          },
          "267": {
            "partial": false,
            "source": "            self.stubBuffer = null;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 35
              }
            ]
          },
          "272": {
            "partial": false,
            "source": "            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 81
              },
              {
                "startCol": 43,
                "endCol": 79
              }
            ]
          },
          "274": {
            "partial": false,
            "source": "            self.stubBuffer.copy(newStubBuffer, 0);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 50
              }
            ]
          },
          "276": {
            "partial": false,
            "source": "            data.copy(newStubBuffer, self.stubBuffer.length);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 60
              }
            ]
          },
          "278": {
            "partial": false,
            "source": "            data = new Buffer(0);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              }
            ]
          },
          "286": {
            "partial": false,
            "source": "              var errorObject = {err:\"socketHandler\", trace:'', bin:self.buffer, parseState:{",
            "missing": [
              {}
            ]
          },
          "287": {
            "partial": false,
            "source": "                sizeOfMessage: sizeOfMessage,",
            "missing": [
              {}
            ]
          },
          "288": {
            "partial": false,
            "source": "                bytesRead: self.bytesRead,",
            "missing": [
              {}
            ]
          },
          "289": {
            "partial": false,
            "source": "                stubBuffer: self.stubBuffer}};",
            "missing": [
              {}
            ]
          },
          "290": {
            "partial": false,
            "source": "              if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);",
            "missing": [
              {
                "startCol": 17,
                "endCol": 36
              },
              {
                "startCol": 61,
                "endCol": 105
              }
            ]
          },
          "292": {
            "partial": false,
            "source": "              self.emit(\"parseError\", errorObject, self);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 56
              }
            ]
          },
          "293": {
            "partial": false,
            "source": "              return;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 21
              }
            ]
          },
          "298": {
            "partial": false,
            "source": "              self.buffer = new Buffer(sizeOfMessage);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 54
              }
            ]
          },
          "300": {
            "partial": false,
            "source": "              data.copy(self.buffer, 0);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 39
              }
            ]
          },
          "302": {
            "partial": false,
            "source": "              self.bytesRead = data.length;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 43
              }
            ]
          },
          "304": {
            "partial": false,
            "source": "              self.sizeOfMessage = sizeOfMessage;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 49
              }
            ]
          },
          "306": {
            "partial": false,
            "source": "              self.stubBuffer = null;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 37
              }
            ]
          },
          "308": {
            "partial": false,
            "source": "              data = new Buffer(0);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 35
              }
            ]
          },
          "323": {
            "partial": false,
            "source": "                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{",
            "missing": [
              {}
            ]
          },
          "324": {
            "partial": false,
            "source": "                  sizeOfMessage:self.sizeOfMessage,",
            "missing": [
              {}
            ]
          },
          "325": {
            "partial": false,
            "source": "                  bytesRead:self.bytesRead,",
            "missing": [
              {}
            ]
          },
          "326": {
            "partial": false,
            "source": "                  stubBuffer:self.stubBuffer}};",
            "missing": [
              {}
            ]
          },
          "327": {
            "partial": false,
            "source": "                if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 38
              },
              {
                "startCol": 63,
                "endCol": 107
              }
            ]
          },
          "329": {
            "partial": false,
            "source": "                self.emit(\"parseError\", errorObject, self);",
            "missing": [
              {
                "startCol": 16,
                "endCol": 58
              }
            ]
          },
          "332": {
            "partial": false,
            "source": "              var errorObject = {err:\"socketHandler\", trace:null, bin:data, parseState:{",
            "missing": [
              {}
            ]
          },
          "333": {
            "partial": false,
            "source": "                sizeOfMessage:sizeOfMessage,",
            "missing": [
              {}
            ]
          },
          "334": {
            "partial": false,
            "source": "                bytesRead:0,",
            "missing": [
              {}
            ]
          },
          "335": {
            "partial": false,
            "source": "                buffer:null,",
            "missing": [
              {}
            ]
          },
          "336": {
            "partial": false,
            "source": "                stubBuffer:null}};",
            "missing": [
              {}
            ]
          },
          "337": {
            "partial": false,
            "source": "              if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);",
            "missing": [
              {
                "startCol": 17,
                "endCol": 36
              },
              {
                "startCol": 61,
                "endCol": 105
              }
            ]
          },
          "339": {
            "partial": false,
            "source": "              self.emit(\"parseError\", errorObject, self);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 56
              }
            ]
          },
          "342": {
            "partial": false,
            "source": "              self.buffer = null;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 33
              }
            ]
          },
          "343": {
            "partial": false,
            "source": "              self.sizeOfMessage = 0;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 37
              }
            ]
          },
          "344": {
            "partial": false,
            "source": "              self.bytesRead = 0;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 33
              }
            ]
          },
          "345": {
            "partial": false,
            "source": "              self.stubBuffer = null;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 37
              }
            ]
          },
          "347": {
            "partial": false,
            "source": "              data = new Buffer(0);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 35
              }
            ]
          },
          "362": {
            "partial": false,
            "source": "                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{",
            "missing": [
              {}
            ]
          },
          "363": {
            "partial": false,
            "source": "                  sizeOfMessage:sizeOfMessage,",
            "missing": [
              {}
            ]
          },
          "364": {
            "partial": false,
            "source": "                  bytesRead:self.bytesRead,",
            "missing": [
              {}
            ]
          },
          "365": {
            "partial": false,
            "source": "                  stubBuffer:self.stubBuffer}};",
            "missing": [
              {}
            ]
          },
          "366": {
            "partial": false,
            "source": "                if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 38
              },
              {
                "startCol": 63,
                "endCol": 107
              }
            ]
          },
          "368": {
            "partial": false,
            "source": "                self.emit(\"parseError\", errorObject, self);",
            "missing": [
              {
                "startCol": 16,
                "endCol": 58
              }
            ]
          },
          "374": {
            "partial": false,
            "source": "            self.stubBuffer = new Buffer(data.length)",
            "missing": [
              {}
            ]
          },
          "375": {
            "partial": false,
            "source": "            // Copy the data to the stub buffer",
            "missing": [
              {}
            ]
          },
          "376": {
            "partial": false,
            "source": "            data.copy(self.stubBuffer, 0);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 41
              },
              {}
            ]
          },
          "378": {
            "partial": false,
            "source": "            data = new Buffer(0);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              }
            ]
          },
          "387": {
            "partial": false,
            "source": "  return function() {",
            "missing": [
              {}
            ]
          },
          "388": {
            "partial": false,
            "source": "    // Set connected to false",
            "missing": [
              {}
            ]
          },
          "389": {
            "partial": false,
            "source": "    self.connected = false;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "390": {
            "partial": false,
            "source": "    // Emit end event",
            "missing": [
              {}
            ]
          },
          "391": {
            "partial": false,
            "source": "    self.emit(\"end\", {err: 'connection received Fin packet from [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 138
              },
              {
                "startCol": 27,
                "endCol": 92
              }
            ]
          },
          "392": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "393": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "397": {
            "partial": false,
            "source": "    self.emit(\"timeout\", {err: 'connection to [' + self.socketOptions.host + ':' + self.socketOptions.port + '] timed out'}, self);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 130
              },
              {
                "startCol": 31,
                "endCol": 74
              }
            ]
          },
          "409": {
            "partial": false,
            "source": "    self.connected = false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "411": {
            "partial": false,
            "source": "    self.emit(\"error\", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 125
              },
              {
                "startCol": 29,
                "endCol": 79
              }
            ]
          },
          "418": {
            "partial": false,
            "source": "    if(hadError && !self.connected) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 15
              },
              {
                "startCol": 19,
                "endCol": 34
              }
            ]
          },
          "420": {
            "partial": false,
            "source": "      self.connected = false;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 29
              }
            ]
          },
          "422": {
            "partial": false,
            "source": "      self.emit(\"error\", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 127
              },
              {
                "startCol": 31,
                "endCol": 81
              }
            ]
          },
          "425": {
            "partial": false,
            "source": "      self.connected = false;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 29
              }
            ]
          },
          "427": {
            "partial": false,
            "source": "      self.emit(\"close\", {err: 'connection closed to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 127
              },
              {
                "startCol": 31,
                "endCol": 81
              }
            ]
          }
        },
        "source": "var utils = require('./connection_utils'),\n  inherits = require('util').inherits,\n  net = require('net'),\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  binaryutils = require('../utils'),\n  tls = require('tls');\n\nvar Connection = exports.Connection = function(id, socketOptions) {\n  // Set up event emitter\n  EventEmitter.call(this);\n  // Store all socket options\n  this.socketOptions = socketOptions ? socketOptions : {host:'localhost', port:27017, domainSocket:false};\n  // Set keep alive default if not overriden\n  if(!this.socketOptions.keepAlive && process.platform !== \"sunos\") this.socketOptions.keepAlive = 100;\n  // Id for the connection\n  this.id = id;\n  // State of the connection\n  this.connected = false;\n  // Set if this is a domain socket\n  this.domainSocket = this.socketOptions.domainSocket;\n\n  //\n  // Connection parsing state\n  //\n  this.maxBsonSize = socketOptions.maxBsonSize ? socketOptions.maxBsonSize : Connection.DEFAULT_MAX_BSON_SIZE;\n  // Contains the current message bytes\n  this.buffer = null;\n  // Contains the current message size\n  this.sizeOfMessage = 0;\n  // Contains the readIndex for the messaage\n  this.bytesRead = 0;\n  // Contains spill over bytes from additional messages\n  this.stubBuffer = 0;\n\n  // Just keeps list of events we allow\n  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[], end:[]};\n\n  // Just keeps list of events we allow\n  resetHandlers(this, false);\n}\n\n// Set max bson size\nConnection.DEFAULT_MAX_BSON_SIZE = 1024 * 1024 * 4;\n\n// Inherit event emitter so we can emit stuff wohoo\ninherits(Connection, EventEmitter);\n\nConnection.prototype.start = function() {\n  // If we have a normal connection\n  if(this.socketOptions.ssl) {\n    // Create a new stream\n    this.connection = new net.Socket();\n    // Set timeout allowing backward compatibility to timeout if no connectTimeoutMS is set\n    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);\n    // Work around for 0.4.X\n    if(process.version.indexOf(\"v0.4\") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);\n    // Set keep alive if defined\n    if(process.version.indexOf(\"v0.4\") == -1) {\n      if(this.socketOptions.keepAlive > 0) {\n        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);\n      } else {\n        this.connection.setKeepAlive(false);\n      }\n    }\n\n    // Set up pair for tls with server, accept self-signed certificates as well\n    var pair = this.pair = tls.createSecurePair(false);\n    // Set up encrypted streams\n    this.pair.encrypted.pipe(this.connection);\n    this.connection.pipe(this.pair.encrypted);\n\n    // Setup clearText stream\n    this.writeSteam = this.pair.cleartext;\n    // Add all handlers to the socket to manage it\n    this.pair.on(\"secure\", connectHandler(this));\n    this.pair.cleartext.on(\"data\", createDataHandler(this));\n    // Add handlers\n    this.connection.on(\"error\", errorHandler(this));\n    // this.connection.on(\"connect\", connectHandler(this));\n    this.connection.on(\"end\", endHandler(this));\n    this.connection.on(\"timeout\", timeoutHandler(this));\n    this.connection.on(\"drain\", drainHandler(this));\n    this.writeSteam.on(\"close\", closeHandler(this));\n    // Start socket\n    this.connection.connect(this.socketOptions.port, this.socketOptions.host);\n    if(this.logger != null && this.logger.doDebug){\n      this.logger.debug(\"opened connection\", this.socketOptions);\n    }\n  } else {\n    // Create new connection instance\n    if(!this.domainSocket) {\n      this.connection = net.createConnection(this.socketOptions.port, this.socketOptions.host);      \n    } else {\n      this.connection = net.createConnection(this.socketOptions.host);            \n    }\n    if(this.logger != null && this.logger.doDebug){\n      this.logger.debug(\"opened connection\", this.socketOptions);\n    }\n    // Set options on the socket\n    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);\n    // Work around for 0.4.X\n    if(process.version.indexOf(\"v0.4\") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);\n    // Set keep alive if defined\n    if(process.version.indexOf(\"v0.4\") == -1) {\n      if(this.socketOptions.keepAlive > 0) {\n        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);\n      } else {\n        this.connection.setKeepAlive(false);\n      }\n    }\n\n    // Set up write stream\n    this.writeSteam = this.connection;\n    // Add handlers\n    this.connection.on(\"error\", errorHandler(this));\n    // Add all handlers to the socket to manage it\n    this.connection.on(\"connect\", connectHandler(this));\n    // this.connection.on(\"end\", endHandler(this));\n    this.connection.on(\"data\", createDataHandler(this));\n    this.connection.on(\"timeout\", timeoutHandler(this));\n    this.connection.on(\"drain\", drainHandler(this));\n    this.connection.on(\"close\", closeHandler(this));\n  }\n}\n\n// Check if the sockets are live\nConnection.prototype.isConnected = function() {\n  return this.connected && !this.connection.destroyed && this.connection.writable && this.connection.readable;\n}\n\n// Write the data out to the socket\nConnection.prototype.write = function(command, callback) {\n  try {\n    // If we have a list off commands to be executed on the same socket\n    if(Array.isArray(command)) {\n      for(var i = 0; i < command.length; i++) {\n        var binaryCommand = command[i].toBinary()\n        if(!this.socketOptions['disableDriverBSONSizeCheck'] && binaryCommand.length > this.maxBsonSize) \n          return callback(new Error(\"Document exceeds maximal allowed bson size of \" + this.maxBsonSize + \" bytes\"));\n        if(this.logger != null && this.logger.doDebug) \n          this.logger.debug(\"writing command to mongodb\", binaryCommand);\n        \n        var r = this.writeSteam.write(binaryCommand);\n      }\n    } else {\n      var binaryCommand = command.toBinary()\n      if(!this.socketOptions['disableDriverBSONSizeCheck'] && binaryCommand.length > this.maxBsonSize) \n        return callback(new Error(\"Document exceeds maximal allowed bson size of \" + this.maxBsonSize + \" bytes\"));\n      \n      if(this.logger != null && this.logger.doDebug) \n        this.logger.debug(\"writing command to mongodb\", binaryCommand);\n\n      var r = this.writeSteam.write(binaryCommand);\n    }\n  } catch (err) {\n    if(typeof callback === 'function') callback(err);\n  }\n}\n\n// Force the closure of the connection\nConnection.prototype.close = function() {\n  // clear out all the listeners\n  resetHandlers(this, true);\n  // Add a dummy error listener to catch any weird last moment errors (and ignore them)\n  this.connection.on(\"error\", function() {})\n  // destroy connection\n  this.connection.destroy();\n  if(this.logger != null && this.logger.doDebug){\n    this.logger.debug(\"closed connection\", this.connection);\n  }\n}\n\n// Reset all handlers\nvar resetHandlers = function(self, clearListeners) {\n  self.eventHandlers = {error:[], connect:[], close:[], end:[], timeout:[], parseError:[], message:[]};\n\n  // If we want to clear all the listeners\n  if(clearListeners && self.connection != null) {\n    var keys = Object.keys(self.eventHandlers);\n    // Remove all listeners\n    for(var i = 0; i < keys.length; i++) {\n      self.connection.removeAllListeners(keys[i]);\n    }\n  }\n}\n\n//\n// Handlers\n//\n\n// Connect handler\nvar connectHandler = function(self) {\n  return function() {\n    // Set connected\n    self.connected = true;\n    // Now that we are connected set the socket timeout\n    self.connection.setTimeout(self.socketOptions.socketTimeoutMS != null ? self.socketOptions.socketTimeoutMS : self.socketOptions.timeout);\n    // Emit the connect event with no error\n    self.emit(\"connect\", null, self);\n  }\n}\n\nvar createDataHandler = exports.Connection.createDataHandler = function(self) {\n  // We need to handle the parsing of the data\n  // and emit the messages when there is a complete one\n  return function(data) {\n    // Parse until we are done with the data\n    while(data.length > 0) {\n      // If we still have bytes to read on the current message\n      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {\n        // Calculate the amount of remaining bytes\n        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;\n        // Check if the current chunk contains the rest of the message\n        if(remainingBytesToRead > data.length) {\n          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)\n          data.copy(self.buffer, self.bytesRead);\n          // Adjust the number of bytes read so it point to the correct index in the buffer\n          self.bytesRead = self.bytesRead + data.length;\n\n          // Reset state of buffer\n          data = new Buffer(0);\n        } else {\n          // Copy the missing part of the data into our current buffer\n          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);\n          // Slice the overflow into a new buffer that we will then re-parse\n          data = data.slice(remainingBytesToRead);\n\n          // Emit current complete message\n          try {\n            var emitBuffer = self.buffer;\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n            // Emit the buffer\n            self.emit(\"message\", emitBuffer, self);\n          } catch(err) {\n            var errorObject = {err:\"socketHandler\", trace:err, bin:buffer, parseState:{\n              sizeOfMessage:self.sizeOfMessage,\n              bytesRead:self.bytesRead,\n              stubBuffer:self.stubBuffer}};\n            if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n            // We got a parse Error fire it off then keep going\n            self.emit(\"parseError\", errorObject, self);\n          }\n        }\n      } else {\n        // Stub buffer is kept in case we don't get enough bytes to determine the\n        // size of the message (< 4 bytes)\n        if(self.stubBuffer != null && self.stubBuffer.length > 0) {\n\n          // If we have enough bytes to determine the message size let's do it\n          if(self.stubBuffer.length + data.length > 4) {\n            // Prepad the data\n            var newData = new Buffer(self.stubBuffer.length + data.length);\n            self.stubBuffer.copy(newData, 0);\n            data.copy(newData, self.stubBuffer.length);\n            // Reassign for parsing\n            data = newData;\n\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n\n          } else {\n\n            // Add the the bytes to the stub buffer\n            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);\n            // Copy existing stub buffer\n            self.stubBuffer.copy(newStubBuffer, 0);\n            // Copy missing part of the data\n            data.copy(newStubBuffer, self.stubBuffer.length);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        } else {\n          if(data.length > 4) {\n            // Retrieve the message size\n            var sizeOfMessage = binaryutils.decodeUInt32(data, 0);\n            // If we have a negative sizeOfMessage emit error and return\n            if(sizeOfMessage < 0 || sizeOfMessage > self.maxBsonSize) {\n              var errorObject = {err:\"socketHandler\", trace:'', bin:self.buffer, parseState:{\n                sizeOfMessage: sizeOfMessage,\n                bytesRead: self.bytesRead,\n                stubBuffer: self.stubBuffer}};\n              if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n              return;\n            }\n\n            // Ensure that the size of message is larger than 0 and less than the max allowed\n            if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonSize && sizeOfMessage > data.length) {\n              self.buffer = new Buffer(sizeOfMessage);\n              // Copy all the data into the buffer\n              data.copy(self.buffer, 0);\n              // Update bytes read\n              self.bytesRead = data.length;\n              // Update sizeOfMessage\n              self.sizeOfMessage = sizeOfMessage;\n              // Ensure stub buffer is null\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonSize && sizeOfMessage == data.length) {\n              try {\n                var emitBuffer = data;\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Exit parsing loop\n                data = new Buffer(0);\n                // Emit the message\n                self.emit(\"message\", emitBuffer, self);\n              } catch (err) {\n                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n                  sizeOfMessage:self.sizeOfMessage,\n                  bytesRead:self.bytesRead,\n                  stubBuffer:self.stubBuffer}};\n                if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n                // We got a parse Error fire it off then keep going\n                self.emit(\"parseError\", errorObject, self);\n              }\n            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxBsonSize) {\n              var errorObject = {err:\"socketHandler\", trace:null, bin:data, parseState:{\n                sizeOfMessage:sizeOfMessage,\n                bytesRead:0,\n                buffer:null,\n                stubBuffer:null}};\n              if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n\n              // Clear out the state of the parser\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else {\n              try {\n                var emitBuffer = data.slice(0, sizeOfMessage);\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Copy rest of message\n                data = data.slice(sizeOfMessage);\n                // Emit the message\n                self.emit(\"message\", emitBuffer, self);\n              } catch (err) {\n                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n                  sizeOfMessage:sizeOfMessage,\n                  bytesRead:self.bytesRead,\n                  stubBuffer:self.stubBuffer}};\n                if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n                // We got a parse Error fire it off then keep going\n                self.emit(\"parseError\", errorObject, self);\n              }\n\n            }\n          } else {\n            // Create a buffer that contains the space for the non-complete message\n            self.stubBuffer = new Buffer(data.length)\n            // Copy the data to the stub buffer\n            data.copy(self.stubBuffer, 0);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        }\n      }\n    }\n  }\n}\n\nvar endHandler = function(self) {\n  return function() {\n    // Set connected to false\n    self.connected = false;\n    // Emit end event\n    self.emit(\"end\", {err: 'connection received Fin packet from [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n  }\n}\n\nvar timeoutHandler = function(self) {\n  return function() {\n    self.emit(\"timeout\", {err: 'connection to [' + self.socketOptions.host + ':' + self.socketOptions.port + '] timed out'}, self);\n  }\n}\n\nvar drainHandler = function(self) {\n  return function() {\n  }\n}\n\nvar errorHandler = function(self) {\n  return function(err) {\n    // Set connected to false\n    self.connected = false;\n    // Emit error\n    self.emit(\"error\", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n  }\n}\n\nvar closeHandler = function(self) {\n  return function(hadError) {\n    // If we have an error during the connection phase\n    if(hadError && !self.connected) {\n      // Set disconnected\n      self.connected = false;\n      // Emit error\n      self.emit(\"error\", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n    } else {\n      // Set disconnected\n      self.connected = false;\n      // Emit close\n      self.emit(\"close\", {err: 'connection closed to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n    }\n  }\n}\n\n// Some basic defaults\nConnection.DEFAULT_PORT = 27017;",
        "blocks": {
          "total": 78,
          "seen": 34,
          "missing": 44,
          "percentage": 0.4358974358974359
        }
      },
      "hash": "5835a20b452fb679dba8529202289ca0"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/connection_utils.js": {
      "stats": {
        "percentage": 0.7391304347826086,
        "lines": [
          {
            "lineno": 4
          },
          {
            "lineno": 5
          },
          {
            "lineno": 12
          },
          {
            "lineno": 13
          },
          {
            "lineno": 20
          },
          {
            "lineno": 21
          }
        ],
        "missing": 6,
        "seen": 17,
        "seen_lines": [
          {
            "s": 1,
            "e": 9
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 9,
            "e": 17
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 17,
            "e": 24
          },
          {
            "s": 18,
            "e": 18
          },
          {
            "s": 19,
            "e": 19
          }
        ],
        "total": 23,
        "coverage": {
          "4": {
            "partial": false,
            "source": "  } else if(typeof object[field] !== \"number\" && object[field] !== parseInt(object[field], 10)) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 32
              },
              {
                "startCol": 49,
                "endCol": 94
              },
              {
                "startCol": 67,
                "endCol": 94
              }
            ]
          },
          "5": {
            "partial": false,
            "source": "    throw \"object field [\" + field + \"] must be a numeric integer value, attempted to set to [\" + object[field] + \"] type of [\" + typeof object[field] + \"]\";",
            "missing": [
              {
                "startCol": 4,
                "endCol": 157
              },
              {
                "startCol": 10,
                "endCol": 34
              },
              {
                "startCol": 29,
                "endCol": 34
              },
              {
                "startCol": 130,
                "endCol": 150
              }
            ]
          },
          "12": {
            "partial": false,
            "source": "  } else if(typeof object[field] !== \"boolean\") {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 32
              }
            ]
          },
          "13": {
            "partial": false,
            "source": "    throw \"object field [\" + field + \"] must be a boolean value, attempted to set to [\" + object[field] + \"] type of [\" + typeof object[field] + \"]\";",
            "missing": [
              {
                "startCol": 4,
                "endCol": 149
              },
              {
                "startCol": 10,
                "endCol": 34
              },
              {
                "startCol": 29,
                "endCol": 34
              },
              {
                "startCol": 122,
                "endCol": 142
              }
            ]
          },
          "20": {
            "partial": false,
            "source": "  } else if(typeof object[field] !== \"string\") {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 32
              }
            ]
          },
          "21": {
            "partial": false,
            "source": "    throw \"object field [\" + field + \"] must be a string value, attempted to set to [\" + object[field] + \"] type of [\" + typeof object[field] + \"]\";",
            "missing": [
              {
                "startCol": 4,
                "endCol": 148
              },
              {
                "startCol": 10,
                "endCol": 34
              },
              {
                "startCol": 29,
                "endCol": 34
              },
              {
                "startCol": 121,
                "endCol": 141
              }
            ]
          }
        },
        "source": "exports.setIntegerParameter = function(object, field, defaultValue) {\n  if(object[field] == null) {\n    object[field] = defaultValue;\n  } else if(typeof object[field] !== \"number\" && object[field] !== parseInt(object[field], 10)) {\n    throw \"object field [\" + field + \"] must be a numeric integer value, attempted to set to [\" + object[field] + \"] type of [\" + typeof object[field] + \"]\";\n  }\n}\n\nexports.setBooleanParameter = function(object, field, defaultValue) {\n  if(object[field] == null) {\n    object[field] = defaultValue;\n  } else if(typeof object[field] !== \"boolean\") {\n    throw \"object field [\" + field + \"] must be a boolean value, attempted to set to [\" + object[field] + \"] type of [\" + typeof object[field] + \"]\";\n  }\n}\n\nexports.setStringParameter = function(object, field, defaultValue) {\n  if(object[field] == null) {\n    object[field] = defaultValue;\n  } else if(typeof object[field] !== \"string\") {\n    throw \"object field [\" + field + \"] must be a string value, attempted to set to [\" + object[field] + \"] type of [\" + typeof object[field] + \"]\";\n  }\n}",
        "blocks": {
          "total": 9,
          "seen": 6,
          "missing": 3,
          "percentage": 0.6666666666666666
        }
      },
      "hash": "68f4657a7ffbb4d3ce8d30505c40ae66"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/server.js": {
      "stats": {
        "percentage": 0.7582547169811321,
        "lines": [
          {
            "lineno": 31
          },
          {
            "lineno": 34
          },
          {
            "lineno": 35
          },
          {
            "lineno": 41
          },
          {
            "lineno": 46
          },
          {
            "lineno": 47
          },
          {
            "lineno": 55
          },
          {
            "lineno": 56
          },
          {
            "lineno": 57
          },
          {
            "lineno": 61
          },
          {
            "lineno": 70
          },
          {
            "lineno": 71
          },
          {
            "lineno": 74
          },
          {
            "lineno": 79
          },
          {
            "lineno": 80
          },
          {
            "lineno": 81
          },
          {
            "lineno": 82
          },
          {
            "lineno": 118
          },
          {
            "lineno": 166
          },
          {
            "lineno": 173
          },
          {
            "lineno": 174
          },
          {
            "lineno": 175
          },
          {
            "lineno": 181
          },
          {
            "lineno": 187
          },
          {
            "lineno": 194
          },
          {
            "lineno": 199
          },
          {
            "lineno": 209
          },
          {
            "lineno": 218
          },
          {
            "lineno": 220
          },
          {
            "lineno": 221
          },
          {
            "lineno": 229
          },
          {
            "lineno": 233
          },
          {
            "lineno": 240
          },
          {
            "lineno": 270
          },
          {
            "lineno": 272
          },
          {
            "lineno": 288
          },
          {
            "lineno": 289
          },
          {
            "lineno": 295
          },
          {
            "lineno": 302
          },
          {
            "lineno": 303
          },
          {
            "lineno": 304
          },
          {
            "lineno": 305
          },
          {
            "lineno": 309
          },
          {
            "lineno": 310
          },
          {
            "lineno": 311
          },
          {
            "lineno": 315
          },
          {
            "lineno": 319
          },
          {
            "lineno": 320
          },
          {
            "lineno": 322
          },
          {
            "lineno": 324
          },
          {
            "lineno": 326
          },
          {
            "lineno": 327
          },
          {
            "lineno": 330
          },
          {
            "lineno": 332
          },
          {
            "lineno": 333
          },
          {
            "lineno": 335
          },
          {
            "lineno": 336
          },
          {
            "lineno": 337
          },
          {
            "lineno": 339
          },
          {
            "lineno": 343
          },
          {
            "lineno": 345
          },
          {
            "lineno": 347
          },
          {
            "lineno": 350
          },
          {
            "lineno": 354
          },
          {
            "lineno": 357
          },
          {
            "lineno": 360
          },
          {
            "lineno": 362
          },
          {
            "lineno": 364
          },
          {
            "lineno": 366
          },
          {
            "lineno": 368
          },
          {
            "lineno": 370
          },
          {
            "lineno": 372
          },
          {
            "lineno": 375
          },
          {
            "lineno": 376
          },
          {
            "lineno": 379
          },
          {
            "lineno": 380
          },
          {
            "lineno": 381
          },
          {
            "lineno": 392
          },
          {
            "lineno": 394
          },
          {
            "lineno": 396
          },
          {
            "lineno": 397
          },
          {
            "lineno": 400
          },
          {
            "lineno": 402
          },
          {
            "lineno": 403
          },
          {
            "lineno": 405
          },
          {
            "lineno": 406
          },
          {
            "lineno": 407
          },
          {
            "lineno": 409
          },
          {
            "lineno": 413
          },
          {
            "lineno": 415
          },
          {
            "lineno": 417
          },
          {
            "lineno": 420
          },
          {
            "lineno": 424
          },
          {
            "lineno": 425
          },
          {
            "lineno": 427
          },
          {
            "lineno": 436
          },
          {
            "lineno": 437
          },
          {
            "lineno": 445
          },
          {
            "lineno": 447
          },
          {
            "lineno": 449
          },
          {
            "lineno": 451
          },
          {
            "lineno": 452
          },
          {
            "lineno": 454
          },
          {
            "lineno": 455
          },
          {
            "lineno": 456
          },
          {
            "lineno": 458
          },
          {
            "lineno": 462
          },
          {
            "lineno": 464
          },
          {
            "lineno": 466
          },
          {
            "lineno": 473
          },
          {
            "lineno": 475
          },
          {
            "lineno": 477
          },
          {
            "lineno": 479
          },
          {
            "lineno": 480
          },
          {
            "lineno": 482
          },
          {
            "lineno": 483
          },
          {
            "lineno": 484
          },
          {
            "lineno": 486
          },
          {
            "lineno": 490
          },
          {
            "lineno": 492
          },
          {
            "lineno": 494
          },
          {
            "lineno": 501
          },
          {
            "lineno": 503
          },
          {
            "lineno": 505
          },
          {
            "lineno": 507
          },
          {
            "lineno": 508
          },
          {
            "lineno": 510
          },
          {
            "lineno": 511
          },
          {
            "lineno": 512
          },
          {
            "lineno": 514
          },
          {
            "lineno": 518
          },
          {
            "lineno": 520
          },
          {
            "lineno": 522
          },
          {
            "lineno": 530
          },
          {
            "lineno": 532
          },
          {
            "lineno": 534
          },
          {
            "lineno": 536
          },
          {
            "lineno": 537
          },
          {
            "lineno": 539
          },
          {
            "lineno": 540
          },
          {
            "lineno": 541
          },
          {
            "lineno": 543
          },
          {
            "lineno": 547
          },
          {
            "lineno": 549
          },
          {
            "lineno": 551
          },
          {
            "lineno": 565
          },
          {
            "lineno": 567
          },
          {
            "lineno": 569
          },
          {
            "lineno": 571
          },
          {
            "lineno": 572
          },
          {
            "lineno": 574
          },
          {
            "lineno": 575
          },
          {
            "lineno": 577
          },
          {
            "lineno": 578
          },
          {
            "lineno": 579
          },
          {
            "lineno": 583
          },
          {
            "lineno": 586
          },
          {
            "lineno": 587
          },
          {
            "lineno": 590
          },
          {
            "lineno": 591
          },
          {
            "lineno": 611
          },
          {
            "lineno": 612
          },
          {
            "lineno": 614
          },
          {
            "lineno": 617
          },
          {
            "lineno": 627
          },
          {
            "lineno": 637
          },
          {
            "lineno": 639
          },
          {
            "lineno": 640
          },
          {
            "lineno": 641
          },
          {
            "lineno": 658
          },
          {
            "lineno": 659
          },
          {
            "lineno": 661
          },
          {
            "lineno": 672
          },
          {
            "lineno": 675
          },
          {
            "lineno": 676
          },
          {
            "lineno": 677
          },
          {
            "lineno": 678
          },
          {
            "lineno": 695
          },
          {
            "lineno": 696
          },
          {
            "lineno": 698
          },
          {
            "lineno": 706
          },
          {
            "lineno": 724
          },
          {
            "lineno": 728
          },
          {
            "lineno": 732
          },
          {
            "lineno": 736
          },
          {
            "lineno": 741
          },
          {
            "lineno": 742
          },
          {
            "lineno": 743
          },
          {
            "lineno": 753
          },
          {
            "lineno": 755
          },
          {
            "lineno": 756
          },
          {
            "lineno": 757
          },
          {
            "lineno": 759
          },
          {
            "lineno": 760
          },
          {
            "lineno": 763
          },
          {
            "lineno": 764
          },
          {
            "lineno": 773
          },
          {
            "lineno": 782
          },
          {
            "lineno": 785
          },
          {
            "lineno": 794
          },
          {
            "lineno": 806
          },
          {
            "lineno": 816
          },
          {
            "lineno": 825
          },
          {
            "lineno": 836
          },
          {
            "lineno": 840
          }
        ],
        "missing": 205,
        "seen": 643,
        "seen_lines": [
          {
            "s": 1,
            "e": 7
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 29,
            "e": 29
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 31,
            "e": 31
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 38,
            "e": 38
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 40,
            "e": 40
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 42,
            "e": 42
          },
          {
            "s": 43,
            "e": 43
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 45,
            "e": 45
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 47,
            "e": 47
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 49,
            "e": 49
          },
          {
            "s": 52,
            "e": 52
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 70,
            "e": 70
          },
          {
            "s": 78,
            "e": 82
          },
          {
            "s": 82,
            "e": 82
          },
          {
            "s": 78,
            "e": 81
          },
          {
            "s": 78,
            "e": 80
          },
          {
            "s": 78,
            "e": 79
          },
          {
            "s": 78,
            "e": 78
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 87,
            "e": 87
          },
          {
            "s": 90,
            "e": 90
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 99,
            "e": 99
          },
          {
            "s": 99,
            "e": 99
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 105,
            "e": 105
          },
          {
            "s": 106,
            "e": 106
          },
          {
            "s": 112,
            "e": 117
          },
          {
            "s": 117,
            "e": 124
          },
          {
            "s": 118,
            "e": 118
          },
          {
            "s": 118,
            "e": 118
          },
          {
            "s": 118,
            "e": 118
          },
          {
            "s": 118,
            "e": 118
          },
          {
            "s": 118,
            "e": 118
          },
          {
            "s": 124,
            "e": 131
          },
          {
            "s": 125,
            "e": 125
          },
          {
            "s": 131,
            "e": 146
          },
          {
            "s": 133,
            "e": 133
          },
          {
            "s": 133,
            "e": 133
          },
          {
            "s": 135,
            "e": 135
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 137,
            "e": 137
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 139,
            "e": 139
          },
          {
            "s": 143,
            "e": 143
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 151,
            "e": 158
          },
          {
            "s": 152,
            "e": 152
          },
          {
            "s": 152,
            "e": 152
          },
          {
            "s": 158,
            "e": 165
          },
          {
            "s": 159,
            "e": 159
          },
          {
            "s": 165,
            "e": 172
          },
          {
            "s": 172,
            "e": 563
          },
          {
            "s": 173,
            "e": 173
          },
          {
            "s": 173,
            "e": 173
          },
          {
            "s": 173,
            "e": 173
          },
          {
            "s": 174,
            "e": 174
          },
          {
            "s": 174,
            "e": 174
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 179,
            "e": 179
          },
          {
            "s": 185,
            "e": 185
          },
          {
            "s": 187,
            "e": 187
          },
          {
            "s": 187,
            "e": 187
          },
          {
            "s": 187,
            "e": 187
          },
          {
            "s": 189,
            "e": 189
          },
          {
            "s": 191,
            "e": 191
          },
          {
            "s": 197,
            "e": 197
          },
          {
            "s": 199,
            "e": 199
          },
          {
            "s": 199,
            "e": 199
          },
          {
            "s": 201,
            "e": 201
          },
          {
            "s": 203,
            "e": 203
          },
          {
            "s": 206,
            "e": 206
          },
          {
            "s": 209,
            "e": 209
          },
          {
            "s": 209,
            "e": 209
          },
          {
            "s": 209,
            "e": 209
          },
          {
            "s": 212,
            "e": 237
          },
          {
            "s": 214,
            "e": 214
          },
          {
            "s": 215,
            "e": 215
          },
          {
            "s": 218,
            "e": 218
          },
          {
            "s": 218,
            "e": 218
          },
          {
            "s": 218,
            "e": 218
          },
          {
            "s": 220,
            "e": 220
          },
          {
            "s": 220,
            "e": 220
          },
          {
            "s": 221,
            "e": 221
          },
          {
            "s": 221,
            "e": 221
          },
          {
            "s": 221,
            "e": 221
          },
          {
            "s": 222,
            "e": 222
          },
          {
            "s": 222,
            "e": 222
          },
          {
            "s": 224,
            "e": 224
          },
          {
            "s": 226,
            "e": 226
          },
          {
            "s": 229,
            "e": 229
          },
          {
            "s": 229,
            "e": 229
          },
          {
            "s": 229,
            "e": 229
          },
          {
            "s": 229,
            "e": 229
          },
          {
            "s": 232,
            "e": 232
          },
          {
            "s": 235,
            "e": 235
          },
          {
            "s": 235,
            "e": 235
          },
          {
            "s": 240,
            "e": 240
          },
          {
            "s": 240,
            "e": 240
          },
          {
            "s": 240,
            "e": 240
          },
          {
            "s": 243,
            "e": 259
          },
          {
            "s": 243,
            "e": 256
          },
          {
            "s": 245,
            "e": 245
          },
          {
            "s": 245,
            "e": 245
          },
          {
            "s": 247,
            "e": 247
          },
          {
            "s": 247,
            "e": 247
          },
          {
            "s": 249,
            "e": 249
          },
          {
            "s": 252,
            "e": 252
          },
          {
            "s": 252,
            "e": 252
          },
          {
            "s": 255,
            "e": 255
          },
          {
            "s": 255,
            "e": 255
          },
          {
            "s": 259,
            "e": 440
          },
          {
            "s": 259,
            "e": 440
          },
          {
            "s": 263,
            "e": 265
          },
          {
            "s": 265,
            "e": 268
          },
          {
            "s": 265,
            "e": 265
          },
          {
            "s": 268,
            "e": 268
          },
          {
            "s": 274,
            "e": 274
          },
          {
            "s": 274,
            "e": 274
          },
          {
            "s": 277,
            "e": 277
          },
          {
            "s": 278,
            "e": 278
          },
          {
            "s": 281,
            "e": 281
          },
          {
            "s": 281,
            "e": 281
          },
          {
            "s": 281,
            "e": 281
          },
          {
            "s": 282,
            "e": 282
          },
          {
            "s": 283,
            "e": 283
          },
          {
            "s": 283,
            "e": 283
          },
          {
            "s": 283,
            "e": 283
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 285,
            "e": 285
          },
          {
            "s": 286,
            "e": 286
          },
          {
            "s": 286,
            "e": 286
          },
          {
            "s": 286,
            "e": 286
          },
          {
            "s": 287,
            "e": 287
          },
          {
            "s": 294,
            "e": 294
          },
          {
            "s": 294,
            "e": 294
          },
          {
            "s": 294,
            "e": 294
          },
          {
            "s": 294,
            "e": 294
          },
          {
            "s": 294,
            "e": 294
          },
          {
            "s": 294,
            "e": 294
          },
          {
            "s": 300,
            "e": 300
          },
          {
            "s": 300,
            "e": 300
          },
          {
            "s": 300,
            "e": 300
          },
          {
            "s": 300,
            "e": 300
          },
          {
            "s": 300,
            "e": 300
          },
          {
            "s": 387,
            "e": 387
          },
          {
            "s": 387,
            "e": 387
          },
          {
            "s": 387,
            "e": 387
          },
          {
            "s": 389,
            "e": 431
          },
          {
            "s": 389,
            "e": 431
          },
          {
            "s": 390,
            "e": 390
          },
          {
            "s": 390,
            "e": 390
          },
          {
            "s": 424,
            "e": 425
          },
          {
            "s": 424,
            "e": 424
          },
          {
            "s": 424,
            "e": 424
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 443,
            "e": 468
          },
          {
            "s": 443,
            "e": 468
          },
          {
            "s": 471,
            "e": 496
          },
          {
            "s": 471,
            "e": 496
          },
          {
            "s": 499,
            "e": 524
          },
          {
            "s": 499,
            "e": 524
          },
          {
            "s": 528,
            "e": 553
          },
          {
            "s": 528,
            "e": 553
          },
          {
            "s": 556,
            "e": 556
          },
          {
            "s": 556,
            "e": 556
          },
          {
            "s": 563,
            "e": 601
          },
          {
            "s": 601,
            "e": 626
          },
          {
            "s": 603,
            "e": 603
          },
          {
            "s": 603,
            "e": 603
          },
          {
            "s": 605,
            "e": 605
          },
          {
            "s": 607,
            "e": 607
          },
          {
            "s": 607,
            "e": 607
          },
          {
            "s": 607,
            "e": 607
          },
          {
            "s": 608,
            "e": 608
          },
          {
            "s": 608,
            "e": 608
          },
          {
            "s": 608,
            "e": 608
          },
          {
            "s": 609,
            "e": 609
          },
          {
            "s": 611,
            "e": 611
          },
          {
            "s": 611,
            "e": 611
          },
          {
            "s": 614,
            "e": 614
          },
          {
            "s": 614,
            "e": 614
          },
          {
            "s": 614,
            "e": 614
          },
          {
            "s": 614,
            "e": 614
          },
          {
            "s": 614,
            "e": 614
          },
          {
            "s": 616,
            "e": 616
          },
          {
            "s": 616,
            "e": 616
          },
          {
            "s": 626,
            "e": 634
          },
          {
            "s": 634,
            "e": 651
          },
          {
            "s": 636,
            "e": 636
          },
          {
            "s": 638,
            "e": 638
          },
          {
            "s": 640,
            "e": 640
          },
          {
            "s": 640,
            "e": 640
          },
          {
            "s": 640,
            "e": 640
          },
          {
            "s": 640,
            "e": 640
          },
          {
            "s": 645,
            "e": 645
          },
          {
            "s": 651,
            "e": 669
          },
          {
            "s": 652,
            "e": 652
          },
          {
            "s": 652,
            "e": 652
          },
          {
            "s": 652,
            "e": 652
          },
          {
            "s": 652,
            "e": 652
          },
          {
            "s": 654,
            "e": 654
          },
          {
            "s": 654,
            "e": 654
          },
          {
            "s": 656,
            "e": 656
          },
          {
            "s": 656,
            "e": 656
          },
          {
            "s": 656,
            "e": 656
          },
          {
            "s": 656,
            "e": 656
          },
          {
            "s": 657,
            "e": 657
          },
          {
            "s": 657,
            "e": 657
          },
          {
            "s": 669,
            "e": 689
          },
          {
            "s": 671,
            "e": 671
          },
          {
            "s": 671,
            "e": 671
          },
          {
            "s": 673,
            "e": 673
          },
          {
            "s": 683,
            "e": 683
          },
          {
            "s": 689,
            "e": 705
          },
          {
            "s": 691,
            "e": 691
          },
          {
            "s": 691,
            "e": 691
          },
          {
            "s": 693,
            "e": 693
          },
          {
            "s": 693,
            "e": 693
          },
          {
            "s": 693,
            "e": 693
          },
          {
            "s": 693,
            "e": 693
          },
          {
            "s": 694,
            "e": 694
          },
          {
            "s": 694,
            "e": 694
          },
          {
            "s": 705,
            "e": 714
          },
          {
            "s": 714,
            "e": 751
          },
          {
            "s": 715,
            "e": 715
          },
          {
            "s": 716,
            "e": 716
          },
          {
            "s": 717,
            "e": 717
          },
          {
            "s": 718,
            "e": 718
          },
          {
            "s": 719,
            "e": 719
          },
          {
            "s": 720,
            "e": 720
          },
          {
            "s": 723,
            "e": 725
          },
          {
            "s": 723,
            "e": 725
          },
          {
            "s": 727,
            "e": 729
          },
          {
            "s": 727,
            "e": 729
          },
          {
            "s": 731,
            "e": 733
          },
          {
            "s": 731,
            "e": 733
          },
          {
            "s": 735,
            "e": 737
          },
          {
            "s": 735,
            "e": 737
          },
          {
            "s": 739,
            "e": 745
          },
          {
            "s": 739,
            "e": 745
          },
          {
            "s": 751,
            "e": 771
          },
          {
            "s": 771,
            "e": 775
          },
          {
            "s": 771,
            "e": 775
          },
          {
            "s": 780,
            "e": 787
          },
          {
            "s": 780,
            "e": 787
          },
          {
            "s": 792,
            "e": 799
          },
          {
            "s": 792,
            "e": 799
          },
          {
            "s": 797,
            "e": 797
          },
          {
            "s": 804,
            "e": 808
          },
          {
            "s": 804,
            "e": 808
          },
          {
            "s": 814,
            "e": 818
          },
          {
            "s": 814,
            "e": 818
          },
          {
            "s": 823,
            "e": 827
          },
          {
            "s": 823,
            "e": 827
          },
          {
            "s": 833,
            "e": 843
          },
          {
            "s": 833,
            "e": 843
          },
          {
            "s": 835,
            "e": 835
          },
          {
            "s": 835,
            "e": 835
          },
          {
            "s": 837,
            "e": 837
          },
          {
            "s": 837,
            "e": 837
          },
          {
            "s": 837,
            "e": 837
          },
          {
            "s": 838,
            "e": 838
          },
          {
            "s": 848,
            "e": 848
          }
        ],
        "total": 848,
        "coverage": {
          "31": {
            "partial": true,
            "source": "  if(!(this instanceof Server)) return new Server(host, port, options);",
            "missing": [
              {
                "startCol": 32,
                "endCol": 71
              }
            ]
          },
          "34": {
            "partial": false,
            "source": "    options = port;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 19
              }
            ]
          },
          "35": {
            "partial": false,
            "source": "    port = Connection.DEFAULT_PORT;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "41": {
            "partial": true,
            "source": "  this.options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 35,
                "endCol": 37
              }
            ]
          },
          "46": {
            "partial": true,
            "source": "  this.disableDriverBSONSizeCheck = this.options.disableDriverBSONSizeCheck != null ? this.options.disableDriverBSONSizeCheck : false;",
            "missing": [
              {
                "startCol": 86,
                "endCol": 125
              }
            ]
          },
          "47": {
            "partial": true,
            "source": "  this.ssl = this.options.ssl == null ? false : this.options.ssl;",
            "missing": [
              {
                "startCol": 40,
                "endCol": 45
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "    if(readPreference != ReadPreference.PRIMARY && readPreference != ReadPreference.SECONDARY && readPreference != ReadPreference.NEAREST",
            "missing": [
              {
                "startCol": 7,
                "endCol": 137
              },
              {
                "startCol": 51,
                "endCol": 93
              },
              {
                "startCol": 97,
                "endCol": 137
              },
              {}
            ]
          },
          "56": {
            "partial": false,
            "source": "      && readPreference != ReadPreference.SECONDARY_PREFERRED && readPreference != ReadPreference.PRIMARY_PREFERRED) {",
            "missing": [
              {
                "startCol": 65,
                "endCol": 79
              },
              {},
              {
                "startCol": 9,
                "endCol": 61
              }
            ]
          },
          "57": {
            "partial": false,
            "source": "        throw new Error(\"Illegal readPreference mode specified, \" + readPreference);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 84
              },
              {
                "startCol": 24,
                "endCol": 82
              },
              {
                "startCol": 68,
                "endCol": 82
              }
            ]
          },
          "61": {
            "partial": false,
            "source": "    this._readPreference = readPreference;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "70": {
            "partial": true,
            "source": "  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};",
            "missing": [
              {
                "startCol": 60,
                "endCol": 86
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "  if(this.disableDriverBSONSizeCheck) this.socketOptions.disableDriverBSONSizeCheck = this.disableDriverBSONSizeCheck;",
            "missing": [
              {
                "startCol": 38,
                "endCol": 118
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "    this.socketOptions.ssl = true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "    && (typeof this.options.logger.debug == 'function')",
            "missing": [
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 8,
                "endCol": 40
              }
            ]
          },
          "80": {
            "partial": false,
            "source": "    && (typeof this.options.logger.error == 'function')",
            "missing": [
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 8,
                "endCol": 40
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "    && (typeof this.options.logger.log == 'function')",
            "missing": [
              {
                "startCol": 7,
                "endCol": 53
              },
              {
                "startCol": 8,
                "endCol": 38
              }
            ]
          },
          "82": {
            "partial": true,
            "source": "      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};",
            "missing": [
              {
                "startCol": 8,
                "endCol": 27
              }
            ]
          },
          "118": {
            "partial": true,
            "source": "  return this.isMasterDoc != null && this.isMasterDoc['msg'] == \"isdbgrid\" ? true : false;",
            "missing": [
              {
                "startCol": 77,
                "endCol": 81
              }
            ]
          },
          "166": {
            "partial": false,
            "source": "  return this['replicasetInstance'] != null || this['mongosInstance'] != null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 78
              },
              {
                "startCol": 9,
                "endCol": 43
              },
              {
                "startCol": 47,
                "endCol": 77
              }
            ]
          },
          "173": {
            "partial": true,
            "source": "  if('function' === typeof options) callback = options, options = {};",
            "missing": [
              {
                "startCol": 36,
                "endCol": 69
              }
            ]
          },
          "174": {
            "partial": true,
            "source": "  if(options == null) options = {};",
            "missing": [
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "175": {
            "partial": true,
            "source": "  if(!('function' === typeof callback)) callback = null;",
            "missing": [
              {
                "startCol": 40,
                "endCol": 56
              }
            ]
          },
          "181": {
            "partial": false,
            "source": "    this.socketOptions.ssl = true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "187": {
            "partial": true,
            "source": "  var eventReceiver = options.eventReceiver != null ? options.eventReceiver : this;",
            "missing": [
              {
                "startCol": 54,
                "endCol": 75
              }
            ]
          },
          "194": {
            "partial": false,
            "source": "  if(server.connectionPool) server.connectionPool.stop();",
            "missing": [
              {
                "startCol": 28,
                "endCol": 56
              }
            ]
          },
          "199": {
            "partial": true,
            "source": "  dbInstance.slaveOk = this.slaveOk ? this.slaveOk : dbInstance.slaveOk;",
            "missing": [
              {
                "startCol": 38,
                "endCol": 50
              }
            ]
          },
          "209": {
            "partial": true,
            "source": "  var returnIsMasterResults = options.returnIsMasterResults == null ? false : options.returnIsMasterResults;",
            "missing": [
              {
                "startCol": 78,
                "endCol": 107
              }
            ]
          },
          "218": {
            "partial": true,
            "source": "    if(err != null && internalCallback == null) return;",
            "missing": [
              {
                "startCol": 22,
                "endCol": 38
              },
              {
                "startCol": 48,
                "endCol": 55
              }
            ]
          },
          "220": {
            "partial": true,
            "source": "    if(err != null) return internalCallback(err, null);",
            "missing": [
              {
                "startCol": 20,
                "endCol": 55
              },
              {
                "startCol": 27,
                "endCol": 54
              }
            ]
          },
          "221": {
            "partial": true,
            "source": "    server.master = reply.documents[0].ismaster == 1 ? true : false;",
            "missing": [
              {
                "startCol": 62,
                "endCol": 67
              }
            ]
          },
          "229": {
            "partial": true,
            "source": "    _emitAcrossAllDbInstances(server, eventReceiver, \"open\", null, returnIsMasterResults ? reply : dbInstance, null);",
            "missing": [
              {
                "startCol": 91,
                "endCol": 96
              }
            ]
          },
          "233": {
            "partial": false,
            "source": "      internalCallback(null, reply, server);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 43
              }
            ]
          },
          "240": {
            "partial": true,
            "source": "  var connectHandler = options.connectHandler == null ? connectCallback : options.connectHandler;",
            "missing": [
              {
                "startCol": 74,
                "endCol": 96
              }
            ]
          },
          "270": {
            "partial": false,
            "source": "        if(eventReceiver.listeners(\"error\") && eventReceiver.listeners(\"error\").length > 0) eventReceiver.emit(\"error\", new Error(\"bson length is different from message length\"), server);",
            "missing": [
              {
                "startCol": 11,
                "endCol": 43
              },
              {
                "startCol": 47,
                "endCol": 90
              },
              {
                "startCol": 70,
                "endCol": 79
              },
              {
                "startCol": 92,
                "endCol": 186
              }
            ]
          },
          "272": {
            "partial": false,
            "source": "        server.removeAllListeners();",
            "missing": [
              {
                "startCol": 8,
                "endCol": 35
              }
            ]
          },
          "288": {
            "partial": false,
            "source": "          } else if(hasHandler) {",
            "missing": [
              {
                "startCol": 20,
                "endCol": 30
              }
            ]
          },
          "289": {
            "partial": false,
            "source": "            dbInstanceObjectTemp._removeHandler(mongoReply.responseTo.toString());",
            "missing": [
              {
                "startCol": 12,
                "endCol": 81
              },
              {
                "startCol": 48,
                "endCol": 80
              }
            ]
          },
          "295": {
            "partial": false,
            "source": "          dbInstance._reRegisterHandler(mongoReply.requestId, callbackInfo);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 75
              }
            ]
          },
          "302": {
            "partial": false,
            "source": "          var chained = callbackInfo.info.chained;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 50
              }
            ]
          },
          "303": {
            "partial": false,
            "source": "          var numberOfFoundCallbacks = 0;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 41
              }
            ]
          },
          "304": {
            "partial": false,
            "source": "          for(var i = 0; i < chained.length; i++) {",
            "missing": [
              {
                "startCol": 25,
                "endCol": 26
              },
              {
                "startCol": 45,
                "endCol": 48
              }
            ]
          },
          "305": {
            "partial": false,
            "source": "            if(dbInstanceObject._hasHandler(chained[i])) numberOfFoundCallbacks++;",
            "missing": [
              {
                "startCol": 15,
                "endCol": 55
              },
              {
                "startCol": 57,
                "endCol": 81
              }
            ]
          },
          "309": {
            "partial": false,
            "source": "          if(numberOfFoundCallbacks != chained.length) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 35
              }
            ]
          },
          "310": {
            "partial": false,
            "source": "            for(var i = 0; i < chained.length; i++) {",
            "missing": [
              {
                "startCol": 27,
                "endCol": 28
              },
              {
                "startCol": 47,
                "endCol": 50
              }
            ]
          },
          "311": {
            "partial": false,
            "source": "              dbInstanceObject._removeHandler(chained[i]);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 57
              }
            ]
          },
          "315": {
            "partial": false,
            "source": "            return;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 19
              }
            ]
          },
          "319": {
            "partial": false,
            "source": "          mongoReply.parseBody(message, connectionPool.bson, callbackInfo.info.raw, function(err) {",
            "missing": [
              {}
            ]
          },
          "320": {
            "partial": false,
            "source": "            if(err != null) {",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 18
              }
            ]
          },
          "321": {
            "partial": false,
            "source": "              // If pool connection is already closed",
            "missing": [
              {}
            ]
          },
          "322": {
            "partial": false,
            "source": "              if(server._serverState === 'disconnected') return;",
            "missing": [
              {
                "startCol": 17,
                "endCol": 55
              },
              {},
              {
                "startCol": 57,
                "endCol": 64
              }
            ]
          },
          "323": {
            "partial": false,
            "source": "              // Set server state to disconnected",
            "missing": [
              {}
            ]
          },
          "324": {
            "partial": false,
            "source": "              server._serverState = 'disconnected';",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 51
              }
            ]
          },
          "325": {
            "partial": false,
            "source": "              // Remove all listeners and close the connection pool",
            "missing": [
              {}
            ]
          },
          "326": {
            "partial": false,
            "source": "              server.removeAllListeners();",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 41
              }
            ]
          },
          "327": {
            "partial": false,
            "source": "              connectionPool.stop(true);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 39
              }
            ]
          },
          "328": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "329": {
            "partial": false,
            "source": "              // If we have a callback return the error",
            "missing": [
              {}
            ]
          },
          "330": {
            "partial": false,
            "source": "              if(typeof callback === 'function') {",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 32
              },
              {
                "startCol": 24,
                "endCol": 32
              }
            ]
          },
          "331": {
            "partial": false,
            "source": "                // ensure no callbacks get called twice",
            "missing": [
              {}
            ]
          },
          "332": {
            "partial": false,
            "source": "                var internalCallback = callback;",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 48
              }
            ]
          },
          "333": {
            "partial": false,
            "source": "                callback = null;",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 32
              }
            ]
          },
          "334": {
            "partial": false,
            "source": "                // Perform callback",
            "missing": [
              {}
            ]
          },
          "335": {
            "partial": false,
            "source": "                internalCallback(new Error(\"connection closed due to parseError\"), null, server);",
            "missing": [
              {
                "startCol": 16,
                "endCol": 96
              },
              {}
            ]
          },
          "336": {
            "partial": false,
            "source": "              } else if(server.isSetMember()) {",
            "missing": [
              {},
              {
                "startCol": 24,
                "endCol": 44
              }
            ]
          },
          "337": {
            "partial": false,
            "source": "                if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 49
              },
              {},
              {
                "startCol": 53,
                "endCol": 94
              },
              {
                "startCol": 69,
                "endCol": 83
              },
              {
                "startCol": 96,
                "endCol": 179
              }
            ]
          },
          "338": {
            "partial": false,
            "source": "              } else {",
            "missing": [
              {}
            ]
          },
          "339": {
            "partial": false,
            "source": "                if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 56
              },
              {
                "startCol": 60,
                "endCol": 108
              },
              {
                "startCol": 83,
                "endCol": 97
              },
              {},
              {
                "startCol": 110,
                "endCol": 200
              }
            ]
          },
          "340": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "341": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "342": {
            "partial": false,
            "source": "              // If we are a single server connection fire errors correctly",
            "missing": [
              {}
            ]
          },
          "343": {
            "partial": false,
            "source": "              if(!server.isSetMember()) {",
            "missing": [
              {},
              {
                "startCol": 18,
                "endCol": 38
              },
              {
                "startCol": 17,
                "endCol": 38
              }
            ]
          },
          "344": {
            "partial": false,
            "source": "                // Fire all callback errors",
            "missing": [
              {}
            ]
          },
          "345": {
            "partial": false,
            "source": "                _fireCallbackErrors(server, new Error(\"connection closed due to parseError\"));",
            "missing": [
              {
                "startCol": 16,
                "endCol": 93
              },
              {}
            ]
          },
          "346": {
            "partial": false,
            "source": "                // Emit error",
            "missing": [
              {}
            ]
          },
          "347": {
            "partial": false,
            "source": "                _emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);",
            "missing": [
              {
                "startCol": 16,
                "endCol": 99
              },
              {}
            ]
          },
          "348": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "349": {
            "partial": false,
            "source": "              // Short cut",
            "missing": [
              {}
            ]
          },
          "350": {
            "partial": false,
            "source": "              return;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 21
              },
              {}
            ]
          },
          "351": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "352": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "353": {
            "partial": false,
            "source": "            // Fetch the callback",
            "missing": [
              {}
            ]
          },
          "354": {
            "partial": false,
            "source": "            var callbackInfo = dbInstanceObject._findHandler(mongoReply.responseTo.toString());",
            "missing": [
              {
                "startCol": 12,
                "endCol": 95
              },
              {},
              {
                "startCol": 31,
                "endCol": 94
              },
              {
                "startCol": 61,
                "endCol": 93
              }
            ]
          },
          "355": {
            "partial": false,
            "source": "            // If we have an error let's execute the callback and clean up all other",
            "missing": [
              {}
            ]
          },
          "356": {
            "partial": false,
            "source": "            // chained commands",
            "missing": [
              {}
            ]
          },
          "357": {
            "partial": false,
            "source": "            var firstResult = mongoReply && mongoReply.documents;",
            "missing": [
              {
                "startCol": 30,
                "endCol": 64
              },
              {},
              {
                "startCol": 12,
                "endCol": 65
              }
            ]
          },
          "358": {
            "partial": false,
            "source": "            // Check for an error, if we have one let's trigger the callback and clean up",
            "missing": [
              {}
            ]
          },
          "359": {
            "partial": false,
            "source": "            // The chained callbacks",
            "missing": [
              {}
            ]
          },
          "360": {
            "partial": false,
            "source": "            if(firstResult[0].err != null || firstResult[0].errmsg != null) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 41
              },
              {
                "startCol": 45,
                "endCol": 74
              },
              {}
            ]
          },
          "361": {
            "partial": false,
            "source": "              // Trigger the callback for the error",
            "missing": [
              {}
            ]
          },
          "362": {
            "partial": false,
            "source": "              dbInstanceObject._callHandler(mongoReply.responseTo, mongoReply, null);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 85
              },
              {}
            ]
          },
          "363": {
            "partial": false,
            "source": "            } else {",
            "missing": [
              {}
            ]
          },
          "364": {
            "partial": false,
            "source": "              var chainedIds = callbackInfo.info.chained;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 57
              }
            ]
          },
          "365": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "366": {
            "partial": false,
            "source": "              if(chainedIds.length > 0 && chainedIds[chainedIds.length - 1] == mongoReply.responseTo) {",
            "missing": [
              {
                "startCol": 42,
                "endCol": 100
              },
              {},
              {
                "startCol": 17,
                "endCol": 38
              },
              {
                "startCol": 53,
                "endCol": 74
              }
            ]
          },
          "367": {
            "partial": false,
            "source": "                // Cleanup all other chained calls",
            "missing": [
              {}
            ]
          },
          "368": {
            "partial": false,
            "source": "                chainedIds.pop();",
            "missing": [
              {
                "startCol": 16,
                "endCol": 32
              },
              {}
            ]
          },
          "369": {
            "partial": false,
            "source": "                // Remove listeners",
            "missing": [
              {}
            ]
          },
          "370": {
            "partial": false,
            "source": "                for(var i = 0; i < chainedIds.length; i++) dbInstanceObject._removeHandler(chainedIds[i]);",
            "missing": [
              {},
              {
                "startCol": 31,
                "endCol": 32
              },
              {
                "startCol": 54,
                "endCol": 57
              },
              {
                "startCol": 59,
                "endCol": 105
              }
            ]
          },
          "371": {
            "partial": false,
            "source": "                // Call the handler",
            "missing": [
              {}
            ]
          },
          "372": {
            "partial": false,
            "source": "                dbInstanceObject._callHandler(mongoReply.responseTo, callbackInfo.info.results.shift(), null);",
            "missing": [
              {
                "startCol": 16,
                "endCol": 109
              },
              {},
              {
                "startCol": 69,
                "endCol": 102
              }
            ]
          },
          "373": {
            "partial": false,
            "source": "              } else{",
            "missing": [
              {}
            ]
          },
          "374": {
            "partial": false,
            "source": "                // Add the results to all the results",
            "missing": [
              {}
            ]
          },
          "375": {
            "partial": false,
            "source": "                for(var i = 0; i < chainedIds.length; i++) {",
            "missing": [
              {
                "startCol": 31,
                "endCol": 32
              },
              {},
              {
                "startCol": 54,
                "endCol": 57
              }
            ]
          },
          "376": {
            "partial": false,
            "source": "                  var handler = dbInstanceObject._findHandler(chainedIds[i]);",
            "missing": [
              {
                "startCol": 18,
                "endCol": 77
              },
              {},
              {
                "startCol": 32,
                "endCol": 76
              }
            ]
          },
          "377": {
            "partial": false,
            "source": "                  // Check if we have an object, if it's the case take the current object commands and",
            "missing": [
              {}
            ]
          },
          "378": {
            "partial": false,
            "source": "                  // and add this one",
            "missing": [
              {}
            ]
          },
          "379": {
            "partial": false,
            "source": "                  if(handler.info != null) {",
            "missing": [
              {},
              {
                "startCol": 21,
                "endCol": 41
              }
            ]
          },
          "380": {
            "partial": false,
            "source": "                    handler.info.results = Array.isArray(callbackInfo.info.results) ? callbackInfo.info.results : [];",
            "missing": [
              {
                "startCol": 20,
                "endCol": 117
              },
              {},
              {
                "startCol": 86,
                "endCol": 111
              },
              {
                "startCol": 43,
                "endCol": 83
              },
              {
                "startCol": 114,
                "endCol": 116
              }
            ]
          },
          "381": {
            "partial": false,
            "source": "                    handler.info.results.push(mongoReply);",
            "missing": [
              {},
              {
                "startCol": 20,
                "endCol": 57
              }
            ]
          },
          "382": {
            "partial": false,
            "source": "                  }",
            "missing": [
              {}
            ]
          },
          "383": {
            "partial": false,
            "source": "                }",
            "missing": [
              {}
            ]
          },
          "384": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "385": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "386": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "392": {
            "partial": false,
            "source": "              if(server._serverState === 'disconnected') return;",
            "missing": [
              {
                "startCol": 17,
                "endCol": 55
              },
              {
                "startCol": 57,
                "endCol": 64
              }
            ]
          },
          "394": {
            "partial": false,
            "source": "              server._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 14,
                "endCol": 51
              }
            ]
          },
          "396": {
            "partial": false,
            "source": "              server.removeAllListeners();",
            "missing": [
              {
                "startCol": 14,
                "endCol": 41
              }
            ]
          },
          "397": {
            "partial": false,
            "source": "              connectionPool.stop(true);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 39
              }
            ]
          },
          "400": {
            "partial": false,
            "source": "              if(typeof callback === 'function') {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 32
              },
              {
                "startCol": 24,
                "endCol": 32
              }
            ]
          },
          "402": {
            "partial": false,
            "source": "                var internalCallback = callback;",
            "missing": [
              {
                "startCol": 16,
                "endCol": 48
              }
            ]
          },
          "403": {
            "partial": false,
            "source": "                callback = null;",
            "missing": [
              {
                "startCol": 16,
                "endCol": 32
              }
            ]
          },
          "405": {
            "partial": false,
            "source": "                internalCallback(new Error(\"connection closed due to parseError\"), null, server);",
            "missing": [
              {
                "startCol": 16,
                "endCol": 96
              }
            ]
          },
          "406": {
            "partial": false,
            "source": "              } else if(server.isSetMember()) {",
            "missing": [
              {
                "startCol": 24,
                "endCol": 44
              }
            ]
          },
          "407": {
            "partial": false,
            "source": "                if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 49
              },
              {
                "startCol": 53,
                "endCol": 94
              },
              {
                "startCol": 69,
                "endCol": 83
              },
              {
                "startCol": 96,
                "endCol": 179
              }
            ]
          },
          "409": {
            "partial": false,
            "source": "                if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 56
              },
              {
                "startCol": 60,
                "endCol": 108
              },
              {
                "startCol": 83,
                "endCol": 97
              },
              {
                "startCol": 110,
                "endCol": 200
              }
            ]
          },
          "413": {
            "partial": false,
            "source": "              if(!server.isSetMember()) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 38
              },
              {
                "startCol": 18,
                "endCol": 38
              }
            ]
          },
          "415": {
            "partial": false,
            "source": "                _fireCallbackErrors(server, new Error(\"connection closed due to parseError\"));",
            "missing": [
              {
                "startCol": 16,
                "endCol": 93
              }
            ]
          },
          "417": {
            "partial": false,
            "source": "                _emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);",
            "missing": [
              {
                "startCol": 16,
                "endCol": 98
              }
            ]
          },
          "420": {
            "partial": false,
            "source": "              return;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 21
              }
            ]
          },
          "424": {
            "partial": true,
            "source": "            if(server.recordQueryStats == true && server._state['runtimeStats'] != null",
            "missing": [
              {
                "startCol": 50,
                "endCol": 87
              }
            ]
          },
          "425": {
            "partial": false,
            "source": "              && server._state.runtimeStats['queryStats'] instanceof RunningStats) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 81
              },
              {
                "startCol": 69,
                "endCol": 81
              }
            ]
          },
          "427": {
            "partial": false,
            "source": "              server._state.runtimeStats.queryStats.push(new Date().getTime() - callbackInfo.info.start);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 104
              },
              {
                "startCol": 57,
                "endCol": 77
              }
            ]
          },
          "436": {
            "partial": false,
            "source": "      process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "437": {
            "partial": false,
            "source": "        throw err;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 18
              }
            ]
          },
          "438": {
            "partial": false,
            "source": "      })",
            "missing": [
              {}
            ]
          },
          "439": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "445": {
            "partial": false,
            "source": "    if(server._serverState === 'disconnected') return;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 45
              },
              {
                "startCol": 47,
                "endCol": 54
              }
            ]
          },
          "447": {
            "partial": false,
            "source": "    server._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "449": {
            "partial": false,
            "source": "    if(typeof callback === 'function') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "451": {
            "partial": false,
            "source": "      var internalCallback = callback;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "452": {
            "partial": false,
            "source": "      callback = null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "454": {
            "partial": false,
            "source": "      internalCallback(err, null, server);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 41
              }
            ]
          },
          "455": {
            "partial": false,
            "source": "    } else if(server.isSetMember()) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "456": {
            "partial": false,
            "source": "      if(server.listeners(\"timeout\") && server.listeners(\"timeout\").length > 0) server.emit(\"timeout\", err, server);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 36
              },
              {
                "startCol": 40,
                "endCol": 78
              },
              {
                "startCol": 56,
                "endCol": 67
              },
              {
                "startCol": 80,
                "endCol": 115
              }
            ]
          },
          "458": {
            "partial": false,
            "source": "      if(eventReceiver.listeners(\"timeout\") && eventReceiver.listeners(\"timeout\").length > 0) eventReceiver.emit(\"timeout\", err, server);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 43
              },
              {
                "startCol": 47,
                "endCol": 92
              },
              {
                "startCol": 70,
                "endCol": 81
              },
              {
                "startCol": 94,
                "endCol": 136
              }
            ]
          },
          "462": {
            "partial": false,
            "source": "    if(!server.isSetMember()) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 28
              },
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "464": {
            "partial": false,
            "source": "      _fireCallbackErrors(server, err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "466": {
            "partial": false,
            "source": "      _emitAcrossAllDbInstances(server, eventReceiver, \"timeout\", err, server, true);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 84
              }
            ]
          },
          "473": {
            "partial": false,
            "source": "    if(server._serverState === 'disconnected') return;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 45
              },
              {
                "startCol": 47,
                "endCol": 54
              }
            ]
          },
          "475": {
            "partial": false,
            "source": "    server._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "477": {
            "partial": false,
            "source": "    if(typeof callback === 'function') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "479": {
            "partial": false,
            "source": "      var internalCallback = callback;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "480": {
            "partial": false,
            "source": "      callback = null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "482": {
            "partial": false,
            "source": "      internalCallback(new Error(message && message.err ? message.err : message), null, server);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 95
              },
              {
                "startCol": 33,
                "endCol": 40
              },
              {
                "startCol": 58,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 79
              }
            ]
          },
          "483": {
            "partial": false,
            "source": "    } else if(server.isSetMember()) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "484": {
            "partial": false,
            "source": "      if(server.listeners(\"error\") && server.listeners(\"error\").length > 0) server.emit(\"error\", new Error(message && message.err ? message.err : message), server);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 34
              },
              {
                "startCol": 38,
                "endCol": 74
              },
              {
                "startCol": 54,
                "endCol": 63
              },
              {
                "startCol": 76,
                "endCol": 163
              },
              {
                "startCol": 107,
                "endCol": 114
              },
              {
                "startCol": 132,
                "endCol": 143
              },
              {
                "startCol": 146,
                "endCol": 153
              }
            ]
          },
          "486": {
            "partial": false,
            "source": "      if(eventReceiver.listeners(\"error\") && eventReceiver.listeners(\"error\").length > 0) eventReceiver.emit(\"error\", new Error(message && message.err ? message.err : message), server);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 41
              },
              {
                "startCol": 45,
                "endCol": 88
              },
              {
                "startCol": 68,
                "endCol": 77
              },
              {
                "startCol": 90,
                "endCol": 184
              },
              {
                "startCol": 128,
                "endCol": 135
              },
              {
                "startCol": 153,
                "endCol": 164
              },
              {
                "startCol": 167,
                "endCol": 174
              }
            ]
          },
          "490": {
            "partial": false,
            "source": "    if(!server.isSetMember()) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 28
              },
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "492": {
            "partial": false,
            "source": "      _fireCallbackErrors(server, new Error(message && message.err ? message.err : message));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 92
              },
              {
                "startCol": 44,
                "endCol": 51
              },
              {
                "startCol": 69,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 90
              }
            ]
          },
          "494": {
            "partial": false,
            "source": "      _emitAcrossAllDbInstances(server, eventReceiver, \"error\", new Error(message && message.err ? message.err : message), server, true);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 136
              },
              {
                "startCol": 74,
                "endCol": 81
              },
              {
                "startCol": 99,
                "endCol": 110
              },
              {
                "startCol": 113,
                "endCol": 120
              }
            ]
          },
          "501": {
            "partial": false,
            "source": "    if(server._serverState === 'disconnected') return;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 45
              },
              {
                "startCol": 47,
                "endCol": 54
              }
            ]
          },
          "503": {
            "partial": false,
            "source": "    server._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "505": {
            "partial": false,
            "source": "    if(typeof callback == 'function') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "507": {
            "partial": false,
            "source": "      var internalCallback = callback;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "508": {
            "partial": false,
            "source": "      callback = null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "510": {
            "partial": false,
            "source": "      internalCallback(new Error(\"connection closed\"), null, server);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 68
              }
            ]
          },
          "511": {
            "partial": false,
            "source": "    } else if(server.isSetMember()) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "512": {
            "partial": false,
            "source": "      if(server.listeners(\"close\") && server.listeners(\"close\").length > 0) server.emit(\"close\", new Error(\"connection closed\"), server);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 34
              },
              {
                "startCol": 38,
                "endCol": 74
              },
              {
                "startCol": 54,
                "endCol": 63
              },
              {
                "startCol": 76,
                "endCol": 136
              }
            ]
          },
          "514": {
            "partial": false,
            "source": "      if(eventReceiver.listeners(\"close\") && eventReceiver.listeners(\"close\").length > 0) eventReceiver.emit(\"close\", new Error(\"connection closed\"), server);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 41
              },
              {
                "startCol": 45,
                "endCol": 88
              },
              {
                "startCol": 68,
                "endCol": 77
              },
              {
                "startCol": 90,
                "endCol": 157
              }
            ]
          },
          "518": {
            "partial": false,
            "source": "    if(!server.isSetMember()) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 28
              },
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "520": {
            "partial": false,
            "source": "      _fireCallbackErrors(server, new Error(\"connection closed\"));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 65
              }
            ]
          },
          "522": {
            "partial": false,
            "source": "      _emitAcrossAllDbInstances(server, eventReceiver, \"close\", server, null, true);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 83
              }
            ]
          },
          "530": {
            "partial": false,
            "source": "    if(server._serverState === 'disconnected') return;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 45
              },
              {
                "startCol": 47,
                "endCol": 54
              }
            ]
          },
          "532": {
            "partial": false,
            "source": "    server._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "534": {
            "partial": false,
            "source": "    if(typeof callback === 'function') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "536": {
            "partial": false,
            "source": "      var internalCallback = callback;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "537": {
            "partial": false,
            "source": "      callback = null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "539": {
            "partial": false,
            "source": "      internalCallback(new Error(\"connection closed due to parseError\"), null, server);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 86
              }
            ]
          },
          "540": {
            "partial": false,
            "source": "    } else if(server.isSetMember()) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "541": {
            "partial": false,
            "source": "      if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 39
              },
              {
                "startCol": 43,
                "endCol": 84
              },
              {
                "startCol": 59,
                "endCol": 73
              },
              {
                "startCol": 86,
                "endCol": 169
              }
            ]
          },
          "543": {
            "partial": false,
            "source": "      if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 46
              },
              {
                "startCol": 50,
                "endCol": 98
              },
              {
                "startCol": 73,
                "endCol": 87
              },
              {
                "startCol": 100,
                "endCol": 190
              }
            ]
          },
          "547": {
            "partial": false,
            "source": "    if(!server.isSetMember()) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 28
              },
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "549": {
            "partial": false,
            "source": "      _fireCallbackErrors(server, new Error(\"connection closed due to parseError\"));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 83
              }
            ]
          },
          "551": {
            "partial": false,
            "source": "      _emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 88
              }
            ]
          },
          "565": {
            "partial": false,
            "source": "  for(var i = 0; i < server.dbInstances.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 48,
                "endCol": 51
              }
            ]
          },
          "567": {
            "partial": false,
            "source": "    var dbInstance = server.dbInstances[i];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 43
              }
            ]
          },
          "569": {
            "partial": false,
            "source": "    var keys = Object.keys(dbInstance._callBackStore._notReplied);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 66
              },
              {
                "startCol": 15,
                "endCol": 65
              }
            ]
          },
          "571": {
            "partial": false,
            "source": "    for(var j = 0; j < keys.length; j++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              }
            ]
          },
          "572": {
            "partial": false,
            "source": "      var info = dbInstance._callBackStore._notReplied[keys[j]];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 64
              }
            ]
          },
          "574": {
            "partial": false,
            "source": "      if(info && info['chained'] && Array.isArray(info['chained']) && info['chained'].length > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 13
              },
              {
                "startCol": 36,
                "endCol": 66
              },
              {
                "startCol": 70,
                "endCol": 96
              }
            ]
          },
          "575": {
            "partial": false,
            "source": "        var chained = info['chained'];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 38
              }
            ]
          },
          "577": {
            "partial": false,
            "source": "        var finalCallback = chained.pop();",
            "missing": [
              {
                "startCol": 8,
                "endCol": 42
              },
              {
                "startCol": 28,
                "endCol": 41
              }
            ]
          },
          "578": {
            "partial": false,
            "source": "        if(info.connection.socketOptions.host === server.host && info.connection.socketOptions.port === server.port) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 61
              },
              {
                "startCol": 65,
                "endCol": 115
              }
            ]
          },
          "579": {
            "partial": false,
            "source": "          dbInstance._callBackStore.emit(finalCallback, err, null);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 66
              }
            ]
          },
          "583": {
            "partial": false,
            "source": "        chained.push(finalCallback);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 35
              }
            ]
          },
          "586": {
            "partial": false,
            "source": "        for(var i = 0; i < chained.length; i++) {",
            "missing": [
              {
                "startCol": 23,
                "endCol": 24
              },
              {
                "startCol": 43,
                "endCol": 46
              }
            ]
          },
          "587": {
            "partial": false,
            "source": "          delete dbInstance._callBackStore._notReplied[chained[i]];",
            "missing": [
              {
                "startCol": 10,
                "endCol": 66
              }
            ]
          },
          "590": {
            "partial": false,
            "source": "        if(info && info.connection.socketOptions.host === server.host && info.connection.socketOptions.port === server.port) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 15
              },
              {
                "startCol": 19,
                "endCol": 69
              },
              {
                "startCol": 73,
                "endCol": 123
              }
            ]
          },
          "591": {
            "partial": false,
            "source": "          dbInstance._callBackStore.emit(keys[j], err, null);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 60
              }
            ]
          },
          "611": {
            "partial": true,
            "source": "      if(resetConnection && typeof dbInstance.openCalled != 'undefined')",
            "missing": [
              {
                "startCol": 28,
                "endCol": 56
              }
            ]
          },
          "612": {
            "partial": false,
            "source": "        dbInstance.openCalled = false;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 38
              }
            ]
          },
          "614": {
            "partial": true,
            "source": "      if(filterDb == null || filterDb.databaseName !== dbInstance.databaseName || filterDb.tag !== dbInstance.tag) {",
            "missing": [
              {
                "startCol": 82,
                "endCol": 113
              }
            ]
          },
          "617": {
            "partial": false,
            "source": "  \t     dbInstance.emit(event, message, object);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 47
              }
            ]
          },
          "627": {
            "partial": false,
            "source": "  return this.connectionPool.getAllConnections();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 49
              },
              {
                "startCol": 9,
                "endCol": 48
              }
            ]
          },
          "637": {
            "partial": false,
            "source": "    return new Error(\"Cannot write to an arbiter\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              }
            ]
          },
          "639": {
            "partial": false,
            "source": "    return new Error(\"Cannot write to a secondary\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              }
            ]
          },
          "640": {
            "partial": true,
            "source": "  } else if(read == true && self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc['ismaster'] == true) {",
            "missing": [
              {
                "startCol": 28,
                "endCol": 76
              },
              {
                "startCol": 80,
                "endCol": 116
              }
            ]
          },
          "641": {
            "partial": false,
            "source": "    return new Error(\"Cannot read from primary when secondary only specified\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 79
              }
            ]
          },
          "658": {
            "partial": false,
            "source": "  } else if(result == null) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 18
              }
            ]
          },
          "659": {
            "partial": false,
            "source": "    return null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "661": {
            "partial": false,
            "source": "    return result;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 18
              }
            ]
          },
          "672": {
            "partial": false,
            "source": "    return new Error(\"Cannot write to an arbiter\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              }
            ]
          },
          "675": {
            "partial": false,
            "source": "    if((self._readPreference == ReadPreference.PRIMARY) && self.isMasterDoc['ismaster'] != true) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 59,
                "endCol": 95
              }
            ]
          },
          "676": {
            "partial": false,
            "source": "      return new Error(\"Read preference is Server.PRIMARY and server is not master\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 85
              }
            ]
          },
          "677": {
            "partial": false,
            "source": "    } else if(self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc['ismaster'] == true) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 62
              },
              {
                "startCol": 66,
                "endCol": 102
              }
            ]
          },
          "678": {
            "partial": false,
            "source": "      return new Error(\"Cannot read from primary when secondary only specified\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 81
              }
            ]
          },
          "695": {
            "partial": false,
            "source": "  } else if(result == null) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 18
              }
            ]
          },
          "696": {
            "partial": false,
            "source": "    return null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "698": {
            "partial": false,
            "source": "    return result;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 18
              }
            ]
          },
          "706": {
            "partial": false,
            "source": "  this.recordQueryStats = enable;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              }
            ]
          },
          "724": {
            "partial": false,
            "source": "    , get: function () { return this.m_n; }",
            "missing": [
              {
                "startCol": 25,
                "endCol": 41
              }
            ]
          },
          "728": {
            "partial": false,
            "source": "    , get: function () { return (this.m_n > 0) ? this.m_newM : 0.0; }",
            "missing": [
              {
                "startCol": 25,
                "endCol": 67
              },
              {
                "startCol": 32,
                "endCol": 46
              },
              {
                "startCol": 49,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 66
              }
            ]
          },
          "732": {
            "partial": false,
            "source": "    , get: function () { return ((this.m_n > 1) ? this.m_newS/(this.m_n - 1) : 0.0); }",
            "missing": [
              {
                "startCol": 25,
                "endCol": 84
              },
              {
                "startCol": 33,
                "endCol": 47
              },
              {
                "startCol": 50,
                "endCol": 76
              },
              {
                "startCol": 62,
                "endCol": 76
              },
              {
                "startCol": 79,
                "endCol": 82
              }
            ]
          },
          "736": {
            "partial": false,
            "source": "    , get: function () { return Math.sqrt(this.variance); }",
            "missing": [
              {
                "startCol": 25,
                "endCol": 57
              },
              {
                "startCol": 32,
                "endCol": 56
              }
            ]
          },
          "741": {
            "partial": false,
            "source": "      var bottom = this.mean + this.standardDeviation;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 54
              },
              {
                "startCol": 19,
                "endCol": 53
              }
            ]
          },
          "742": {
            "partial": false,
            "source": "      if(bottom == 0) return 0;",
            "missing": [
              {
                "startCol": 9,
                "endCol": 15
              },
              {
                "startCol": 22,
                "endCol": 31
              }
            ]
          },
          "743": {
            "partial": false,
            "source": "      return ((2 * this.mean * this.standardDeviation)/(bottom));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 65
              },
              {
                "startCol": 13,
                "endCol": 64
              },
              {
                "startCol": 14,
                "endCol": 54
              },
              {
                "startCol": 15,
                "endCol": 28
              },
              {
                "startCol": 55,
                "endCol": 63
              }
            ]
          },
          "753": {
            "partial": false,
            "source": "  this.m_n = this.m_n + 1;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              },
              {
                "startCol": 13,
                "endCol": 25
              }
            ]
          },
          "755": {
            "partial": false,
            "source": "  if(this.m_n == 1) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 18
              }
            ]
          },
          "756": {
            "partial": false,
            "source": "    this.m_oldM = this.m_newM = x;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "757": {
            "partial": false,
            "source": "    this.m_oldS = 0.0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "759": {
            "partial": false,
            "source": "    this.m_newM = this.m_oldM + (x - this.m_oldM) / this.m_n;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 61
              },
              {
                "startCol": 18,
                "endCol": 60
              },
              {
                "startCol": 32,
                "endCol": 49
              },
              {
                "startCol": 33,
                "endCol": 34
              }
            ]
          },
          "760": {
            "partial": false,
            "source": "    this.m_newS = this.m_oldS + (x - this.m_oldM) * (x - this.m_newM);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 70
              },
              {
                "startCol": 18,
                "endCol": 69
              },
              {
                "startCol": 32,
                "endCol": 49
              },
              {
                "startCol": 33,
                "endCol": 34
              },
              {
                "startCol": 52,
                "endCol": 69
              },
              {
                "startCol": 53,
                "endCol": 54
              }
            ]
          },
          "763": {
            "partial": false,
            "source": "    this.m_oldM = this.m_newM;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              }
            ]
          },
          "764": {
            "partial": false,
            "source": "    this.m_oldS = this.m_newS;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              }
            ]
          },
          "773": {
            "partial": false,
            "source": "      return this.options['auto_reconnect'] == null ? false : this.options['auto_reconnect'];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 93
              },
              {
                "startCol": 13,
                "endCol": 51
              },
              {
                "startCol": 54,
                "endCol": 59
              },
              {
                "startCol": 62,
                "endCol": 92
              }
            ]
          },
          "782": {
            "partial": false,
            "source": "      return this.internalConnection;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 37
              }
            ]
          },
          "785": {
            "partial": false,
            "source": "      this.internalConnection = connection;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 43
              }
            ]
          },
          "794": {
            "partial": false,
            "source": "      return this.internalMaster;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 33
              }
            ]
          },
          "806": {
            "partial": false,
            "source": "      return this;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "816": {
            "partial": false,
            "source": "      return this._state.runtimeStats.queryStats;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 49
              }
            ]
          },
          "825": {
            "partial": false,
            "source": "      return this._state.runtimeStats;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "836": {
            "partial": false,
            "source": "        return Server.READ_SECONDARY;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 37
              }
            ]
          },
          "840": {
            "partial": false,
            "source": "        return this._readPreference;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 36
              }
            ]
          }
        },
        "source": "var Connection = require('./connection').Connection,\n  ReadPreference = require('./read_preference').ReadPreference,\n  DbCommand = require('../commands/db_command').DbCommand,\n  MongoReply = require('../responses/mongo_reply').MongoReply,\n  ConnectionPool = require('./connection_pool').ConnectionPool,\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits;\n\n/**\n * Class representing a single MongoDB Server connection\n *\n * Options\n *  - **readPreference** {String, default:null}, set's the read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n *  - **ssl** {Boolean, default:false}, use ssl connection (needs to have a mongod server with ssl support)\n *  - **slaveOk** {Boolean, default:false}, legacy option allowing reads from secondary, use **readPrefrence** instead.\n *  - **poolSize** {Number, default:1}, number of connections in the connection pool, set to 1 as default for legacy reasons.\n *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))\n *  - **logger** {Object, default:null}, an object representing a logger that you want to use, needs to support functions debug, log, error **({error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}})**.\n *  - **auto_reconnect** {Boolean, default:false}, reconnect on error.\n *  - **disableDriverBSONSizeCheck** {Boolean, default:false}, force the server to error if the BSON message is to big\n *\n * @class Represents a Server connection.\n * @param {String} host the server host\n * @param {Number} port the server port\n * @param {Object} [options] optional options for insert command\n */\nfunction Server(host, port, options) {\n  // Set up event emitter\n  EventEmitter.call(this);\n  // Set up Server instance\n  if(!(this instanceof Server)) return new Server(host, port, options);\n  // Ensure correct values\n  if(port != null && typeof port == 'object') {\n    options = port;\n    port = Connection.DEFAULT_PORT;\n  }\n\n  var self = this;\n  this.host = host;\n  this.port = port;\n  this.options = options == null ? {} : options;\n  this.internalConnection;\n  this.internalMaster = false;\n  this.connected = false;\n  this.poolSize = this.options.poolSize == null ? 5 : this.options.poolSize;\n  this.disableDriverBSONSizeCheck = this.options.disableDriverBSONSizeCheck != null ? this.options.disableDriverBSONSizeCheck : false;\n  this.ssl = this.options.ssl == null ? false : this.options.ssl;\n  this.slaveOk = this.options[\"slave_ok\"];\n  this._used = false;\n\n  // Get the readPreference\n  var readPreference = this.options['readPreference'];\n  // Read preference setting\n  if(readPreference != null) {\n    if(readPreference != ReadPreference.PRIMARY && readPreference != ReadPreference.SECONDARY && readPreference != ReadPreference.NEAREST\n      && readPreference != ReadPreference.SECONDARY_PREFERRED && readPreference != ReadPreference.PRIMARY_PREFERRED) {\n        throw new Error(\"Illegal readPreference mode specified, \" + readPreference);\n    }\n\n    // Set read Preference\n    this._readPreference = readPreference;\n  } else {\n    this._readPreference = null;\n  }\n\n  // Contains the isMaster information returned from the server\n  this.isMasterDoc;\n\n  // Set default connection pool options\n  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};\n  if(this.disableDriverBSONSizeCheck) this.socketOptions.disableDriverBSONSizeCheck = this.disableDriverBSONSizeCheck;\n  // Set ssl up if it's defined\n  if(this.ssl) {\n    this.socketOptions.ssl = true;\n  }\n\n  // Set up logger if any set\n  this.logger = this.options.logger != null\n    && (typeof this.options.logger.debug == 'function')\n    && (typeof this.options.logger.error == 'function')\n    && (typeof this.options.logger.log == 'function')\n      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};\n\n  // Just keeps list of events we allow\n  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[]};\n  // Internal state of server connection\n  this._serverState = 'disconnected';\n  // this._timeout = false;\n  // Contains state information about server connection\n  this._state = {'runtimeStats': {'queryStats':new RunningStats()}};\n  // Do we record server stats or not\n  this.recordQueryStats = false;\n};\n\n/**\n * @ignore\n */\n// Inherit simple event emitter\ninherits(Server, EventEmitter);\n\n//\n//  Deprecated, USE ReadPreferences class\n//\nServer.READ_PRIMARY = ReadPreference.PRIMARY;\nServer.READ_SECONDARY = ReadPreference.SECONDARY_PREFERRED;\nServer.READ_SECONDARY_ONLY = ReadPreference.SECONDARY;\n\n/**\n * Always ourselves\n * @ignore\n */\nServer.prototype.setReadPreference = function() {}\n\n/**\n * @ignore\n */\nServer.prototype.isMongos = function() {\n  return this.isMasterDoc != null && this.isMasterDoc['msg'] == \"isdbgrid\" ? true : false;\n}\n\n/**\n * @ignore\n */\nServer.prototype._isUsed = function() {\n  return this._used;\n}\n\n/**\n * @ignore\n */\nServer.prototype.close = function(callback) {\n  // Remove all local listeners\n  this.removeAllListeners();\n\n  if(this.connectionPool != null) {\n    // Remove all the listeners on the pool so it does not fire messages all over the place\n    this.connectionPool.removeAllEventListeners();\n    // Close the connection if it's open\n    this.connectionPool.stop(true);\n  }\n\n  // Set server status as disconnected\n  this._serverState = 'disconnected';\n  // Peform callback if present\n  if(typeof callback === 'function') callback();\n};\n\n/**\n * @ignore\n */\nServer.prototype.isConnected = function() {\n  return this._serverState == 'connected';\n}\n\n/**\n * @ignore\n */\nServer.prototype.allServerInstances = function() {\n  return [this];\n}\n\n/**\n * @ignore\n */\nServer.prototype.isSetMember = function() {\n  return this['replicasetInstance'] != null || this['mongosInstance'] != null;\n}\n\n/**\n * @ignore\n */\nServer.prototype.connect = function(dbInstance, options, callback) {\n  if('function' === typeof options) callback = options, options = {};\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n\n  // Currently needed to work around problems with multiple connections in a pool with ssl\n  // TODO fix if possible\n  if(this.ssl == true) {\n    // Set up socket options for ssl\n    this.socketOptions.ssl = true;\n  }\n\n  // Let's connect\n  var server = this;\n  // Let's us override the main receiver of events\n  var eventReceiver = options.eventReceiver != null ? options.eventReceiver : this;\n  // Creating dbInstance\n  this.dbInstance = dbInstance;\n  // Save reference to dbInstance\n  this.dbInstances = [dbInstance];\n\n  // Force connection pool if there is one\n  if(server.connectionPool) server.connectionPool.stop();\n\n  // Set server state to connecting\n  this._serverState = 'connecting';\n  // Ensure dbInstance can do a slave query if it's set\n  dbInstance.slaveOk = this.slaveOk ? this.slaveOk : dbInstance.slaveOk;\n  // Create connection Pool instance with the current BSON serializer\n  var connectionPool = new ConnectionPool(this.host, this.port, this.poolSize, dbInstance.bson,  this.socketOptions);\n  // Set logger on pool\n  connectionPool.logger = this.logger;\n\n  // Set up a new pool using default settings\n  server.connectionPool = connectionPool;\n\n  // Set basic parameters passed in\n  var returnIsMasterResults = options.returnIsMasterResults == null ? false : options.returnIsMasterResults;\n\n  // Create a default connect handler, overriden when using replicasets\n  var connectCallback = function(err, reply) {\n    // ensure no callbacks get called twice\n    var internalCallback = callback;\n    callback = null;\n    // If something close down the connection and removed the callback before\n    // proxy killed connection etc, ignore the erorr as close event was isssued\n    if(err != null && internalCallback == null) return;\n    // Internal callback\n    if(err != null) return internalCallback(err, null);\n    server.master = reply.documents[0].ismaster == 1 ? true : false;\n    server.connectionPool.setMaxBsonSize(reply.documents[0].maxBsonObjectSize);\n    // Set server as connected\n    server.connected = true;\n    // Save document returned so we can query it\n    server.isMasterDoc = reply.documents[0];\n\n    // Emit open event\n    _emitAcrossAllDbInstances(server, eventReceiver, \"open\", null, returnIsMasterResults ? reply : dbInstance, null);\n\n    // If we have it set to returnIsMasterResults\n    if(returnIsMasterResults) {\n      internalCallback(null, reply, server);\n    } else {\n      internalCallback(null, dbInstance, server);\n    }\n  };\n\n  // Let's us override the main connect callback\n  var connectHandler = options.connectHandler == null ? connectCallback : options.connectHandler;\n\n  // Set up on connect method\n  connectionPool.on(\"poolReady\", function() {\n    // Create db command and Add the callback to the list of callbacks by the request id (mapping outgoing messages to correct callbacks)\n    var db_command = DbCommand.NcreateIsMasterCommand(dbInstance, dbInstance.databaseName);\n    // Check out a reader from the pool\n    var connection = connectionPool.checkoutConnection();\n    // Set server state to connEcted\n    server._serverState = 'connected';\n\n    // Register handler for messages\n    dbInstance._registerHandler(db_command, false, connection, connectHandler);\n\n    // Write the command out\n    connection.write(db_command);\n  })\n\n  // Set up item connection\n  connectionPool.on(\"message\", function(message) {\n    // Attempt to parse the message\n    try {\n      // Create a new mongo reply\n      var mongoReply = new MongoReply()\n      // Parse the header\n      mongoReply.parseHeader(message, connectionPool.bson)\n      // If message size is not the same as the buffer size\n      // something went terribly wrong somewhere\n      if(mongoReply.messageLength != message.length) {\n        // Emit the error\n        if(eventReceiver.listeners(\"error\") && eventReceiver.listeners(\"error\").length > 0) eventReceiver.emit(\"error\", new Error(\"bson length is different from message length\"), server);\n        // Remove all listeners\n        server.removeAllListeners();\n      } else {\n        var startDate = new Date().getTime();\n\n        // Callback instance\n        var callbackInfo = null;\n        var dbInstanceObject = null;\n\n        // Locate a callback instance and remove any additional ones\n        for(var i = 0; i < server.dbInstances.length; i++) {\n          var dbInstanceObjectTemp = server.dbInstances[i];\n          var hasHandler = dbInstanceObjectTemp._hasHandler(mongoReply.responseTo.toString());\n          // Assign the first one we find and remove any duplicate ones\n          if(hasHandler && callbackInfo == null) {\n            callbackInfo = dbInstanceObjectTemp._findHandler(mongoReply.responseTo.toString());\n            dbInstanceObject = dbInstanceObjectTemp;\n          } else if(hasHandler) {\n            dbInstanceObjectTemp._removeHandler(mongoReply.responseTo.toString());\n          }\n        }\n\n        // The command executed another request, log the handler again under that request id\n        if(mongoReply.requestId > 0 && mongoReply.cursorId.toString() != \"0\" && callbackInfo.info && callbackInfo.info.exhaust) {\n          dbInstance._reRegisterHandler(mongoReply.requestId, callbackInfo);\n        }\n\n        // Only execute callback if we have a caller\n        // chained is for findAndModify as it does not respect write concerns\n        if(callbackInfo && callbackInfo.callback && callbackInfo.info && Array.isArray(callbackInfo.info.chained)) {\n          // Check if callback has already been fired (missing chain command)\n          var chained = callbackInfo.info.chained;\n          var numberOfFoundCallbacks = 0;\n          for(var i = 0; i < chained.length; i++) {\n            if(dbInstanceObject._hasHandler(chained[i])) numberOfFoundCallbacks++;\n          }\n\n          // If we have already fired then clean up rest of chain and move on\n          if(numberOfFoundCallbacks != chained.length) {\n            for(var i = 0; i < chained.length; i++) {\n              dbInstanceObject._removeHandler(chained[i]);\n            }\n\n            // Just return from function\n            return;\n          }\n\n          // Parse the body\n          mongoReply.parseBody(message, connectionPool.bson, callbackInfo.info.raw, function(err) {\n            if(err != null) {\n              // If pool connection is already closed\n              if(server._serverState === 'disconnected') return;\n              // Set server state to disconnected\n              server._serverState = 'disconnected';\n              // Remove all listeners and close the connection pool\n              server.removeAllListeners();\n              connectionPool.stop(true);\n\n              // If we have a callback return the error\n              if(typeof callback === 'function') {\n                // ensure no callbacks get called twice\n                var internalCallback = callback;\n                callback = null;\n                // Perform callback\n                internalCallback(new Error(\"connection closed due to parseError\"), null, server);\n              } else if(server.isSetMember()) {\n                if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n              } else {\n                if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n              }\n\n              // If we are a single server connection fire errors correctly\n              if(!server.isSetMember()) {\n                // Fire all callback errors\n                _fireCallbackErrors(server, new Error(\"connection closed due to parseError\"));\n                // Emit error\n                _emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);\n              }\n              // Short cut\n              return;\n            }\n\n            // Fetch the callback\n            var callbackInfo = dbInstanceObject._findHandler(mongoReply.responseTo.toString());\n            // If we have an error let's execute the callback and clean up all other\n            // chained commands\n            var firstResult = mongoReply && mongoReply.documents;\n            // Check for an error, if we have one let's trigger the callback and clean up\n            // The chained callbacks\n            if(firstResult[0].err != null || firstResult[0].errmsg != null) {\n              // Trigger the callback for the error\n              dbInstanceObject._callHandler(mongoReply.responseTo, mongoReply, null);\n            } else {\n              var chainedIds = callbackInfo.info.chained;\n\n              if(chainedIds.length > 0 && chainedIds[chainedIds.length - 1] == mongoReply.responseTo) {\n                // Cleanup all other chained calls\n                chainedIds.pop();\n                // Remove listeners\n                for(var i = 0; i < chainedIds.length; i++) dbInstanceObject._removeHandler(chainedIds[i]);\n                // Call the handler\n                dbInstanceObject._callHandler(mongoReply.responseTo, callbackInfo.info.results.shift(), null);\n              } else{\n                // Add the results to all the results\n                for(var i = 0; i < chainedIds.length; i++) {\n                  var handler = dbInstanceObject._findHandler(chainedIds[i]);\n                  // Check if we have an object, if it's the case take the current object commands and\n                  // and add this one\n                  if(handler.info != null) {\n                    handler.info.results = Array.isArray(callbackInfo.info.results) ? callbackInfo.info.results : [];\n                    handler.info.results.push(mongoReply);\n                  }\n                }\n              }\n            }\n          });\n        } else if(callbackInfo && callbackInfo.callback && callbackInfo.info) {\n          // Parse the body\n          mongoReply.parseBody(message, connectionPool.bson, callbackInfo.info.raw, function(err) {\n            if(err != null) {\n              // If pool connection is already closed\n              if(server._serverState === 'disconnected') return;\n              // Set server state to disconnected\n              server._serverState = 'disconnected';\n              // Remove all listeners and close the connection pool\n              server.removeAllListeners();\n              connectionPool.stop(true);\n\n              // If we have a callback return the error\n              if(typeof callback === 'function') {\n                // ensure no callbacks get called twice\n                var internalCallback = callback;\n                callback = null;\n                // Perform callback\n                internalCallback(new Error(\"connection closed due to parseError\"), null, server);\n              } else if(server.isSetMember()) {\n                if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n              } else {\n                if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n              }\n\n              // If we are a single server connection fire errors correctly\n              if(!server.isSetMember()) {\n                // Fire all callback errors\n                _fireCallbackErrors(server, new Error(\"connection closed due to parseError\"));\n                // Emit error\n                _emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);\n              }\n              // Short cut\n              return;\n            }\n\n            // Let's record the stats info if it's enabled\n            if(server.recordQueryStats == true && server._state['runtimeStats'] != null\n              && server._state.runtimeStats['queryStats'] instanceof RunningStats) {\n              // Add data point to the running statistics object\n              server._state.runtimeStats.queryStats.push(new Date().getTime() - callbackInfo.info.start);\n            }\n\n            dbInstanceObject._callHandler(mongoReply.responseTo, mongoReply, null);\n          });\n        }\n      }\n    } catch (err) {\n      // Throw error in next tick\n      process.nextTick(function() {\n        throw err;\n      })\n    }\n  });\n\n  // Handle timeout\n  connectionPool.on(\"timeout\", function(err) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(err, null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"timeout\") && server.listeners(\"timeout\").length > 0) server.emit(\"timeout\", err, server);\n    } else {\n      if(eventReceiver.listeners(\"timeout\") && eventReceiver.listeners(\"timeout\").length > 0) eventReceiver.emit(\"timeout\", err, server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      _fireCallbackErrors(server, err);\n      // Emit error\n      _emitAcrossAllDbInstances(server, eventReceiver, \"timeout\", err, server, true);\n    }\n  });\n\n  // Handle errors\n  connectionPool.on(\"error\", function(message) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(new Error(message && message.err ? message.err : message), null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"error\") && server.listeners(\"error\").length > 0) server.emit(\"error\", new Error(message && message.err ? message.err : message), server);\n    } else {\n      if(eventReceiver.listeners(\"error\") && eventReceiver.listeners(\"error\").length > 0) eventReceiver.emit(\"error\", new Error(message && message.err ? message.err : message), server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      _fireCallbackErrors(server, new Error(message && message.err ? message.err : message));\n      // Emit error\n      _emitAcrossAllDbInstances(server, eventReceiver, \"error\", new Error(message && message.err ? message.err : message), server, true);\n    }\n  });\n\n  // Handle close events\n  connectionPool.on(\"close\", function() {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback == 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(new Error(\"connection closed\"), null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"close\") && server.listeners(\"close\").length > 0) server.emit(\"close\", new Error(\"connection closed\"), server);\n    } else {\n      if(eventReceiver.listeners(\"close\") && eventReceiver.listeners(\"close\").length > 0) eventReceiver.emit(\"close\", new Error(\"connection closed\"), server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      _fireCallbackErrors(server, new Error(\"connection closed\"));\n      // Emit error\n      _emitAcrossAllDbInstances(server, eventReceiver, \"close\", server, null, true);\n    }\n  });\n\n  // If we have a parser error we are in an unknown state, close everything and emit\n  // error\n  connectionPool.on(\"parseError\", function(message) {\n    // If pool connection is already closed\n    if(server._serverState === 'disconnected') return;\n    // Set server state to disconnected\n    server._serverState = 'disconnected';\n    // If we have a callback return the error\n    if(typeof callback === 'function') {\n      // ensure no callbacks get called twice\n      var internalCallback = callback;\n      callback = null;\n      // Perform callback\n      internalCallback(new Error(\"connection closed due to parseError\"), null, server);\n    } else if(server.isSetMember()) {\n      if(server.listeners(\"parseError\") && server.listeners(\"parseError\").length > 0) server.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n    } else {\n      if(eventReceiver.listeners(\"parseError\") && eventReceiver.listeners(\"parseError\").length > 0) eventReceiver.emit(\"parseError\", new Error(\"connection closed due to parseError\"), server);\n    }\n\n    // If we are a single server connection fire errors correctly\n    if(!server.isSetMember()) {\n      // Fire all callback errors\n      _fireCallbackErrors(server, new Error(\"connection closed due to parseError\"));\n      // Emit error\n      _emitAcrossAllDbInstances(server, eventReceiver, \"parseError\", server, null, true);\n    }\n  });\n\n  // Boot up connection poole, pass in a locator of callbacks\n  connectionPool.start();\n}\n\n/**\n * Fire all the errors\n * @ignore\n */\nvar _fireCallbackErrors = function(server, err) {\n  // Locate all the possible callbacks that need to return\n  for(var i = 0; i < server.dbInstances.length; i++) {\n    // Fetch the db Instance\n    var dbInstance = server.dbInstances[i];\n    // Check all callbacks\n    var keys = Object.keys(dbInstance._callBackStore._notReplied);\n    // For each key check if it's a callback that needs to be returned\n    for(var j = 0; j < keys.length; j++) {\n      var info = dbInstance._callBackStore._notReplied[keys[j]];\n      // Check if we have a chained command (findAndModify)\n      if(info && info['chained'] && Array.isArray(info['chained']) && info['chained'].length > 0) {\n        var chained = info['chained'];\n        // Only callback once and the last one is the right one\n        var finalCallback = chained.pop();\n        if(info.connection.socketOptions.host === server.host && info.connection.socketOptions.port === server.port) {\n          dbInstance._callBackStore.emit(finalCallback, err, null);\n        }\n\n        // Put back the final callback to ensure we don't call all commands in the chain\n        chained.push(finalCallback);\n\n        // Remove all chained callbacks\n        for(var i = 0; i < chained.length; i++) {\n          delete dbInstance._callBackStore._notReplied[chained[i]];\n        }\n      } else {\n        if(info && info.connection.socketOptions.host === server.host && info.connection.socketOptions.port === server.port) {\n          dbInstance._callBackStore.emit(keys[j], err, null);\n        }\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nvar _emitAcrossAllDbInstances = function(server, filterDb, event, message, object, resetConnection) {\n  // Emit close event across all db instances sharing the sockets\n  var allServerInstances = server.allServerInstances();\n  // Fetch the first server instance\n  var serverInstance = allServerInstances[0];\n  // For all db instances signal all db instances\n  if(Array.isArray(serverInstance.dbInstances) && serverInstance.dbInstances.length >= 1) {\n\t  for(var i = 0; i < serverInstance.dbInstances.length; i++) {\n      var dbInstance = serverInstance.dbInstances[i];\n      // Set the parent\n      if(resetConnection && typeof dbInstance.openCalled != 'undefined')\n        dbInstance.openCalled = false;\n      // Check if it's our current db instance and skip if it is\n      if(filterDb == null || filterDb.databaseName !== dbInstance.databaseName || filterDb.tag !== dbInstance.tag) {\n        // Only emit if there is a listener\n        if(dbInstance.listeners(event).length > 0)\n  \t     dbInstance.emit(event, message, object);\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nServer.prototype.allRawConnections = function() {\n  return this.connectionPool.getAllConnections();\n}\n\n/**\n * Check if a writer can be provided\n * @ignore\n */\nvar canCheckoutWriter = function(self, read) {\n  // We cannot write to an arbiter or secondary server\n  if(self.isMasterDoc['arbiterOnly'] == true) {\n    return new Error(\"Cannot write to an arbiter\");\n  } if(self.isMasterDoc['secondary'] == true) {\n    return new Error(\"Cannot write to a secondary\");\n  } else if(read == true && self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc['ismaster'] == true) {\n    return new Error(\"Cannot read from primary when secondary only specified\");\n  }\n\n  // Return no error\n  return null;\n}\n\n/**\n * @ignore\n */\nServer.prototype.checkoutWriter = function(read) {\n  if(read == true) return this.connectionPool.checkoutConnection();\n  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)\n  var result = canCheckoutWriter(this, read);\n  // If the result is null check out a writer\n  if(result == null && this.connectionPool != null) {\n    return this.connectionPool.checkoutConnection();\n  } else if(result == null) {\n    return null;\n  } else {\n    return result;\n  }\n}\n\n/**\n * Check if a reader can be provided\n * @ignore\n */\nvar canCheckoutReader = function(self) {\n  // We cannot write to an arbiter or secondary server\n  if(self.isMasterDoc && self.isMasterDoc['arbiterOnly'] == true) {\n    return new Error(\"Cannot write to an arbiter\");\n  } else if(self._readPreference != null) {\n    // If the read preference is Primary and the instance is not a master return an error\n    if((self._readPreference == ReadPreference.PRIMARY) && self.isMasterDoc['ismaster'] != true) {\n      return new Error(\"Read preference is Server.PRIMARY and server is not master\");\n    } else if(self._readPreference == ReadPreference.SECONDARY && self.isMasterDoc['ismaster'] == true) {\n      return new Error(\"Cannot read from primary when secondary only specified\");\n    }\n  }\n\n  // Return no error\n  return null;\n}\n\n/**\n * @ignore\n */\nServer.prototype.checkoutReader = function() {\n  // Check if are allowed to do a checkout (if we try to use an arbiter f.ex)\n  var result = canCheckoutReader(this);\n  // If the result is null check out a writer\n  if(result == null && this.connectionPool != null) {\n    return this.connectionPool.checkoutConnection();\n  } else if(result == null) {\n    return null;\n  } else {\n    return result;\n  }\n}\n\n/**\n * @ignore\n */\nServer.prototype.enableRecordQueryStats = function(enable) {\n  this.recordQueryStats = enable;\n}\n\n/**\n * Internal statistics object used for calculating average and standard devitation on\n * running queries\n * @ignore\n */\nvar RunningStats = function() {\n  var self = this;\n  this.m_n = 0;\n  this.m_oldM = 0.0;\n  this.m_oldS = 0.0;\n  this.m_newM = 0.0;\n  this.m_newS = 0.0;\n\n  // Define getters\n  Object.defineProperty(this, \"numDataValues\", { enumerable: true\n    , get: function () { return this.m_n; }\n  });\n\n  Object.defineProperty(this, \"mean\", { enumerable: true\n    , get: function () { return (this.m_n > 0) ? this.m_newM : 0.0; }\n  });\n\n  Object.defineProperty(this, \"variance\", { enumerable: true\n    , get: function () { return ((this.m_n > 1) ? this.m_newS/(this.m_n - 1) : 0.0); }\n  });\n\n  Object.defineProperty(this, \"standardDeviation\", { enumerable: true\n    , get: function () { return Math.sqrt(this.variance); }\n  });\n\n  Object.defineProperty(this, \"sScore\", { enumerable: true\n    , get: function () {\n      var bottom = this.mean + this.standardDeviation;\n      if(bottom == 0) return 0;\n      return ((2 * this.mean * this.standardDeviation)/(bottom));\n    }\n  });\n}\n\n/**\n * @ignore\n */\nRunningStats.prototype.push = function(x) {\n  // Update the number of samples\n  this.m_n = this.m_n + 1;\n  // See Knuth TAOCP vol 2, 3rd edition, page 232\n  if(this.m_n == 1) {\n    this.m_oldM = this.m_newM = x;\n    this.m_oldS = 0.0;\n  } else {\n    this.m_newM = this.m_oldM + (x - this.m_oldM) / this.m_n;\n    this.m_newS = this.m_oldS + (x - this.m_oldM) * (x - this.m_newM);\n\n    // set up for next iteration\n    this.m_oldM = this.m_newM;\n    this.m_oldS = this.m_newS;\n  }\n}\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"autoReconnect\", { enumerable: true\n  , get: function () {\n      return this.options['auto_reconnect'] == null ? false : this.options['auto_reconnect'];\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"connection\", { enumerable: true\n  , get: function () {\n      return this.internalConnection;\n    }\n  , set: function(connection) {\n      this.internalConnection = connection;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"master\", { enumerable: true\n  , get: function () {\n      return this.internalMaster;\n    }\n  , set: function(value) {\n      this.internalMaster = value;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"primary\", { enumerable: true\n  , get: function () {\n      return this;\n    }\n});\n\n/**\n * Getter for query Stats\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"queryStats\", { enumerable: true\n  , get: function () {\n      return this._state.runtimeStats.queryStats;\n    }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"runtimeStats\", { enumerable: true\n  , get: function () {\n      return this._state.runtimeStats;\n    }\n});\n\n/**\n * Get Read Preference method\n * @ignore\n */\nObject.defineProperty(Server.prototype, \"readPreference\", { enumerable: true\n  , get: function () {\n      if(this._readPreference == null && this.readSecondary) {\n        return Server.READ_SECONDARY;\n      } else if(this._readPreference == null && !this.readSecondary) {\n        return Server.READ_PRIMARY;\n      } else {\n        return this._readPreference;\n      }\n    }\n});\n\n/**\n * @ignore\n */\nexports.Server = Server;",
        "blocks": {
          "total": 163,
          "seen": 35,
          "missing": 128,
          "percentage": 0.2147239263803681
        }
      },
      "hash": "0ce73d8ffe27db5cdfd0180942b470ba"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/connection_pool.js": {
      "stats": {
        "percentage": 0.8823529411764706,
        "lines": [
          {
            "lineno": 10
          },
          {
            "lineno": 15
          },
          {
            "lineno": 25
          },
          {
            "lineno": 55
          },
          {
            "lineno": 93
          },
          {
            "lineno": 95
          },
          {
            "lineno": 96
          },
          {
            "lineno": 100
          },
          {
            "lineno": 102
          },
          {
            "lineno": 108
          },
          {
            "lineno": 109
          },
          {
            "lineno": 112
          },
          {
            "lineno": 114
          },
          {
            "lineno": 120
          },
          {
            "lineno": 121
          },
          {
            "lineno": 124
          },
          {
            "lineno": 126
          },
          {
            "lineno": 132
          },
          {
            "lineno": 133
          },
          {
            "lineno": 136
          },
          {
            "lineno": 157
          },
          {
            "lineno": 170
          },
          {
            "lineno": 172
          },
          {
            "lineno": 177
          },
          {
            "lineno": 197
          },
          {
            "lineno": 208
          }
        ],
        "missing": 26,
        "seen": 195,
        "seen_lines": [
          {
            "s": 1,
            "e": 7
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 9,
            "e": 51
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 18,
            "e": 18
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 25,
            "e": 25
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 28,
            "e": 28
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 30,
            "e": 30
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 32,
            "e": 32
          },
          {
            "s": 34,
            "e": 34
          },
          {
            "s": 34,
            "e": 34
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 36,
            "e": 36
          },
          {
            "s": 39,
            "e": 39
          },
          {
            "s": 41,
            "e": 41
          },
          {
            "s": 44,
            "e": 44
          },
          {
            "s": 46,
            "e": 46
          },
          {
            "s": 48,
            "e": 48
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 51,
            "e": 51
          },
          {
            "s": 53,
            "e": 64
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 54,
            "e": 54
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 58,
            "e": 58
          },
          {
            "s": 59,
            "e": 59
          },
          {
            "s": 64,
            "e": 152
          },
          {
            "s": 65,
            "e": 145
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 69,
            "e": 69
          },
          {
            "s": 71,
            "e": 87
          },
          {
            "s": 71,
            "e": 87
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 75,
            "e": 75
          },
          {
            "s": 75,
            "e": 75
          },
          {
            "s": 75,
            "e": 75
          },
          {
            "s": 77,
            "e": 77
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 80,
            "e": 80
          },
          {
            "s": 83,
            "e": 85
          },
          {
            "s": 83,
            "e": 85
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 84,
            "e": 84
          },
          {
            "s": 89,
            "e": 92
          },
          {
            "s": 92,
            "e": 103
          },
          {
            "s": 92,
            "e": 103
          },
          {
            "s": 106,
            "e": 115
          },
          {
            "s": 106,
            "e": 115
          },
          {
            "s": 118,
            "e": 127
          },
          {
            "s": 118,
            "e": 127
          },
          {
            "s": 130,
            "e": 137
          },
          {
            "s": 130,
            "e": 137
          },
          {
            "s": 139,
            "e": 141
          },
          {
            "s": 139,
            "e": 141
          },
          {
            "s": 140,
            "e": 140
          },
          {
            "s": 140,
            "e": 140
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 144,
            "e": 144
          },
          {
            "s": 152,
            "e": 168
          },
          {
            "s": 153,
            "e": 153
          },
          {
            "s": 153,
            "e": 153
          },
          {
            "s": 154,
            "e": 154
          },
          {
            "s": 156,
            "e": 156
          },
          {
            "s": 156,
            "e": 156
          },
          {
            "s": 161,
            "e": 161
          },
          {
            "s": 162,
            "e": 162
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 164,
            "e": 164
          },
          {
            "s": 168,
            "e": 176
          },
          {
            "s": 176,
            "e": 196
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 177,
            "e": 177
          },
          {
            "s": 179,
            "e": 179
          },
          {
            "s": 182,
            "e": 182
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 187,
            "e": 187
          },
          {
            "s": 187,
            "e": 187
          },
          {
            "s": 187,
            "e": 187
          },
          {
            "s": 188,
            "e": 188
          },
          {
            "s": 188,
            "e": 188
          },
          {
            "s": 192,
            "e": 192
          },
          {
            "s": 196,
            "e": 201
          },
          {
            "s": 201,
            "e": 207
          },
          {
            "s": 202,
            "e": 202
          },
          {
            "s": 202,
            "e": 202
          },
          {
            "s": 202,
            "e": 202
          },
          {
            "s": 203,
            "e": 203
          },
          {
            "s": 204,
            "e": 204
          },
          {
            "s": 207,
            "e": 212
          },
          {
            "s": 212,
            "e": 222
          },
          {
            "s": 213,
            "e": 213
          },
          {
            "s": 213,
            "e": 213
          },
          {
            "s": 214,
            "e": 214
          },
          {
            "s": 214,
            "e": 214
          },
          {
            "s": 215,
            "e": 215
          },
          {
            "s": 215,
            "e": 215
          },
          {
            "s": 216,
            "e": 216
          },
          {
            "s": 216,
            "e": 216
          },
          {
            "s": 217,
            "e": 217
          },
          {
            "s": 217,
            "e": 217
          },
          {
            "s": 218,
            "e": 218
          },
          {
            "s": 218,
            "e": 218
          },
          {
            "s": 219,
            "e": 219
          },
          {
            "s": 219,
            "e": 219
          },
          {
            "s": 220,
            "e": 220
          },
          {
            "s": 220,
            "e": 220
          }
        ],
        "total": 221,
        "coverage": {
          "10": {
            "partial": true,
            "source": "  if(typeof host !== 'string' || typeof port !== 'number') throw \"host and port must be specified [\" + host + \":\"  + port + \"]\";",
            "missing": [
              {
                "startCol": 59,
                "endCol": 128
              },
              {
                "startCol": 65,
                "endCol": 107
              },
              {
                "startCol": 103,
                "endCol": 107
              },
              {
                "startCol": 117,
                "endCol": 121
              }
            ]
          },
          "15": {
            "partial": true,
            "source": "  this.socketOptions = typeof socketOptions === 'object' ? socketOptions : {};",
            "missing": [
              {
                "startCol": 75,
                "endCol": 77
              }
            ]
          },
          "25": {
            "partial": true,
            "source": "  if(host.match(/^\\//)) this.socketOptions.domainSocket = true;",
            "missing": [
              {
                "startCol": 24,
                "endCol": 63
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "    maxBsonSize = Connection.DEFAULT_MAX_BSON_SIZE;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              }
            ]
          },
          "93": {
            "partial": false,
            "source": "      numberOfErrors++;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "95": {
            "partial": false,
            "source": "      if(_self._poolState != 'disconnected' && _self.listeners(\"error\").length > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 43
              },
              {
                "startCol": 47,
                "endCol": 82
              },
              {
                "startCol": 62,
                "endCol": 71
              }
            ]
          },
          "96": {
            "partial": false,
            "source": "        _self.emit(\"error\", err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 32
              }
            ]
          },
          "100": {
            "partial": false,
            "source": "      _self._poolState = 'disconnected';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 40
              }
            ]
          },
          "102": {
            "partial": false,
            "source": "      _self.stop();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "108": {
            "partial": false,
            "source": "      if(_self._poolState !== 'disconnected' && _self.listeners(\"close\").length > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 44
              },
              {
                "startCol": 48,
                "endCol": 83
              },
              {
                "startCol": 63,
                "endCol": 72
              }
            ]
          },
          "109": {
            "partial": false,
            "source": "        _self.emit(\"close\");",
            "missing": [
              {
                "startCol": 8,
                "endCol": 27
              }
            ]
          },
          "112": {
            "partial": false,
            "source": "      _self._poolState = 'disconnected';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 40
              }
            ]
          },
          "114": {
            "partial": false,
            "source": "      _self.stop();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "120": {
            "partial": false,
            "source": "      if(_self._poolState !== 'disconnected' && _self.listeners(\"timeout\").length > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 44
              },
              {
                "startCol": 48,
                "endCol": 85
              },
              {
                "startCol": 63,
                "endCol": 74
              }
            ]
          },
          "121": {
            "partial": false,
            "source": "        _self.emit(\"timeout\", err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 34
              }
            ]
          },
          "124": {
            "partial": false,
            "source": "      _self._poolState = 'disconnected';",
            "missing": [
              {
                "startCol": 6,
                "endCol": 40
              }
            ]
          },
          "126": {
            "partial": false,
            "source": "      _self.stop();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "132": {
            "partial": false,
            "source": "      if(_self._poolState !== 'disconnected' && _self.listeners(\"parseError\").length > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 44
              },
              {
                "startCol": 48,
                "endCol": 88
              },
              {
                "startCol": 63,
                "endCol": 77
              }
            ]
          },
          "133": {
            "partial": false,
            "source": "        _self.emit(\"parseError\", new Error(\"parseError occured\"));",
            "missing": [
              {
                "startCol": 8,
                "endCol": 65
              }
            ]
          },
          "136": {
            "partial": false,
            "source": "      _self.stop();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "157": {
            "partial": false,
            "source": "    throw \"pool must have at least one listener ready that responds to the [poolReady] event\";",
            "missing": [
              {
                "startCol": 4,
                "endCol": 94
              }
            ]
          },
          "170": {
            "partial": false,
            "source": "  this.stop(false);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "172": {
            "partial": false,
            "source": "  this.start();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "177": {
            "partial": true,
            "source": "  removeListeners = removeListeners == null ? true : removeListeners;",
            "missing": [
              {
                "startCol": 46,
                "endCol": 50
              }
            ]
          },
          "197": {
            "partial": false,
            "source": "  return this._poolState === 'connected';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 41
              },
              {
                "startCol": 9,
                "endCol": 40
              }
            ]
          },
          "208": {
            "partial": false,
            "source": "  return this.openConnections;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 30
              }
            ]
          }
        },
        "source": "var utils = require('./connection_utils'),\n  inherits = require('util').inherits,\n  net = require('net'),\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  MongoReply = require(\"../responses/mongo_reply\").MongoReply,\n  Connection = require(\"./connection\").Connection;\n\nvar ConnectionPool = exports.ConnectionPool = function(host, port, poolSize, bson, socketOptions) {\n  if(typeof host !== 'string' || typeof port !== 'number') throw \"host and port must be specified [\" + host + \":\"  + port + \"]\";\n  // Set up event emitter\n  EventEmitter.call(this);\n  // Keep all options for the socket in a specific collection allowing the user to specify the\n  // Wished upon socket connection parameters\n  this.socketOptions = typeof socketOptions === 'object' ? socketOptions : {};\n  this.socketOptions.host = host;\n  this.socketOptions.port = port;\n  this.socketOptions.domainSocket = false;\n  this.bson = bson;\n  // PoolSize is always + 1 for special reserved \"measurment\" socket (like ping, stats etc)\n  this.poolSize = poolSize;\n  this.minPoolSize = Math.floor(this.poolSize / 2) + 1;\n\n  // Check if the host is a socket\n  if(host.match(/^\\//)) this.socketOptions.domainSocket = true;\n\n  // Set default settings for the socket options\n  utils.setIntegerParameter(this.socketOptions, 'timeout', 0);\n  // Delay before writing out the data to the server\n  utils.setBooleanParameter(this.socketOptions, 'noDelay', true);\n  // Delay before writing out the data to the server\n  utils.setIntegerParameter(this.socketOptions, 'keepAlive', 0);\n  // Set the encoding of the data read, default is binary == null\n  utils.setStringParameter(this.socketOptions, 'encoding', null);\n  // Allows you to set a throttling bufferSize if you need to stop overflows\n  utils.setIntegerParameter(this.socketOptions, 'bufferSize', 0);\n\n  // Internal structures\n  this.openConnections = [];\n  // Assign connection id's\n  this.connectionId = 0;\n\n  // Current index for selection of pool connection\n  this.currentConnectionIndex = 0;\n  // The pool state\n  this._poolState = 'disconnected';\n  // timeout control\n  this._timeout = false;\n}\n\ninherits(ConnectionPool, EventEmitter);\n\nConnectionPool.prototype.setMaxBsonSize = function(maxBsonSize) {\n  if(maxBsonSize == null){\n    maxBsonSize = Connection.DEFAULT_MAX_BSON_SIZE;\n  }\n\n  for(var i = 0; i < this.openConnections.length; i++) {\n    this.openConnections[i].maxBsonSize = maxBsonSize;\n  }\n}\n\n// Start a function\nvar _connect = function(_self) {\n  return new function() {\n    // Create a new connection instance\n    var connection = new Connection(_self.connectionId++, _self.socketOptions);\n    // Set logger on pool\n    connection.logger = _self.logger;\n    // Connect handler\n    connection.on(\"connect\", function(err, connection) {\n      // Add connection to list of open connections\n      _self.openConnections.push(connection);\n      // If the number of open connections is equal to the poolSize signal ready pool\n      if(_self.openConnections.length === _self.poolSize && _self._poolState !== 'disconnected') {\n        // Set connected\n        _self._poolState = 'connected';\n        // Emit pool ready\n        _self.emit(\"poolReady\");\n      } else if(_self.openConnections.length < _self.poolSize) {\n        // We need to open another connection, make sure it's in the next\n        // tick so we don't get a cascade of errors\n        process.nextTick(function() {\n          _connect(_self);\n        });\n      }\n    });\n\n    var numberOfErrors = 0\n\n    // Error handler\n    connection.on(\"error\", function(err, connection) {\n      numberOfErrors++;\n      // If we are already disconnected ignore the event\n      if(_self._poolState != 'disconnected' && _self.listeners(\"error\").length > 0) {\n        _self.emit(\"error\", err);\n      }\n\n      // Set disconnected\n      _self._poolState = 'disconnected';\n      // Stop\n      _self.stop();\n    });\n\n    // Close handler\n    connection.on(\"close\", function() {\n      // If we are already disconnected ignore the event\n      if(_self._poolState !== 'disconnected' && _self.listeners(\"close\").length > 0) {\n        _self.emit(\"close\");\n      }\n      // Set disconnected\n      _self._poolState = 'disconnected';\n      // Stop\n      _self.stop();\n    });\n\n    // Timeout handler\n    connection.on(\"timeout\", function(err, connection) {\n      // If we are already disconnected ignore the event\n      if(_self._poolState !== 'disconnected' && _self.listeners(\"timeout\").length > 0) {\n        _self.emit(\"timeout\", err);\n      }\n      // Set disconnected\n      _self._poolState = 'disconnected';\n      // Stop\n      _self.stop();\n    });\n\n    // Parse error, needs a complete shutdown of the pool\n    connection.on(\"parseError\", function() {\n      // If we are already disconnected ignore the event\n      if(_self._poolState !== 'disconnected' && _self.listeners(\"parseError\").length > 0) {\n        _self.emit(\"parseError\", new Error(\"parseError occured\"));\n      }\n\n      _self.stop();\n    });\n\n    connection.on(\"message\", function(message) {\n      _self.emit(\"message\", message);\n    });\n\n    // Start connection in the next tick\n    connection.start();\n  }();\n}\n\n\n// Start method, will throw error if no listeners are available\n// Pass in an instance of the listener that contains the api for\n// finding callbacks for a given message etc.\nConnectionPool.prototype.start = function() {\n  var markerDate = new Date().getTime();\n  var self = this;\n\n  if(this.listeners(\"poolReady\").length == 0) {\n    throw \"pool must have at least one listener ready that responds to the [poolReady] event\";\n  }\n\n  // Set pool state to connecting\n  this._poolState = 'connecting';\n  this._timeout = false;\n\n  _connect(self);\n}\n\n// Restart a connection pool (on a close the pool might be in a wrong state)\nConnectionPool.prototype.restart = function() {\n  // Close all connections\n  this.stop(false);\n  // Now restart the pool\n  this.start();\n}\n\n// Stop the connections in the pool\nConnectionPool.prototype.stop = function(removeListeners) {\n  removeListeners = removeListeners == null ? true : removeListeners;\n  // Set disconnected\n  this._poolState = 'disconnected';\n\n  // Clear all listeners if specified\n  if(removeListeners) {\n    this.removeAllEventListeners();\n  }\n\n  // Close all connections\n  for(var i = 0; i < this.openConnections.length; i++) {\n    this.openConnections[i].close();\n  }\n\n  // Clean up\n  this.openConnections = [];\n}\n\n// Check the status of the connection\nConnectionPool.prototype.isConnected = function() {\n  return this._poolState === 'connected';\n}\n\n// Checkout a connection from the pool for usage, or grab a specific pool instance\nConnectionPool.prototype.checkoutConnection = function(id) {\n  var index = (this.currentConnectionIndex++ % (this.openConnections.length));\n  var connection = this.openConnections[index];\n  return connection;\n}\n\nConnectionPool.prototype.getAllConnections = function() {\n  return this.openConnections;\n}\n\n// Remove all non-needed event listeners\nConnectionPool.prototype.removeAllEventListeners = function() {\n  this.removeAllListeners(\"close\");\n  this.removeAllListeners(\"error\");\n  this.removeAllListeners(\"timeout\");\n  this.removeAllListeners(\"connect\");\n  this.removeAllListeners(\"end\");\n  this.removeAllListeners(\"parseError\");\n  this.removeAllListeners(\"message\");\n  this.removeAllListeners(\"poolReady\");\n}",
        "blocks": {
          "total": 31,
          "seen": 16,
          "missing": 15,
          "percentage": 0.5161290322580645
        }
      },
      "hash": "e6800a2556f371434443f7879039371b"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/mongos.js": {
      "stats": {
        "percentage": 0.6234177215189873,
        "lines": [
          {
            "lineno": 17
          },
          {
            "lineno": 18
          },
          {
            "lineno": 21
          },
          {
            "lineno": 22
          },
          {
            "lineno": 25
          },
          {
            "lineno": 27
          },
          {
            "lineno": 29
          },
          {
            "lineno": 31
          },
          {
            "lineno": 33
          },
          {
            "lineno": 35
          },
          {
            "lineno": 37
          },
          {
            "lineno": 38
          },
          {
            "lineno": 41
          },
          {
            "lineno": 42
          },
          {
            "lineno": 44
          },
          {
            "lineno": 46
          },
          {
            "lineno": 47
          },
          {
            "lineno": 48
          },
          {
            "lineno": 51
          },
          {
            "lineno": 59
          },
          {
            "lineno": 66
          },
          {
            "lineno": 67
          },
          {
            "lineno": 68
          },
          {
            "lineno": 69
          },
          {
            "lineno": 72
          },
          {
            "lineno": 74
          },
          {
            "lineno": 76
          },
          {
            "lineno": 78
          },
          {
            "lineno": 81
          },
          {
            "lineno": 82
          },
          {
            "lineno": 83
          },
          {
            "lineno": 85
          },
          {
            "lineno": 89
          },
          {
            "lineno": 93
          },
          {
            "lineno": 95
          },
          {
            "lineno": 97
          },
          {
            "lineno": 103
          },
          {
            "lineno": 104
          },
          {
            "lineno": 106
          },
          {
            "lineno": 107
          },
          {
            "lineno": 110
          },
          {
            "lineno": 112
          },
          {
            "lineno": 113
          },
          {
            "lineno": 117
          },
          {
            "lineno": 119
          },
          {
            "lineno": 121
          },
          {
            "lineno": 123
          },
          {
            "lineno": 124
          },
          {
            "lineno": 131
          },
          {
            "lineno": 133
          },
          {
            "lineno": 139
          },
          {
            "lineno": 141
          },
          {
            "lineno": 142
          },
          {
            "lineno": 144
          },
          {
            "lineno": 145
          },
          {
            "lineno": 147
          },
          {
            "lineno": 149
          },
          {
            "lineno": 151
          },
          {
            "lineno": 153
          },
          {
            "lineno": 154
          },
          {
            "lineno": 157
          },
          {
            "lineno": 158
          },
          {
            "lineno": 160
          },
          {
            "lineno": 163
          },
          {
            "lineno": 165
          },
          {
            "lineno": 170
          },
          {
            "lineno": 171
          },
          {
            "lineno": 172
          },
          {
            "lineno": 175
          },
          {
            "lineno": 176
          },
          {
            "lineno": 178
          },
          {
            "lineno": 180
          },
          {
            "lineno": 181
          },
          {
            "lineno": 184
          },
          {
            "lineno": 185
          },
          {
            "lineno": 186
          },
          {
            "lineno": 187
          },
          {
            "lineno": 188
          },
          {
            "lineno": 189
          },
          {
            "lineno": 190
          },
          {
            "lineno": 191
          },
          {
            "lineno": 192
          },
          {
            "lineno": 196
          },
          {
            "lineno": 198
          },
          {
            "lineno": 200
          },
          {
            "lineno": 205
          },
          {
            "lineno": 208
          },
          {
            "lineno": 213
          },
          {
            "lineno": 215
          },
          {
            "lineno": 216
          },
          {
            "lineno": 218
          },
          {
            "lineno": 219
          },
          {
            "lineno": 221
          },
          {
            "lineno": 230
          },
          {
            "lineno": 238
          },
          {
            "lineno": 240
          },
          {
            "lineno": 241
          },
          {
            "lineno": 245
          },
          {
            "lineno": 252
          },
          {
            "lineno": 260
          },
          {
            "lineno": 261
          },
          {
            "lineno": 263
          },
          {
            "lineno": 271
          },
          {
            "lineno": 273
          },
          {
            "lineno": 274
          },
          {
            "lineno": 275
          },
          {
            "lineno": 279
          },
          {
            "lineno": 280
          },
          {
            "lineno": 282
          },
          {
            "lineno": 289
          },
          {
            "lineno": 291
          },
          {
            "lineno": 293
          },
          {
            "lineno": 295
          },
          {
            "lineno": 297
          },
          {
            "lineno": 298
          },
          {
            "lineno": 299
          },
          {
            "lineno": 301
          },
          {
            "lineno": 302
          },
          {
            "lineno": 313
          }
        ],
        "missing": 119,
        "seen": 197,
        "seen_lines": [
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 15,
            "e": 58
          },
          {
            "s": 58,
            "e": 65
          },
          {
            "s": 65,
            "e": 229
          },
          {
            "s": 229,
            "e": 236
          },
          {
            "s": 236,
            "e": 251
          },
          {
            "s": 251,
            "e": 258
          },
          {
            "s": 258,
            "e": 269
          },
          {
            "s": 269,
            "e": 288
          },
          {
            "s": 288,
            "e": 312
          },
          {
            "s": 312,
            "e": 316
          },
          {
            "s": 316,
            "e": 316
          }
        ],
        "total": 316,
        "coverage": {
          "17": {
            "partial": false,
            "source": "  if(!(this instanceof Mongos))",
            "missing": [
              {
                "startCol": 5,
                "endCol": 30
              },
              {
                "startCol": 6,
                "endCol": 30
              },
              {
                "startCol": 23,
                "endCol": 29
              }
            ]
          },
          "18": {
            "partial": false,
            "source": "    return new Mongos(servers, options);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              }
            ]
          },
          "21": {
            "partial": false,
            "source": "  if(servers == null || !Array.isArray(servers) || servers.length == 0)",
            "missing": [
              {
                "startCol": 5,
                "endCol": 12
              },
              {
                "startCol": 24,
                "endCol": 47
              },
              {
                "startCol": 25,
                "endCol": 47
              },
              {
                "startCol": 51,
                "endCol": 70
              }
            ]
          },
          "22": {
            "partial": false,
            "source": "    throw new Error(\"At least one mongos proxy must be in the array\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 70
              }
            ]
          },
          "25": {
            "partial": false,
            "source": "  this.options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              },
              {
                "startCol": 17,
                "endCol": 24
              },
              {
                "startCol": 35,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 47
              }
            ]
          },
          "27": {
            "partial": false,
            "source": "  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 92
              },
              {
                "startCol": 23,
                "endCol": 57
              },
              {
                "startCol": 60,
                "endCol": 86
              },
              {
                "startCol": 89,
                "endCol": 91
              }
            ]
          },
          "29": {
            "partial": false,
            "source": "  this.haEnabled = this.options['ha'] == null ? true : this.options['ha'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              },
              {
                "startCol": 19,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 52
              },
              {
                "startCol": 55,
                "endCol": 73
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "  this.mongosStatusCheckInterval = this.options['haInterval'] == null ? 2000 : this.options['haInterval'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 106
              },
              {
                "startCol": 35,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 76
              },
              {
                "startCol": 79,
                "endCol": 105
              }
            ]
          },
          "33": {
            "partial": false,
            "source": "  this.servers = servers;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "35": {
            "partial": false,
            "source": "  this.downServers = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "37": {
            "partial": false,
            "source": "  this.lowestPingTimeServer = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              }
            ]
          },
          "38": {
            "partial": false,
            "source": "  this.lowestPingTime = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "41": {
            "partial": false,
            "source": "  for(var i = 0; i < this.servers.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "42": {
            "partial": false,
            "source": "    var server = this.servers[i];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "44": {
            "partial": false,
            "source": "    var socketOptions = {host: server.host, port: server.port};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 63
              }
            ]
          },
          "46": {
            "partial": false,
            "source": "    if(this.socketOptions != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 33
              }
            ]
          },
          "47": {
            "partial": false,
            "source": "      var keys = Object.keys(this.socketOptions);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 49
              },
              {
                "startCol": 17,
                "endCol": 48
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "      for(var k = 0; k < keys.length;k++) socketOptions[keys[i]] = this.socketOptions[keys[i]];",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 37,
                "endCol": 40
              },
              {
                "startCol": 42,
                "endCol": 95
              }
            ]
          },
          "51": {
            "partial": false,
            "source": "    server.socketOptions = socketOptions;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "  return true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "66": {
            "partial": false,
            "source": "  if('function' === typeof options) callback = options, options = {};",
            "missing": [
              {
                "startCol": 5,
                "endCol": 34
              },
              {
                "startCol": 20,
                "endCol": 34
              },
              {
                "startCol": 27,
                "endCol": 34
              },
              {
                "startCol": 36,
                "endCol": 69
              }
            ]
          },
          "67": {
            "partial": false,
            "source": "  if(options == null) options = {};",
            "missing": [
              {
                "startCol": 5,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "68": {
            "partial": false,
            "source": "  if(!('function' === typeof callback)) callback = null;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 38
              },
              {
                "startCol": 6,
                "endCol": 38
              },
              {
                "startCol": 22,
                "endCol": 37
              },
              {
                "startCol": 29,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 56
              }
            ]
          },
          "69": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "72": {
            "partial": false,
            "source": "  this.db = db;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "  this._serverState = 'connecting';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "  this._numberOfServersLeftToInitialize = this.servers.length;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 62
              }
            ]
          },
          "78": {
            "partial": false,
            "source": "  this._currentMongos = this.servers[0];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 40
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "  var connectHandler = function(_server) {",
            "missing": [
              {}
            ]
          },
          "82": {
            "partial": false,
            "source": "    return function(err, result) {",
            "missing": [
              {}
            ]
          },
          "83": {
            "partial": false,
            "source": "      self._numberOfServersLeftToInitialize = self._numberOfServersLeftToInitialize - 1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 88
              },
              {},
              {
                "startCol": 46,
                "endCol": 87
              }
            ]
          },
          "84": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "85": {
            "partial": false,
            "source": "      if(self._numberOfServersLeftToInitialize == 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 51
              },
              {}
            ]
          },
          "86": {
            "partial": false,
            "source": "        // Start ha function if it exists",
            "missing": [
              {}
            ]
          },
          "87": {
            "partial": false,
            "source": "        if(self.haEnabled) {",
            "missing": [
              {}
            ]
          },
          "88": {
            "partial": false,
            "source": "          // Setup the ha process",
            "missing": [
              {}
            ]
          },
          "89": {
            "partial": false,
            "source": "          self._replicasetTimeoutId = setTimeout(self.mongosCheckFunction, self.mongosStatusCheckInterval);",
            "missing": [
              {
                "startCol": 38,
                "endCol": 106
              },
              {
                "startCol": 10,
                "endCol": 107
              },
              {}
            ]
          },
          "90": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "91": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "92": {
            "partial": false,
            "source": "        // Set the mongos to connected",
            "missing": [
              {}
            ]
          },
          "93": {
            "partial": false,
            "source": "        self._serverState = \"connected\";",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 40
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "        // Emit the open event",
            "missing": [
              {}
            ]
          },
          "95": {
            "partial": false,
            "source": "        self.db.emit(\"open\", null, self.db);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 43
              }
            ]
          },
          "96": {
            "partial": false,
            "source": "        // Callback",
            "missing": [
              {}
            ]
          },
          "97": {
            "partial": false,
            "source": "        callback(null, self.db);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 31
              }
            ]
          },
          "98": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "99": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "100": {
            "partial": false,
            "source": "  };",
            "missing": [
              {}
            ]
          },
          "103": {
            "partial": false,
            "source": "  var errorOrCloseHandler = function(_server) {",
            "missing": [
              {}
            ]
          },
          "104": {
            "partial": false,
            "source": "    return function(err, result) {",
            "missing": [
              {}
            ]
          },
          "105": {
            "partial": false,
            "source": "      // Create current mongos comparision",
            "missing": [
              {}
            ]
          },
          "106": {
            "partial": false,
            "source": "      var currentUrl = self._currentMongos.host + \":\" + self._currentMongos.port;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 81
              },
              {
                "startCol": 23,
                "endCol": 53
              },
              {}
            ]
          },
          "107": {
            "partial": false,
            "source": "      var serverUrl = this.host + \":\" + this.port;",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 37
              },
              {
                "startCol": 6,
                "endCol": 50
              }
            ]
          },
          "108": {
            "partial": false,
            "source": "      // We need to check if the server that closed is the actual current proxy we are using, otherwise",
            "missing": [
              {}
            ]
          },
          "109": {
            "partial": false,
            "source": "      // just ignore",
            "missing": [
              {}
            ]
          },
          "110": {
            "partial": false,
            "source": "      if(currentUrl == serverUrl) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 19
              },
              {
                "startCol": 23,
                "endCol": 32
              }
            ]
          },
          "111": {
            "partial": false,
            "source": "        // Remove the server from the list",
            "missing": [
              {}
            ]
          },
          "112": {
            "partial": false,
            "source": "        if(self.servers.indexOf(_server) != -1) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 46
              },
              {
                "startCol": 44,
                "endCol": 46
              }
            ]
          },
          "113": {
            "partial": false,
            "source": "          self.servers.splice(self.servers.indexOf(_server), 1);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 63
              },
              {
                "startCol": 30,
                "endCol": 59
              }
            ]
          },
          "114": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "115": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "116": {
            "partial": false,
            "source": "        // Pick the next one on the list if there is one",
            "missing": [
              {}
            ]
          },
          "117": {
            "partial": false,
            "source": "        for(var i = 0; i < self.servers.length; i++) {",
            "missing": [
              {
                "startCol": 23,
                "endCol": 24
              },
              {},
              {
                "startCol": 48,
                "endCol": 51
              }
            ]
          },
          "118": {
            "partial": false,
            "source": "          // Grab the server out of the array (making sure there is no servers in the list if none available)",
            "missing": [
              {}
            ]
          },
          "119": {
            "partial": false,
            "source": "          var server = self.servers[i];",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 39
              }
            ]
          },
          "120": {
            "partial": false,
            "source": "          // Generate url for comparision",
            "missing": [
              {}
            ]
          },
          "121": {
            "partial": false,
            "source": "          var serverUrl = server.host + \":\" + server.port;",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 58
              },
              {
                "startCol": 26,
                "endCol": 43
              }
            ]
          },
          "122": {
            "partial": false,
            "source": "          // It's not the current one and connected set it as the current db",
            "missing": [
              {}
            ]
          },
          "123": {
            "partial": false,
            "source": "          if(currentUrl != serverUrl && server.isConnected()) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 23
              },
              {
                "startCol": 27,
                "endCol": 36
              },
              {},
              {
                "startCol": 40,
                "endCol": 60
              }
            ]
          },
          "124": {
            "partial": false,
            "source": "            self._currentMongos = server;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 41
              }
            ]
          },
          "125": {
            "partial": false,
            "source": "            break;",
            "missing": [
              {}
            ]
          },
          "126": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "127": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "128": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "129": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "130": {
            "partial": false,
            "source": "      // Ensure we don't store the _server twice",
            "missing": [
              {}
            ]
          },
          "131": {
            "partial": false,
            "source": "      if(self.downServers.indexOf(_server) == -1) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 42
              },
              {
                "startCol": 46,
                "endCol": 48
              },
              {}
            ]
          },
          "132": {
            "partial": false,
            "source": "        // Add the server instances",
            "missing": [
              {}
            ]
          },
          "133": {
            "partial": false,
            "source": "        self.downServers.push(_server);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 38
              },
              {}
            ]
          },
          "134": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "135": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "136": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "137": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "138": {
            "partial": false,
            "source": "  // Mongo function",
            "missing": [
              {}
            ]
          },
          "139": {
            "partial": false,
            "source": "  this.mongosCheckFunction = function() {",
            "missing": [
              {}
            ]
          },
          "140": {
            "partial": false,
            "source": "    // If we have down servers let's attempt a reconnect",
            "missing": [
              {}
            ]
          },
          "141": {
            "partial": false,
            "source": "    if(self.downServers.length > 0) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 34
              },
              {}
            ]
          },
          "142": {
            "partial": false,
            "source": "      var numberOfServersLeft = self.downServers.length;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 56
              }
            ]
          },
          "143": {
            "partial": false,
            "source": "      // Attempt to reconnect",
            "missing": [
              {}
            ]
          },
          "144": {
            "partial": false,
            "source": "      for(var i = 0; i < self.downServers.length; i++) {",
            "missing": [
              {},
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 50,
                "endCol": 53
              }
            ]
          },
          "145": {
            "partial": false,
            "source": "        var downServer = self.downServers.pop();",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 48
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "146": {
            "partial": false,
            "source": "        // Attemp to reconnect",
            "missing": [
              {}
            ]
          },
          "147": {
            "partial": false,
            "source": "        downServer.connect(self.db, {returnIsMasterResults: true}, function(_server) {",
            "missing": [
              {}
            ]
          },
          "148": {
            "partial": false,
            "source": "          // Return a function to check for the values",
            "missing": [
              {}
            ]
          },
          "149": {
            "partial": false,
            "source": "          return function(err, result) {",
            "missing": [
              {}
            ]
          },
          "150": {
            "partial": false,
            "source": "            // Adjust the number of servers left",
            "missing": [
              {}
            ]
          },
          "151": {
            "partial": false,
            "source": "            numberOfServersLeft = numberOfServersLeft - 1;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 58
              },
              {
                "startCol": 34,
                "endCol": 53
              }
            ]
          },
          "152": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "153": {
            "partial": false,
            "source": "            if(err != null) {",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 18
              }
            ]
          },
          "154": {
            "partial": false,
            "source": "              self.downServers.push(_server);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 44
              }
            ]
          },
          "155": {
            "partial": false,
            "source": "            } else {",
            "missing": [
              {}
            ]
          },
          "156": {
            "partial": false,
            "source": "              // Add server event handlers",
            "missing": [
              {}
            ]
          },
          "157": {
            "partial": false,
            "source": "              _server.on(\"close\", errorOrCloseHandler(_server));",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 63
              },
              {
                "startCol": 34,
                "endCol": 62
              }
            ]
          },
          "158": {
            "partial": false,
            "source": "              _server.on(\"error\", errorOrCloseHandler(_server));",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 64
              },
              {
                "startCol": 34,
                "endCol": 62
              }
            ]
          },
          "159": {
            "partial": false,
            "source": "              // Add to list of servers",
            "missing": [
              {}
            ]
          },
          "160": {
            "partial": false,
            "source": "              self.servers.push(_server);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 41
              }
            ]
          },
          "161": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "162": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "163": {
            "partial": false,
            "source": "            if(numberOfServersLeft <= 0) {",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 34
              }
            ]
          },
          "164": {
            "partial": false,
            "source": "              // Perfom another ha",
            "missing": [
              {}
            ]
          },
          "165": {
            "partial": false,
            "source": "              self._replicasetTimeoutId = setTimeout(self.mongosCheckFunction, self.mongosStatusCheckInterval);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 111
              },
              {
                "startCol": 42,
                "endCol": 110
              }
            ]
          },
          "166": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "167": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "168": {
            "partial": false,
            "source": "        }(downServer));",
            "missing": [
              {}
            ]
          },
          "169": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "170": {
            "partial": false,
            "source": "    } else if(self.servers.length > 0) {",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 37
              }
            ]
          },
          "171": {
            "partial": false,
            "source": "      var numberOfServersLeft = self.servers.length;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              },
              {}
            ]
          },
          "172": {
            "partial": false,
            "source": "      var _s = new Date().getTime()",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 35
              }
            ]
          },
          "173": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "174": {
            "partial": false,
            "source": "      // Else let's perform a ping command",
            "missing": [
              {}
            ]
          },
          "175": {
            "partial": false,
            "source": "      for(var i = 0; i < self.servers.length; i++) {",
            "missing": [
              {},
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 46,
                "endCol": 49
              }
            ]
          },
          "176": {
            "partial": false,
            "source": "        var executePing = function(_server) {",
            "missing": [
              {}
            ]
          },
          "177": {
            "partial": false,
            "source": "          // Get a read connection",
            "missing": [
              {}
            ]
          },
          "178": {
            "partial": false,
            "source": "          var _connection = _server.checkoutReader();",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 53
              },
              {
                "startCol": 28,
                "endCol": 52
              }
            ]
          },
          "179": {
            "partial": false,
            "source": "          // Execute ping command",
            "missing": [
              {}
            ]
          },
          "180": {
            "partial": false,
            "source": "          self.db.command({ping:1}, {connection:_connection}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "181": {
            "partial": false,
            "source": "            var pingTime = new Date().getTime() - _s;",
            "missing": [
              {
                "startCol": 27,
                "endCol": 47
              },
              {},
              {
                "startCol": 12,
                "endCol": 53
              },
              {
                "startCol": 50,
                "endCol": 52
              }
            ]
          },
          "182": {
            "partial": false,
            "source": "            // If no server set set the first one, otherwise check",
            "missing": [
              {}
            ]
          },
          "183": {
            "partial": false,
            "source": "            // the lowest ping time and assign the server if it's got a lower ping time",
            "missing": [
              {}
            ]
          },
          "184": {
            "partial": false,
            "source": "            if(self.lowestPingTimeServer == null) {",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 48
              }
            ]
          },
          "185": {
            "partial": false,
            "source": "              self.lowestPingTimeServer = _server;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 50
              }
            ]
          },
          "186": {
            "partial": false,
            "source": "              self.lowestPingTime = pingTime;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 45
              }
            ]
          },
          "187": {
            "partial": false,
            "source": "              self._currentMongos = _server;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 44
              },
              {}
            ]
          },
          "188": {
            "partial": false,
            "source": "            } else if(self.lowestPingTime > pingTime",
            "missing": [
              {
                "startCol": 22,
                "endCol": 52
              },
              {},
              {
                "startCol": 44,
                "endCol": 52
              }
            ]
          },
          "189": {
            "partial": false,
            "source": "                && (_server.host != self.lowestPingTimeServer.host || _server.port != self.lowestPingTimeServer.port)) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 117
              },
              {
                "startCol": 20,
                "endCol": 66
              },
              {},
              {
                "startCol": 70,
                "endCol": 116
              }
            ]
          },
          "190": {
            "partial": false,
            "source": "              self.lowestPingTimeServer = _server;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 50
              }
            ]
          },
          "191": {
            "partial": false,
            "source": "              self.lowestPingTime = pingTime;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 45
              },
              {}
            ]
          },
          "192": {
            "partial": false,
            "source": "              self._currentMongos = _server;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 44
              }
            ]
          },
          "193": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "194": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "195": {
            "partial": false,
            "source": "            // Number of servers left",
            "missing": [
              {}
            ]
          },
          "196": {
            "partial": false,
            "source": "            numberOfServersLeft = numberOfServersLeft - 1;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 58
              },
              {
                "startCol": 34,
                "endCol": 53
              }
            ]
          },
          "197": {
            "partial": false,
            "source": "            // All active mongos's pinged",
            "missing": [
              {}
            ]
          },
          "198": {
            "partial": false,
            "source": "            if(numberOfServersLeft == 0) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 34
              },
              {}
            ]
          },
          "199": {
            "partial": false,
            "source": "              // Perfom another ha",
            "missing": [
              {}
            ]
          },
          "200": {
            "partial": false,
            "source": "              self._replicasetTimeoutId = setTimeout(self.mongosCheckFunction, self.mongosStatusCheckInterval);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 111
              },
              {
                "startCol": 42,
                "endCol": 110
              }
            ]
          },
          "201": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "202": {
            "partial": false,
            "source": "          })",
            "missing": [
              {}
            ]
          },
          "203": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "204": {
            "partial": false,
            "source": "        // Execute the function",
            "missing": [
              {}
            ]
          },
          "205": {
            "partial": false,
            "source": "        executePing(self.servers[i]);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 37
              },
              {}
            ]
          },
          "206": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "207": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "208": {
            "partial": false,
            "source": "      self._replicasetTimeoutId = setTimeout(self.mongosCheckFunction, self.mongosStatusCheckInterval);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 103
              },
              {
                "startCol": 34,
                "endCol": 102
              }
            ]
          },
          "209": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "210": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "211": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "212": {
            "partial": false,
            "source": "  // Connect all the server instances",
            "missing": [
              {}
            ]
          },
          "213": {
            "partial": false,
            "source": "  for(var i = 0; i < this.servers.length; i++) {",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 40
              },
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "215": {
            "partial": false,
            "source": "    var server = this.servers[i];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "216": {
            "partial": false,
            "source": "    server.mongosInstance = this;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "218": {
            "partial": false,
            "source": "    server.on(\"close\", errorOrCloseHandler(server));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 23,
                "endCol": 50
              }
            ]
          },
          "219": {
            "partial": false,
            "source": "    server.on(\"error\", errorOrCloseHandler(server));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 23,
                "endCol": 50
              }
            ]
          },
          "221": {
            "partial": false,
            "source": "    server.connect(self.db, {returnIsMasterResults: true}, connectHandler(server));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 82
              },
              {
                "startCol": 59,
                "endCol": 81
              }
            ]
          },
          "230": {
            "partial": false,
            "source": "  return this.servers;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "238": {
            "partial": false,
            "source": "  var allConnections = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "240": {
            "partial": false,
            "source": "  for(var i = 0; i < this.servers.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "241": {
            "partial": false,
            "source": "    allConnections = allConnections.concat(this.servers[i].allRawConnections)",
            "missing": [
              {},
              {
                "startCol": 21,
                "endCol": 77
              }
            ]
          },
          "242": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "245": {
            "partial": false,
            "source": "  return allConnections;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "252": {
            "partial": false,
            "source": "  return this._serverState == \"connected\";",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 9,
                "endCol": 41
              }
            ]
          },
          "260": {
            "partial": false,
            "source": "  if(this._currentMongos == null && this.servers.length > 0) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 32
              },
              {
                "startCol": 36,
                "endCol": 59
              }
            ]
          },
          "261": {
            "partial": false,
            "source": "    return this.servers[0].checkoutWriter();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 44
              },
              {
                "startCol": 11,
                "endCol": 43
              }
            ]
          },
          "263": {
            "partial": false,
            "source": "  return this._currentMongos.checkoutWriter();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 9,
                "endCol": 45
              }
            ]
          },
          "271": {
            "partial": false,
            "source": "  if(typeof read == 'object' && read['_type'] == 'ReadPreference') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 16
              },
              {
                "startCol": 12,
                "endCol": 16
              },
              {
                "startCol": 32,
                "endCol": 65
              }
            ]
          },
          "273": {
            "partial": false,
            "source": "    if(!read.isValid()) throw new Error(\"Illegal readPreference mode specified, \" + read.mode);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 8,
                "endCol": 22
              },
              {
                "startCol": 24,
                "endCol": 95
              },
              {
                "startCol": 40,
                "endCol": 93
              }
            ]
          },
          "274": {
            "partial": false,
            "source": "  } else if(!ReadPreference.isValid(read)) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 41
              },
              {
                "startCol": 13,
                "endCol": 41
              }
            ]
          },
          "275": {
            "partial": false,
            "source": "    throw new Error(\"Illegal readPreference mode specified, \" + read);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 70
              },
              {
                "startCol": 20,
                "endCol": 68
              },
              {
                "startCol": 64,
                "endCol": 68
              }
            ]
          },
          "279": {
            "partial": false,
            "source": "  if(this._currentMongos == null && this.servers.length > 0) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 32
              },
              {
                "startCol": 36,
                "endCol": 59
              }
            ]
          },
          "280": {
            "partial": false,
            "source": "    return this.servers[0].checkoutReader();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 44
              },
              {
                "startCol": 11,
                "endCol": 43
              }
            ]
          },
          "282": {
            "partial": false,
            "source": "  return this._currentMongos.checkoutReader();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 9,
                "endCol": 45
              }
            ]
          },
          "289": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "291": {
            "partial": false,
            "source": "  this._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 37
              }
            ]
          },
          "293": {
            "partial": false,
            "source": "  var numberOfConnectionsToClose = self.servers.length;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              }
            ]
          },
          "295": {
            "partial": false,
            "source": "  if(self._replicasetTimeoutId != null) clearTimeout(self._replicasetTimeoutId);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 38
              },
              {
                "startCol": 40,
                "endCol": 79
              }
            ]
          },
          "297": {
            "partial": false,
            "source": "  for(var i = 0; i < self.servers.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "298": {
            "partial": false,
            "source": "    self.servers[i].close(function(err, result) {",
            "missing": [
              {}
            ]
          },
          "299": {
            "partial": false,
            "source": "      numberOfConnectionsToClose = numberOfConnectionsToClose - 1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 66
              },
              {},
              {
                "startCol": 35,
                "endCol": 61
              }
            ]
          },
          "300": {
            "partial": false,
            "source": "      // Callback if we have one defined",
            "missing": [
              {}
            ]
          },
          "301": {
            "partial": false,
            "source": "      if(numberOfConnectionsToClose == 0 && typeof callback == 'function') {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 35
              },
              {
                "startCol": 44,
                "endCol": 59
              },
              {},
              {
                "startCol": 51,
                "endCol": 59
              }
            ]
          },
          "302": {
            "partial": false,
            "source": "        callback(null);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 22
              }
            ]
          },
          "303": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "304": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "313": {
            "partial": false,
            "source": "  return this._used;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          }
        },
        "source": "var ReadPreference = require('./read_preference').ReadPreference;\n\n/**\n * Mongos constructor provides a connection to a mongos proxy including failover to additional servers\n *\n * Options\n *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))\n *  - **ha** {Boolean, default:true}, turn on high availability, attempts to reconnect to down proxies\n *  - **haInterval** {Number, default:2000}, time between each replicaset status check.\n *\n * @class Represents a Mongos connection with failover to backup proxies\n * @param {Array} list of mongos server objects\n * @param {Object} [options] additional options for the mongos connection\n */\nvar Mongos = function Mongos(servers, options) {\n  // Set up basic\n  if(!(this instanceof Mongos))\n    return new Mongos(servers, options);\n\n  // Throw error on wrong setup\n  if(servers == null || !Array.isArray(servers) || servers.length == 0)\n    throw new Error(\"At least one mongos proxy must be in the array\");\n\n  // Ensure we have at least an empty options object\n  this.options = options == null ? {} : options;\n  // Set default connection pool options\n  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};\n  // Enabled ha\n  this.haEnabled = this.options['ha'] == null ? true : this.options['ha'];\n  // How often are we checking for new servers in the replicaset\n  this.mongosStatusCheckInterval = this.options['haInterval'] == null ? 2000 : this.options['haInterval'];\n  // Save all the server connections\n  this.servers = servers;\n  // Servers we need to attempt reconnect with\n  this.downServers = [];\n  // Just contains the current lowest ping time and server\n  this.lowestPingTimeServer = null;\n  this.lowestPingTime = 0;\n\n  // Add options to servers\n  for(var i = 0; i < this.servers.length; i++) {\n    var server = this.servers[i];\n    // Default empty socket options object\n    var socketOptions = {host: server.host, port: server.port};\n    // If a socket option object exists clone it\n    if(this.socketOptions != null) {\n      var keys = Object.keys(this.socketOptions);\n      for(var k = 0; k < keys.length;k++) socketOptions[keys[i]] = this.socketOptions[keys[i]];\n    }\n    // Set socket options\n    server.socketOptions = socketOptions;\n  }\n}\n\n/**\n * @ignore\n */\nMongos.prototype.isMongos = function() {\n  return true;\n}\n\n/**\n * @ignore\n */\nMongos.prototype.connect = function(db, options, callback) {\n  if('function' === typeof options) callback = options, options = {};\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n  var self = this;\n\n  // Keep reference to parent\n  this.db = db;\n  // Set server state to connecting\n  this._serverState = 'connecting';\n  // Number of total servers that need to initialized (known servers)\n  this._numberOfServersLeftToInitialize = this.servers.length;\n  // Default to the first proxy server as the first one to use\n  this._currentMongos = this.servers[0];\n\n  // Connect handler\n  var connectHandler = function(_server) {\n    return function(err, result) {\n      self._numberOfServersLeftToInitialize = self._numberOfServersLeftToInitialize - 1;\n\n      if(self._numberOfServersLeftToInitialize == 0) {\n        // Start ha function if it exists\n        if(self.haEnabled) {\n          // Setup the ha process\n          self._replicasetTimeoutId = setTimeout(self.mongosCheckFunction, self.mongosStatusCheckInterval);\n        }\n\n        // Set the mongos to connected\n        self._serverState = \"connected\";\n        // Emit the open event\n        self.db.emit(\"open\", null, self.db);\n        // Callback\n        callback(null, self.db);\n      }\n    }\n  };\n\n  // Error handler\n  var errorOrCloseHandler = function(_server) {\n    return function(err, result) {\n      // Create current mongos comparision\n      var currentUrl = self._currentMongos.host + \":\" + self._currentMongos.port;\n      var serverUrl = this.host + \":\" + this.port;\n      // We need to check if the server that closed is the actual current proxy we are using, otherwise\n      // just ignore\n      if(currentUrl == serverUrl) {\n        // Remove the server from the list\n        if(self.servers.indexOf(_server) != -1) {\n          self.servers.splice(self.servers.indexOf(_server), 1);\n        }\n\n        // Pick the next one on the list if there is one\n        for(var i = 0; i < self.servers.length; i++) {\n          // Grab the server out of the array (making sure there is no servers in the list if none available)\n          var server = self.servers[i];\n          // Generate url for comparision\n          var serverUrl = server.host + \":\" + server.port;\n          // It's not the current one and connected set it as the current db\n          if(currentUrl != serverUrl && server.isConnected()) {\n            self._currentMongos = server;\n            break;\n          }\n        }\n      }\n\n      // Ensure we don't store the _server twice\n      if(self.downServers.indexOf(_server) == -1) {\n        // Add the server instances\n        self.downServers.push(_server);\n      }\n    }\n  }\n\n  // Mongo function\n  this.mongosCheckFunction = function() {\n    // If we have down servers let's attempt a reconnect\n    if(self.downServers.length > 0) {\n      var numberOfServersLeft = self.downServers.length;\n      // Attempt to reconnect\n      for(var i = 0; i < self.downServers.length; i++) {\n        var downServer = self.downServers.pop();\n        // Attemp to reconnect\n        downServer.connect(self.db, {returnIsMasterResults: true}, function(_server) {\n          // Return a function to check for the values\n          return function(err, result) {\n            // Adjust the number of servers left\n            numberOfServersLeft = numberOfServersLeft - 1;\n\n            if(err != null) {\n              self.downServers.push(_server);\n            } else {\n              // Add server event handlers\n              _server.on(\"close\", errorOrCloseHandler(_server));\n              _server.on(\"error\", errorOrCloseHandler(_server));\n              // Add to list of servers\n              self.servers.push(_server);\n            }\n\n            if(numberOfServersLeft <= 0) {\n              // Perfom another ha\n              self._replicasetTimeoutId = setTimeout(self.mongosCheckFunction, self.mongosStatusCheckInterval);\n            }\n          }\n        }(downServer));\n      }\n    } else if(self.servers.length > 0) {\n      var numberOfServersLeft = self.servers.length;\n      var _s = new Date().getTime()\n\n      // Else let's perform a ping command\n      for(var i = 0; i < self.servers.length; i++) {\n        var executePing = function(_server) {\n          // Get a read connection\n          var _connection = _server.checkoutReader();\n          // Execute ping command\n          self.db.command({ping:1}, {connection:_connection}, function(err, result) {\n            var pingTime = new Date().getTime() - _s;\n            // If no server set set the first one, otherwise check\n            // the lowest ping time and assign the server if it's got a lower ping time\n            if(self.lowestPingTimeServer == null) {\n              self.lowestPingTimeServer = _server;\n              self.lowestPingTime = pingTime;\n              self._currentMongos = _server;\n            } else if(self.lowestPingTime > pingTime\n                && (_server.host != self.lowestPingTimeServer.host || _server.port != self.lowestPingTimeServer.port)) {\n              self.lowestPingTimeServer = _server;\n              self.lowestPingTime = pingTime;\n              self._currentMongos = _server;\n            }\n\n            // Number of servers left\n            numberOfServersLeft = numberOfServersLeft - 1;\n            // All active mongos's pinged\n            if(numberOfServersLeft == 0) {\n              // Perfom another ha\n              self._replicasetTimeoutId = setTimeout(self.mongosCheckFunction, self.mongosStatusCheckInterval);\n            }\n          })\n        }\n        // Execute the function\n        executePing(self.servers[i]);\n      }\n    } else {\n      self._replicasetTimeoutId = setTimeout(self.mongosCheckFunction, self.mongosStatusCheckInterval);\n    }\n  }\n\n  // Connect all the server instances\n  for(var i = 0; i < this.servers.length; i++) {\n    // Get the connection\n    var server = this.servers[i];\n    server.mongosInstance = this;\n    // Add server event handlers\n    server.on(\"close\", errorOrCloseHandler(server));\n    server.on(\"error\", errorOrCloseHandler(server));\n    // Connect the instance\n    server.connect(self.db, {returnIsMasterResults: true}, connectHandler(server));\n  }\n}\n\n/**\n * @ignore\n * Just return the currently picked active connection\n */\nMongos.prototype.allServerInstances = function() {\n  return this.servers;\n}\n\n/**\n * @ignore\n */\nMongos.prototype.allRawConnections = function() {\n  // Neeed to build a complete list of all raw connections, start with master server\n  var allConnections = [];\n  // Add all connections\n  for(var i = 0; i < this.servers.length; i++) {\n    allConnections = allConnections.concat(this.servers[i].allRawConnections)\n  }\n\n  // Return all the conections\n  return allConnections;\n}\n\n/**\n * @ignore\n */\nMongos.prototype.isConnected = function() {\n  return this._serverState == \"connected\";\n}\n\n/**\n * @ignore\n */\nMongos.prototype.checkoutWriter = function() {\n  // No current mongo, just pick first server\n  if(this._currentMongos == null && this.servers.length > 0) {\n    return this.servers[0].checkoutWriter();\n  }\n  return this._currentMongos.checkoutWriter();\n}\n\n/**\n * @ignore\n */\nMongos.prototype.checkoutReader = function(read) {\n  // If we have a read preference object unpack it\n  if(typeof read == 'object' && read['_type'] == 'ReadPreference') {\n    // Validate if the object is using a valid mode\n    if(!read.isValid()) throw new Error(\"Illegal readPreference mode specified, \" + read.mode);\n  } else if(!ReadPreference.isValid(read)) {\n    throw new Error(\"Illegal readPreference mode specified, \" + read);\n  }\n\n  // No current mongo, just pick first server\n  if(this._currentMongos == null && this.servers.length > 0) {\n    return this.servers[0].checkoutReader();\n  }\n  return this._currentMongos.checkoutReader();\n}\n\n/**\n * @ignore\n */\nMongos.prototype.close = function(callback) {\n  var self = this;\n  // Set server status as disconnected\n  this._serverState = 'disconnected';\n  // Number of connections to close\n  var numberOfConnectionsToClose = self.servers.length;\n  // If we have a ha process running kill it\n  if(self._replicasetTimeoutId != null) clearTimeout(self._replicasetTimeoutId);\n  // Close all proxy connections\n  for(var i = 0; i < self.servers.length; i++) {\n    self.servers[i].close(function(err, result) {\n      numberOfConnectionsToClose = numberOfConnectionsToClose - 1;\n      // Callback if we have one defined\n      if(numberOfConnectionsToClose == 0 && typeof callback == 'function') {\n        callback(null);\n      }\n    });\n  }\n}\n\n/**\n * @ignore\n * Return the used state\n */\nMongos.prototype._isUsed = function() {\n  return this._used;\n}\n\nexports.Mongos = Mongos;",
        "blocks": {
          "total": 56,
          "seen": 0,
          "missing": 56,
          "percentage": 0
        }
      },
      "hash": "b528422c51dc20088ff7d2a964cec352"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/repl_set.js": {
      "stats": {
        "percentage": 0.5936936936936937,
        "lines": [
          {
            "lineno": 44
          },
          {
            "lineno": 47
          },
          {
            "lineno": 48
          },
          {
            "lineno": 51
          },
          {
            "lineno": 54
          },
          {
            "lineno": 55
          },
          {
            "lineno": 59
          },
          {
            "lineno": 61
          },
          {
            "lineno": 62
          },
          {
            "lineno": 63
          },
          {
            "lineno": 64
          },
          {
            "lineno": 67
          },
          {
            "lineno": 68
          },
          {
            "lineno": 69
          },
          {
            "lineno": 70
          },
          {
            "lineno": 73
          },
          {
            "lineno": 76
          },
          {
            "lineno": 77
          },
          {
            "lineno": 80
          },
          {
            "lineno": 83
          },
          {
            "lineno": 85
          },
          {
            "lineno": 87
          },
          {
            "lineno": 89
          },
          {
            "lineno": 91
          },
          {
            "lineno": 94
          },
          {
            "lineno": 97
          },
          {
            "lineno": 98
          },
          {
            "lineno": 99
          },
          {
            "lineno": 100
          },
          {
            "lineno": 101
          },
          {
            "lineno": 104
          },
          {
            "lineno": 106
          },
          {
            "lineno": 110
          },
          {
            "lineno": 111
          },
          {
            "lineno": 113
          },
          {
            "lineno": 115
          },
          {
            "lineno": 117
          },
          {
            "lineno": 118
          },
          {
            "lineno": 119
          },
          {
            "lineno": 121
          },
          {
            "lineno": 123
          },
          {
            "lineno": 127
          },
          {
            "lineno": 130
          },
          {
            "lineno": 131
          },
          {
            "lineno": 132
          },
          {
            "lineno": 133
          },
          {
            "lineno": 134
          },
          {
            "lineno": 137
          },
          {
            "lineno": 138
          },
          {
            "lineno": 139
          },
          {
            "lineno": 140
          },
          {
            "lineno": 141
          },
          {
            "lineno": 142
          },
          {
            "lineno": 144
          },
          {
            "lineno": 147
          },
          {
            "lineno": 148
          },
          {
            "lineno": 150
          },
          {
            "lineno": 155
          },
          {
            "lineno": 157
          },
          {
            "lineno": 158
          },
          {
            "lineno": 160
          },
          {
            "lineno": 161
          },
          {
            "lineno": 166
          },
          {
            "lineno": 169
          },
          {
            "lineno": 173
          },
          {
            "lineno": 175
          },
          {
            "lineno": 176
          },
          {
            "lineno": 178
          },
          {
            "lineno": 180
          },
          {
            "lineno": 183
          },
          {
            "lineno": 197
          },
          {
            "lineno": 199
          },
          {
            "lineno": 200
          },
          {
            "lineno": 201
          },
          {
            "lineno": 209
          },
          {
            "lineno": 216
          },
          {
            "lineno": 223
          },
          {
            "lineno": 230
          },
          {
            "lineno": 237
          },
          {
            "lineno": 249
          },
          {
            "lineno": 250
          },
          {
            "lineno": 251
          },
          {
            "lineno": 252
          },
          {
            "lineno": 253
          },
          {
            "lineno": 255
          },
          {
            "lineno": 263
          },
          {
            "lineno": 265
          },
          {
            "lineno": 268
          },
          {
            "lineno": 270
          },
          {
            "lineno": 271
          },
          {
            "lineno": 275
          },
          {
            "lineno": 277
          },
          {
            "lineno": 278
          },
          {
            "lineno": 282
          },
          {
            "lineno": 284
          },
          {
            "lineno": 285
          },
          {
            "lineno": 289
          },
          {
            "lineno": 296
          },
          {
            "lineno": 298
          },
          {
            "lineno": 300
          },
          {
            "lineno": 302
          },
          {
            "lineno": 310
          },
          {
            "lineno": 312
          },
          {
            "lineno": 314
          },
          {
            "lineno": 316
          },
          {
            "lineno": 319
          },
          {
            "lineno": 320
          },
          {
            "lineno": 322
          },
          {
            "lineno": 323
          },
          {
            "lineno": 324
          },
          {
            "lineno": 325
          },
          {
            "lineno": 329
          },
          {
            "lineno": 330
          },
          {
            "lineno": 331
          },
          {
            "lineno": 335
          },
          {
            "lineno": 337
          },
          {
            "lineno": 338
          },
          {
            "lineno": 339
          },
          {
            "lineno": 343
          },
          {
            "lineno": 346
          },
          {
            "lineno": 349
          },
          {
            "lineno": 350
          },
          {
            "lineno": 351
          },
          {
            "lineno": 353
          },
          {
            "lineno": 354
          },
          {
            "lineno": 356
          },
          {
            "lineno": 358
          },
          {
            "lineno": 359
          },
          {
            "lineno": 360
          },
          {
            "lineno": 361
          },
          {
            "lineno": 363
          },
          {
            "lineno": 364
          },
          {
            "lineno": 369
          },
          {
            "lineno": 371
          },
          {
            "lineno": 372
          },
          {
            "lineno": 374
          },
          {
            "lineno": 377
          },
          {
            "lineno": 379
          },
          {
            "lineno": 380
          },
          {
            "lineno": 382
          },
          {
            "lineno": 384
          },
          {
            "lineno": 385
          },
          {
            "lineno": 387
          },
          {
            "lineno": 389
          },
          {
            "lineno": 391
          },
          {
            "lineno": 392
          },
          {
            "lineno": 393
          },
          {
            "lineno": 395
          },
          {
            "lineno": 396
          },
          {
            "lineno": 401
          },
          {
            "lineno": 405
          },
          {
            "lineno": 408
          },
          {
            "lineno": 415
          },
          {
            "lineno": 417
          },
          {
            "lineno": 419
          },
          {
            "lineno": 421
          },
          {
            "lineno": 422
          },
          {
            "lineno": 423
          },
          {
            "lineno": 424
          },
          {
            "lineno": 425
          },
          {
            "lineno": 427
          },
          {
            "lineno": 428
          },
          {
            "lineno": 429
          },
          {
            "lineno": 430
          },
          {
            "lineno": 434
          },
          {
            "lineno": 436
          },
          {
            "lineno": 437
          },
          {
            "lineno": 444
          },
          {
            "lineno": 446
          },
          {
            "lineno": 448
          },
          {
            "lineno": 450
          },
          {
            "lineno": 452
          },
          {
            "lineno": 453
          },
          {
            "lineno": 454
          },
          {
            "lineno": 455
          },
          {
            "lineno": 456
          },
          {
            "lineno": 457
          },
          {
            "lineno": 458
          },
          {
            "lineno": 459
          },
          {
            "lineno": 460
          },
          {
            "lineno": 461
          },
          {
            "lineno": 463
          },
          {
            "lineno": 464
          },
          {
            "lineno": 467
          },
          {
            "lineno": 468
          },
          {
            "lineno": 469
          },
          {
            "lineno": 471
          },
          {
            "lineno": 473
          },
          {
            "lineno": 474
          },
          {
            "lineno": 478
          },
          {
            "lineno": 479
          },
          {
            "lineno": 480
          },
          {
            "lineno": 482
          },
          {
            "lineno": 483
          },
          {
            "lineno": 486
          },
          {
            "lineno": 487
          },
          {
            "lineno": 488
          },
          {
            "lineno": 489
          },
          {
            "lineno": 490
          },
          {
            "lineno": 491
          },
          {
            "lineno": 492
          },
          {
            "lineno": 493
          },
          {
            "lineno": 494
          },
          {
            "lineno": 495
          },
          {
            "lineno": 499
          },
          {
            "lineno": 501
          },
          {
            "lineno": 503
          },
          {
            "lineno": 504
          },
          {
            "lineno": 505
          },
          {
            "lineno": 508
          },
          {
            "lineno": 509
          },
          {
            "lineno": 511
          },
          {
            "lineno": 512
          },
          {
            "lineno": 515
          },
          {
            "lineno": 517
          },
          {
            "lineno": 518
          },
          {
            "lineno": 519
          },
          {
            "lineno": 520
          },
          {
            "lineno": 521
          },
          {
            "lineno": 525
          },
          {
            "lineno": 526
          },
          {
            "lineno": 527
          },
          {
            "lineno": 529
          },
          {
            "lineno": 533
          },
          {
            "lineno": 534
          },
          {
            "lineno": 536
          },
          {
            "lineno": 540
          },
          {
            "lineno": 541
          },
          {
            "lineno": 543
          },
          {
            "lineno": 545
          },
          {
            "lineno": 547
          },
          {
            "lineno": 548
          },
          {
            "lineno": 549
          },
          {
            "lineno": 552
          },
          {
            "lineno": 554
          },
          {
            "lineno": 556
          },
          {
            "lineno": 557
          },
          {
            "lineno": 558
          },
          {
            "lineno": 559
          },
          {
            "lineno": 560
          },
          {
            "lineno": 563
          },
          {
            "lineno": 564
          },
          {
            "lineno": 566
          },
          {
            "lineno": 568
          },
          {
            "lineno": 570
          },
          {
            "lineno": 572
          },
          {
            "lineno": 573
          },
          {
            "lineno": 575
          },
          {
            "lineno": 577
          },
          {
            "lineno": 579
          },
          {
            "lineno": 582
          },
          {
            "lineno": 583
          },
          {
            "lineno": 593
          },
          {
            "lineno": 594
          },
          {
            "lineno": 595
          },
          {
            "lineno": 596
          },
          {
            "lineno": 599
          },
          {
            "lineno": 601
          },
          {
            "lineno": 602
          },
          {
            "lineno": 603
          },
          {
            "lineno": 604
          },
          {
            "lineno": 607
          },
          {
            "lineno": 610
          },
          {
            "lineno": 611
          },
          {
            "lineno": 614
          },
          {
            "lineno": 616
          },
          {
            "lineno": 618
          },
          {
            "lineno": 619
          },
          {
            "lineno": 621
          },
          {
            "lineno": 622
          },
          {
            "lineno": 623
          },
          {
            "lineno": 624
          },
          {
            "lineno": 628
          },
          {
            "lineno": 629
          },
          {
            "lineno": 631
          },
          {
            "lineno": 633
          },
          {
            "lineno": 634
          },
          {
            "lineno": 635
          },
          {
            "lineno": 636
          },
          {
            "lineno": 641
          },
          {
            "lineno": 644
          },
          {
            "lineno": 646
          },
          {
            "lineno": 647
          },
          {
            "lineno": 648
          },
          {
            "lineno": 651
          },
          {
            "lineno": 653
          },
          {
            "lineno": 656
          },
          {
            "lineno": 657
          },
          {
            "lineno": 658
          },
          {
            "lineno": 660
          },
          {
            "lineno": 661
          },
          {
            "lineno": 662
          },
          {
            "lineno": 663
          },
          {
            "lineno": 664
          },
          {
            "lineno": 666
          },
          {
            "lineno": 667
          },
          {
            "lineno": 672
          },
          {
            "lineno": 673
          },
          {
            "lineno": 674
          },
          {
            "lineno": 675
          },
          {
            "lineno": 678
          },
          {
            "lineno": 679
          },
          {
            "lineno": 687
          },
          {
            "lineno": 689
          },
          {
            "lineno": 696
          },
          {
            "lineno": 697
          },
          {
            "lineno": 700
          },
          {
            "lineno": 701
          },
          {
            "lineno": 702
          },
          {
            "lineno": 706
          },
          {
            "lineno": 707
          },
          {
            "lineno": 710
          },
          {
            "lineno": 711
          },
          {
            "lineno": 712
          },
          {
            "lineno": 716
          },
          {
            "lineno": 724
          },
          {
            "lineno": 726
          },
          {
            "lineno": 728
          },
          {
            "lineno": 730
          },
          {
            "lineno": 732
          },
          {
            "lineno": 733
          },
          {
            "lineno": 735
          },
          {
            "lineno": 736
          },
          {
            "lineno": 738
          },
          {
            "lineno": 739
          },
          {
            "lineno": 741
          },
          {
            "lineno": 742
          },
          {
            "lineno": 743
          },
          {
            "lineno": 749
          },
          {
            "lineno": 750
          },
          {
            "lineno": 756
          },
          {
            "lineno": 757
          },
          {
            "lineno": 759
          },
          {
            "lineno": 764
          },
          {
            "lineno": 771
          },
          {
            "lineno": 773
          },
          {
            "lineno": 775
          },
          {
            "lineno": 777
          },
          {
            "lineno": 778
          },
          {
            "lineno": 779
          },
          {
            "lineno": 780
          },
          {
            "lineno": 784
          },
          {
            "lineno": 785
          },
          {
            "lineno": 788
          },
          {
            "lineno": 790
          },
          {
            "lineno": 791
          },
          {
            "lineno": 795
          },
          {
            "lineno": 796
          },
          {
            "lineno": 800
          },
          {
            "lineno": 805
          },
          {
            "lineno": 807
          },
          {
            "lineno": 809
          },
          {
            "lineno": 811
          },
          {
            "lineno": 812
          },
          {
            "lineno": 816
          },
          {
            "lineno": 817
          },
          {
            "lineno": 818
          },
          {
            "lineno": 820
          },
          {
            "lineno": 822
          },
          {
            "lineno": 824
          },
          {
            "lineno": 826
          },
          {
            "lineno": 828
          },
          {
            "lineno": 830
          },
          {
            "lineno": 832
          },
          {
            "lineno": 834
          },
          {
            "lineno": 835
          },
          {
            "lineno": 839
          },
          {
            "lineno": 840
          },
          {
            "lineno": 841
          },
          {
            "lineno": 843
          },
          {
            "lineno": 845
          },
          {
            "lineno": 848
          },
          {
            "lineno": 849
          },
          {
            "lineno": 851
          },
          {
            "lineno": 852
          },
          {
            "lineno": 853
          },
          {
            "lineno": 855
          },
          {
            "lineno": 857
          },
          {
            "lineno": 859
          },
          {
            "lineno": 861
          },
          {
            "lineno": 863
          },
          {
            "lineno": 865
          },
          {
            "lineno": 866
          },
          {
            "lineno": 869
          },
          {
            "lineno": 870
          },
          {
            "lineno": 872
          },
          {
            "lineno": 873
          },
          {
            "lineno": 874
          },
          {
            "lineno": 875
          },
          {
            "lineno": 876
          },
          {
            "lineno": 877
          },
          {
            "lineno": 878
          },
          {
            "lineno": 879
          },
          {
            "lineno": 881
          },
          {
            "lineno": 884
          },
          {
            "lineno": 888
          },
          {
            "lineno": 896
          },
          {
            "lineno": 897
          },
          {
            "lineno": 899
          },
          {
            "lineno": 901
          },
          {
            "lineno": 904
          },
          {
            "lineno": 906
          },
          {
            "lineno": 908
          },
          {
            "lineno": 910
          },
          {
            "lineno": 912
          },
          {
            "lineno": 917
          },
          {
            "lineno": 925
          },
          {
            "lineno": 928
          },
          {
            "lineno": 929
          },
          {
            "lineno": 931
          },
          {
            "lineno": 932
          },
          {
            "lineno": 934
          },
          {
            "lineno": 935
          },
          {
            "lineno": 936
          },
          {
            "lineno": 945
          },
          {
            "lineno": 952
          },
          {
            "lineno": 954
          },
          {
            "lineno": 956
          },
          {
            "lineno": 957
          },
          {
            "lineno": 959
          },
          {
            "lineno": 960
          },
          {
            "lineno": 965
          },
          {
            "lineno": 968
          },
          {
            "lineno": 977
          },
          {
            "lineno": 987
          },
          {
            "lineno": 988
          },
          {
            "lineno": 989
          },
          {
            "lineno": 990
          },
          {
            "lineno": 992
          },
          {
            "lineno": 1003
          },
          {
            "lineno": 1004
          },
          {
            "lineno": 1014
          },
          {
            "lineno": 1024
          },
          {
            "lineno": 1034
          },
          {
            "lineno": 1044
          },
          {
            "lineno": 1045
          },
          {
            "lineno": 1047
          },
          {
            "lineno": 1048
          },
          {
            "lineno": 1050
          },
          {
            "lineno": 1060
          },
          {
            "lineno": 1070
          },
          {
            "lineno": 1071
          },
          {
            "lineno": 1073
          },
          {
            "lineno": 1074
          },
          {
            "lineno": 1076
          },
          {
            "lineno": 1086
          },
          {
            "lineno": 1087
          },
          {
            "lineno": 1089
          },
          {
            "lineno": 1090
          },
          {
            "lineno": 1092
          },
          {
            "lineno": 1102
          }
        ],
        "missing": 451,
        "seen": 659,
        "seen_lines": [
          {
            "s": 1,
            "e": 11
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 14,
            "e": 14
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 18,
            "e": 18
          },
          {
            "s": 19,
            "e": 19
          },
          {
            "s": 20,
            "e": 20
          },
          {
            "s": 21,
            "e": 21
          },
          {
            "s": 22,
            "e": 22
          },
          {
            "s": 43,
            "e": 184
          },
          {
            "s": 189,
            "e": 189
          },
          {
            "s": 189,
            "e": 189
          },
          {
            "s": 195,
            "e": 208
          },
          {
            "s": 208,
            "e": 215
          },
          {
            "s": 215,
            "e": 222
          },
          {
            "s": 222,
            "e": 229
          },
          {
            "s": 229,
            "e": 236
          },
          {
            "s": 236,
            "e": 243
          },
          {
            "s": 243,
            "e": 243
          },
          {
            "s": 248,
            "e": 262
          },
          {
            "s": 262,
            "e": 295
          },
          {
            "s": 295,
            "e": 309
          },
          {
            "s": 309,
            "e": 414
          },
          {
            "s": 414,
            "e": 443
          },
          {
            "s": 443,
            "e": 592
          },
          {
            "s": 592,
            "e": 685
          },
          {
            "s": 685,
            "e": 695
          },
          {
            "s": 695,
            "e": 722
          },
          {
            "s": 722,
            "e": 770
          },
          {
            "s": 770,
            "e": 894
          },
          {
            "s": 894,
            "e": 923
          },
          {
            "s": 923,
            "e": 944
          },
          {
            "s": 944,
            "e": 951
          },
          {
            "s": 951,
            "e": 975
          },
          {
            "s": 975,
            "e": 979
          },
          {
            "s": 975,
            "e": 979
          },
          {
            "s": 985,
            "e": 995
          },
          {
            "s": 985,
            "e": 995
          },
          {
            "s": 1001,
            "e": 1012
          },
          {
            "s": 1001,
            "e": 1006
          },
          {
            "s": 1012,
            "e": 1016
          },
          {
            "s": 1012,
            "e": 1016
          },
          {
            "s": 1022,
            "e": 1026
          },
          {
            "s": 1022,
            "e": 1026
          },
          {
            "s": 1032,
            "e": 1036
          },
          {
            "s": 1032,
            "e": 1036
          },
          {
            "s": 1042,
            "e": 1052
          },
          {
            "s": 1042,
            "e": 1052
          },
          {
            "s": 1058,
            "e": 1062
          },
          {
            "s": 1058,
            "e": 1062
          },
          {
            "s": 1068,
            "e": 1078
          },
          {
            "s": 1068,
            "e": 1078
          },
          {
            "s": 1084,
            "e": 1094
          },
          {
            "s": 1084,
            "e": 1094
          },
          {
            "s": 1100,
            "e": 1104
          },
          {
            "s": 1100,
            "e": 1104
          },
          {
            "s": 1110,
            "e": 1110
          }
        ],
        "total": 1110,
        "coverage": {
          "44": {
            "partial": false,
            "source": "  this.count = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 17
              }
            ]
          },
          "47": {
            "partial": false,
            "source": "  if(!(this instanceof ReplSet))",
            "missing": [
              {
                "startCol": 5,
                "endCol": 31
              },
              {
                "startCol": 6,
                "endCol": 31
              },
              {
                "startCol": 23,
                "endCol": 30
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "    return new ReplSet(servers, options);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "51": {
            "partial": false,
            "source": "  EventEmitter.call(this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "54": {
            "partial": false,
            "source": "  for(var i = 0; i < servers.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 37,
                "endCol": 40
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "    if(!(servers[i] instanceof Server)) throw new Error(\"list of servers must be of type Server\");",
            "missing": [
              {
                "startCol": 7,
                "endCol": 38
              },
              {
                "startCol": 8,
                "endCol": 38
              },
              {
                "startCol": 31,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 98
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "61": {
            "partial": false,
            "source": "  this.options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              },
              {
                "startCol": 17,
                "endCol": 24
              },
              {
                "startCol": 35,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 47
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "  this.reconnectWait = this.options[\"reconnectWait\"] != null ? this.options[\"reconnectWait\"] : 1000;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 100
              },
              {
                "startCol": 23,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 92
              },
              {
                "startCol": 95,
                "endCol": 99
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "  this.retries = this.options[\"retries\"] != null ? this.options[\"retries\"] : 30;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 80
              },
              {
                "startCol": 17,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 74
              },
              {
                "startCol": 77,
                "endCol": 79
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "  this.replicaSet = this.options[\"rs_name\"];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              }
            ]
          },
          "67": {
            "partial": false,
            "source": "  this.readSecondary = this.options[\"read_secondary\"];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              }
            ]
          },
          "68": {
            "partial": false,
            "source": "  this.slaveOk = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "69": {
            "partial": false,
            "source": "  this.closedConnectionCount = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "  this._used = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 21
              }
            ]
          },
          "73": {
            "partial": false,
            "source": "  this.connectArbiter = this.options.connectArbiter == null ? false : this.options.connectArbiter;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 98
              },
              {
                "startCol": 24,
                "endCol": 59
              },
              {
                "startCol": 62,
                "endCol": 67
              },
              {
                "startCol": 70,
                "endCol": 97
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "  this.poolSize = this.options.poolSize == null ? 5 : this.options.poolSize;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 18,
                "endCol": 47
              },
              {
                "startCol": 50,
                "endCol": 51
              },
              {
                "startCol": 54,
                "endCol": 75
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "  this._currentServerChoice = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              }
            ]
          },
          "80": {
            "partial": false,
            "source": "  this.ssl = this.options.ssl == null ? false : this.options.ssl;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 65
              },
              {
                "startCol": 13,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 64
              }
            ]
          },
          "83": {
            "partial": false,
            "source": "  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[]};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 97
              }
            ]
          },
          "85": {
            "partial": false,
            "source": "  this._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 37
              }
            ]
          },
          "87": {
            "partial": false,
            "source": "  this._readPreference = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 30
              }
            ]
          },
          "89": {
            "partial": false,
            "source": "  this._numberOfServersLeftToInitialize = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              }
            ]
          },
          "91": {
            "partial": false,
            "source": "  this.recordQueryStats = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "  var readPreference = this.options['readPreference'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "  if(readPreference != null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              }
            ]
          },
          "98": {
            "partial": false,
            "source": "    if(readPreference != ReadPreference.PRIMARY && readPreference != ReadPreference.PRIMARY_PREFERRED",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 101
              },
              {
                "startCol": 51,
                "endCol": 101
              }
            ]
          },
          "99": {
            "partial": false,
            "source": "      && readPreference != ReadPreference.SECONDARY && readPreference != ReadPreference.SECONDARY_PREFERRED",
            "missing": [
              {
                "startCol": 9,
                "endCol": 23
              },
              {},
              {
                "startCol": 55,
                "endCol": 69
              }
            ]
          },
          "100": {
            "partial": false,
            "source": "      && readPreference != ReadPreference.NEAREST && typeof readPreference != 'object' && readPreference['_type'] != 'ReadPreference') {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 23
              },
              {
                "startCol": 53,
                "endCol": 74
              },
              {
                "startCol": 60,
                "endCol": 74
              },
              {
                "startCol": 90,
                "endCol": 133
              }
            ]
          },
          "101": {
            "partial": false,
            "source": "      throw new Error(\"Illegal readPreference mode specified, \" + readPreference);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 82
              },
              {
                "startCol": 22,
                "endCol": 80
              },
              {
                "startCol": 66,
                "endCol": 80
              }
            ]
          },
          "104": {
            "partial": false,
            "source": "    this._readPreference = readPreference;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "106": {
            "partial": false,
            "source": "    this._readPreference = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 32
              }
            ]
          },
          "110": {
            "partial": false,
            "source": "  this.secondaryAcceptableLatencyMS = this.options['secondaryAcceptableLatencyMS'] == null ? 15 : this.options['secondaryAcceptableLatencyMS'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 143
              },
              {
                "startCol": 38,
                "endCol": 90
              },
              {
                "startCol": 93,
                "endCol": 95
              },
              {
                "startCol": 98,
                "endCol": 142
              }
            ]
          },
          "111": {
            "partial": false,
            "source": "  this.strategy = this.options['strategy'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              }
            ]
          },
          "113": {
            "partial": false,
            "source": "  if(this.strategy != null && (this.strategy != 'ping' && this.strategy != 'statistical')) throw new Error(\"Only ping or statistical strategies allowed\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 26
              },
              {
                "startCol": 30,
                "endCol": 89
              },
              {
                "startCol": 31,
                "endCol": 54
              },
              {
                "startCol": 58,
                "endCol": 88
              },
              {
                "startCol": 91,
                "endCol": 154
              }
            ]
          },
          "115": {
            "partial": false,
            "source": "  if(this.strategy == 'ping') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              }
            ]
          },
          "117": {
            "partial": false,
            "source": "    this.strategyInstance = new PingStrategy(this, this.secondaryAcceptableLatencyMS);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 86
              }
            ]
          },
          "118": {
            "partial": false,
            "source": "    this.strategyInstance.start();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "119": {
            "partial": false,
            "source": "  } else if(this.strategy == 'statistical') {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 42
              }
            ]
          },
          "121": {
            "partial": false,
            "source": "    this.strategyInstance = new StatisticsStrategy(this);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 57
              }
            ]
          },
          "123": {
            "partial": false,
            "source": "    this.enableRecordQueryStats(true);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 37
              }
            ]
          },
          "127": {
            "partial": false,
            "source": "  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 92
              },
              {
                "startCol": 23,
                "endCol": 57
              },
              {
                "startCol": 60,
                "endCol": 86
              },
              {
                "startCol": 89,
                "endCol": 91
              }
            ]
          },
          "130": {
            "partial": false,
            "source": "  this.logger = this.options.logger != null",
            "missing": [
              {
                "startCol": 16,
                "endCol": 43
              },
              {}
            ]
          },
          "131": {
            "partial": false,
            "source": "    && (typeof this.options.logger.debug == 'function')",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 8,
                "endCol": 40
              }
            ]
          },
          "132": {
            "partial": false,
            "source": "    && (typeof this.options.logger.error == 'function')",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 40
              },
              {
                "startCol": 7,
                "endCol": 55
              }
            ]
          },
          "133": {
            "partial": false,
            "source": "    && (typeof this.options.logger.debug == 'function')",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 8,
                "endCol": 40
              }
            ]
          },
          "134": {
            "partial": false,
            "source": "      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};",
            "missing": [
              {
                "startCol": 8,
                "endCol": 27
              },
              {
                "startCol": 30,
                "endCol": 136
              },
              {}
            ]
          },
          "137": {
            "partial": false,
            "source": "  if(!Array.isArray(servers) || servers.length == 0) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              },
              {
                "startCol": 6,
                "endCol": 28
              },
              {
                "startCol": 32,
                "endCol": 51
              }
            ]
          },
          "138": {
            "partial": false,
            "source": "    throw Error(\"The parameter must be an array of servers and contain at least one server\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 93
              },
              {
                "startCol": 10,
                "endCol": 92
              }
            ]
          },
          "139": {
            "partial": false,
            "source": "  } else if(Array.isArray(servers) || servers.length > 0) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 34
              },
              {
                "startCol": 38,
                "endCol": 56
              }
            ]
          },
          "140": {
            "partial": false,
            "source": "    var count = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 18
              }
            ]
          },
          "141": {
            "partial": false,
            "source": "    servers.forEach(function(server) {",
            "missing": [
              {}
            ]
          },
          "142": {
            "partial": false,
            "source": "      if(server instanceof Server) count = count + 1;",
            "missing": [
              {
                "startCol": 9,
                "endCol": 33
              },
              {},
              {
                "startCol": 27,
                "endCol": 33
              },
              {
                "startCol": 35,
                "endCol": 53
              },
              {
                "startCol": 43,
                "endCol": 52
              }
            ]
          },
          "143": {
            "partial": false,
            "source": "      // Ensure no server has reconnect on",
            "missing": [
              {}
            ]
          },
          "144": {
            "partial": false,
            "source": "      server.options.auto_reconnect = false;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 44
              },
              {}
            ]
          },
          "145": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "147": {
            "partial": false,
            "source": "    if(count < servers.length) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 12
              }
            ]
          },
          "148": {
            "partial": false,
            "source": "      throw Error(\"All server entries must be of type Server\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 63
              },
              {
                "startCol": 12,
                "endCol": 62
              }
            ]
          },
          "150": {
            "partial": false,
            "source": "      this.servers = servers;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 29
              }
            ]
          },
          "155": {
            "partial": false,
            "source": "  var uniqueServers = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "157": {
            "partial": false,
            "source": "  for(var i = 0; i < this.servers.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "158": {
            "partial": false,
            "source": "    var server = this.servers[i];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "160": {
            "partial": false,
            "source": "    if(uniqueServers[server.host + \":\" + server.port] == null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 61
              },
              {
                "startCol": 21,
                "endCol": 38
              }
            ]
          },
          "161": {
            "partial": false,
            "source": "      uniqueServers[server.host + \":\" + server.port] = server;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 62
              },
              {
                "startCol": 20,
                "endCol": 37
              }
            ]
          },
          "166": {
            "partial": false,
            "source": "  this.servers = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "169": {
            "partial": false,
            "source": "    this.servers.push(uniqueServers[key]);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "173": {
            "partial": false,
            "source": "  this.haEnabled = this.options['ha'] == null ? true : this.options['ha'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              },
              {
                "startCol": 19,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 52
              },
              {
                "startCol": 55,
                "endCol": 73
              }
            ]
          },
          "175": {
            "partial": false,
            "source": "  this.replicasetStatusCheckInterval = this.options['haInterval'] == null ? 1000 : this.options['haInterval'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 110
              },
              {
                "startCol": 39,
                "endCol": 73
              },
              {
                "startCol": 76,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 109
              }
            ]
          },
          "176": {
            "partial": false,
            "source": "  this._replicasetTimeoutId = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              }
            ]
          },
          "178": {
            "partial": false,
            "source": "  this._connectTimeoutMS = 1000;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              }
            ]
          },
          "180": {
            "partial": false,
            "source": "  this.pingCandidateServers = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              }
            ]
          },
          "183": {
            "partial": false,
            "source": "  this.lastReplicaSetTime = new Date().getTime();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 49
              },
              {
                "startCol": 28,
                "endCol": 48
              }
            ]
          },
          "197": {
            "partial": false,
            "source": "  this._readPreference = preference;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 36
              }
            ]
          },
          "199": {
            "partial": false,
            "source": "  if((this._readPreference == ReadPreference.SECONDARY_PREFERRED || this._readPreference == ReadPreference.SECONDARY)",
            "missing": [
              {
                "startCol": 6,
                "endCol": 64
              },
              {
                "startCol": 68,
                "endCol": 116
              },
              {},
              {
                "startCol": 5,
                "endCol": 117
              }
            ]
          },
          "200": {
            "partial": false,
            "source": "    || (this._readPreference != null && typeof this._readPreference == 'object')) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 36
              },
              {
                "startCol": 40,
                "endCol": 79
              },
              {},
              {
                "startCol": 7,
                "endCol": 80
              }
            ]
          },
          "201": {
            "partial": false,
            "source": "    this.slaveOk = true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "209": {
            "partial": false,
            "source": "  return this._used;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "216": {
            "partial": false,
            "source": "  return false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "223": {
            "partial": false,
            "source": "  return this.primary != null && this._state.master != null && this._state.master.isConnected();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 9,
                "endCol": 29
              },
              {
                "startCol": 33,
                "endCol": 59
              },
              {
                "startCol": 63,
                "endCol": 95
              }
            ]
          },
          "230": {
            "partial": false,
            "source": "  return false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "237": {
            "partial": false,
            "source": "  return this.readSecondary && Object.keys(this._state.secondaries).length > 0 ? false : true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 94
              },
              {
                "startCol": 9,
                "endCol": 78
              },
              {
                "startCol": 31,
                "endCol": 78
              },
              {
                "startCol": 42,
                "endCol": 67
              },
              {
                "startCol": 81,
                "endCol": 86
              },
              {
                "startCol": 89,
                "endCol": 93
              }
            ]
          },
          "249": {
            "partial": false,
            "source": "  if(!this.haEnabled) return false;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 20
              },
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "250": {
            "partial": false,
            "source": "  var currentTime = new Date().getTime();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 41
              },
              {
                "startCol": 20,
                "endCol": 40
              }
            ]
          },
          "251": {
            "partial": false,
            "source": "  if((currentTime - this.lastReplicaSetTime) >= this.replicasetStatusCheckInterval) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 44
              },
              {
                "startCol": 6,
                "endCol": 17
              }
            ]
          },
          "252": {
            "partial": false,
            "source": "    this.lastReplicaSetTime = currentTime;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "253": {
            "partial": false,
            "source": "    return true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "255": {
            "partial": false,
            "source": "    return false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "263": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "265": {
            "partial": false,
            "source": "  var allServers = self._state.master != null ? [self._state.master] : [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              },
              {
                "startCol": 19,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 68
              },
              {
                "startCol": 71,
                "endCol": 73
              }
            ]
          },
          "268": {
            "partial": false,
            "source": "  var keys = Object.keys(self._state.secondaries);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              },
              {
                "startCol": 13,
                "endCol": 49
              }
            ]
          },
          "270": {
            "partial": false,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "271": {
            "partial": false,
            "source": "    allServers.push(self._state.secondaries[keys[i]]);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 53
              }
            ]
          },
          "275": {
            "partial": false,
            "source": "  var keys = Object.keys(self._state.arbiters);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 47
              },
              {
                "startCol": 13,
                "endCol": 46
              }
            ]
          },
          "277": {
            "partial": false,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "278": {
            "partial": false,
            "source": "    allServers.push(self._state.arbiters[keys[i]]);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              }
            ]
          },
          "282": {
            "partial": false,
            "source": "  var keys = Object.keys(self._state.passives);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 47
              },
              {
                "startCol": 13,
                "endCol": 46
              }
            ]
          },
          "284": {
            "partial": false,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "285": {
            "partial": false,
            "source": "    allServers.push(self._state.passives[keys[i]]);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              }
            ]
          },
          "289": {
            "partial": false,
            "source": "  return allServers;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "296": {
            "partial": false,
            "source": "  var keys = Object.keys(dbInstance._callBackStore._notReplied);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 13,
                "endCol": 63
              }
            ]
          },
          "298": {
            "partial": false,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "300": {
            "partial": false,
            "source": "    delete dbInstance._callBackStore._notReplied[keys[i]];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 57
              }
            ]
          },
          "302": {
            "partial": false,
            "source": "    dbInstance._callBackStore.emit(keys[i], error);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              }
            ]
          },
          "310": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "312": {
            "partial": false,
            "source": "  var members = result['documents'][0]['members'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              }
            ]
          },
          "314": {
            "partial": false,
            "source": "  var members = Array.isArray(result['documents'][0]['members']) ? result['documents'][0]['members'] : [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 106
              },
              {
                "startCol": 16,
                "endCol": 64
              },
              {
                "startCol": 67,
                "endCol": 100
              },
              {
                "startCol": 103,
                "endCol": 105
              }
            ]
          },
          "316": {
            "partial": false,
            "source": "  var serversToConnectList = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              }
            ]
          },
          "319": {
            "partial": false,
            "source": "  for(var i = 0, jlen = members.length; i < jlen; i++) {",
            "missing": [
              {
                "startCol": 40,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 48
              },
              {
                "startCol": 50,
                "endCol": 53
              }
            ]
          },
          "320": {
            "partial": false,
            "source": "    var member = members[i];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 28
              }
            ]
          },
          "322": {
            "partial": false,
            "source": "    if(member['health'] != 0",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 28
              }
            ]
          },
          "323": {
            "partial": false,
            "source": "      && null == self._state['addresses'][member['name']]",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 57
              }
            ]
          },
          "324": {
            "partial": false,
            "source": "      && null == serversToConnectList[member['name']]) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 53
              }
            ]
          },
          "325": {
            "partial": false,
            "source": "      if (member['stateStr'] == 'ARBITER' && self.connectArbiter != true) {",
            "missing": [
              {
                "startCol": 10,
                "endCol": 41
              },
              {
                "startCol": 45,
                "endCol": 72
              }
            ]
          },
          "329": {
            "partial": false,
            "source": "      var parts = member.name.split(/:/);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 41
              },
              {
                "startCol": 18,
                "endCol": 40
              }
            ]
          },
          "330": {
            "partial": false,
            "source": "      if(parts.length == 1) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 26
              }
            ]
          },
          "331": {
            "partial": false,
            "source": "        parts = [parts[0], Connection.DEFAULT_PORT];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 52
              }
            ]
          },
          "335": {
            "partial": false,
            "source": "      var socketOptions = {host:parts[0], port:parseInt(parts[1], 10)};",
            "missing": [
              {
                "startCol": 6,
                "endCol": 71
              },
              {
                "startCol": 47,
                "endCol": 69
              }
            ]
          },
          "337": {
            "partial": false,
            "source": "      if(self.socketOptions != null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 35
              }
            ]
          },
          "338": {
            "partial": false,
            "source": "        var keys = Object.keys(self.socketOptions);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 51
              },
              {
                "startCol": 19,
                "endCol": 50
              }
            ]
          },
          "339": {
            "partial": false,
            "source": "        for(var k = 0; k < keys.length;k++) socketOptions[keys[i]] = self.socketOptions[keys[i]];",
            "missing": [
              {
                "startCol": 23,
                "endCol": 24
              },
              {
                "startCol": 39,
                "endCol": 42
              },
              {
                "startCol": 44,
                "endCol": 97
              }
            ]
          },
          "343": {
            "partial": false,
            "source": "      var newServer = new Server(parts[0], parseInt(parts[1], 10), {auto_reconnect:false, 'socketOptions':socketOptions",
            "missing": [
              {},
              {
                "startCol": 43,
                "endCol": 65
              }
            ]
          },
          "344": {
            "partial": false,
            "source": "                      , logger:self.logger, ssl:self.ssl, poolSize:self.poolSize});",
            "missing": [
              {}
            ]
          },
          "346": {
            "partial": false,
            "source": "      newServer.replicasetInstance = self;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 42
              }
            ]
          },
          "349": {
            "partial": false,
            "source": "      newServer.on(\"close\", _handler(\"close\", self));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              },
              {
                "startCol": 28,
                "endCol": 51
              }
            ]
          },
          "350": {
            "partial": false,
            "source": "      newServer.on(\"error\", _handler(\"error\", self));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              },
              {
                "startCol": 28,
                "endCol": 51
              }
            ]
          },
          "351": {
            "partial": false,
            "source": "      newServer.on(\"timeout\", _handler(\"timeout\", self));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 56
              },
              {
                "startCol": 30,
                "endCol": 55
              }
            ]
          },
          "353": {
            "partial": false,
            "source": "      serversToConnectList[member['name']] = newServer;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 55
              }
            ]
          },
          "354": {
            "partial": false,
            "source": "    } else if(member['stateStr'] == 'PRIMARY' && self._state.master['name'] != member['name']) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 45
              },
              {
                "startCol": 49,
                "endCol": 93
              }
            ]
          },
          "356": {
            "partial": false,
            "source": "      delete self._state['addresses'][self._state.master['name']];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 65
              }
            ]
          },
          "358": {
            "partial": false,
            "source": "      var newMaster = self._state.addresses[member['name']];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 60
              }
            ]
          },
          "359": {
            "partial": false,
            "source": "      newMaster.isMasterDoc.ismaster = true;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 44
              }
            ]
          },
          "360": {
            "partial": false,
            "source": "      newMaster.isMasterDoc.secondary = false;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 46
              }
            ]
          },
          "361": {
            "partial": false,
            "source": "      self._state.master = newMaster;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 37
              }
            ]
          },
          "363": {
            "partial": false,
            "source": "      delete self._state.secondaries[member['name']];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              }
            ]
          },
          "364": {
            "partial": false,
            "source": "      newMaster = null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 23
              }
            ]
          },
          "369": {
            "partial": false,
            "source": "  var serverKeys = Object.keys(serversToConnectList);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 53
              },
              {
                "startCol": 19,
                "endCol": 52
              }
            ]
          },
          "371": {
            "partial": false,
            "source": "  while(serverKeys.length > 0) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 29
              }
            ]
          },
          "372": {
            "partial": false,
            "source": "    var _serverKey = serverKeys.pop();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 38
              },
              {
                "startCol": 21,
                "endCol": 37
              }
            ]
          },
          "374": {
            "partial": false,
            "source": "    var _server = serversToConnectList[_serverKey];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              }
            ]
          },
          "377": {
            "partial": false,
            "source": "    var newServerCallback = _connectHandler(self, null, _server)",
            "missing": [
              {},
              {
                "startCol": 28,
                "endCol": 64
              }
            ]
          },
          "378": {
            "partial": false,
            "source": "    // Connect To the new server",
            "missing": [
              {}
            ]
          },
          "379": {
            "partial": false,
            "source": "    _server.connect(self.db, {returnIsMasterResults: true, eventReceiver:newServer}, function(err, result, _server) {",
            "missing": [
              {}
            ]
          },
          "380": {
            "partial": false,
            "source": "      if(err == null && result != null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 24,
                "endCol": 30
              },
              {}
            ]
          },
          "381": {
            "partial": false,
            "source": "        // Fetch the myState",
            "missing": [
              {}
            ]
          },
          "382": {
            "partial": false,
            "source": "        var document = result.documents[0];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 43
              },
              {}
            ]
          },
          "383": {
            "partial": false,
            "source": "        // Remove from list until",
            "missing": [
              {}
            ]
          },
          "384": {
            "partial": false,
            "source": "        if(document.ismaster || document.secondary || document.arbiterOnly) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 50
              }
            ]
          },
          "385": {
            "partial": false,
            "source": "          process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "386": {
            "partial": false,
            "source": "            // Apply any auths",
            "missing": [
              {}
            ]
          },
          "387": {
            "partial": false,
            "source": "            if(Array.isArray(auths) && auths.length > 0) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 35
              },
              {},
              {
                "startCol": 39,
                "endCol": 55
              }
            ]
          },
          "388": {
            "partial": false,
            "source": "              // Get number of auths we need to execute",
            "missing": [
              {}
            ]
          },
          "389": {
            "partial": false,
            "source": "              var numberOfAuths = auths.length;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 47
              }
            ]
          },
          "390": {
            "partial": false,
            "source": "              // Apply all auths",
            "missing": [
              {}
            ]
          },
          "391": {
            "partial": false,
            "source": "              for(var i = 0; i < auths.length; i++) {",
            "missing": [
              {},
              {
                "startCol": 47,
                "endCol": 50
              },
              {
                "startCol": 29,
                "endCol": 30
              }
            ]
          },
          "392": {
            "partial": false,
            "source": "                self.db.authenticate(auths[i].username, auths[i].password, {'authdb':auths[i].authdb}, function(err, authenticated) {",
            "missing": [
              {}
            ]
          },
          "393": {
            "partial": false,
            "source": "                  numberOfAuths = numberOfAuths - 1;",
            "missing": [
              {
                "startCol": 34,
                "endCol": 47
              },
              {},
              {
                "startCol": 18,
                "endCol": 52
              }
            ]
          },
          "394": {
            "partial": false,
            "source": "                  // If we have no more authentications to replay",
            "missing": [
              {}
            ]
          },
          "395": {
            "partial": false,
            "source": "                  if(numberOfAuths == 0) {",
            "missing": [
              {},
              {
                "startCol": 21,
                "endCol": 34
              }
            ]
          },
          "396": {
            "partial": false,
            "source": "                    newServerCallback(err, result, _server);",
            "missing": [
              {
                "startCol": 20,
                "endCol": 60
              },
              {}
            ]
          },
          "397": {
            "partial": false,
            "source": "                  }",
            "missing": [
              {}
            ]
          },
          "398": {
            "partial": false,
            "source": "                });",
            "missing": [
              {}
            ]
          },
          "399": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "400": {
            "partial": false,
            "source": "            } else {",
            "missing": [
              {}
            ]
          },
          "401": {
            "partial": false,
            "source": "              newServerCallback(err, result, _server);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 53
              }
            ]
          },
          "402": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "403": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "404": {
            "partial": false,
            "source": "        } else {",
            "missing": [
              {}
            ]
          },
          "405": {
            "partial": false,
            "source": "          _server.close();",
            "missing": [
              {
                "startCol": 10,
                "endCol": 25
              },
              {}
            ]
          },
          "406": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "407": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "408": {
            "partial": false,
            "source": "        _server.close();",
            "missing": [
              {
                "startCol": 8,
                "endCol": 23
              },
              {}
            ]
          },
          "409": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "410": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "415": {
            "partial": false,
            "source": "  return function(err, server) {",
            "missing": [
              {}
            ]
          },
          "416": {
            "partial": false,
            "source": "    // Check if we have a secondary server",
            "missing": [
              {}
            ]
          },
          "417": {
            "partial": false,
            "source": "    if(self._state.master && self._state.master.name == server.name) {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 67
              },
              {
                "startCol": 29,
                "endCol": 67
              }
            ]
          },
          "418": {
            "partial": false,
            "source": "      // Force close",
            "missing": [
              {}
            ]
          },
          "419": {
            "partial": false,
            "source": "      self.close();",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "420": {
            "partial": false,
            "source": "      // Error out all callbacks",
            "missing": [
              {}
            ]
          },
          "421": {
            "partial": false,
            "source": "      __executeAllCallbacksWithError(self.db, err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 50
              },
              {}
            ]
          },
          "422": {
            "partial": false,
            "source": "    } else if(self._state.master",
            "missing": [
              {}
            ]
          },
          "423": {
            "partial": false,
            "source": "      && (self._state.secondaries[server.name] != null",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 54
              }
            ]
          },
          "424": {
            "partial": false,
            "source": "        || self._state.arbiters[server.name] != null",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 52
              }
            ]
          },
          "425": {
            "partial": false,
            "source": "        || self._state.passives[server.name] != null)) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 52
              }
            ]
          },
          "426": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "427": {
            "partial": false,
            "source": "        delete self._state.secondaries[server.name];",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 51
              }
            ]
          },
          "428": {
            "partial": false,
            "source": "        delete self._state.arbiters[server.name];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 49
              },
              {}
            ]
          },
          "429": {
            "partial": false,
            "source": "        delete self._state.passives[server.name];",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 48
              }
            ]
          },
          "430": {
            "partial": false,
            "source": "        delete self._state.addresses[server.name];",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 49
              }
            ]
          },
          "431": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "432": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "433": {
            "partial": false,
            "source": "    // If it's a primary we need to close the set to reconnect",
            "missing": [
              {}
            ]
          },
          "434": {
            "partial": false,
            "source": "    if(self._state.master && self._state.master.host == server.host && self._state.master.port == server.port) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 67
              },
              {},
              {
                "startCol": 29,
                "endCol": 67
              },
              {
                "startCol": 71,
                "endCol": 109
              }
            ]
          },
          "435": {
            "partial": false,
            "source": "      // If we have app listeners on close event",
            "missing": [
              {}
            ]
          },
          "436": {
            "partial": false,
            "source": "      if(self.db.listeners(event).length > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 44
              },
              {},
              {
                "startCol": 26,
                "endCol": 33
              }
            ]
          },
          "437": {
            "partial": false,
            "source": "        self.db.emit(event, err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 32
              },
              {}
            ]
          },
          "438": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "439": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "440": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "441": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "444": {
            "partial": false,
            "source": "  return function(err, result) {",
            "missing": [
              {}
            ]
          },
          "445": {
            "partial": false,
            "source": "    // We are disconnected stop attempting reconnect or connect",
            "missing": [
              {}
            ]
          },
          "446": {
            "partial": false,
            "source": "    if(self._serverState == 'disconnected') return instanceServer.close();",
            "missing": [
              {
                "startCol": 7,
                "endCol": 42
              },
              {
                "startCol": 44,
                "endCol": 74
              },
              {
                "startCol": 51,
                "endCol": 73
              },
              {}
            ]
          },
          "447": {
            "partial": false,
            "source": "    // If no error handle isMaster",
            "missing": [
              {}
            ]
          },
          "448": {
            "partial": false,
            "source": "    if(err == null && result.documents[0].hosts != null) {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 22,
                "endCol": 55
              }
            ]
          },
          "449": {
            "partial": false,
            "source": "      // Fetch the isMaster command result",
            "missing": [
              {}
            ]
          },
          "450": {
            "partial": false,
            "source": "      var document = result.documents[0];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 41
              },
              {}
            ]
          },
          "451": {
            "partial": false,
            "source": "      // Break out the results",
            "missing": [
              {}
            ]
          },
          "452": {
            "partial": false,
            "source": "      var setName = document.setName;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 37
              }
            ]
          },
          "453": {
            "partial": false,
            "source": "      var isMaster = document.ismaster;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 39
              },
              {}
            ]
          },
          "454": {
            "partial": false,
            "source": "      var secondary = document.secondary;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 41
              }
            ]
          },
          "455": {
            "partial": false,
            "source": "      var passive = document.passive;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 37
              },
              {}
            ]
          },
          "456": {
            "partial": false,
            "source": "      var arbiterOnly = document.arbiterOnly;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 45
              }
            ]
          },
          "457": {
            "partial": false,
            "source": "      var hosts = Array.isArray(document.hosts) ? document.hosts : [];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 70
              },
              {
                "startCol": 18,
                "endCol": 47
              },
              {},
              {
                "startCol": 50,
                "endCol": 64
              },
              {
                "startCol": 67,
                "endCol": 69
              }
            ]
          },
          "458": {
            "partial": false,
            "source": "      var arbiters = Array.isArray(document.arbiters) ? document.arbiters : [];",
            "missing": [
              {
                "startCol": 21,
                "endCol": 53
              },
              {
                "startCol": 56,
                "endCol": 73
              },
              {},
              {
                "startCol": 6,
                "endCol": 79
              },
              {
                "startCol": 76,
                "endCol": 78
              }
            ]
          },
          "459": {
            "partial": false,
            "source": "      var passives = Array.isArray(document.passives) ? document.passives : [];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 79
              },
              {},
              {
                "startCol": 21,
                "endCol": 53
              },
              {
                "startCol": 56,
                "endCol": 73
              },
              {
                "startCol": 76,
                "endCol": 78
              }
            ]
          },
          "460": {
            "partial": false,
            "source": "      var tags = document.tags ? document.tags : {};",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              },
              {
                "startCol": 33,
                "endCol": 46
              },
              {
                "startCol": 49,
                "endCol": 51
              },
              {}
            ]
          },
          "461": {
            "partial": false,
            "source": "      var primary = document.primary;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 37
              },
              {}
            ]
          },
          "462": {
            "partial": false,
            "source": "      // Find the current server name and fallback if none",
            "missing": [
              {}
            ]
          },
          "463": {
            "partial": false,
            "source": "      var userProvidedServerString = instanceServer.host + \":\" + instanceServer.port;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 85
              },
              {
                "startCol": 37,
                "endCol": 62
              },
              {}
            ]
          },
          "464": {
            "partial": false,
            "source": "      var me = document.me || userProvidedServerString;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 55
              },
              {
                "startCol": 15,
                "endCol": 54
              },
              {
                "startCol": 30,
                "endCol": 54
              }
            ]
          },
          "465": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "466": {
            "partial": false,
            "source": "      // Verify if the set name is the same otherwise shut down and return an error",
            "missing": [
              {}
            ]
          },
          "467": {
            "partial": false,
            "source": "      if(self.replicaSet == null) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 32
              }
            ]
          },
          "468": {
            "partial": false,
            "source": "        self.replicaSet = setName;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 34
              },
              {}
            ]
          },
          "469": {
            "partial": false,
            "source": "      } else if(self.replicaSet != setName) {",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 42
              },
              {
                "startCol": 35,
                "endCol": 42
              }
            ]
          },
          "470": {
            "partial": false,
            "source": "        // Stop the set",
            "missing": [
              {}
            ]
          },
          "471": {
            "partial": false,
            "source": "        self.close();",
            "missing": [
              {
                "startCol": 8,
                "endCol": 20
              },
              {}
            ]
          },
          "472": {
            "partial": false,
            "source": "        // Emit a connection error",
            "missing": [
              {}
            ]
          },
          "473": {
            "partial": false,
            "source": "        return self.emit(\"connectionError\",",
            "missing": [
              {}
            ]
          },
          "474": {
            "partial": false,
            "source": "          new Error(\"configured mongodb replicaset does not match provided replicaset [\" + setName + \"] != [\" + self.replicaSet + \"]\"))",
            "missing": [
              {},
              {
                "startCol": 20,
                "endCol": 98
              },
              {
                "startCol": 91,
                "endCol": 98
              }
            ]
          },
          "475": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "476": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "477": {
            "partial": false,
            "source": "      // Make sure we have the right reference",
            "missing": [
              {}
            ]
          },
          "478": {
            "partial": false,
            "source": "      var oldServer = self._state.addresses[userProvidedServerString]",
            "missing": [
              {}
            ]
          },
          "479": {
            "partial": false,
            "source": "      if (oldServer && oldServer !== instanceServer) oldServer.close();",
            "missing": [
              {
                "startCol": 10,
                "endCol": 19
              },
              {},
              {
                "startCol": 23,
                "endCol": 32
              },
              {
                "startCol": 37,
                "endCol": 51
              },
              {
                "startCol": 53,
                "endCol": 70
              }
            ]
          },
          "480": {
            "partial": false,
            "source": "      delete self._state.addresses[userProvidedServerString];",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 60
              }
            ]
          },
          "481": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "482": {
            "partial": false,
            "source": "      if (self._state.addresses[me] && self._state.addresses[me] !== instanceServer) self._state.addresses[me].close();",
            "missing": [
              {
                "startCol": 10,
                "endCol": 83
              },
              {
                "startCol": 39,
                "endCol": 83
              },
              {
                "startCol": 69,
                "endCol": 83
              },
              {
                "startCol": 85,
                "endCol": 119
              },
              {}
            ]
          },
          "483": {
            "partial": false,
            "source": "      self._state.addresses[me] = instanceServer;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 49
              }
            ]
          },
          "484": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "485": {
            "partial": false,
            "source": "      // Let's add the server to our list of server types",
            "missing": [
              {}
            ]
          },
          "486": {
            "partial": false,
            "source": "      if(secondary == true && (passive == false || passive == null)) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 18
              },
              {},
              {
                "startCol": 30,
                "endCol": 67
              },
              {
                "startCol": 31,
                "endCol": 38
              },
              {
                "startCol": 51,
                "endCol": 58
              }
            ]
          },
          "487": {
            "partial": false,
            "source": "        self._state.secondaries[me] = instanceServer;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 53
              },
              {}
            ]
          },
          "488": {
            "partial": false,
            "source": "      } else if(arbiterOnly == true) {",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 27
              }
            ]
          },
          "489": {
            "partial": false,
            "source": "        self._state.arbiters[me] = instanceServer;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 50
              },
              {}
            ]
          },
          "490": {
            "partial": false,
            "source": "      } else if(secondary == true && passive == true) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 25
              },
              {
                "startCol": 37,
                "endCol": 44
              },
              {}
            ]
          },
          "491": {
            "partial": false,
            "source": "        self._state.passives[me] = instanceServer;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 50
              }
            ]
          },
          "492": {
            "partial": false,
            "source": "      } else if(isMaster == true) {",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 24
              }
            ]
          },
          "493": {
            "partial": false,
            "source": "        self._state.master = instanceServer;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 44
              }
            ]
          },
          "494": {
            "partial": false,
            "source": "      } else if(isMaster == false && primary != null && self._state.addresses[primary]) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 24
              },
              {},
              {
                "startCol": 37,
                "endCol": 44
              }
            ]
          },
          "495": {
            "partial": false,
            "source": "        self._state.master = self._state.addresses[primary];",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 60
              }
            ]
          },
          "496": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "497": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "498": {
            "partial": false,
            "source": "      // Set the name",
            "missing": [
              {}
            ]
          },
          "499": {
            "partial": false,
            "source": "      instanceServer.name = me;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 31
              }
            ]
          },
          "500": {
            "partial": false,
            "source": "      // Add tag info",
            "missing": [
              {}
            ]
          },
          "501": {
            "partial": false,
            "source": "      instanceServer.tags = tags;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 33
              },
              {}
            ]
          },
          "502": {
            "partial": false,
            "source": "      // Add the handlers to the instance",
            "missing": [
              {}
            ]
          },
          "503": {
            "partial": false,
            "source": "      instanceServer.on(\"close\", _handler(\"close\", self));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 57
              },
              {},
              {
                "startCol": 33,
                "endCol": 56
              }
            ]
          },
          "504": {
            "partial": false,
            "source": "      instanceServer.on(\"error\", _handler(\"error\", self));",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 57
              },
              {
                "startCol": 33,
                "endCol": 56
              }
            ]
          },
          "505": {
            "partial": false,
            "source": "      instanceServer.on(\"timeout\", _handler(\"timeout\", self));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 61
              },
              {
                "startCol": 35,
                "endCol": 60
              },
              {}
            ]
          },
          "506": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "507": {
            "partial": false,
            "source": "      // Possible hosts",
            "missing": [
              {}
            ]
          },
          "508": {
            "partial": false,
            "source": "      var possibleHosts = Array.isArray(hosts) ? hosts.slice() : [];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 68
              },
              {},
              {
                "startCol": 26,
                "endCol": 46
              },
              {
                "startCol": 49,
                "endCol": 62
              },
              {
                "startCol": 65,
                "endCol": 67
              }
            ]
          },
          "509": {
            "partial": false,
            "source": "      possibleHosts = Array.isArray(passives) ? possibleHosts.concat(passives) : possibleHosts;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 95
              },
              {},
              {
                "startCol": 22,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 78
              },
              {
                "startCol": 81,
                "endCol": 94
              }
            ]
          },
          "510": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "511": {
            "partial": false,
            "source": "      if(self.connectArbiter == true) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 36
              },
              {}
            ]
          },
          "512": {
            "partial": false,
            "source": "        possibleHosts = Array.isArray(arbiters) ? possibleHosts.concat(arbiters) : possibleHosts;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 97
              },
              {
                "startCol": 24,
                "endCol": 47
              },
              {
                "startCol": 50,
                "endCol": 80
              },
              {},
              {
                "startCol": 83,
                "endCol": 96
              }
            ]
          },
          "513": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "514": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "515": {
            "partial": false,
            "source": "      if(Array.isArray(candidateServers)) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 40
              }
            ]
          },
          "516": {
            "partial": false,
            "source": "        // Add any new candidate servers for connection",
            "missing": [
              {}
            ]
          },
          "517": {
            "partial": false,
            "source": "        for(var j = 0; j < possibleHosts.length; j++) {",
            "missing": [
              {
                "startCol": 23,
                "endCol": 24
              },
              {},
              {
                "startCol": 49,
                "endCol": 52
              }
            ]
          },
          "518": {
            "partial": false,
            "source": "          if(self._state.addresses[possibleHosts[j]] == null && possibleHosts[j] != null) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 88
              },
              {
                "startCol": 64,
                "endCol": 88
              },
              {}
            ]
          },
          "519": {
            "partial": false,
            "source": "            var parts = possibleHosts[j].split(/:/);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 52
              },
              {
                "startCol": 24,
                "endCol": 51
              },
              {}
            ]
          },
          "520": {
            "partial": false,
            "source": "            if(parts.length == 1) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 32
              },
              {}
            ]
          },
          "521": {
            "partial": false,
            "source": "              parts = [parts[0], Connection.DEFAULT_PORT];",
            "missing": [
              {
                "startCol": 14,
                "endCol": 58
              },
              {}
            ]
          },
          "522": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "523": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "524": {
            "partial": false,
            "source": "            // New candidate server",
            "missing": [
              {}
            ]
          },
          "525": {
            "partial": false,
            "source": "            var candidateServer = new Server(parts[0], parseInt(parts[1]));",
            "missing": [
              {
                "startCol": 12,
                "endCol": 75
              },
              {},
              {
                "startCol": 55,
                "endCol": 73
              }
            ]
          },
          "526": {
            "partial": false,
            "source": "            candidateServer.name = possibleHosts[j];",
            "missing": [
              {
                "startCol": 12,
                "endCol": 52
              },
              {}
            ]
          },
          "527": {
            "partial": false,
            "source": "            self._state.addresses[possibleHosts[j]] = candidateServer;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 70
              },
              {}
            ]
          },
          "528": {
            "partial": false,
            "source": "            // Add the new server to the list of candidate servers",
            "missing": [
              {}
            ]
          },
          "529": {
            "partial": false,
            "source": "            candidateServers.push(candidateServer);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 50
              },
              {}
            ]
          },
          "530": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "531": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "532": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "533": {
            "partial": false,
            "source": "    } else if(err != null || self._serverState == 'disconnected'){",
            "missing": [
              {
                "startCol": 14,
                "endCol": 17
              },
              {},
              {
                "startCol": 29,
                "endCol": 64
              }
            ]
          },
          "534": {
            "partial": false,
            "source": "      delete self._state.addresses[instanceServer.host + \":\" + instanceServer.port];",
            "missing": [
              {
                "startCol": 35,
                "endCol": 60
              },
              {},
              {
                "startCol": 6,
                "endCol": 83
              }
            ]
          },
          "535": {
            "partial": false,
            "source": "      // Remove it from the set",
            "missing": [
              {}
            ]
          },
          "536": {
            "partial": false,
            "source": "      instanceServer.close();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 28
              },
              {}
            ]
          },
          "537": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "538": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "539": {
            "partial": false,
            "source": "    // Attempt to connect to the next server",
            "missing": [
              {}
            ]
          },
          "540": {
            "partial": false,
            "source": "    if(Array.isArray(candidateServers) && candidateServers.length > 0) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 38
              },
              {
                "startCol": 42,
                "endCol": 69
              },
              {}
            ]
          },
          "541": {
            "partial": false,
            "source": "      var server = candidateServers.pop();",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 42
              },
              {
                "startCol": 19,
                "endCol": 41
              }
            ]
          },
          "542": {
            "partial": false,
            "source": "      // Get server addresses",
            "missing": [
              {}
            ]
          },
          "543": {
            "partial": false,
            "source": "      var addresses = self._state.addresses;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 44
              },
              {}
            ]
          },
          "544": {
            "partial": false,
            "source": "      // Default empty socket options object",
            "missing": [
              {}
            ]
          },
          "545": {
            "partial": false,
            "source": "      var socketOptions = {};",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 29
              }
            ]
          },
          "546": {
            "partial": false,
            "source": "      // If a socket option object exists clone it",
            "missing": [
              {}
            ]
          },
          "547": {
            "partial": false,
            "source": "      if(self.socketOptions != null && typeof self.socketOptions === 'object') {",
            "missing": [
              {},
              {
                "startCol": 39,
                "endCol": 77
              },
              {
                "startCol": 9,
                "endCol": 77
              }
            ]
          },
          "548": {
            "partial": false,
            "source": "        var keys = Object.keys(self.socketOptions);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 51
              },
              {},
              {
                "startCol": 19,
                "endCol": 50
              }
            ]
          },
          "549": {
            "partial": false,
            "source": "        for(var j = 0; j < keys.length;j++) socketOptions[keys[j]] = self.socketOptions[keys[j]];",
            "missing": [
              {
                "startCol": 39,
                "endCol": 42
              },
              {},
              {
                "startCol": 23,
                "endCol": 38
              },
              {
                "startCol": 44,
                "endCol": 97
              }
            ]
          },
          "550": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "551": {
            "partial": false,
            "source": "      // If ssl is specified",
            "missing": [
              {}
            ]
          },
          "552": {
            "partial": false,
            "source": "      if(self.ssl) serverConnections[i].ssl = true;",
            "missing": [
              {},
              {
                "startCol": 19,
                "endCol": 51
              }
            ]
          },
          "553": {
            "partial": false,
            "source": "      // Set fast connect timeout",
            "missing": [
              {}
            ]
          },
          "554": {
            "partial": false,
            "source": "      socketOptions['connectTimeoutMS'] = self._connectTimeoutMS",
            "missing": [
              {}
            ]
          },
          "555": {
            "partial": false,
            "source": "      // Add host information to socket options",
            "missing": [
              {}
            ]
          },
          "556": {
            "partial": false,
            "source": "      socketOptions['host'] = server.host;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 42
              },
              {}
            ]
          },
          "557": {
            "partial": false,
            "source": "      socketOptions['port'] = server.port;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 42
              }
            ]
          },
          "558": {
            "partial": false,
            "source": "      server.socketOptions = socketOptions;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 43
              },
              {}
            ]
          },
          "559": {
            "partial": false,
            "source": "      server.replicasetInstance = self;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 39
              }
            ]
          },
          "560": {
            "partial": false,
            "source": "      server.enableRecordQueryStats(self.recordQueryStats);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 58
              },
              {}
            ]
          },
          "561": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "562": {
            "partial": false,
            "source": "      // Set the server",
            "missing": [
              {}
            ]
          },
          "563": {
            "partial": false,
            "source": "      if (addresses[server.host + \":\" + server.port] != server) {",
            "missing": [
              {
                "startCol": 10,
                "endCol": 62
              },
              {
                "startCol": 20,
                "endCol": 37
              },
              {
                "startCol": 56,
                "endCol": 62
              },
              {}
            ]
          },
          "564": {
            "partial": false,
            "source": "        if (addresses[server.host + \":\" + server.port]) {",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 39
              }
            ]
          },
          "565": {
            "partial": false,
            "source": "          // Close the connection before deleting",
            "missing": [
              {}
            ]
          },
          "566": {
            "partial": false,
            "source": "          addresses[server.host + \":\" + server.port].close();",
            "missing": [
              {
                "startCol": 10,
                "endCol": 60
              },
              {
                "startCol": 20,
                "endCol": 37
              },
              {}
            ]
          },
          "567": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "568": {
            "partial": false,
            "source": "        delete addresses[server.host + \":\" + server.port];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 57
              },
              {},
              {
                "startCol": 25,
                "endCol": 42
              }
            ]
          },
          "569": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "570": {
            "partial": false,
            "source": "      addresses[server.host + \":\" + server.port] = server;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 58
              },
              {},
              {
                "startCol": 16,
                "endCol": 33
              }
            ]
          },
          "571": {
            "partial": false,
            "source": "      // Connect",
            "missing": [
              {}
            ]
          },
          "572": {
            "partial": false,
            "source": "      server.connect(self.db, {returnIsMasterResults: true, eventReceiver:server}, _connectHandler(self, candidateServers, server));",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 131
              },
              {
                "startCol": 83,
                "endCol": 130
              }
            ]
          },
          "573": {
            "partial": false,
            "source": "    } else if(Array.isArray(candidateServers)) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 45
              },
              {}
            ]
          },
          "574": {
            "partial": false,
            "source": "      // If we have no primary emit error",
            "missing": [
              {}
            ]
          },
          "575": {
            "partial": false,
            "source": "      if(self._state.master == null) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 35
              }
            ]
          },
          "576": {
            "partial": false,
            "source": "        // Stop the set",
            "missing": [
              {}
            ]
          },
          "577": {
            "partial": false,
            "source": "        self.close();",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 20
              }
            ]
          },
          "578": {
            "partial": false,
            "source": "        // Emit a connection error",
            "missing": [
              {}
            ]
          },
          "579": {
            "partial": false,
            "source": "        return self.emit(\"connectionError\",",
            "missing": [
              {}
            ]
          },
          "580": {
            "partial": false,
            "source": "          new Error(\"no primary server found in set\"))",
            "missing": [
              {}
            ]
          },
          "581": {
            "partial": false,
            "source": "      } else{",
            "missing": [
              {}
            ]
          },
          "582": {
            "partial": false,
            "source": "        self.emit(\"fullsetup\", null, self.db, self);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 51
              }
            ]
          },
          "583": {
            "partial": false,
            "source": "        self.emit(\"open\", null, self.db, self);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 46
              }
            ]
          },
          "584": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "585": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "586": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "587": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "593": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "594": {
            "partial": false,
            "source": "  if('function' === typeof options) callback = options, options = {};",
            "missing": [
              {
                "startCol": 5,
                "endCol": 34
              },
              {
                "startCol": 20,
                "endCol": 34
              },
              {
                "startCol": 27,
                "endCol": 34
              },
              {
                "startCol": 36,
                "endCol": 69
              }
            ]
          },
          "595": {
            "partial": false,
            "source": "  if(options == null) options = {};",
            "missing": [
              {
                "startCol": 5,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "596": {
            "partial": false,
            "source": "  if(!('function' === typeof callback)) callback = null;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 38
              },
              {
                "startCol": 6,
                "endCol": 38
              },
              {
                "startCol": 22,
                "endCol": 37
              },
              {
                "startCol": 29,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 56
              }
            ]
          },
          "599": {
            "partial": false,
            "source": "  self.close();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "601": {
            "partial": false,
            "source": "  this.db = parent;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "602": {
            "partial": false,
            "source": "  this._serverState = 'connecting';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              }
            ]
          },
          "603": {
            "partial": false,
            "source": "  this._callbackList = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "604": {
            "partial": false,
            "source": "  this._state = {'master':null, 'secondaries':{}, 'arbiters':{}, 'passives':{}",
            "missing": [
              {}
            ]
          },
          "605": {
            "partial": false,
            "source": "    , 'errors':{}, 'addresses':{}, 'setName':null, 'errorMessages':[], 'members':[]};",
            "missing": [
              {}
            ]
          },
          "607": {
            "partial": false,
            "source": "  parent.slaveOk = this.slaveOk ? this.slaveOk : parent.slaveOk;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 34,
                "endCol": 46
              },
              {
                "startCol": 49,
                "endCol": 63
              }
            ]
          },
          "610": {
            "partial": false,
            "source": "  this.removeAllListeners(\"fullsetup\");",
            "missing": [
              {
                "startCol": 2,
                "endCol": 38
              }
            ]
          },
          "611": {
            "partial": false,
            "source": "  this.removeAllListeners(\"connectionError\");",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              }
            ]
          },
          "614": {
            "partial": false,
            "source": "  this.once(\"fullsetup\", function() {",
            "missing": [
              {}
            ]
          },
          "615": {
            "partial": false,
            "source": "    // Set state connected",
            "missing": [
              {}
            ]
          },
          "616": {
            "partial": false,
            "source": "    self._serverState = 'connected';",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 36
              }
            ]
          },
          "617": {
            "partial": false,
            "source": "    // Emit the fullsetup and open event",
            "missing": [
              {}
            ]
          },
          "618": {
            "partial": false,
            "source": "    parent.emit(\"open\", null, self.db, self);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 44
              }
            ]
          },
          "619": {
            "partial": false,
            "source": "    parent.emit(\"fullsetup\", null, self.db, self);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 49
              },
              {}
            ]
          },
          "620": {
            "partial": false,
            "source": "    // Callback",
            "missing": [
              {}
            ]
          },
          "621": {
            "partial": false,
            "source": "    if(typeof callback == 'function') {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "622": {
            "partial": false,
            "source": "      var internalCallback = callback;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              },
              {}
            ]
          },
          "623": {
            "partial": false,
            "source": "      callback = null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              },
              {}
            ]
          },
          "624": {
            "partial": false,
            "source": "      internalCallback(null, parent, self);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 42
              },
              {}
            ]
          },
          "625": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "626": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "628": {
            "partial": false,
            "source": "  this.once(\"connectionError\", function(err) {",
            "missing": [
              {}
            ]
          },
          "629": {
            "partial": false,
            "source": "    self._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              },
              {}
            ]
          },
          "630": {
            "partial": false,
            "source": "    // Ensure it's all closed",
            "missing": [
              {}
            ]
          },
          "631": {
            "partial": false,
            "source": "    self.close();",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "632": {
            "partial": false,
            "source": "    // Perform the callback",
            "missing": [
              {}
            ]
          },
          "633": {
            "partial": false,
            "source": "    if(typeof callback == 'function') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              },
              {}
            ]
          },
          "634": {
            "partial": false,
            "source": "      var internalCallback = callback;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "635": {
            "partial": false,
            "source": "      callback = null;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "636": {
            "partial": false,
            "source": "      internalCallback(err, parent, self);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 41
              }
            ]
          },
          "637": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "638": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "641": {
            "partial": false,
            "source": "  var addresses = this._state.addresses;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 40
              }
            ]
          },
          "644": {
            "partial": false,
            "source": "  var socketOptions = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "646": {
            "partial": false,
            "source": "  if(this.socketOptions != null && typeof this.socketOptions === 'object') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 31
              },
              {
                "startCol": 35,
                "endCol": 60
              }
            ]
          },
          "647": {
            "partial": false,
            "source": "    var keys = Object.keys(this.socketOptions);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 47
              },
              {
                "startCol": 15,
                "endCol": 46
              }
            ]
          },
          "648": {
            "partial": false,
            "source": "    for(var j = 0; j < keys.length;j++) socketOptions[keys[j]] = this.socketOptions[keys[j]];",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 35,
                "endCol": 38
              },
              {
                "startCol": 40,
                "endCol": 93
              }
            ]
          },
          "651": {
            "partial": false,
            "source": "  if(this.ssl) serverConnections[i].ssl = true;",
            "missing": [
              {
                "startCol": 15,
                "endCol": 47
              }
            ]
          },
          "653": {
            "partial": false,
            "source": "  socketOptions['connectTimeoutMS'] = this._connectTimeoutMS",
            "missing": [
              {}
            ]
          },
          "654": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "655": {
            "partial": false,
            "source": "  // De-duplicate any servers",
            "missing": [
              {}
            ]
          },
          "656": {
            "partial": false,
            "source": "  var server;",
            "missing": [
              {},
              {
                "startCol": 2,
                "endCol": 13
              }
            ]
          },
          "657": {
            "partial": false,
            "source": "  for(var i = 0; i < this.servers.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "658": {
            "partial": false,
            "source": "    server = this.servers[i];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "660": {
            "partial": false,
            "source": "    socketOptions['host'] = server.host;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              }
            ]
          },
          "661": {
            "partial": false,
            "source": "    socketOptions['port'] = server.port;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              }
            ]
          },
          "662": {
            "partial": false,
            "source": "    server.socketOptions = socketOptions;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "663": {
            "partial": false,
            "source": "    server.replicasetInstance = this;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 37
              }
            ]
          },
          "664": {
            "partial": false,
            "source": "    server.enableRecordQueryStats(this.recordQueryStats);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 56
              }
            ]
          },
          "666": {
            "partial": false,
            "source": "    if(addresses[server.host + \":\" + server.port] == null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 57
              },
              {
                "startCol": 17,
                "endCol": 34
              }
            ]
          },
          "667": {
            "partial": false,
            "source": "      addresses[server.host + \":\" + server.port] = server;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 58
              },
              {
                "startCol": 16,
                "endCol": 33
              }
            ]
          },
          "672": {
            "partial": false,
            "source": "  var candidateServers = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 28
              }
            ]
          },
          "673": {
            "partial": false,
            "source": "  var keys = Object.keys(addresses);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 36
              },
              {
                "startCol": 13,
                "endCol": 35
              }
            ]
          },
          "674": {
            "partial": false,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "675": {
            "partial": false,
            "source": "    candidateServers.push(addresses[keys[i]]);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 45
              }
            ]
          },
          "678": {
            "partial": false,
            "source": "  server = candidateServers.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 34
              },
              {
                "startCol": 11,
                "endCol": 33
              }
            ]
          },
          "679": {
            "partial": false,
            "source": "  server.connect(parent, {returnIsMasterResults: true, eventReceiver:server}, _connectHandler(this, candidateServers, server));",
            "missing": [
              {
                "startCol": 2,
                "endCol": 126
              },
              {
                "startCol": 78,
                "endCol": 125
              }
            ]
          },
          "687": {
            "partial": false,
            "source": "  var connection = this._state.master != null ? this._state.master.checkoutWriter() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 91
              },
              {
                "startCol": 19,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 83
              },
              {
                "startCol": 86,
                "endCol": 90
              }
            ]
          },
          "689": {
            "partial": false,
            "source": "  return connection;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "696": {
            "partial": false,
            "source": "  var keys = Object.keys(self._state.secondaries);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              },
              {
                "startCol": 13,
                "endCol": 49
              }
            ]
          },
          "697": {
            "partial": false,
            "source": "  var connection = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "700": {
            "partial": false,
            "source": "  for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 37
              }
            ]
          },
          "701": {
            "partial": false,
            "source": "    connection = self._state.secondaries[keys[i]].checkoutReader();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 67
              },
              {
                "startCol": 17,
                "endCol": 66
              }
            ]
          },
          "702": {
            "partial": false,
            "source": "    if(connection != null) break;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 17
              }
            ]
          },
          "706": {
            "partial": false,
            "source": "  if(self._readPreference == ReadPreference.SECONDARY_PREFERRED) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 63
              }
            ]
          },
          "707": {
            "partial": false,
            "source": "    connection = self._state.master.checkoutReader();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 53
              },
              {
                "startCol": 17,
                "endCol": 52
              }
            ]
          },
          "710": {
            "partial": false,
            "source": "  if(connection == null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 15
              }
            ]
          },
          "711": {
            "partial": false,
            "source": "    var preferenceName = self._readPreference == ReadPreference.SECONDARY_PREFERRED ? 'secondary' : self._readPreference;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 121
              },
              {
                "startCol": 25,
                "endCol": 83
              },
              {
                "startCol": 86,
                "endCol": 97
              },
              {
                "startCol": 100,
                "endCol": 120
              }
            ]
          },
          "712": {
            "partial": false,
            "source": "    return new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));",
            "missing": [
              {
                "startCol": 4,
                "endCol": 142
              },
              {
                "startCol": 21,
                "endCol": 102
              },
              {
                "startCol": 88,
                "endCol": 102
              },
              {
                "startCol": 120,
                "endCol": 140
              }
            ]
          },
          "716": {
            "partial": false,
            "source": "  return connection;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "724": {
            "partial": false,
            "source": "  var tagObjects = Array.isArray(tags) ? tags : [tags];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 19,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 54
              }
            ]
          },
          "726": {
            "partial": false,
            "source": "  for(var _i = 0; _i < tagObjects.length; _i++) {",
            "missing": [
              {
                "startCol": 18,
                "endCol": 20
              },
              {
                "startCol": 42,
                "endCol": 46
              }
            ]
          },
          "728": {
            "partial": false,
            "source": "    var tagObject = tagObjects[_i];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "730": {
            "partial": false,
            "source": "    var matchingKeys = Object.keys(tagObject);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 46
              },
              {
                "startCol": 23,
                "endCol": 45
              }
            ]
          },
          "732": {
            "partial": false,
            "source": "    var keys = Object.keys(self._state.secondaries);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 15,
                "endCol": 51
              }
            ]
          },
          "733": {
            "partial": false,
            "source": "    var candidateServers = [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              }
            ]
          },
          "735": {
            "partial": false,
            "source": "    for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              }
            ]
          },
          "736": {
            "partial": false,
            "source": "      var server = self._state.secondaries[keys[i]];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              }
            ]
          },
          "738": {
            "partial": false,
            "source": "      if(server.tags != null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 28
              }
            ]
          },
          "739": {
            "partial": false,
            "source": "        var matching = true;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "741": {
            "partial": false,
            "source": "        for(var j = 0; j < matchingKeys.length; j++) {",
            "missing": [
              {
                "startCol": 23,
                "endCol": 24
              },
              {
                "startCol": 48,
                "endCol": 51
              }
            ]
          },
          "742": {
            "partial": false,
            "source": "          if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 71
              }
            ]
          },
          "743": {
            "partial": false,
            "source": "            matching = false;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 29
              }
            ]
          },
          "749": {
            "partial": false,
            "source": "        if(matching) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "750": {
            "partial": false,
            "source": "          candidateServers.push(server);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 39
              }
            ]
          },
          "756": {
            "partial": false,
            "source": "    if(candidateServers.length > 0) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 34
              }
            ]
          },
          "757": {
            "partial": false,
            "source": "      if(this.strategyInstance) return this.strategyInstance.checkoutSecondary(tags, candidateServers);",
            "missing": [
              {
                "startCol": 32,
                "endCol": 103
              },
              {
                "startCol": 39,
                "endCol": 102
              }
            ]
          },
          "759": {
            "partial": false,
            "source": "      return candidateServers[Math.floor(Math.random() * candidateServers.length)].checkoutReader();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 100
              },
              {
                "startCol": 13,
                "endCol": 99
              },
              {
                "startCol": 30,
                "endCol": 81
              },
              {
                "startCol": 41,
                "endCol": 54
              }
            ]
          },
          "764": {
            "partial": false,
            "source": "  return null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "771": {
            "partial": false,
            "source": "  var connection = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "773": {
            "partial": false,
            "source": "  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 26
              },
              {
                "startCol": 12,
                "endCol": 26
              },
              {
                "startCol": 42,
                "endCol": 85
              }
            ]
          },
          "775": {
            "partial": false,
            "source": "    if(!readPreference.isValid()) throw new Error(\"Illegal readPreference mode specified, \" + readPreference.mode);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 32
              },
              {
                "startCol": 8,
                "endCol": 32
              },
              {
                "startCol": 34,
                "endCol": 115
              },
              {
                "startCol": 50,
                "endCol": 113
              }
            ]
          },
          "777": {
            "partial": false,
            "source": "    tags = readPreference.tags;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              }
            ]
          },
          "778": {
            "partial": false,
            "source": "    readPreference = readPreference.mode;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "779": {
            "partial": false,
            "source": "  } else if(typeof readPreference == 'object' && readPreference['_type'] != 'ReadPreference') {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 33
              },
              {
                "startCol": 49,
                "endCol": 92
              }
            ]
          },
          "780": {
            "partial": false,
            "source": "    throw new Error(\"read preferences must be either a string or an instance of ReadPreference\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 97
              }
            ]
          },
          "784": {
            "partial": false,
            "source": "  var finalReadPreference = readPreference != null ? readPreference : this._readPreference;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 91
              },
              {
                "startCol": 28,
                "endCol": 42
              },
              {
                "startCol": 53,
                "endCol": 67
              },
              {
                "startCol": 70,
                "endCol": 90
              }
            ]
          },
          "785": {
            "partial": false,
            "source": "  finalReadPreference = finalReadPreference == true ? ReadPreference.SECONDARY_PREFERRED : finalReadPreference;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 111
              },
              {
                "startCol": 24,
                "endCol": 43
              },
              {
                "startCol": 54,
                "endCol": 88
              },
              {
                "startCol": 91,
                "endCol": 110
              }
            ]
          },
          "788": {
            "partial": false,
            "source": "  if(finalReadPreference == 'primary') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 24
              }
            ]
          },
          "790": {
            "partial": false,
            "source": "    if(typeof tags == 'object' && tags != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              },
              {
                "startCol": 14,
                "endCol": 18
              },
              {
                "startCol": 34,
                "endCol": 38
              }
            ]
          },
          "791": {
            "partial": false,
            "source": "      return new Error(\"PRIMARY cannot be combined with tags\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 63
              }
            ]
          },
          "795": {
            "partial": false,
            "source": "    if(this._state.master == null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 33
              }
            ]
          },
          "796": {
            "partial": false,
            "source": "      return new Error(\"No replica set primary available for query with ReadPreference PRIMARY\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 97
              }
            ]
          },
          "800": {
            "partial": false,
            "source": "    return this.checkoutWriter();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              },
              {
                "startCol": 11,
                "endCol": 32
              }
            ]
          },
          "805": {
            "partial": false,
            "source": "  if((this.readSecondary || finalReadPreference == ReadPreference.SECONDARY_PREFERRED || finalReadPreference == ReadPreference.SECONDARY) && Object.keys(this._state.secondaries).length > 0) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 137
              },
              {
                "startCol": 6,
                "endCol": 85
              },
              {
                "startCol": 28,
                "endCol": 47
              },
              {
                "startCol": 89,
                "endCol": 108
              },
              {
                "startCol": 141,
                "endCol": 188
              },
              {
                "startCol": 152,
                "endCol": 177
              }
            ]
          },
          "807": {
            "partial": false,
            "source": "    if(tags != null && typeof tags == 'object') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 11
              },
              {
                "startCol": 23,
                "endCol": 34
              },
              {
                "startCol": 30,
                "endCol": 34
              }
            ]
          },
          "809": {
            "partial": false,
            "source": "      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 45
              },
              {
                "startCol": 19,
                "endCol": 44
              }
            ]
          },
          "811": {
            "partial": false,
            "source": "      if(connection == null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 19
              }
            ]
          },
          "812": {
            "partial": false,
            "source": "        return new Error(\"No replica set members available for query\");",
            "missing": [
              {
                "startCol": 8,
                "endCol": 71
              }
            ]
          },
          "816": {
            "partial": false,
            "source": "      var keys = Object.keys(this._state.secondaries);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 54
              },
              {
                "startCol": 17,
                "endCol": 53
              }
            ]
          },
          "817": {
            "partial": false,
            "source": "      this._currentServerChoice = this._currentServerChoice % keys.length;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 74
              },
              {
                "startCol": 34,
                "endCol": 73
              }
            ]
          },
          "818": {
            "partial": false,
            "source": "      var key = keys[this._currentServerChoice++];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 50
              },
              {
                "startCol": 21,
                "endCol": 48
              }
            ]
          },
          "820": {
            "partial": false,
            "source": "      connection = this._state.secondaries[key] != null ? this._state.secondaries[key].checkoutReader() : null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 111
              },
              {
                "startCol": 19,
                "endCol": 55
              },
              {
                "startCol": 58,
                "endCol": 103
              },
              {
                "startCol": 106,
                "endCol": 110
              }
            ]
          },
          "822": {
            "partial": false,
            "source": "      connection = connection == null ? pickFirstConnectedSecondary(this, tags) : connection;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 93
              },
              {
                "startCol": 19,
                "endCol": 29
              },
              {
                "startCol": 40,
                "endCol": 79
              },
              {
                "startCol": 82,
                "endCol": 92
              }
            ]
          },
          "824": {
            "partial": false,
            "source": "  } else if(finalReadPreference == ReadPreference.PRIMARY_PREFERRED) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              }
            ]
          },
          "826": {
            "partial": false,
            "source": "    connection = this.checkoutWriter();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              },
              {
                "startCol": 17,
                "endCol": 38
              }
            ]
          },
          "828": {
            "partial": false,
            "source": "    if(connection == null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 17
              }
            ]
          },
          "830": {
            "partial": false,
            "source": "      if(tags != null && typeof tags == 'object') {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 13
              },
              {
                "startCol": 25,
                "endCol": 36
              },
              {
                "startCol": 32,
                "endCol": 36
              }
            ]
          },
          "832": {
            "partial": false,
            "source": "        connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 47
              },
              {
                "startCol": 21,
                "endCol": 46
              }
            ]
          },
          "834": {
            "partial": false,
            "source": "        if(connection == null) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 21
              }
            ]
          },
          "835": {
            "partial": false,
            "source": "          return new Error(\"No replica set members available for query\");",
            "missing": [
              {
                "startCol": 10,
                "endCol": 73
              }
            ]
          },
          "839": {
            "partial": false,
            "source": "        var keys = Object.keys(this._state.secondaries);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 56
              },
              {
                "startCol": 19,
                "endCol": 55
              }
            ]
          },
          "840": {
            "partial": false,
            "source": "        this._currentServerChoice = this._currentServerChoice % keys.length;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 76
              },
              {
                "startCol": 36,
                "endCol": 75
              }
            ]
          },
          "841": {
            "partial": false,
            "source": "        var key = keys[this._currentServerChoice++];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 52
              },
              {
                "startCol": 23,
                "endCol": 50
              }
            ]
          },
          "843": {
            "partial": false,
            "source": "        connection = this._state.secondaries[key] != null ? this._state.secondaries[key].checkoutReader() : null;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 113
              },
              {
                "startCol": 21,
                "endCol": 57
              },
              {
                "startCol": 60,
                "endCol": 105
              },
              {
                "startCol": 108,
                "endCol": 112
              }
            ]
          },
          "845": {
            "partial": false,
            "source": "        connection = connection == null ? pickFirstConnectedSecondary(this, tags) : connection;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 95
              },
              {
                "startCol": 21,
                "endCol": 31
              },
              {
                "startCol": 42,
                "endCol": 81
              },
              {
                "startCol": 84,
                "endCol": 94
              }
            ]
          },
          "848": {
            "partial": false,
            "source": "  } else if(finalReadPreference == ReadPreference.SECONDARY_PREFERRED && tags == null && Object.keys(this._state.secondaries).length == 0) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              },
              {
                "startCol": 73,
                "endCol": 77
              },
              {
                "startCol": 89,
                "endCol": 137
              },
              {
                "startCol": 100,
                "endCol": 125
              }
            ]
          },
          "849": {
            "partial": false,
            "source": "    connection = this.checkoutWriter();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              },
              {
                "startCol": 17,
                "endCol": 38
              }
            ]
          },
          "851": {
            "partial": false,
            "source": "    if(connection == null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 17
              }
            ]
          },
          "852": {
            "partial": false,
            "source": "      var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 111
              },
              {
                "startCol": 27,
                "endCol": 46
              },
              {
                "startCol": 77,
                "endCol": 88
              },
              {
                "startCol": 91,
                "endCol": 110
              }
            ]
          },
          "853": {
            "partial": false,
            "source": "      connection = new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 150
              },
              {
                "startCol": 29,
                "endCol": 110
              },
              {
                "startCol": 96,
                "endCol": 110
              },
              {
                "startCol": 128,
                "endCol": 148
              }
            ]
          },
          "855": {
            "partial": false,
            "source": "  } else if(finalReadPreference == ReadPreference.SECONDARY_PREFERRED) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              }
            ]
          },
          "857": {
            "partial": false,
            "source": "    if(tags != null && typeof tags == 'object') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 11
              },
              {
                "startCol": 23,
                "endCol": 34
              },
              {
                "startCol": 30,
                "endCol": 34
              }
            ]
          },
          "859": {
            "partial": false,
            "source": "      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 45
              },
              {
                "startCol": 19,
                "endCol": 44
              }
            ]
          },
          "861": {
            "partial": false,
            "source": "      if(connection == null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 19
              }
            ]
          },
          "863": {
            "partial": false,
            "source": "        connection = this.checkoutWriter();",
            "missing": [
              {
                "startCol": 8,
                "endCol": 43
              },
              {
                "startCol": 21,
                "endCol": 42
              }
            ]
          },
          "865": {
            "partial": false,
            "source": "        if(connection == null) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 21
              }
            ]
          },
          "866": {
            "partial": false,
            "source": "          return new Error(\"No replica set members available for query\");",
            "missing": [
              {
                "startCol": 10,
                "endCol": 73
              }
            ]
          },
          "869": {
            "partial": false,
            "source": "    } else if(this.strategyInstance != null) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 43
              }
            ]
          },
          "870": {
            "partial": false,
            "source": "      connection = this.strategyInstance.checkoutReader(tags);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 62
              },
              {
                "startCol": 19,
                "endCol": 61
              }
            ]
          },
          "872": {
            "partial": false,
            "source": "  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance != null) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              },
              {
                "startCol": 61,
                "endCol": 90
              }
            ]
          },
          "873": {
            "partial": false,
            "source": "    connection = this.strategyInstance.checkoutSecondary(tags);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 63
              },
              {
                "startCol": 17,
                "endCol": 62
              }
            ]
          },
          "874": {
            "partial": false,
            "source": "  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance == null) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              },
              {
                "startCol": 61,
                "endCol": 90
              }
            ]
          },
          "875": {
            "partial": false,
            "source": "    return new Error(\"A strategy for calculating nearness must be enabled such as ping or statistical\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 104
              }
            ]
          },
          "876": {
            "partial": false,
            "source": "  } else if(finalReadPreference == ReadPreference.SECONDARY && Object.keys(this._state.secondaries).length == 0) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              },
              {
                "startCol": 63,
                "endCol": 111
              },
              {
                "startCol": 74,
                "endCol": 99
              }
            ]
          },
          "877": {
            "partial": false,
            "source": "    if(tags != null && typeof tags == 'object') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 11
              },
              {
                "startCol": 23,
                "endCol": 34
              },
              {
                "startCol": 30,
                "endCol": 34
              }
            ]
          },
          "878": {
            "partial": false,
            "source": "      var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 111
              },
              {
                "startCol": 27,
                "endCol": 46
              },
              {
                "startCol": 77,
                "endCol": 88
              },
              {
                "startCol": 91,
                "endCol": 110
              }
            ]
          },
          "879": {
            "partial": false,
            "source": "      connection = new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 150
              },
              {
                "startCol": 29,
                "endCol": 110
              },
              {
                "startCol": 96,
                "endCol": 110
              },
              {
                "startCol": 128,
                "endCol": 148
              }
            ]
          },
          "881": {
            "partial": false,
            "source": "      connection = new Error(\"No replica set secondary available for query with ReadPreference SECONDARY\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 107
              }
            ]
          },
          "884": {
            "partial": false,
            "source": "    connection = this.checkoutWriter();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              },
              {
                "startCol": 17,
                "endCol": 38
              }
            ]
          },
          "888": {
            "partial": false,
            "source": "  return connection;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "896": {
            "partial": false,
            "source": "  var allConnections = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "897": {
            "partial": false,
            "source": "  if(this._state.master == null) return [];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 31
              },
              {
                "startCol": 33,
                "endCol": 43
              }
            ]
          },
          "899": {
            "partial": false,
            "source": "  var allMasterConnections = this._state.master.connectionPool.getAllConnections();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 83
              },
              {
                "startCol": 29,
                "endCol": 82
              }
            ]
          },
          "901": {
            "partial": false,
            "source": "  allConnections = allConnections.concat(allMasterConnections);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 63
              },
              {
                "startCol": 19,
                "endCol": 62
              }
            ]
          },
          "904": {
            "partial": false,
            "source": "  if(this.readSecondary && Object.keys(this._state.secondaries).length > 0) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 74
              },
              {
                "startCol": 27,
                "endCol": 74
              },
              {
                "startCol": 38,
                "endCol": 63
              }
            ]
          },
          "906": {
            "partial": false,
            "source": "    var keys = Object.keys(this._state.secondaries);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 15,
                "endCol": 51
              }
            ]
          },
          "908": {
            "partial": false,
            "source": "    for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              }
            ]
          },
          "910": {
            "partial": false,
            "source": "      var secondaryPoolConnections = this._state.secondaries[keys[i]].connectionPool.getAllConnections();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 105
              },
              {
                "startCol": 37,
                "endCol": 104
              }
            ]
          },
          "912": {
            "partial": false,
            "source": "      allConnections = allConnections.concat(secondaryPoolConnections);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 71
              },
              {
                "startCol": 23,
                "endCol": 70
              }
            ]
          },
          "917": {
            "partial": false,
            "source": "  return allConnections;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "925": {
            "partial": false,
            "source": "  this.recordQueryStats = enable;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              }
            ]
          },
          "928": {
            "partial": false,
            "source": "  if(this._state != null && this._state.addresses != null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 24
              },
              {
                "startCol": 28,
                "endCol": 57
              }
            ]
          },
          "929": {
            "partial": false,
            "source": "    var keys = Object.keys(this._state.addresses);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              },
              {
                "startCol": 15,
                "endCol": 49
              }
            ]
          },
          "931": {
            "partial": false,
            "source": "    for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              }
            ]
          },
          "932": {
            "partial": false,
            "source": "      this._state.addresses[keys[i]].enableRecordQueryStats(enable);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 67
              }
            ]
          },
          "934": {
            "partial": false,
            "source": "  } else if(Array.isArray(this.servers)) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 39
              }
            ]
          },
          "935": {
            "partial": false,
            "source": "    for(var i = 0; i < this.servers.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 44,
                "endCol": 47
              }
            ]
          },
          "936": {
            "partial": false,
            "source": "      this.servers[i].enableRecordQueryStats(enable);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              }
            ]
          },
          "945": {
            "partial": false,
            "source": "  this.close(callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "952": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "954": {
            "partial": false,
            "source": "  this._serverState = 'disconnected';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 37
              }
            ]
          },
          "956": {
            "partial": false,
            "source": "  if(this._state && this._state.addresses) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 41
              }
            ]
          },
          "957": {
            "partial": false,
            "source": "    var keys = Object.keys(this._state.addresses);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              },
              {
                "startCol": 15,
                "endCol": 49
              }
            ]
          },
          "959": {
            "partial": false,
            "source": "    for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              }
            ]
          },
          "960": {
            "partial": false,
            "source": "      this._state.addresses[keys[i]].close();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 44
              }
            ]
          },
          "965": {
            "partial": false,
            "source": "  if(this.strategyInstance) this.strategyInstance.stop();",
            "missing": [
              {
                "startCol": 28,
                "endCol": 56
              }
            ]
          },
          "968": {
            "partial": false,
            "source": "  if(typeof callback == 'function') callback(null, null);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 20
              },
              {
                "startCol": 12,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 56
              }
            ]
          },
          "977": {
            "partial": false,
            "source": "      return true;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 18
              }
            ]
          },
          "987": {
            "partial": false,
            "source": "      if(this._readPreference == null && this.readSecondary) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 37
              }
            ]
          },
          "988": {
            "partial": false,
            "source": "        return ReadPreference.SECONDARY_PREFERRED;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 50
              }
            ]
          },
          "989": {
            "partial": false,
            "source": "      } else if(this._readPreference == null && !this.readSecondary) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 44
              },
              {
                "startCol": 48,
                "endCol": 67
              }
            ]
          },
          "990": {
            "partial": false,
            "source": "        return ReadPreference.PRIMARY;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 38
              }
            ]
          },
          "992": {
            "partial": false,
            "source": "        return this._readPreference;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 36
              }
            ]
          },
          "1003": {
            "partial": false,
            "source": "    var servers = this.allServerInstances();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 44
              },
              {
                "startCol": 18,
                "endCol": 43
              }
            ]
          },
          "1004": {
            "partial": false,
            "source": "    return servers.length > 0 ? servers[0].dbInstances : [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 60
              },
              {
                "startCol": 11,
                "endCol": 29
              },
              {
                "startCol": 32,
                "endCol": 54
              },
              {
                "startCol": 57,
                "endCol": 59
              }
            ]
          },
          "1014": {
            "partial": false,
            "source": "      if (this.primary != null) return this.primary.host;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 30
              },
              {
                "startCol": 32,
                "endCol": 57
              }
            ]
          },
          "1024": {
            "partial": false,
            "source": "      if (this.primary != null) return this.primary.port;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 30
              },
              {
                "startCol": 32,
                "endCol": 57
              }
            ]
          },
          "1034": {
            "partial": false,
            "source": "      return this.secondaries.length > 0 ? this.secondaries[0] : null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 70
              },
              {
                "startCol": 13,
                "endCol": 40
              },
              {
                "startCol": 43,
                "endCol": 62
              },
              {
                "startCol": 65,
                "endCol": 69
              }
            ]
          },
          "1044": {
            "partial": false,
            "source": "      var keys = Object.keys(this._state.secondaries);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 54
              },
              {
                "startCol": 17,
                "endCol": 53
              }
            ]
          },
          "1045": {
            "partial": false,
            "source": "      var array = new Array(keys.length);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 41
              }
            ]
          },
          "1047": {
            "partial": false,
            "source": "      for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 38,
                "endCol": 41
              }
            ]
          },
          "1048": {
            "partial": false,
            "source": "        array[i] = this._state.secondaries[keys[i]];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 52
              }
            ]
          },
          "1050": {
            "partial": false,
            "source": "      return array;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 19
              }
            ]
          },
          "1060": {
            "partial": false,
            "source": "      return this.secondaries.concat(this.passives);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              },
              {
                "startCol": 13,
                "endCol": 51
              }
            ]
          },
          "1070": {
            "partial": false,
            "source": "      var keys = Object.keys(this._state.arbiters);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 51
              },
              {
                "startCol": 17,
                "endCol": 50
              }
            ]
          },
          "1071": {
            "partial": false,
            "source": "      var array = new Array(keys.length);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 41
              }
            ]
          },
          "1073": {
            "partial": false,
            "source": "      for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 38,
                "endCol": 41
              }
            ]
          },
          "1074": {
            "partial": false,
            "source": "        array[i] = this._state.arbiters[keys[i]];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 49
              }
            ]
          },
          "1076": {
            "partial": false,
            "source": "      return array;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 19
              }
            ]
          },
          "1086": {
            "partial": false,
            "source": "      var keys = Object.keys(this._state.passives);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 51
              },
              {
                "startCol": 17,
                "endCol": 50
              }
            ]
          },
          "1087": {
            "partial": false,
            "source": "      var array = new Array(keys.length);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 41
              }
            ]
          },
          "1089": {
            "partial": false,
            "source": "      for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 38,
                "endCol": 41
              }
            ]
          },
          "1090": {
            "partial": false,
            "source": "        array[i] = this._state.passives[keys[i]];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 49
              }
            ]
          },
          "1092": {
            "partial": false,
            "source": "      return array;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 19
              }
            ]
          },
          "1102": {
            "partial": false,
            "source": "      return this._state != null ? this._state.master : null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 61
              },
              {
                "startCol": 13,
                "endCol": 32
              },
              {
                "startCol": 35,
                "endCol": 53
              },
              {
                "startCol": 56,
                "endCol": 60
              }
            ]
          }
        },
        "source": "var Connection = require('./connection').Connection,\n  ReadPreference = require('./read_preference').ReadPreference,\n  DbCommand = require('../commands/db_command').DbCommand,\n  MongoReply = require('../responses/mongo_reply').MongoReply,\n  debug = require('util').debug,\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  inspect = require('util').inspect,\n  Server = require('./server').Server,\n  PingStrategy = require('./strategies/ping_strategy').PingStrategy,\n  StatisticsStrategy = require('./strategies/statistics_strategy').StatisticsStrategy;\n\nconst STATE_STARTING_PHASE_1 = 0;\nconst STATE_PRIMARY = 1;\nconst STATE_SECONDARY = 2;\nconst STATE_RECOVERING = 3;\nconst STATE_FATAL_ERROR = 4;\nconst STATE_STARTING_PHASE_2 = 5;\nconst STATE_UNKNOWN = 6;\nconst STATE_ARBITER = 7;\nconst STATE_DOWN = 8;\nconst STATE_ROLLBACK = 9;\n\n/**\n * ReplSet constructor provides replicaset functionality\n *\n * Options\n *  - **ha** {Boolean, default:true}, turn on high availability.\n *  - **haInterval** {Number, default:2000}, time between each replicaset status check.\n *  - **reconnectWait** {Number, default:1000}, time to wait in miliseconds before attempting reconnect.\n *  - **retries** {Number, default:30}, number of times to attempt a replicaset reconnect.\n *  - **rs_name** {String}, the name of the replicaset to connect to.\n *  - **socketOptions** {Object, default:null}, an object containing socket options to use (noDelay:(boolean), keepAlive:(number), connectTimeoutMS:(number), socketTimeoutMS:(number))\n *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n *  - **strategy** {String, default:null}, selection strategy for reads choose between (ping and statistical, default is round-robin)\n *  - **secondaryAcceptableLatencyMS** {Number, default:15}, sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)\n *  - **connectArbiter** {Boolean, default:false}, sets if the driver should connect to arbiters or not.\n *\n * @class Represents a Replicaset Configuration\n * @param {Array} list of server objects participating in the replicaset.\n * @param {Object} [options] additional options for the replicaset connection.\n */\nvar ReplSet = exports.ReplSet = function(servers, options) {\n  this.count = 0;\n\n  // Set up basic\n  if(!(this instanceof ReplSet))\n    return new ReplSet(servers, options);\n\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // Ensure no Mongos's\n  for(var i = 0; i < servers.length; i++) {\n    if(!(servers[i] instanceof Server)) throw new Error(\"list of servers must be of type Server\");\n  }\n\n  // Just reference for simplicity\n  var self = this;\n  // Contains the master server entry\n  this.options = options == null ? {} : options;\n  this.reconnectWait = this.options[\"reconnectWait\"] != null ? this.options[\"reconnectWait\"] : 1000;\n  this.retries = this.options[\"retries\"] != null ? this.options[\"retries\"] : 30;\n  this.replicaSet = this.options[\"rs_name\"];\n\n  // Are we allowing reads from secondaries ?\n  this.readSecondary = this.options[\"read_secondary\"];\n  this.slaveOk = true;\n  this.closedConnectionCount = 0;\n  this._used = false;\n\n  // Connect arbiters ?\n  this.connectArbiter = this.options.connectArbiter == null ? false : this.options.connectArbiter;\n\n  // Default poolSize for new server instances\n  this.poolSize = this.options.poolSize == null ? 5 : this.options.poolSize;\n  this._currentServerChoice = 0;\n\n  // Set up ssl connections\n  this.ssl = this.options.ssl == null ? false : this.options.ssl;\n\n  // Just keeps list of events we allow\n  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[]};\n  // Internal state of server connection\n  this._serverState = 'disconnected';\n  // Read preference\n  this._readPreference = null;\n  // Number of initalized severs\n  this._numberOfServersLeftToInitialize = 0;\n  // Do we record server stats or not\n  this.recordQueryStats = false;\n\n  // Get the readPreference\n  var readPreference = this.options['readPreference'];\n\n  // Validate correctness of Read preferences\n  if(readPreference != null) {\n    if(readPreference != ReadPreference.PRIMARY && readPreference != ReadPreference.PRIMARY_PREFERRED\n      && readPreference != ReadPreference.SECONDARY && readPreference != ReadPreference.SECONDARY_PREFERRED\n      && readPreference != ReadPreference.NEAREST && typeof readPreference != 'object' && readPreference['_type'] != 'ReadPreference') {\n      throw new Error(\"Illegal readPreference mode specified, \" + readPreference);\n    }\n\n    this._readPreference = readPreference;\n  } else {\n    this._readPreference = null;\n  }\n\n  // Strategy for picking a secondary\n  this.secondaryAcceptableLatencyMS = this.options['secondaryAcceptableLatencyMS'] == null ? 15 : this.options['secondaryAcceptableLatencyMS'];\n  this.strategy = this.options['strategy'];\n  // Make sure strategy is one of the two allowed\n  if(this.strategy != null && (this.strategy != 'ping' && this.strategy != 'statistical')) throw new Error(\"Only ping or statistical strategies allowed\");\n  // Let's set up our strategy object for picking secodaries\n  if(this.strategy == 'ping') {\n    // Create a new instance\n    this.strategyInstance = new PingStrategy(this, this.secondaryAcceptableLatencyMS);\n    this.strategyInstance.start();\n  } else if(this.strategy == 'statistical') {\n    // Set strategy as statistical\n    this.strategyInstance = new StatisticsStrategy(this);\n    // Add enable query information\n    this.enableRecordQueryStats(true);\n  }\n\n  // Set default connection pool options\n  this.socketOptions = this.options.socketOptions != null ? this.options.socketOptions : {};\n\n  // Set up logger if any set\n  this.logger = this.options.logger != null\n    && (typeof this.options.logger.debug == 'function')\n    && (typeof this.options.logger.error == 'function')\n    && (typeof this.options.logger.debug == 'function')\n      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};\n\n  // Ensure all the instances are of type server and auto_reconnect is false\n  if(!Array.isArray(servers) || servers.length == 0) {\n    throw Error(\"The parameter must be an array of servers and contain at least one server\");\n  } else if(Array.isArray(servers) || servers.length > 0) {\n    var count = 0;\n    servers.forEach(function(server) {\n      if(server instanceof Server) count = count + 1;\n      // Ensure no server has reconnect on\n      server.options.auto_reconnect = false;\n    });\n\n    if(count < servers.length) {\n      throw Error(\"All server entries must be of type Server\");\n    } else {\n      this.servers = servers;\n    }\n  }\n\n  // var deduplicate list\n  var uniqueServers = {};\n  // De-duplicate any servers in the seed list\n  for(var i = 0; i < this.servers.length; i++) {\n    var server = this.servers[i];\n    // If server does not exist set it\n    if(uniqueServers[server.host + \":\" + server.port] == null) {\n      uniqueServers[server.host + \":\" + server.port] = server;\n    }\n  }\n\n  // Let's set the deduplicated list of servers\n  this.servers = [];\n  // Add the servers\n  for(var key in uniqueServers) {\n    this.servers.push(uniqueServers[key]);\n  }\n\n  // Enabled ha\n  this.haEnabled = this.options['ha'] == null ? true : this.options['ha'];\n  // How often are we checking for new servers in the replicaset\n  this.replicasetStatusCheckInterval = this.options['haInterval'] == null ? 1000 : this.options['haInterval'];\n  this._replicasetTimeoutId = null;\n  // Connection timeout\n  this._connectTimeoutMS = 1000;\n  // Current list of servers to test\n  this.pingCandidateServers = [];\n\n  // Last replicaset check time\n  this.lastReplicaSetTime = new Date().getTime();\n};\n\n/**\n * @ignore\n */\ninherits(ReplSet, EventEmitter);\n\n/**\n * @ignore\n */\n// Allow setting the read preference at the replicaset level\nReplSet.prototype.setReadPreference = function(preference) {\n  // Set read preference\n  this._readPreference = preference;\n  // Ensure slaveOk is correct for secodnaries read preference and tags\n  if((this._readPreference == ReadPreference.SECONDARY_PREFERRED || this._readPreference == ReadPreference.SECONDARY)\n    || (this._readPreference != null && typeof this._readPreference == 'object')) {\n    this.slaveOk = true;\n  }\n}\n\n/**\n * @ignore\n */\nReplSet.prototype._isUsed = function() {\n  return this._used;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.isMongos = function() {\n  return false;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.isConnected = function() {\n  return this.primary != null && this._state.master != null && this._state.master.isConnected();\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.isSetMember = function() {\n  return false;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.isPrimary = function(config) {\n  return this.readSecondary && Object.keys(this._state.secondaries).length > 0 ? false : true;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.isReadPrimary = ReplSet.prototype.isPrimary;\n\n/**\n * @ignore\n **/\nReplSet.prototype._checkReplicaSet = function() {\n  if(!this.haEnabled) return false;\n  var currentTime = new Date().getTime();\n  if((currentTime - this.lastReplicaSetTime) >= this.replicasetStatusCheckInterval) {\n    this.lastReplicaSetTime = currentTime;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.allServerInstances = function() {\n  var self = this;\n  // Close all the servers (concatenate entire list of servers first for ease)\n  var allServers = self._state.master != null ? [self._state.master] : [];\n\n  // Secondary keys\n  var keys = Object.keys(self._state.secondaries);\n  // Add all secondaries\n  for(var i = 0; i < keys.length; i++) {\n    allServers.push(self._state.secondaries[keys[i]]);\n  }\n\n  // Arbiter keys\n  var keys = Object.keys(self._state.arbiters);\n  // Add all arbiters\n  for(var i = 0; i < keys.length; i++) {\n    allServers.push(self._state.arbiters[keys[i]]);\n  }\n\n  // Passive keys\n  var keys = Object.keys(self._state.passives);\n  // Add all arbiters\n  for(var i = 0; i < keys.length; i++) {\n    allServers.push(self._state.passives[keys[i]]);\n  }\n\n  // Return complete list of all servers\n  return allServers;\n}\n\n/**\n * @ignore\n */\nvar __executeAllCallbacksWithError = function(dbInstance, error) {\n  var keys = Object.keys(dbInstance._callBackStore._notReplied);\n  // Iterate over all callbacks\n  for(var i = 0; i < keys.length; i++) {\n    // Delete info object\n    delete dbInstance._callBackStore._notReplied[keys[i]];\n    // Emit the error\n    dbInstance._callBackStore.emit(keys[i], error);\n  }\n}\n\n/**\n * @ignore\n */\nReplSet.prototype._validateReplicaset = function(result, auths) {\n  var self = this;\n  // For each member we need to check if we have a new connection that needs to be established\n  var members = result['documents'][0]['members'];\n  // Get members\n  var members = Array.isArray(result['documents'][0]['members']) ? result['documents'][0]['members'] : [];\n  // The total members we check\n  var serversToConnectList = {};\n\n  // Iterate over all the members and see if we need to reconnect\n  for(var i = 0, jlen = members.length; i < jlen; i++) {\n    var member = members[i];\n\n    if(member['health'] != 0\n      && null == self._state['addresses'][member['name']]\n      && null == serversToConnectList[member['name']]) {\n      if (member['stateStr'] == 'ARBITER' && self.connectArbiter != true) {\n        continue;\n      }\n      // Split the server string\n      var parts = member.name.split(/:/);\n      if(parts.length == 1) {\n        parts = [parts[0], Connection.DEFAULT_PORT];\n      }\n\n      // Default empty socket options object\n      var socketOptions = {host:parts[0], port:parseInt(parts[1], 10)};\n      // If a socket option object exists clone it\n      if(self.socketOptions != null) {\n        var keys = Object.keys(self.socketOptions);\n        for(var k = 0; k < keys.length;k++) socketOptions[keys[i]] = self.socketOptions[keys[i]];\n      }\n\n      // Create a new server instance\n      var newServer = new Server(parts[0], parseInt(parts[1], 10), {auto_reconnect:false, 'socketOptions':socketOptions\n                      , logger:self.logger, ssl:self.ssl, poolSize:self.poolSize});\n      // Set the replicaset instance\n      newServer.replicasetInstance = self;\n\n      // Add handlers\n      newServer.on(\"close\", _handler(\"close\", self));\n      newServer.on(\"error\", _handler(\"error\", self));\n      newServer.on(\"timeout\", _handler(\"timeout\", self));\n      // Add to list of server connection target\n      serversToConnectList[member['name']] = newServer;\n    } else if(member['stateStr'] == 'PRIMARY' && self._state.master['name'] != member['name']) {\n      // Delete master record so we can rediscover it\n      delete self._state['addresses'][self._state.master['name']];\n      // Update inormation on new primary\n      var newMaster = self._state.addresses[member['name']];\n      newMaster.isMasterDoc.ismaster = true;\n      newMaster.isMasterDoc.secondary = false;\n      self._state.master = newMaster;\n      // Remove from secondaries\n      delete self._state.secondaries[member['name']];\n      newMaster = null;\n    }\n  }\n\n  // All servers we want to connect to\n  var serverKeys = Object.keys(serversToConnectList);\n  // For all remaining servers on the list connect\n  while(serverKeys.length > 0) {\n    var _serverKey = serverKeys.pop();\n    // Fetch the server\n    var _server = serversToConnectList[_serverKey];\n    // Add a new server to the total number of servers that need to initialized before we are done\n    //var newServerCallback = self.connectionHandler(_server);\n    var newServerCallback = _connectHandler(self, null, _server)\n    // Connect To the new server\n    _server.connect(self.db, {returnIsMasterResults: true, eventReceiver:newServer}, function(err, result, _server) {\n      if(err == null && result != null) {\n        // Fetch the myState\n        var document = result.documents[0];\n        // Remove from list until\n        if(document.ismaster || document.secondary || document.arbiterOnly) {\n          process.nextTick(function() {\n            // Apply any auths\n            if(Array.isArray(auths) && auths.length > 0) {\n              // Get number of auths we need to execute\n              var numberOfAuths = auths.length;\n              // Apply all auths\n              for(var i = 0; i < auths.length; i++) {\n                self.db.authenticate(auths[i].username, auths[i].password, {'authdb':auths[i].authdb}, function(err, authenticated) {\n                  numberOfAuths = numberOfAuths - 1;\n                  // If we have no more authentications to replay\n                  if(numberOfAuths == 0) {\n                    newServerCallback(err, result, _server);\n                  }\n                });\n              }\n            } else {\n              newServerCallback(err, result, _server);\n            }\n          });\n        } else {\n          _server.close();\n        }\n      } else {\n        _server.close();\n      }\n    });\n  }\n}\n\nvar _handler = function(event, self) {\n  return function(err, server) {\n    // Check if we have a secondary server\n    if(self._state.master && self._state.master.name == server.name) {\n      // Force close\n      self.close();\n      // Error out all callbacks\n      __executeAllCallbacksWithError(self.db, err);\n    } else if(self._state.master\n      && (self._state.secondaries[server.name] != null\n        || self._state.arbiters[server.name] != null\n        || self._state.passives[server.name] != null)) {\n\n        delete self._state.secondaries[server.name];\n        delete self._state.arbiters[server.name];\n        delete self._state.passives[server.name];\n        delete self._state.addresses[server.name];\n    }\n\n    // If it's a primary we need to close the set to reconnect\n    if(self._state.master && self._state.master.host == server.host && self._state.master.port == server.port) {\n      // If we have app listeners on close event\n      if(self.db.listeners(event).length > 0) {\n        self.db.emit(event, err);\n      }\n    }\n  }\n}\n\nvar _connectHandler = function(self, candidateServers, instanceServer) {\n  return function(err, result) {\n    // We are disconnected stop attempting reconnect or connect\n    if(self._serverState == 'disconnected') return instanceServer.close();\n    // If no error handle isMaster\n    if(err == null && result.documents[0].hosts != null) {\n      // Fetch the isMaster command result\n      var document = result.documents[0];\n      // Break out the results\n      var setName = document.setName;\n      var isMaster = document.ismaster;\n      var secondary = document.secondary;\n      var passive = document.passive;\n      var arbiterOnly = document.arbiterOnly;\n      var hosts = Array.isArray(document.hosts) ? document.hosts : [];\n      var arbiters = Array.isArray(document.arbiters) ? document.arbiters : [];\n      var passives = Array.isArray(document.passives) ? document.passives : [];\n      var tags = document.tags ? document.tags : {};\n      var primary = document.primary;\n      // Find the current server name and fallback if none\n      var userProvidedServerString = instanceServer.host + \":\" + instanceServer.port;\n      var me = document.me || userProvidedServerString;\n\n      // Verify if the set name is the same otherwise shut down and return an error\n      if(self.replicaSet == null) {\n        self.replicaSet = setName;\n      } else if(self.replicaSet != setName) {\n        // Stop the set\n        self.close();\n        // Emit a connection error\n        return self.emit(\"connectionError\",\n          new Error(\"configured mongodb replicaset does not match provided replicaset [\" + setName + \"] != [\" + self.replicaSet + \"]\"))\n      }\n\n      // Make sure we have the right reference\n      var oldServer = self._state.addresses[userProvidedServerString]\n      if (oldServer && oldServer !== instanceServer) oldServer.close();\n      delete self._state.addresses[userProvidedServerString];\n\n      if (self._state.addresses[me] && self._state.addresses[me] !== instanceServer) self._state.addresses[me].close();\n      self._state.addresses[me] = instanceServer;\n\n      // Let's add the server to our list of server types\n      if(secondary == true && (passive == false || passive == null)) {\n        self._state.secondaries[me] = instanceServer;\n      } else if(arbiterOnly == true) {\n        self._state.arbiters[me] = instanceServer;\n      } else if(secondary == true && passive == true) {\n        self._state.passives[me] = instanceServer;\n      } else if(isMaster == true) {\n        self._state.master = instanceServer;\n      } else if(isMaster == false && primary != null && self._state.addresses[primary]) {\n        self._state.master = self._state.addresses[primary];\n      }\n\n      // Set the name\n      instanceServer.name = me;\n      // Add tag info\n      instanceServer.tags = tags;\n      // Add the handlers to the instance\n      instanceServer.on(\"close\", _handler(\"close\", self));\n      instanceServer.on(\"error\", _handler(\"error\", self));\n      instanceServer.on(\"timeout\", _handler(\"timeout\", self));\n\n      // Possible hosts\n      var possibleHosts = Array.isArray(hosts) ? hosts.slice() : [];\n      possibleHosts = Array.isArray(passives) ? possibleHosts.concat(passives) : possibleHosts;\n\n      if(self.connectArbiter == true) {\n        possibleHosts = Array.isArray(arbiters) ? possibleHosts.concat(arbiters) : possibleHosts;\n      }\n\n      if(Array.isArray(candidateServers)) {\n        // Add any new candidate servers for connection\n        for(var j = 0; j < possibleHosts.length; j++) {\n          if(self._state.addresses[possibleHosts[j]] == null && possibleHosts[j] != null) {\n            var parts = possibleHosts[j].split(/:/);\n            if(parts.length == 1) {\n              parts = [parts[0], Connection.DEFAULT_PORT];\n            }\n\n            // New candidate server\n            var candidateServer = new Server(parts[0], parseInt(parts[1]));\n            candidateServer.name = possibleHosts[j];\n            self._state.addresses[possibleHosts[j]] = candidateServer;\n            // Add the new server to the list of candidate servers\n            candidateServers.push(candidateServer);\n          }\n        }\n      }\n    } else if(err != null || self._serverState == 'disconnected'){\n      delete self._state.addresses[instanceServer.host + \":\" + instanceServer.port];\n      // Remove it from the set\n      instanceServer.close();\n    }\n\n    // Attempt to connect to the next server\n    if(Array.isArray(candidateServers) && candidateServers.length > 0) {\n      var server = candidateServers.pop();\n      // Get server addresses\n      var addresses = self._state.addresses;\n      // Default empty socket options object\n      var socketOptions = {};\n      // If a socket option object exists clone it\n      if(self.socketOptions != null && typeof self.socketOptions === 'object') {\n        var keys = Object.keys(self.socketOptions);\n        for(var j = 0; j < keys.length;j++) socketOptions[keys[j]] = self.socketOptions[keys[j]];\n      }\n      // If ssl is specified\n      if(self.ssl) serverConnections[i].ssl = true;\n      // Set fast connect timeout\n      socketOptions['connectTimeoutMS'] = self._connectTimeoutMS\n      // Add host information to socket options\n      socketOptions['host'] = server.host;\n      socketOptions['port'] = server.port;\n      server.socketOptions = socketOptions;\n      server.replicasetInstance = self;\n      server.enableRecordQueryStats(self.recordQueryStats);\n\n      // Set the server\n      if (addresses[server.host + \":\" + server.port] != server) {\n        if (addresses[server.host + \":\" + server.port]) {\n          // Close the connection before deleting\n          addresses[server.host + \":\" + server.port].close();\n        }\n        delete addresses[server.host + \":\" + server.port];\n      }\n      addresses[server.host + \":\" + server.port] = server;\n      // Connect\n      server.connect(self.db, {returnIsMasterResults: true, eventReceiver:server}, _connectHandler(self, candidateServers, server));\n    } else if(Array.isArray(candidateServers)) {\n      // If we have no primary emit error\n      if(self._state.master == null) {\n        // Stop the set\n        self.close();\n        // Emit a connection error\n        return self.emit(\"connectionError\",\n          new Error(\"no primary server found in set\"))\n      } else{\n        self.emit(\"fullsetup\", null, self.db, self);\n        self.emit(\"open\", null, self.db, self);\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.connect = function(parent, options, callback) {\n  var self = this;\n  if('function' === typeof options) callback = options, options = {};\n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n\n  // Ensure it's all closed\n  self.close();\n  // Set connecting status\n  this.db = parent;\n  this._serverState = 'connecting';\n  this._callbackList = [];\n  this._state = {'master':null, 'secondaries':{}, 'arbiters':{}, 'passives':{}\n    , 'errors':{}, 'addresses':{}, 'setName':null, 'errorMessages':[], 'members':[]};\n  // Ensure parent can do a slave query if it's set\n  parent.slaveOk = this.slaveOk ? this.slaveOk : parent.slaveOk;\n\n  // Remove any listeners\n  this.removeAllListeners(\"fullsetup\");\n  this.removeAllListeners(\"connectionError\");\n\n  // Add primary found event handler\n  this.once(\"fullsetup\", function() {\n    // Set state connected\n    self._serverState = 'connected';\n    // Emit the fullsetup and open event\n    parent.emit(\"open\", null, self.db, self);\n    parent.emit(\"fullsetup\", null, self.db, self);\n    // Callback\n    if(typeof callback == 'function') {\n      var internalCallback = callback;\n      callback = null;\n      internalCallback(null, parent, self);\n    }\n  });\n\n  this.once(\"connectionError\", function(err) {\n    self._serverState = 'disconnected';\n    // Ensure it's all closed\n    self.close();\n    // Perform the callback\n    if(typeof callback == 'function') {\n      var internalCallback = callback;\n      callback = null;\n      internalCallback(err, parent, self);\n    }\n  });\n\n  // Get server addresses\n  var addresses = this._state.addresses;\n\n  // Default empty socket options object\n  var socketOptions = {};\n  // If a socket option object exists clone it\n  if(this.socketOptions != null && typeof this.socketOptions === 'object') {\n    var keys = Object.keys(this.socketOptions);\n    for(var j = 0; j < keys.length;j++) socketOptions[keys[j]] = this.socketOptions[keys[j]];\n  }\n  // If ssl is specified\n  if(this.ssl) serverConnections[i].ssl = true;\n  // Set fast connect timeout\n  socketOptions['connectTimeoutMS'] = this._connectTimeoutMS\n\n  // De-duplicate any servers\n  var server;\n  for(var i = 0; i < this.servers.length; i++) {\n    server = this.servers[i];\n    // Add host information to socket options\n    socketOptions['host'] = server.host;\n    socketOptions['port'] = server.port;\n    server.socketOptions = socketOptions;\n    server.replicasetInstance = this;\n    server.enableRecordQueryStats(this.recordQueryStats);\n    // If server does not exist set it\n    if(addresses[server.host + \":\" + server.port] == null) {\n      addresses[server.host + \":\" + server.port] = server;\n    }\n  }\n\n  // Get the list of servers that is deduplicated and start connecting\n  var candidateServers = [];\n  var keys = Object.keys(addresses);\n  for(var i = 0; i < keys.length; i++) {\n    candidateServers.push(addresses[keys[i]]);\n  }\n  // Let's connect to the first one on the list\n  server = candidateServers.pop();\n  server.connect(parent, {returnIsMasterResults: true, eventReceiver:server}, _connectHandler(this, candidateServers, server));\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.checkoutWriter = function() {\n  // Establish connection\n  var connection = this._state.master != null ? this._state.master.checkoutWriter() : null;\n  // Return the connection\n  return connection;\n}\n\n/**\n * @ignore\n */\nvar pickFirstConnectedSecondary = function pickFirstConnectedSecondary(self, tags) {\n  var keys = Object.keys(self._state.secondaries);\n  var connection = null;\n\n  // Find first available reader if any\n  for(var i = 0; i < keys.length; i++) {\n    connection = self._state.secondaries[keys[i]].checkoutReader();\n    if(connection != null) break;\n  }\n\n  // If we still have a null, read from primary if it's not secondary only\n  if(self._readPreference == ReadPreference.SECONDARY_PREFERRED) {\n    connection = self._state.master.checkoutReader();\n  }\n\n  if(connection == null) {\n    var preferenceName = self._readPreference == ReadPreference.SECONDARY_PREFERRED ? 'secondary' : self._readPreference;\n    return new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n  }\n\n  // Return the connection\n  return connection;\n}\n\n/**\n * @ignore\n */\nvar _pickFromTags = function(self, tags) {\n  // If we have an array or single tag selection\n  var tagObjects = Array.isArray(tags) ? tags : [tags];\n  // Iterate over all tags until we find a candidate server\n  for(var _i = 0; _i < tagObjects.length; _i++) {\n    // Grab a tag object\n    var tagObject = tagObjects[_i];\n    // Matching keys\n    var matchingKeys = Object.keys(tagObject);\n    // Match all the servers that match the provdided tags\n    var keys = Object.keys(self._state.secondaries);\n    var candidateServers = [];\n\n    for(var i = 0; i < keys.length; i++) {\n      var server = self._state.secondaries[keys[i]];\n      // If we have tags match\n      if(server.tags != null) {\n        var matching = true;\n        // Ensure we have all the values\n        for(var j = 0; j < matchingKeys.length; j++) {\n          if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {\n            matching = false;\n            break;\n          }\n        }\n\n        // If we have a match add it to the list of matching servers\n        if(matching) {\n          candidateServers.push(server);\n        }\n      }\n    }\n\n    // If we have a candidate server return\n    if(candidateServers.length > 0) {\n      if(this.strategyInstance) return this.strategyInstance.checkoutSecondary(tags, candidateServers);\n      // Set instance to return\n      return candidateServers[Math.floor(Math.random() * candidateServers.length)].checkoutReader();\n    }\n  }\n\n  // No connection found\n  return null;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.checkoutReader = function(readPreference, tags) {\n  var connection = null;\n  // If we have a read preference object unpack it\n  if(typeof readPreference == 'object' && readPreference['_type'] == 'ReadPreference') {\n    // Validate if the object is using a valid mode\n    if(!readPreference.isValid()) throw new Error(\"Illegal readPreference mode specified, \" + readPreference.mode);\n    // Set the tag\n    tags = readPreference.tags;\n    readPreference = readPreference.mode;\n  } else if(typeof readPreference == 'object' && readPreference['_type'] != 'ReadPreference') {\n    throw new Error(\"read preferences must be either a string or an instance of ReadPreference\");\n  }\n\n  // Set up our read Preference, allowing us to override the readPreference\n  var finalReadPreference = readPreference != null ? readPreference : this._readPreference;\n  finalReadPreference = finalReadPreference == true ? ReadPreference.SECONDARY_PREFERRED : finalReadPreference;\n\n  // If we are reading from a primary\n  if(finalReadPreference == 'primary') {\n    // If we provide a tags set send an error\n    if(typeof tags == 'object' && tags != null) {\n      return new Error(\"PRIMARY cannot be combined with tags\");\n    }\n\n    // If we provide a tags set send an error\n    if(this._state.master == null) {\n      return new Error(\"No replica set primary available for query with ReadPreference PRIMARY\");\n    }\n\n    // Checkout a writer\n    return this.checkoutWriter();\n  }\n\n  // If we have specified to read from a secondary server grab a random one and read\n  // from it, otherwise just pass the primary connection\n  if((this.readSecondary || finalReadPreference == ReadPreference.SECONDARY_PREFERRED || finalReadPreference == ReadPreference.SECONDARY) && Object.keys(this._state.secondaries).length > 0) {\n    // If we have tags, look for servers matching the specific tag\n    if(tags != null && typeof tags == 'object') {\n      // Get connection\n      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {\n      // No candidate servers that match the tags, error\n      if(connection == null) {\n        return new Error(\"No replica set members available for query\");\n      }\n    } else {\n      // Pick a secondary using round robin\n      var keys = Object.keys(this._state.secondaries);\n      this._currentServerChoice = this._currentServerChoice % keys.length;\n      var key = keys[this._currentServerChoice++];\n      // Fetch a connectio\n      connection = this._state.secondaries[key] != null ? this._state.secondaries[key].checkoutReader() : null;\n      // If connection is null fallback to first available secondary\n      connection = connection == null ? pickFirstConnectedSecondary(this, tags) : connection;\n    }\n  } else if(finalReadPreference == ReadPreference.PRIMARY_PREFERRED) {\n    // Check if there is a primary available and return that if possible\n    connection = this.checkoutWriter();\n    // If no connection available checkout a secondary\n    if(connection == null) {\n      // If we have tags, look for servers matching the specific tag\n      if(tags != null && typeof tags == 'object') {\n        // Get connection\n        connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {\n        // No candidate servers that match the tags, error\n        if(connection == null) {\n          return new Error(\"No replica set members available for query\");\n        }\n      } else {\n        // Pick a secondary using round robin\n        var keys = Object.keys(this._state.secondaries);\n        this._currentServerChoice = this._currentServerChoice % keys.length;\n        var key = keys[this._currentServerChoice++];\n        // Fetch a connectio\n        connection = this._state.secondaries[key] != null ? this._state.secondaries[key].checkoutReader() : null;\n        // If connection is null fallback to first available secondary\n        connection = connection == null ? pickFirstConnectedSecondary(this, tags) : connection;\n      }\n    }\n  } else if(finalReadPreference == ReadPreference.SECONDARY_PREFERRED && tags == null && Object.keys(this._state.secondaries).length == 0) {\n    connection = this.checkoutWriter();\n    // If no connection return an error\n    if(connection == null) {\n      var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;\n      connection = new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n    }\n  } else if(finalReadPreference == ReadPreference.SECONDARY_PREFERRED) {\n    // If we have tags, look for servers matching the specific tag\n    if(tags != null && typeof tags == 'object') {\n      // Get connection\n      connection = _pickFromTags(this, tags);// = function(self, readPreference, tags) {\n      // No candidate servers that match the tags, error\n      if(connection == null) {\n        // No secondary server avilable, attemp to checkout a primary server\n        connection = this.checkoutWriter();\n        // If no connection return an error\n        if(connection == null) {\n          return new Error(\"No replica set members available for query\");\n        }\n      }\n    } else if(this.strategyInstance != null) {\n      connection = this.strategyInstance.checkoutReader(tags);\n    }\n  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance != null) {\n    connection = this.strategyInstance.checkoutSecondary(tags);\n  } else if(finalReadPreference == ReadPreference.NEAREST && this.strategyInstance == null) {\n    return new Error(\"A strategy for calculating nearness must be enabled such as ping or statistical\");\n  } else if(finalReadPreference == ReadPreference.SECONDARY && Object.keys(this._state.secondaries).length == 0) {\n    if(tags != null && typeof tags == 'object') {\n      var preferenceName = finalReadPreference == ReadPreference.SECONDARY ? 'secondary' : finalReadPreference;\n      connection = new Error(\"No replica set member available for query with ReadPreference \" + preferenceName + \" and tags \" + JSON.stringify(tags));\n    } else {\n      connection = new Error(\"No replica set secondary available for query with ReadPreference SECONDARY\");\n    }\n  } else {\n    connection = this.checkoutWriter();\n  }\n\n  // Return the connection\n  return connection;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.allRawConnections = function() {\n  // Neeed to build a complete list of all raw connections, start with master server\n  var allConnections = [];\n  if(this._state.master == null) return [];\n  // Get connection object\n  var allMasterConnections = this._state.master.connectionPool.getAllConnections();\n  // Add all connections to list\n  allConnections = allConnections.concat(allMasterConnections);\n\n  // If we have read secondary let's add all secondary servers\n  if(this.readSecondary && Object.keys(this._state.secondaries).length > 0) {\n    // Get all the keys\n    var keys = Object.keys(this._state.secondaries);\n    // For each of the secondaries grab the connections\n    for(var i = 0; i < keys.length; i++) {\n      // Get connection object\n      var secondaryPoolConnections = this._state.secondaries[keys[i]].connectionPool.getAllConnections();\n      // Add all connections to list\n      allConnections = allConnections.concat(secondaryPoolConnections);\n    }\n  }\n\n  // Return all the conections\n  return allConnections;\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.enableRecordQueryStats = function(enable) {\n  // Set the global enable record query stats\n  this.recordQueryStats = enable;\n  // Ensure all existing servers already have the flag set, even if the\n  // connections are up already or we have not connected yet\n  if(this._state != null && this._state.addresses != null) {\n    var keys = Object.keys(this._state.addresses);\n    // Iterate over all server instances and set the  enableRecordQueryStats flag\n    for(var i = 0; i < keys.length; i++) {\n      this._state.addresses[keys[i]].enableRecordQueryStats(enable);\n    }\n  } else if(Array.isArray(this.servers)) {\n    for(var i = 0; i < this.servers.length; i++) {\n      this.servers[i].enableRecordQueryStats(enable);\n    }\n  }\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.disconnect = function(callback) {\n  this.close(callback);\n}\n\n/**\n * @ignore\n */\nReplSet.prototype.close = function(callback) {\n  var self = this;\n  // Disconnect\n  this._serverState = 'disconnected';\n  // Close all servers\n  if(this._state && this._state.addresses) {\n    var keys = Object.keys(this._state.addresses);\n    // Iterate over all server instances\n    for(var i = 0; i < keys.length; i++) {\n      this._state.addresses[keys[i]].close();\n    }\n  }\n\n  // If we have a strategy stop it\n  if(this.strategyInstance) this.strategyInstance.stop();\n\n  // If it's a callback\n  if(typeof callback == 'function') callback(null, null);\n}\n\n/**\n * Auto Reconnect property\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"autoReconnect\", { enumerable: true\n  , get: function () {\n      return true;\n    }\n});\n\n/**\n * Get Read Preference method\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"readPreference\", { enumerable: true\n  , get: function () {\n      if(this._readPreference == null && this.readSecondary) {\n        return ReadPreference.SECONDARY_PREFERRED;\n      } else if(this._readPreference == null && !this.readSecondary) {\n        return ReadPreference.PRIMARY;\n      } else {\n        return this._readPreference;\n      }\n    }\n});\n\n/**\n * Db Instances\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"dbInstances\", {enumerable:true\n  , get: function() {\n    var servers = this.allServerInstances();\n    return servers.length > 0 ? servers[0].dbInstances : [];\n  }\n})\n\n/**\n * Just make compatible with server.js\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"host\", { enumerable: true\n  , get: function () {\n      if (this.primary != null) return this.primary.host;\n    }\n});\n\n/**\n * Just make compatible with server.js\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"port\", { enumerable: true\n  , get: function () {\n      if (this.primary != null) return this.primary.port;\n    }\n});\n\n/**\n * Get status of read\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"read\", { enumerable: true\n  , get: function () {\n      return this.secondaries.length > 0 ? this.secondaries[0] : null;\n    }\n});\n\n/**\n * Get list of secondaries\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"secondaries\", {enumerable: true\n  , get: function() {\n      var keys = Object.keys(this._state.secondaries);\n      var array = new Array(keys.length);\n      // Convert secondaries to array\n      for(var i = 0; i < keys.length; i++) {\n        array[i] = this._state.secondaries[keys[i]];\n      }\n      return array;\n    }\n});\n\n/**\n * Get list of all secondaries including passives\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"allSecondaries\", {enumerable: true\n  , get: function() {\n      return this.secondaries.concat(this.passives);\n    }\n});\n\n/**\n * Get list of arbiters\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"arbiters\", {enumerable: true\n  , get: function() {\n      var keys = Object.keys(this._state.arbiters);\n      var array = new Array(keys.length);\n      // Convert arbiters to array\n      for(var i = 0; i < keys.length; i++) {\n        array[i] = this._state.arbiters[keys[i]];\n      }\n      return array;\n    }\n});\n\n/**\n * Get list of passives\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"passives\", {enumerable: true\n  , get: function() {\n      var keys = Object.keys(this._state.passives);\n      var array = new Array(keys.length);\n      // Convert arbiters to array\n      for(var i = 0; i < keys.length; i++) {\n        array[i] = this._state.passives[keys[i]];\n      }\n      return array;\n    }\n});\n\n/**\n * Master connection property\n * @ignore\n */\nObject.defineProperty(ReplSet.prototype, \"primary\", { enumerable: true\n  , get: function () {\n      return this._state != null ? this._state.master : null;\n    }\n});\n\n/**\n * @ignore\n */\n// Backward compatibility\nexports.ReplSetServers = ReplSet;",
        "blocks": {
          "total": 185,
          "seen": 0,
          "missing": 185,
          "percentage": 0
        }
      },
      "hash": "a4dfb4d56c8473ccdf5a8efafc534d6c"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/strategies/ping_strategy.js": {
      "stats": {
        "percentage": 0.6170212765957447,
        "lines": [
          {
            "lineno": 7
          },
          {
            "lineno": 8
          },
          {
            "lineno": 9
          },
          {
            "lineno": 10
          },
          {
            "lineno": 12
          },
          {
            "lineno": 18
          },
          {
            "lineno": 20
          },
          {
            "lineno": 23
          },
          {
            "lineno": 29
          },
          {
            "lineno": 32
          },
          {
            "lineno": 38
          },
          {
            "lineno": 41
          },
          {
            "lineno": 42
          },
          {
            "lineno": 44
          },
          {
            "lineno": 45
          },
          {
            "lineno": 46
          },
          {
            "lineno": 49
          },
          {
            "lineno": 53
          },
          {
            "lineno": 56
          },
          {
            "lineno": 58
          },
          {
            "lineno": 60
          },
          {
            "lineno": 62
          },
          {
            "lineno": 64
          },
          {
            "lineno": 66
          },
          {
            "lineno": 67
          },
          {
            "lineno": 69
          },
          {
            "lineno": 70
          },
          {
            "lineno": 73
          },
          {
            "lineno": 74
          },
          {
            "lineno": 75
          },
          {
            "lineno": 81
          },
          {
            "lineno": 82
          },
          {
            "lineno": 89
          },
          {
            "lineno": 93
          },
          {
            "lineno": 94
          },
          {
            "lineno": 97
          },
          {
            "lineno": 98
          },
          {
            "lineno": 101
          },
          {
            "lineno": 104
          },
          {
            "lineno": 107
          },
          {
            "lineno": 108
          },
          {
            "lineno": 109
          },
          {
            "lineno": 110
          },
          {
            "lineno": 115
          },
          {
            "lineno": 116
          },
          {
            "lineno": 119
          },
          {
            "lineno": 123
          },
          {
            "lineno": 126
          },
          {
            "lineno": 127
          },
          {
            "lineno": 128
          },
          {
            "lineno": 131
          },
          {
            "lineno": 134
          },
          {
            "lineno": 137
          },
          {
            "lineno": 140
          },
          {
            "lineno": 144
          },
          {
            "lineno": 145
          },
          {
            "lineno": 146
          },
          {
            "lineno": 147
          },
          {
            "lineno": 149
          },
          {
            "lineno": 152
          },
          {
            "lineno": 153
          },
          {
            "lineno": 156
          },
          {
            "lineno": 159
          },
          {
            "lineno": 160
          },
          {
            "lineno": 161
          },
          {
            "lineno": 164
          },
          {
            "lineno": 170
          },
          {
            "lineno": 173
          },
          {
            "lineno": 176
          },
          {
            "lineno": 177
          },
          {
            "lineno": 185
          },
          {
            "lineno": 187
          }
        ],
        "missing": 72,
        "seen": 116,
        "seen_lines": [
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 6,
            "e": 16
          },
          {
            "s": 16,
            "e": 27
          },
          {
            "s": 27,
            "e": 35
          },
          {
            "s": 35,
            "e": 122
          },
          {
            "s": 122,
            "e": 189
          }
        ],
        "total": 188,
        "coverage": {
          "7": {
            "partial": false,
            "source": "  this.replicaset = replicaset;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 31
              }
            ]
          },
          "8": {
            "partial": false,
            "source": "  this.secondaryAcceptableLatencyMS = secondaryAcceptableLatencyMS;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 67
              }
            ]
          },
          "9": {
            "partial": false,
            "source": "  this.state = 'disconnected';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 30
              }
            ]
          },
          "10": {
            "partial": false,
            "source": "  this.pingInterval = 5000;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "12": {
            "partial": false,
            "source": "  this.Db = require(\"../../db\").Db;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              },
              {
                "startCol": 19,
                "endCol": 31
              }
            ]
          },
          "18": {
            "partial": false,
            "source": "  if ('connected' == this.state) return;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 31
              },
              {
                "startCol": 33,
                "endCol": 40
              }
            ]
          },
          "20": {
            "partial": false,
            "source": "  this.state = 'connected';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "23": {
            "partial": false,
            "source": "  this._pingServer(callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 28
              }
            ]
          },
          "29": {
            "partial": false,
            "source": "  this.state = 'disconnected';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 30
              }
            ]
          },
          "32": {
            "partial": false,
            "source": "  callback && callback(null, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 10
              },
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "38": {
            "partial": false,
            "source": "  var candidateServers = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 28
              }
            ]
          },
          "41": {
            "partial": false,
            "source": "  if(!Array.isArray(secondaryCandidates)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 40
              },
              {
                "startCol": 6,
                "endCol": 40
              }
            ]
          },
          "42": {
            "partial": false,
            "source": "    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 100
              },
              {
                "startCol": 23,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 94
              },
              {
                "startCol": 97,
                "endCol": 99
              }
            ]
          },
          "44": {
            "partial": false,
            "source": "    var keys = Object.keys(this.replicaset._state.secondaries);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 63
              },
              {
                "startCol": 15,
                "endCol": 62
              }
            ]
          },
          "45": {
            "partial": false,
            "source": "    for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              }
            ]
          },
          "46": {
            "partial": false,
            "source": "      candidateServers.push(this.replicaset._state.secondaries[keys[i]])",
            "missing": [
              {
                "startCol": 6,
                "endCol": 72
              },
              {}
            ]
          },
          "47": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "49": {
            "partial": false,
            "source": "    candidateServers = secondaryCandidates;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 43
              }
            ]
          },
          "53": {
            "partial": false,
            "source": "  var finalCandidates = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "56": {
            "partial": false,
            "source": "  if(tags != null && typeof tags == 'object') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 9
              },
              {
                "startCol": 21,
                "endCol": 32
              },
              {
                "startCol": 28,
                "endCol": 32
              }
            ]
          },
          "58": {
            "partial": false,
            "source": "    var tagObjects = Array.isArray(tags) ? tags : [tags];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 57
              },
              {
                "startCol": 21,
                "endCol": 40
              },
              {
                "startCol": 43,
                "endCol": 47
              },
              {
                "startCol": 50,
                "endCol": 56
              }
            ]
          },
          "60": {
            "partial": false,
            "source": "    for(var _i = 0; _i < tagObjects.length; _i++) {",
            "missing": [
              {
                "startCol": 20,
                "endCol": 22
              },
              {
                "startCol": 44,
                "endCol": 48
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "      var tagObject = tagObjects[_i];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 37
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "      var matchingKeys = Object.keys(tagObject);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 48
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "66": {
            "partial": false,
            "source": "      for(var i = 0; i < candidateServers.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 50,
                "endCol": 53
              }
            ]
          },
          "67": {
            "partial": false,
            "source": "        var server = candidateServers[i];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 41
              }
            ]
          },
          "69": {
            "partial": false,
            "source": "        if(server.tags != null) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 30
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "          var matching = true;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 30
              }
            ]
          },
          "73": {
            "partial": false,
            "source": "          for(var j = 0; j < matchingKeys.length; j++) {",
            "missing": [
              {
                "startCol": 25,
                "endCol": 26
              },
              {
                "startCol": 50,
                "endCol": 53
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 73
              }
            ]
          },
          "75": {
            "partial": false,
            "source": "              matching = false;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 31
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "          if(matching) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 21
              }
            ]
          },
          "82": {
            "partial": false,
            "source": "            finalCandidates.push(server);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 40
              }
            ]
          },
          "89": {
            "partial": false,
            "source": "    var finalCandidates = candidateServers;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 43
              }
            ]
          },
          "93": {
            "partial": false,
            "source": "  finalCandidates.sort(function(a, b) {",
            "missing": [
              {}
            ]
          },
          "94": {
            "partial": false,
            "source": "    return a.runtimeStats['pingMs'] > b.runtimeStats['pingMs'];",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 62
              },
              {
                "startCol": 4,
                "endCol": 63
              }
            ]
          },
          "95": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "97": {
            "partial": false,
            "source": "  if(0 === finalCandidates.length)",
            "missing": [
              {
                "startCol": 5,
                "endCol": 33
              }
            ]
          },
          "98": {
            "partial": false,
            "source": "    return new Error(\"No replica set members available for query\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 67
              }
            ]
          },
          "101": {
            "partial": false,
            "source": "  var lowestPing = finalCandidates[0].runtimeStats['pingMs'] | 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 65
              },
              {
                "startCol": 19,
                "endCol": 64
              }
            ]
          },
          "104": {
            "partial": false,
            "source": "  var acceptable = lowestPing + this.secondaryAcceptableLatencyMS;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 66
              },
              {
                "startCol": 19,
                "endCol": 29
              }
            ]
          },
          "107": {
            "partial": false,
            "source": "  var len = finalCandidates.length;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              }
            ]
          },
          "108": {
            "partial": false,
            "source": "  while(len--) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 13
              }
            ]
          },
          "109": {
            "partial": false,
            "source": "    if(finalCandidates[len].runtimeStats['pingMs'] > acceptable) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 63
              },
              {
                "startCol": 53,
                "endCol": 63
              }
            ]
          },
          "110": {
            "partial": false,
            "source": "      finalCandidates.splice(len, 1);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 36
              }
            ]
          },
          "115": {
            "partial": false,
            "source": "  if(finalCandidates.length == 0)",
            "missing": [
              {
                "startCol": 5,
                "endCol": 32
              }
            ]
          },
          "116": {
            "partial": false,
            "source": "    return new Error(\"No replica set members available for query\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 67
              }
            ]
          },
          "119": {
            "partial": false,
            "source": "  return finalCandidates[Math.round(Math.random(1000000) * (finalCandidates.length - 1))].checkoutReader();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 107
              },
              {
                "startCol": 9,
                "endCol": 106
              },
              {
                "startCol": 25,
                "endCol": 88
              },
              {
                "startCol": 36,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 87
              }
            ]
          },
          "123": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "126": {
            "partial": false,
            "source": "  var pingFunction = function() {",
            "missing": [
              {}
            ]
          },
          "127": {
            "partial": false,
            "source": "    if(self.state == 'disconnected') return;",
            "missing": [
              {},
              {
                "startCol": 37,
                "endCol": 44
              },
              {
                "startCol": 7,
                "endCol": 35
              }
            ]
          },
          "128": {
            "partial": false,
            "source": "    var addresses = self.replicaset._state.addresses;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 53
              }
            ]
          },
          "129": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "130": {
            "partial": false,
            "source": "    // Grab all servers",
            "missing": [
              {}
            ]
          },
          "131": {
            "partial": false,
            "source": "    var serverKeys = Object.keys(addresses);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 44
              },
              {},
              {
                "startCol": 21,
                "endCol": 43
              }
            ]
          },
          "132": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "133": {
            "partial": false,
            "source": "    // Number of server entries",
            "missing": [
              {}
            ]
          },
          "134": {
            "partial": false,
            "source": "    var numberOfEntries = serverKeys.length;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 44
              }
            ]
          },
          "135": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "136": {
            "partial": false,
            "source": "    // We got keys",
            "missing": [
              {}
            ]
          },
          "137": {
            "partial": false,
            "source": "    for(var i = 0; i < serverKeys.length; i++) {",
            "missing": [
              {},
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "138": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "139": {
            "partial": false,
            "source": "      // We got a server instance",
            "missing": [
              {}
            ]
          },
          "140": {
            "partial": false,
            "source": "      var server = addresses[serverKeys[i]];",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 44
              }
            ]
          },
          "141": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "142": {
            "partial": false,
            "source": "      // Create a new server object, avoid using internal connections as they might",
            "missing": [
              {}
            ]
          },
          "143": {
            "partial": false,
            "source": "      // be in an illegal state",
            "missing": [
              {}
            ]
          },
          "144": {
            "partial": false,
            "source": "      new function(serverInstance) {",
            "missing": [
              {}
            ]
          },
          "145": {
            "partial": false,
            "source": "        var options = { poolSize: 1, timeout: 500, auto_reconnect: false };",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 75
              }
            ]
          },
          "146": {
            "partial": false,
            "source": "        var server = new Server(serverInstance.host, serverInstance.port, options);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 83
              }
            ]
          },
          "147": {
            "partial": false,
            "source": "        var db = new self.Db(self.replicaset.db.databaseName, server);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 70
              }
            ]
          },
          "148": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "149": {
            "partial": false,
            "source": "        db.on(\"error\", done);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 28
              },
              {}
            ]
          },
          "150": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "151": {
            "partial": false,
            "source": "        // Open the db instance",
            "missing": [
              {}
            ]
          },
          "152": {
            "partial": false,
            "source": "        db.open(function(err, _db) {",
            "missing": [
              {}
            ]
          },
          "153": {
            "partial": false,
            "source": "          if(err) return done(_db);",
            "missing": [
              {
                "startCol": 13,
                "endCol": 16
              },
              {},
              {
                "startCol": 18,
                "endCol": 35
              },
              {
                "startCol": 25,
                "endCol": 34
              }
            ]
          },
          "154": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "155": {
            "partial": false,
            "source": "          // Startup time of the command",
            "missing": [
              {}
            ]
          },
          "156": {
            "partial": false,
            "source": "          var startTime = Date.now();",
            "missing": [
              {
                "startCol": 10,
                "endCol": 37
              },
              {},
              {
                "startCol": 26,
                "endCol": 36
              }
            ]
          },
          "157": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "158": {
            "partial": false,
            "source": "          // Execute ping on this connection",
            "missing": [
              {}
            ]
          },
          "159": {
            "partial": false,
            "source": "          db.executeDbCommand({ping:1}, {failFast:true}, function() {",
            "missing": [
              {}
            ]
          },
          "160": {
            "partial": false,
            "source": "            if(null != serverInstance.runtimeStats && serverInstance.isConnected()) {",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 82
              },
              {
                "startCol": 54,
                "endCol": 82
              }
            ]
          },
          "161": {
            "partial": false,
            "source": "              serverInstance.runtimeStats['pingMs'] = Date.now() - startTime;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 77
              },
              {
                "startCol": 54,
                "endCol": 64
              },
              {},
              {
                "startCol": 67,
                "endCol": 76
              }
            ]
          },
          "162": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "163": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "164": {
            "partial": false,
            "source": "            done(_db);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 21
              }
            ]
          },
          "165": {
            "partial": false,
            "source": "          })",
            "missing": [
              {}
            ]
          },
          "166": {
            "partial": false,
            "source": "        })",
            "missing": [
              {}
            ]
          },
          "167": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "168": {
            "partial": false,
            "source": "        function done (_db) {",
            "missing": [
              {}
            ]
          },
          "169": {
            "partial": false,
            "source": "          // Close connection",
            "missing": [
              {}
            ]
          },
          "170": {
            "partial": false,
            "source": "          _db.close(true);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 25
              },
              {}
            ]
          },
          "171": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "172": {
            "partial": false,
            "source": "          // Adjust the number of checks",
            "missing": [
              {}
            ]
          },
          "173": {
            "partial": false,
            "source": "          numberOfEntries--;",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 27
              }
            ]
          },
          "174": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "175": {
            "partial": false,
            "source": "          // If we are done with all results coming back trigger ping again",
            "missing": [
              {}
            ]
          },
          "176": {
            "partial": false,
            "source": "          if(0 === numberOfEntries && 'connected' == self.state) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 63
              },
              {
                "startCol": 19,
                "endCol": 34
              },
              {},
              {
                "startCol": 38,
                "endCol": 63
              }
            ]
          },
          "177": {
            "partial": false,
            "source": "            setTimeout(pingFunction, self.pingInterval);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 56
              }
            ]
          },
          "178": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "179": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "180": {
            "partial": false,
            "source": "      }(server);",
            "missing": [
              {}
            ]
          },
          "181": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "182": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "183": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "184": {
            "partial": false,
            "source": "  // Start pingFunction",
            "missing": [
              {}
            ]
          },
          "185": {
            "partial": false,
            "source": "  setTimeout(pingFunction, 1000);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              },
              {}
            ]
          },
          "187": {
            "partial": false,
            "source": "  callback && callback(null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 10
              },
              {
                "startCol": 14,
                "endCol": 28
              }
            ]
          }
        },
        "source": "var Server = require(\"../server\").Server;\n\n// The ping strategy uses pings each server and records the\n// elapsed time for the server so it can pick a server based on lowest\n// return time for the db command {ping:true}\nvar PingStrategy = exports.PingStrategy = function(replicaset, secondaryAcceptableLatencyMS) {\n  this.replicaset = replicaset;\n  this.secondaryAcceptableLatencyMS = secondaryAcceptableLatencyMS;\n  this.state = 'disconnected';\n  this.pingInterval = 5000;\n  // Class instance\n  this.Db = require(\"../../db\").Db;\n}\n\n// Starts any needed code\nPingStrategy.prototype.start = function(callback) {\n  // already running?\n  if ('connected' == this.state) return;\n\n  this.state = 'connected';\n\n  // Start ping server\n  this._pingServer(callback);\n}\n\n// Stops and kills any processes running\nPingStrategy.prototype.stop = function(callback) {\n  // Stop the ping process\n  this.state = 'disconnected';\n\n  // optional callback\n  callback && callback(null, null);\n}\n\nPingStrategy.prototype.checkoutSecondary = function(tags, secondaryCandidates) {\n  // Servers are picked based on the lowest ping time and then servers that lower than that + secondaryAcceptableLatencyMS\n  // Create a list of candidat servers, containing the primary if available\n  var candidateServers = [];\n\n  // If we have not provided a list of candidate servers use the default setup\n  if(!Array.isArray(secondaryCandidates)) {\n    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];\n    // Add all the secondaries\n    var keys = Object.keys(this.replicaset._state.secondaries);\n    for(var i = 0; i < keys.length; i++) {\n      candidateServers.push(this.replicaset._state.secondaries[keys[i]])\n    }\n  } else {\n    candidateServers = secondaryCandidates;\n  }\n\n  // Final list of eligable server\n  var finalCandidates = [];\n\n  // If we have tags filter by tags\n  if(tags != null && typeof tags == 'object') {\n    // If we have an array or single tag selection\n    var tagObjects = Array.isArray(tags) ? tags : [tags];\n    // Iterate over all tags until we find a candidate server\n    for(var _i = 0; _i < tagObjects.length; _i++) {\n      // Grab a tag object\n      var tagObject = tagObjects[_i];\n      // Matching keys\n      var matchingKeys = Object.keys(tagObject);\n      // Remove any that are not tagged correctly\n      for(var i = 0; i < candidateServers.length; i++) {\n        var server = candidateServers[i];\n        // If we have tags match\n        if(server.tags != null) {\n          var matching = true;\n\n          // Ensure we have all the values\n          for(var j = 0; j < matchingKeys.length; j++) {\n            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {\n              matching = false;\n              break;\n            }\n          }\n\n          // If we have a match add it to the list of matching servers\n          if(matching) {\n            finalCandidates.push(server);\n          }\n        }\n      }\n    }\n  } else {\n    // Final array candidates\n    var finalCandidates = candidateServers;\n  }\n\n  // Sort by ping time\n  finalCandidates.sort(function(a, b) {\n    return a.runtimeStats['pingMs'] > b.runtimeStats['pingMs'];\n  });\n\n  if(0 === finalCandidates.length)\n    return new Error(\"No replica set members available for query\");\n\n  // handle undefined pingMs\n  var lowestPing = finalCandidates[0].runtimeStats['pingMs'] | 0;\n\n  // determine acceptable latency\n  var acceptable = lowestPing + this.secondaryAcceptableLatencyMS;\n\n  // remove any server responding slower than acceptable\n  var len = finalCandidates.length;\n  while(len--) {\n    if(finalCandidates[len].runtimeStats['pingMs'] > acceptable) {\n      finalCandidates.splice(len, 1);\n    }\n  }\n\n  // If no candidates available return an error\n  if(finalCandidates.length == 0)\n    return new Error(\"No replica set members available for query\");\n\n  // Pick a random acceptable server\n  return finalCandidates[Math.round(Math.random(1000000) * (finalCandidates.length - 1))].checkoutReader();\n}\n\nPingStrategy.prototype._pingServer = function(callback) {\n  var self = this;\n\n  // Ping server function\n  var pingFunction = function() {\n    if(self.state == 'disconnected') return;\n    var addresses = self.replicaset._state.addresses;\n\n    // Grab all servers\n    var serverKeys = Object.keys(addresses);\n\n    // Number of server entries\n    var numberOfEntries = serverKeys.length;\n\n    // We got keys\n    for(var i = 0; i < serverKeys.length; i++) {\n\n      // We got a server instance\n      var server = addresses[serverKeys[i]];\n\n      // Create a new server object, avoid using internal connections as they might\n      // be in an illegal state\n      new function(serverInstance) {\n        var options = { poolSize: 1, timeout: 500, auto_reconnect: false };\n        var server = new Server(serverInstance.host, serverInstance.port, options);\n        var db = new self.Db(self.replicaset.db.databaseName, server);\n\n        db.on(\"error\", done);\n\n        // Open the db instance\n        db.open(function(err, _db) {\n          if(err) return done(_db);\n\n          // Startup time of the command\n          var startTime = Date.now();\n\n          // Execute ping on this connection\n          db.executeDbCommand({ping:1}, {failFast:true}, function() {\n            if(null != serverInstance.runtimeStats && serverInstance.isConnected()) {\n              serverInstance.runtimeStats['pingMs'] = Date.now() - startTime;\n            }\n\n            done(_db);\n          })\n        })\n\n        function done (_db) {\n          // Close connection\n          _db.close(true);\n\n          // Adjust the number of checks\n          numberOfEntries--;\n\n          // If we are done with all results coming back trigger ping again\n          if(0 === numberOfEntries && 'connected' == self.state) {\n            setTimeout(pingFunction, self.pingInterval);\n          }\n        }\n      }(server);\n    }\n  }\n\n  // Start pingFunction\n  setTimeout(pingFunction, 1000);\n\n  callback && callback(null);\n}",
        "blocks": {
          "total": 32,
          "seen": 0,
          "missing": 32,
          "percentage": 0
        }
      },
      "hash": "a5d864532590690884969289468c34c4"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/connection/strategies/statistics_strategy.js": {
      "stats": {
        "percentage": 0.6410256410256411,
        "lines": [
          {
            "lineno": 5
          },
          {
            "lineno": 10
          },
          {
            "lineno": 14
          },
          {
            "lineno": 20
          },
          {
            "lineno": 23
          },
          {
            "lineno": 24
          },
          {
            "lineno": 26
          },
          {
            "lineno": 27
          },
          {
            "lineno": 28
          },
          {
            "lineno": 31
          },
          {
            "lineno": 35
          },
          {
            "lineno": 38
          },
          {
            "lineno": 40
          },
          {
            "lineno": 42
          },
          {
            "lineno": 44
          },
          {
            "lineno": 46
          },
          {
            "lineno": 48
          },
          {
            "lineno": 49
          },
          {
            "lineno": 51
          },
          {
            "lineno": 52
          },
          {
            "lineno": 55
          },
          {
            "lineno": 56
          },
          {
            "lineno": 57
          },
          {
            "lineno": 63
          },
          {
            "lineno": 64
          },
          {
            "lineno": 71
          },
          {
            "lineno": 75
          },
          {
            "lineno": 77
          }
        ],
        "missing": 28,
        "seen": 50,
        "seen_lines": [
          {
            "s": 4,
            "e": 9
          },
          {
            "s": 9,
            "e": 13
          },
          {
            "s": 13,
            "e": 17
          },
          {
            "s": 17,
            "e": 79
          }
        ],
        "total": 78,
        "coverage": {
          "5": {
            "partial": false,
            "source": "  this.replicaset = replicaset;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 31
              }
            ]
          },
          "10": {
            "partial": false,
            "source": "  callback(null, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "14": {
            "partial": false,
            "source": "  callback && callback(null, null);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 10
              },
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "20": {
            "partial": false,
            "source": "  var candidateServers = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 28
              }
            ]
          },
          "23": {
            "partial": false,
            "source": "  if(!Array.isArray(secondaryCandidates)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 40
              },
              {
                "startCol": 6,
                "endCol": 40
              }
            ]
          },
          "24": {
            "partial": false,
            "source": "    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 100
              },
              {
                "startCol": 23,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 94
              },
              {
                "startCol": 97,
                "endCol": 99
              }
            ]
          },
          "26": {
            "partial": false,
            "source": "    var keys = Object.keys(this.replicaset._state.secondaries);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 63
              },
              {
                "startCol": 15,
                "endCol": 62
              }
            ]
          },
          "27": {
            "partial": false,
            "source": "    for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              }
            ]
          },
          "28": {
            "partial": false,
            "source": "      candidateServers.push(this.replicaset._state.secondaries[keys[i]])",
            "missing": [
              {
                "startCol": 6,
                "endCol": 72
              },
              {}
            ]
          },
          "29": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "31": {
            "partial": false,
            "source": "    candidateServers = secondaryCandidates;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 43
              }
            ]
          },
          "35": {
            "partial": false,
            "source": "  var finalCandidates = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "38": {
            "partial": false,
            "source": "  if(tags != null && typeof tags == 'object') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 9
              },
              {
                "startCol": 21,
                "endCol": 32
              },
              {
                "startCol": 28,
                "endCol": 32
              }
            ]
          },
          "40": {
            "partial": false,
            "source": "    var tagObjects = Array.isArray(tags) ? tags : [tags];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 57
              },
              {
                "startCol": 21,
                "endCol": 40
              },
              {
                "startCol": 43,
                "endCol": 47
              },
              {
                "startCol": 50,
                "endCol": 56
              }
            ]
          },
          "42": {
            "partial": false,
            "source": "    for(var _i = 0; _i < tagObjects.length; _i++) {",
            "missing": [
              {
                "startCol": 20,
                "endCol": 22
              },
              {
                "startCol": 44,
                "endCol": 48
              }
            ]
          },
          "44": {
            "partial": false,
            "source": "      var tagObject = tagObjects[_i];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 37
              }
            ]
          },
          "46": {
            "partial": false,
            "source": "      var matchingKeys = Object.keys(tagObject);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 48
              },
              {
                "startCol": 25,
                "endCol": 47
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "      for(var i = 0; i < candidateServers.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 50,
                "endCol": 53
              }
            ]
          },
          "49": {
            "partial": false,
            "source": "        var server = candidateServers[i];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 41
              }
            ]
          },
          "51": {
            "partial": false,
            "source": "        if(server.tags != null) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 30
              }
            ]
          },
          "52": {
            "partial": false,
            "source": "          var matching = true;",
            "missing": [
              {
                "startCol": 10,
                "endCol": 30
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "          for(var j = 0; j < matchingKeys.length; j++) {",
            "missing": [
              {
                "startCol": 25,
                "endCol": 26
              },
              {
                "startCol": 50,
                "endCol": 53
              }
            ]
          },
          "56": {
            "partial": false,
            "source": "            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 73
              }
            ]
          },
          "57": {
            "partial": false,
            "source": "              matching = false;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 31
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "          if(matching) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 21
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "            finalCandidates.push(server);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 40
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "    var finalCandidates = candidateServers;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 43
              }
            ]
          },
          "75": {
            "partial": false,
            "source": "  if(finalCandidates.length == 0) return new Error(\"No replica set members available for query\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 32
              },
              {
                "startCol": 34,
                "endCol": 97
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "  return finalCandidates[Math.round(Math.random(1000000) * (finalCandidates.length - 1))].checkoutReader();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 107
              },
              {
                "startCol": 9,
                "endCol": 106
              },
              {
                "startCol": 25,
                "endCol": 88
              },
              {
                "startCol": 36,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 87
              }
            ]
          }
        },
        "source": "// The Statistics strategy uses the measure of each end-start time for each\n// query executed against the db to calculate the mean, variance and standard deviation\n// and pick the server which the lowest mean and deviation\nvar StatisticsStrategy = exports.StatisticsStrategy = function(replicaset) {\n  this.replicaset = replicaset;\n}\n\n// Starts any needed code\nStatisticsStrategy.prototype.start = function(callback) {\n  callback(null, null);\n}\n\nStatisticsStrategy.prototype.stop = function(callback) {\n  callback && callback(null, null);\n}\n\nStatisticsStrategy.prototype.checkoutSecondary = function(tags, secondaryCandidates) {\n  // Servers are picked based on the lowest ping time and then servers that lower than that + secondaryAcceptableLatencyMS\n  // Create a list of candidat servers, containing the primary if available\n  var candidateServers = [];\n\n  // If we have not provided a list of candidate servers use the default setup\n  if(!Array.isArray(secondaryCandidates)) {\n    candidateServers = this.replicaset._state.master != null ? [this.replicaset._state.master] : [];\n    // Add all the secondaries\n    var keys = Object.keys(this.replicaset._state.secondaries);\n    for(var i = 0; i < keys.length; i++) {\n      candidateServers.push(this.replicaset._state.secondaries[keys[i]])\n    }\n  } else {\n    candidateServers = secondaryCandidates;\n  }\n\n  // Final list of eligable server\n  var finalCandidates = [];\n\n  // If we have tags filter by tags\n  if(tags != null && typeof tags == 'object') {\n    // If we have an array or single tag selection\n    var tagObjects = Array.isArray(tags) ? tags : [tags];\n    // Iterate over all tags until we find a candidate server\n    for(var _i = 0; _i < tagObjects.length; _i++) {\n      // Grab a tag object\n      var tagObject = tagObjects[_i];\n      // Matching keys\n      var matchingKeys = Object.keys(tagObject);\n      // Remove any that are not tagged correctly\n      for(var i = 0; i < candidateServers.length; i++) {\n        var server = candidateServers[i];\n        // If we have tags match\n        if(server.tags != null) {\n          var matching = true;\n\n          // Ensure we have all the values\n          for(var j = 0; j < matchingKeys.length; j++) {\n            if(server.tags[matchingKeys[j]] != tagObject[matchingKeys[j]]) {\n              matching = false;\n              break;\n            }\n          }\n\n          // If we have a match add it to the list of matching servers\n          if(matching) {\n            finalCandidates.push(server);\n          }\n        }\n      }\n    }\n  } else {\n    // Final array candidates\n    var finalCandidates = candidateServers;\n  }\n\n  // If no candidates available return an error\n  if(finalCandidates.length == 0) return new Error(\"No replica set members available for query\");\n  // Pick a random server\n  return finalCandidates[Math.round(Math.random(1000000) * (finalCandidates.length - 1))].checkoutReader();\n}",
        "blocks": {
          "total": 16,
          "seen": 0,
          "missing": 16,
          "percentage": 0
        }
      },
      "hash": "6914784cc16dd181400a9312e0458c26"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/db.js": {
      "stats": {
        "percentage": 0.7211267605633803,
        "lines": [
          {
            "lineno": 60
          },
          {
            "lineno": 65
          },
          {
            "lineno": 69
          },
          {
            "lineno": 72
          },
          {
            "lineno": 85
          },
          {
            "lineno": 95
          },
          {
            "lineno": 97
          },
          {
            "lineno": 103
          },
          {
            "lineno": 107
          },
          {
            "lineno": 108
          },
          {
            "lineno": 112
          },
          {
            "lineno": 113
          },
          {
            "lineno": 114
          },
          {
            "lineno": 115
          },
          {
            "lineno": 116
          },
          {
            "lineno": 117
          },
          {
            "lineno": 118
          },
          {
            "lineno": 119
          },
          {
            "lineno": 120
          },
          {
            "lineno": 121
          },
          {
            "lineno": 122
          },
          {
            "lineno": 123
          },
          {
            "lineno": 124
          },
          {
            "lineno": 125
          },
          {
            "lineno": 142
          },
          {
            "lineno": 143
          },
          {
            "lineno": 144
          },
          {
            "lineno": 145
          },
          {
            "lineno": 147
          },
          {
            "lineno": 157
          },
          {
            "lineno": 160
          },
          {
            "lineno": 163
          },
          {
            "lineno": 167
          },
          {
            "lineno": 171
          },
          {
            "lineno": 175
          },
          {
            "lineno": 176
          },
          {
            "lineno": 179
          },
          {
            "lineno": 180
          },
          {
            "lineno": 194
          },
          {
            "lineno": 196
          },
          {
            "lineno": 198
          },
          {
            "lineno": 200
          },
          {
            "lineno": 202
          },
          {
            "lineno": 204
          },
          {
            "lineno": 206
          },
          {
            "lineno": 208
          },
          {
            "lineno": 210
          },
          {
            "lineno": 212
          },
          {
            "lineno": 213
          },
          {
            "lineno": 214
          },
          {
            "lineno": 215
          },
          {
            "lineno": 216
          },
          {
            "lineno": 217
          },
          {
            "lineno": 218
          },
          {
            "lineno": 219
          },
          {
            "lineno": 220
          },
          {
            "lineno": 226
          },
          {
            "lineno": 229
          },
          {
            "lineno": 237
          },
          {
            "lineno": 238
          },
          {
            "lineno": 242
          },
          {
            "lineno": 264
          },
          {
            "lineno": 266
          },
          {
            "lineno": 270
          },
          {
            "lineno": 277
          },
          {
            "lineno": 281
          },
          {
            "lineno": 283
          },
          {
            "lineno": 291
          },
          {
            "lineno": 304
          },
          {
            "lineno": 306
          },
          {
            "lineno": 309
          },
          {
            "lineno": 311
          },
          {
            "lineno": 314
          },
          {
            "lineno": 317
          },
          {
            "lineno": 319
          },
          {
            "lineno": 320
          },
          {
            "lineno": 321
          },
          {
            "lineno": 324
          },
          {
            "lineno": 341
          },
          {
            "lineno": 343
          },
          {
            "lineno": 358
          },
          {
            "lineno": 359
          },
          {
            "lineno": 361
          },
          {
            "lineno": 362
          },
          {
            "lineno": 373
          },
          {
            "lineno": 385
          },
          {
            "lineno": 386
          },
          {
            "lineno": 398
          },
          {
            "lineno": 409
          },
          {
            "lineno": 429
          },
          {
            "lineno": 430
          },
          {
            "lineno": 434
          },
          {
            "lineno": 435
          },
          {
            "lineno": 440
          },
          {
            "lineno": 443
          },
          {
            "lineno": 447
          },
          {
            "lineno": 452
          },
          {
            "lineno": 482
          },
          {
            "lineno": 483
          },
          {
            "lineno": 485
          },
          {
            "lineno": 486
          },
          {
            "lineno": 489
          },
          {
            "lineno": 491
          },
          {
            "lineno": 493
          },
          {
            "lineno": 500
          },
          {
            "lineno": 501
          },
          {
            "lineno": 503
          },
          {
            "lineno": 520
          },
          {
            "lineno": 522
          },
          {
            "lineno": 523
          },
          {
            "lineno": 524
          },
          {
            "lineno": 525
          },
          {
            "lineno": 526
          },
          {
            "lineno": 529
          },
          {
            "lineno": 548
          },
          {
            "lineno": 549
          },
          {
            "lineno": 550
          },
          {
            "lineno": 551
          },
          {
            "lineno": 553
          },
          {
            "lineno": 554
          },
          {
            "lineno": 556
          },
          {
            "lineno": 557
          },
          {
            "lineno": 561
          },
          {
            "lineno": 562
          },
          {
            "lineno": 563
          },
          {
            "lineno": 564
          },
          {
            "lineno": 568
          },
          {
            "lineno": 571
          },
          {
            "lineno": 575
          },
          {
            "lineno": 578
          },
          {
            "lineno": 579
          },
          {
            "lineno": 581
          },
          {
            "lineno": 582
          },
          {
            "lineno": 583
          },
          {
            "lineno": 584
          },
          {
            "lineno": 586
          },
          {
            "lineno": 600
          },
          {
            "lineno": 602
          },
          {
            "lineno": 604
          },
          {
            "lineno": 605
          },
          {
            "lineno": 606
          },
          {
            "lineno": 618
          },
          {
            "lineno": 620
          },
          {
            "lineno": 621
          },
          {
            "lineno": 622
          },
          {
            "lineno": 625
          },
          {
            "lineno": 628
          },
          {
            "lineno": 629
          },
          {
            "lineno": 631
          },
          {
            "lineno": 633
          },
          {
            "lineno": 634
          },
          {
            "lineno": 635
          },
          {
            "lineno": 637
          },
          {
            "lineno": 639
          },
          {
            "lineno": 640
          },
          {
            "lineno": 642
          },
          {
            "lineno": 662
          },
          {
            "lineno": 664
          },
          {
            "lineno": 665
          },
          {
            "lineno": 666
          },
          {
            "lineno": 670
          },
          {
            "lineno": 674
          },
          {
            "lineno": 675
          },
          {
            "lineno": 678
          },
          {
            "lineno": 680
          },
          {
            "lineno": 682
          },
          {
            "lineno": 684
          },
          {
            "lineno": 686
          },
          {
            "lineno": 688
          },
          {
            "lineno": 689
          },
          {
            "lineno": 690
          },
          {
            "lineno": 691
          },
          {
            "lineno": 695
          },
          {
            "lineno": 696
          },
          {
            "lineno": 697
          },
          {
            "lineno": 699
          },
          {
            "lineno": 701
          },
          {
            "lineno": 703
          },
          {
            "lineno": 705
          },
          {
            "lineno": 727
          },
          {
            "lineno": 728
          },
          {
            "lineno": 729
          },
          {
            "lineno": 730
          },
          {
            "lineno": 733
          },
          {
            "lineno": 735
          },
          {
            "lineno": 737
          },
          {
            "lineno": 740
          },
          {
            "lineno": 742
          },
          {
            "lineno": 743
          },
          {
            "lineno": 745
          },
          {
            "lineno": 747
          },
          {
            "lineno": 749
          },
          {
            "lineno": 751
          },
          {
            "lineno": 753
          },
          {
            "lineno": 755
          },
          {
            "lineno": 756
          },
          {
            "lineno": 757
          },
          {
            "lineno": 758
          },
          {
            "lineno": 759
          },
          {
            "lineno": 761
          },
          {
            "lineno": 781
          },
          {
            "lineno": 782
          },
          {
            "lineno": 783
          },
          {
            "lineno": 784
          },
          {
            "lineno": 787
          },
          {
            "lineno": 789
          },
          {
            "lineno": 791
          },
          {
            "lineno": 794
          },
          {
            "lineno": 795
          },
          {
            "lineno": 796
          },
          {
            "lineno": 797
          },
          {
            "lineno": 798
          },
          {
            "lineno": 801
          },
          {
            "lineno": 829
          },
          {
            "lineno": 833
          },
          {
            "lineno": 835
          },
          {
            "lineno": 837
          },
          {
            "lineno": 841
          },
          {
            "lineno": 845
          },
          {
            "lineno": 849
          },
          {
            "lineno": 850
          },
          {
            "lineno": 853
          },
          {
            "lineno": 855
          },
          {
            "lineno": 857
          },
          {
            "lineno": 868
          },
          {
            "lineno": 872
          },
          {
            "lineno": 887
          },
          {
            "lineno": 888
          },
          {
            "lineno": 889
          },
          {
            "lineno": 892
          },
          {
            "lineno": 893
          },
          {
            "lineno": 897
          },
          {
            "lineno": 900
          },
          {
            "lineno": 901
          },
          {
            "lineno": 903
          },
          {
            "lineno": 905
          },
          {
            "lineno": 907
          },
          {
            "lineno": 912
          },
          {
            "lineno": 924
          },
          {
            "lineno": 927
          },
          {
            "lineno": 928
          },
          {
            "lineno": 929
          },
          {
            "lineno": 931
          },
          {
            "lineno": 946
          },
          {
            "lineno": 949
          },
          {
            "lineno": 950
          },
          {
            "lineno": 951
          },
          {
            "lineno": 953
          },
          {
            "lineno": 978
          },
          {
            "lineno": 979
          },
          {
            "lineno": 980
          },
          {
            "lineno": 981
          },
          {
            "lineno": 983
          },
          {
            "lineno": 984
          },
          {
            "lineno": 1010
          },
          {
            "lineno": 1011
          },
          {
            "lineno": 1012
          },
          {
            "lineno": 1014
          },
          {
            "lineno": 1015
          },
          {
            "lineno": 1025
          },
          {
            "lineno": 1026
          },
          {
            "lineno": 1035
          },
          {
            "lineno": 1036
          },
          {
            "lineno": 1052
          },
          {
            "lineno": 1053
          },
          {
            "lineno": 1054
          },
          {
            "lineno": 1056
          },
          {
            "lineno": 1057
          },
          {
            "lineno": 1084
          },
          {
            "lineno": 1085
          },
          {
            "lineno": 1086
          },
          {
            "lineno": 1087
          },
          {
            "lineno": 1088
          },
          {
            "lineno": 1089
          },
          {
            "lineno": 1092
          },
          {
            "lineno": 1093
          },
          {
            "lineno": 1096
          },
          {
            "lineno": 1099
          },
          {
            "lineno": 1101
          },
          {
            "lineno": 1104
          },
          {
            "lineno": 1106
          },
          {
            "lineno": 1108
          },
          {
            "lineno": 1111
          },
          {
            "lineno": 1113
          },
          {
            "lineno": 1114
          },
          {
            "lineno": 1115
          },
          {
            "lineno": 1116
          },
          {
            "lineno": 1121
          },
          {
            "lineno": 1122
          },
          {
            "lineno": 1124
          },
          {
            "lineno": 1126
          },
          {
            "lineno": 1128
          },
          {
            "lineno": 1133
          },
          {
            "lineno": 1135
          },
          {
            "lineno": 1137
          },
          {
            "lineno": 1138
          },
          {
            "lineno": 1141
          },
          {
            "lineno": 1168
          },
          {
            "lineno": 1170
          },
          {
            "lineno": 1171
          },
          {
            "lineno": 1172
          },
          {
            "lineno": 1175
          },
          {
            "lineno": 1176
          },
          {
            "lineno": 1180
          },
          {
            "lineno": 1181
          },
          {
            "lineno": 1184
          },
          {
            "lineno": 1187
          },
          {
            "lineno": 1188
          },
          {
            "lineno": 1191
          },
          {
            "lineno": 1193
          },
          {
            "lineno": 1194
          },
          {
            "lineno": 1196
          },
          {
            "lineno": 1198
          },
          {
            "lineno": 1200
          },
          {
            "lineno": 1202
          },
          {
            "lineno": 1205
          },
          {
            "lineno": 1207
          },
          {
            "lineno": 1208
          },
          {
            "lineno": 1209
          },
          {
            "lineno": 1210
          },
          {
            "lineno": 1214
          },
          {
            "lineno": 1216
          },
          {
            "lineno": 1217
          },
          {
            "lineno": 1219
          },
          {
            "lineno": 1221
          },
          {
            "lineno": 1223
          },
          {
            "lineno": 1229
          },
          {
            "lineno": 1231
          },
          {
            "lineno": 1233
          },
          {
            "lineno": 1234
          },
          {
            "lineno": 1237
          },
          {
            "lineno": 1240
          },
          {
            "lineno": 1257
          },
          {
            "lineno": 1258
          },
          {
            "lineno": 1259
          },
          {
            "lineno": 1261
          },
          {
            "lineno": 1262
          },
          {
            "lineno": 1276
          },
          {
            "lineno": 1288
          },
          {
            "lineno": 1289
          },
          {
            "lineno": 1290
          },
          {
            "lineno": 1291
          },
          {
            "lineno": 1292
          },
          {
            "lineno": 1294
          },
          {
            "lineno": 1313
          },
          {
            "lineno": 1314
          },
          {
            "lineno": 1315
          },
          {
            "lineno": 1316
          },
          {
            "lineno": 1318
          },
          {
            "lineno": 1320
          },
          {
            "lineno": 1324
          },
          {
            "lineno": 1326
          },
          {
            "lineno": 1329
          },
          {
            "lineno": 1332
          },
          {
            "lineno": 1334
          },
          {
            "lineno": 1335
          },
          {
            "lineno": 1337
          },
          {
            "lineno": 1340
          },
          {
            "lineno": 1343
          },
          {
            "lineno": 1344
          },
          {
            "lineno": 1346
          },
          {
            "lineno": 1348
          },
          {
            "lineno": 1353
          },
          {
            "lineno": 1372
          },
          {
            "lineno": 1373
          },
          {
            "lineno": 1375
          },
          {
            "lineno": 1394
          },
          {
            "lineno": 1395
          },
          {
            "lineno": 1397
          },
          {
            "lineno": 1400
          },
          {
            "lineno": 1405
          },
          {
            "lineno": 1408
          },
          {
            "lineno": 1429
          },
          {
            "lineno": 1431
          },
          {
            "lineno": 1433
          },
          {
            "lineno": 1434
          },
          {
            "lineno": 1436
          },
          {
            "lineno": 1438
          },
          {
            "lineno": 1455
          },
          {
            "lineno": 1457
          },
          {
            "lineno": 1494
          },
          {
            "lineno": 1496
          },
          {
            "lineno": 1498
          },
          {
            "lineno": 1509
          },
          {
            "lineno": 1519
          },
          {
            "lineno": 1524
          },
          {
            "lineno": 1525
          },
          {
            "lineno": 1526
          },
          {
            "lineno": 1527
          },
          {
            "lineno": 1531
          },
          {
            "lineno": 1532
          },
          {
            "lineno": 1542
          },
          {
            "lineno": 1547
          },
          {
            "lineno": 1549
          },
          {
            "lineno": 1553
          },
          {
            "lineno": 1563
          },
          {
            "lineno": 1565
          },
          {
            "lineno": 1568
          },
          {
            "lineno": 1569
          },
          {
            "lineno": 1570
          },
          {
            "lineno": 1572
          },
          {
            "lineno": 1574
          },
          {
            "lineno": 1576
          },
          {
            "lineno": 1578
          },
          {
            "lineno": 1579
          },
          {
            "lineno": 1580
          },
          {
            "lineno": 1581
          },
          {
            "lineno": 1585
          },
          {
            "lineno": 1588
          },
          {
            "lineno": 1590
          },
          {
            "lineno": 1592
          },
          {
            "lineno": 1594
          },
          {
            "lineno": 1598
          },
          {
            "lineno": 1599
          },
          {
            "lineno": 1604
          },
          {
            "lineno": 1608
          },
          {
            "lineno": 1610
          },
          {
            "lineno": 1612
          },
          {
            "lineno": 1614
          },
          {
            "lineno": 1615
          },
          {
            "lineno": 1617
          },
          {
            "lineno": 1627
          },
          {
            "lineno": 1629
          },
          {
            "lineno": 1631
          },
          {
            "lineno": 1632
          },
          {
            "lineno": 1634
          },
          {
            "lineno": 1636
          },
          {
            "lineno": 1637
          },
          {
            "lineno": 1639
          },
          {
            "lineno": 1641
          },
          {
            "lineno": 1642
          },
          {
            "lineno": 1645
          },
          {
            "lineno": 1646
          },
          {
            "lineno": 1648
          },
          {
            "lineno": 1650
          },
          {
            "lineno": 1652
          },
          {
            "lineno": 1653
          },
          {
            "lineno": 1655
          },
          {
            "lineno": 1657
          },
          {
            "lineno": 1658
          },
          {
            "lineno": 1659
          },
          {
            "lineno": 1662
          },
          {
            "lineno": 1663
          },
          {
            "lineno": 1664
          },
          {
            "lineno": 1665
          },
          {
            "lineno": 1668
          },
          {
            "lineno": 1671
          },
          {
            "lineno": 1673
          },
          {
            "lineno": 1675
          },
          {
            "lineno": 1677
          },
          {
            "lineno": 1678
          },
          {
            "lineno": 1679
          },
          {
            "lineno": 1680
          },
          {
            "lineno": 1688
          },
          {
            "lineno": 1689
          },
          {
            "lineno": 1691
          },
          {
            "lineno": 1693
          },
          {
            "lineno": 1695
          },
          {
            "lineno": 1697
          },
          {
            "lineno": 1699
          },
          {
            "lineno": 1700
          },
          {
            "lineno": 1701
          },
          {
            "lineno": 1702
          },
          {
            "lineno": 1707
          },
          {
            "lineno": 1709
          },
          {
            "lineno": 1712
          },
          {
            "lineno": 1713
          },
          {
            "lineno": 1721
          },
          {
            "lineno": 1739
          },
          {
            "lineno": 1742
          },
          {
            "lineno": 1743
          },
          {
            "lineno": 1745
          },
          {
            "lineno": 1750
          },
          {
            "lineno": 1751
          },
          {
            "lineno": 1752
          },
          {
            "lineno": 1754
          },
          {
            "lineno": 1755
          },
          {
            "lineno": 1757
          },
          {
            "lineno": 1758
          },
          {
            "lineno": 1760
          },
          {
            "lineno": 1763
          },
          {
            "lineno": 1765
          },
          {
            "lineno": 1766
          },
          {
            "lineno": 1767
          },
          {
            "lineno": 1769
          },
          {
            "lineno": 1770
          },
          {
            "lineno": 1771
          },
          {
            "lineno": 1774
          },
          {
            "lineno": 1776
          },
          {
            "lineno": 1778
          },
          {
            "lineno": 1779
          },
          {
            "lineno": 1780
          },
          {
            "lineno": 1784
          },
          {
            "lineno": 1785
          },
          {
            "lineno": 1791
          },
          {
            "lineno": 1807
          },
          {
            "lineno": 1808
          },
          {
            "lineno": 1810
          },
          {
            "lineno": 1816
          },
          {
            "lineno": 1818
          },
          {
            "lineno": 1832
          },
          {
            "lineno": 1833
          },
          {
            "lineno": 1834
          },
          {
            "lineno": 1835
          },
          {
            "lineno": 1840
          },
          {
            "lineno": 1842
          },
          {
            "lineno": 1844
          },
          {
            "lineno": 1845
          },
          {
            "lineno": 1847
          },
          {
            "lineno": 1849
          },
          {
            "lineno": 1864
          },
          {
            "lineno": 1865
          },
          {
            "lineno": 1869
          },
          {
            "lineno": 1873
          },
          {
            "lineno": 1874
          },
          {
            "lineno": 1876
          },
          {
            "lineno": 1882
          },
          {
            "lineno": 1883
          },
          {
            "lineno": 1886
          },
          {
            "lineno": 1888
          },
          {
            "lineno": 1889
          },
          {
            "lineno": 1891
          },
          {
            "lineno": 1894
          },
          {
            "lineno": 1896
          },
          {
            "lineno": 1898
          },
          {
            "lineno": 1900
          },
          {
            "lineno": 1902
          },
          {
            "lineno": 1903
          },
          {
            "lineno": 1904
          },
          {
            "lineno": 1908
          },
          {
            "lineno": 1909
          },
          {
            "lineno": 1937
          },
          {
            "lineno": 1938
          },
          {
            "lineno": 1939
          },
          {
            "lineno": 1942
          },
          {
            "lineno": 1948
          },
          {
            "lineno": 1973
          },
          {
            "lineno": 1974
          },
          {
            "lineno": 1975
          },
          {
            "lineno": 1976
          },
          {
            "lineno": 1977
          },
          {
            "lineno": 1978
          },
          {
            "lineno": 1979
          },
          {
            "lineno": 1982
          },
          {
            "lineno": 1983
          },
          {
            "lineno": 1986
          },
          {
            "lineno": 1987
          },
          {
            "lineno": 1988
          },
          {
            "lineno": 1989
          },
          {
            "lineno": 1991
          },
          {
            "lineno": 1992
          },
          {
            "lineno": 1994
          },
          {
            "lineno": 1996
          },
          {
            "lineno": 2000
          },
          {
            "lineno": 2001
          },
          {
            "lineno": 2002
          },
          {
            "lineno": 2005
          },
          {
            "lineno": 2006
          },
          {
            "lineno": 2007
          },
          {
            "lineno": 2010
          },
          {
            "lineno": 2013
          },
          {
            "lineno": 2016
          },
          {
            "lineno": 2020
          },
          {
            "lineno": 2023
          },
          {
            "lineno": 2027
          },
          {
            "lineno": 2030
          },
          {
            "lineno": 2033
          },
          {
            "lineno": 2037
          },
          {
            "lineno": 2040
          },
          {
            "lineno": 2044
          },
          {
            "lineno": 2047
          },
          {
            "lineno": 2050
          },
          {
            "lineno": 2053
          },
          {
            "lineno": 2054
          },
          {
            "lineno": 2057
          },
          {
            "lineno": 2058
          },
          {
            "lineno": 2065
          },
          {
            "lineno": 2066
          },
          {
            "lineno": 2067
          },
          {
            "lineno": 2070
          },
          {
            "lineno": 2071
          },
          {
            "lineno": 2072
          },
          {
            "lineno": 2074
          },
          {
            "lineno": 2077
          },
          {
            "lineno": 2079
          },
          {
            "lineno": 2082
          },
          {
            "lineno": 2084
          },
          {
            "lineno": 2085
          },
          {
            "lineno": 2086
          },
          {
            "lineno": 2087
          },
          {
            "lineno": 2088
          },
          {
            "lineno": 2090
          },
          {
            "lineno": 2094
          },
          {
            "lineno": 2105
          }
        ],
        "missing": 594,
        "seen": 1536,
        "seen_lines": [
          {
            "s": 5,
            "e": 17
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 14,
            "e": 14
          },
          {
            "s": 15,
            "e": 15
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 23,
            "e": 33
          },
          {
            "s": 25,
            "e": 25
          },
          {
            "s": 25,
            "e": 25
          },
          {
            "s": 27,
            "e": 27
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 33,
            "e": 33
          },
          {
            "s": 60,
            "e": 60
          },
          {
            "s": 60,
            "e": 60
          },
          {
            "s": 60,
            "e": 60
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 62,
            "e": 62
          },
          {
            "s": 63,
            "e": 63
          },
          {
            "s": 64,
            "e": 64
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 65,
            "e": 65
          },
          {
            "s": 67,
            "e": 67
          },
          {
            "s": 69,
            "e": 69
          },
          {
            "s": 69,
            "e": 69
          },
          {
            "s": 69,
            "e": 69
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 71,
            "e": 71
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 73,
            "e": 73
          },
          {
            "s": 75,
            "e": 75
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 79,
            "e": 79
          },
          {
            "s": 83,
            "e": 83
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 85,
            "e": 85
          },
          {
            "s": 87,
            "e": 87
          },
          {
            "s": 89,
            "e": 89
          },
          {
            "s": 91,
            "e": 91
          },
          {
            "s": 92,
            "e": 92
          },
          {
            "s": 101,
            "e": 101
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 103,
            "e": 103
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 104,
            "e": 104
          },
          {
            "s": 107,
            "e": 107
          },
          {
            "s": 107,
            "e": 107
          },
          {
            "s": 107,
            "e": 107
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 108,
            "e": 108
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 111,
            "e": 111
          },
          {
            "s": 129,
            "e": 129
          },
          {
            "s": 130,
            "e": 130
          },
          {
            "s": 131,
            "e": 131
          },
          {
            "s": 132,
            "e": 132
          },
          {
            "s": 135,
            "e": 135
          },
          {
            "s": 138,
            "e": 138
          },
          {
            "s": 141,
            "e": 145
          },
          {
            "s": 145,
            "e": 145
          },
          {
            "s": 141,
            "e": 144
          },
          {
            "s": 141,
            "e": 143
          },
          {
            "s": 141,
            "e": 142
          },
          {
            "s": 141,
            "e": 141
          },
          {
            "s": 147,
            "e": 147
          },
          {
            "s": 147,
            "e": 147
          },
          {
            "s": 147,
            "e": 147
          },
          {
            "s": 149,
            "e": 149
          },
          {
            "s": 151,
            "e": 151
          },
          {
            "s": 152,
            "e": 152
          },
          {
            "s": 152,
            "e": 152
          },
          {
            "s": 154,
            "e": 154
          },
          {
            "s": 157,
            "e": 157
          },
          {
            "s": 157,
            "e": 157
          },
          {
            "s": 157,
            "e": 157
          },
          {
            "s": 160,
            "e": 160
          },
          {
            "s": 160,
            "e": 160
          },
          {
            "s": 160,
            "e": 160
          },
          {
            "s": 163,
            "e": 163
          },
          {
            "s": 163,
            "e": 163
          },
          {
            "s": 163,
            "e": 163
          },
          {
            "s": 166,
            "e": 166
          },
          {
            "s": 171,
            "e": 171
          },
          {
            "s": 171,
            "e": 171
          },
          {
            "s": 171,
            "e": 171
          },
          {
            "s": 172,
            "e": 172
          },
          {
            "s": 172,
            "e": 172
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 175,
            "e": 175
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 176,
            "e": 176
          },
          {
            "s": 179,
            "e": 179
          },
          {
            "s": 179,
            "e": 179
          },
          {
            "s": 179,
            "e": 179
          },
          {
            "s": 180,
            "e": 180
          },
          {
            "s": 180,
            "e": 180
          },
          {
            "s": 180,
            "e": 180
          },
          {
            "s": 183,
            "e": 183
          },
          {
            "s": 192,
            "e": 236
          },
          {
            "s": 237,
            "e": 237
          },
          {
            "s": 237,
            "e": 237
          },
          {
            "s": 237,
            "e": 237
          },
          {
            "s": 238,
            "e": 238
          },
          {
            "s": 240,
            "e": 240
          },
          {
            "s": 241,
            "e": 241
          },
          {
            "s": 241,
            "e": 241
          },
          {
            "s": 241,
            "e": 241
          },
          {
            "s": 242,
            "e": 242
          },
          {
            "s": 242,
            "e": 242
          },
          {
            "s": 242,
            "e": 242
          },
          {
            "s": 249,
            "e": 249
          },
          {
            "s": 249,
            "e": 249
          },
          {
            "s": 258,
            "e": 293
          },
          {
            "s": 259,
            "e": 259
          },
          {
            "s": 270,
            "e": 270
          },
          {
            "s": 273,
            "e": 273
          },
          {
            "s": 275,
            "e": 275
          },
          {
            "s": 277,
            "e": 277
          },
          {
            "s": 277,
            "e": 277
          },
          {
            "s": 277,
            "e": 277
          },
          {
            "s": 277,
            "e": 277
          },
          {
            "s": 278,
            "e": 289
          },
          {
            "s": 278,
            "e": 289
          },
          {
            "s": 279,
            "e": 279
          },
          {
            "s": 279,
            "e": 279
          },
          {
            "s": 286,
            "e": 286
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 288,
            "e": 288
          },
          {
            "s": 302,
            "e": 335
          },
          {
            "s": 335,
            "e": 375
          },
          {
            "s": 336,
            "e": 336
          },
          {
            "s": 338,
            "e": 338
          },
          {
            "s": 340,
            "e": 340
          },
          {
            "s": 340,
            "e": 340
          },
          {
            "s": 340,
            "e": 340
          },
          {
            "s": 342,
            "e": 342
          },
          {
            "s": 342,
            "e": 342
          },
          {
            "s": 342,
            "e": 342
          },
          {
            "s": 347,
            "e": 374
          },
          {
            "s": 347,
            "e": 374
          },
          {
            "s": 349,
            "e": 349
          },
          {
            "s": 349,
            "e": 349
          },
          {
            "s": 349,
            "e": 349
          },
          {
            "s": 349,
            "e": 349
          },
          {
            "s": 349,
            "e": 349
          },
          {
            "s": 352,
            "e": 352
          },
          {
            "s": 352,
            "e": 352
          },
          {
            "s": 354,
            "e": 354
          },
          {
            "s": 354,
            "e": 354
          },
          {
            "s": 354,
            "e": 354
          },
          {
            "s": 355,
            "e": 355
          },
          {
            "s": 357,
            "e": 357
          },
          {
            "s": 357,
            "e": 357
          },
          {
            "s": 357,
            "e": 357
          },
          {
            "s": 369,
            "e": 369
          },
          {
            "s": 369,
            "e": 369
          },
          {
            "s": 371,
            "e": 371
          },
          {
            "s": 373,
            "e": 373
          },
          {
            "s": 384,
            "e": 387
          },
          {
            "s": 397,
            "e": 411
          },
          {
            "s": 398,
            "e": 398
          },
          {
            "s": 398,
            "e": 398
          },
          {
            "s": 398,
            "e": 398
          },
          {
            "s": 400,
            "e": 400
          },
          {
            "s": 402,
            "e": 402
          },
          {
            "s": 402,
            "e": 402
          },
          {
            "s": 402,
            "e": 402
          },
          {
            "s": 402,
            "e": 402
          },
          {
            "s": 402,
            "e": 402
          },
          {
            "s": 402,
            "e": 402
          },
          {
            "s": 406,
            "e": 406
          },
          {
            "s": 407,
            "e": 407
          },
          {
            "s": 407,
            "e": 407
          },
          {
            "s": 425,
            "e": 459
          },
          {
            "s": 426,
            "e": 426
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 427,
            "e": 427
          },
          {
            "s": 428,
            "e": 428
          },
          {
            "s": 428,
            "e": 428
          },
          {
            "s": 429,
            "e": 429
          },
          {
            "s": 429,
            "e": 429
          },
          {
            "s": 429,
            "e": 429
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 430,
            "e": 430
          },
          {
            "s": 433,
            "e": 433
          },
          {
            "s": 433,
            "e": 433
          },
          {
            "s": 433,
            "e": 433
          },
          {
            "s": 433,
            "e": 433
          },
          {
            "s": 433,
            "e": 433
          },
          {
            "s": 433,
            "e": 433
          },
          {
            "s": 439,
            "e": 458
          },
          {
            "s": 439,
            "e": 458
          },
          {
            "s": 440,
            "e": 440
          },
          {
            "s": 440,
            "e": 440
          },
          {
            "s": 442,
            "e": 457
          },
          {
            "s": 442,
            "e": 457
          },
          {
            "s": 443,
            "e": 443
          },
          {
            "s": 443,
            "e": 443
          },
          {
            "s": 446,
            "e": 448
          },
          {
            "s": 446,
            "e": 448
          },
          {
            "s": 456,
            "e": 456
          },
          {
            "s": 456,
            "e": 456
          },
          {
            "s": 477,
            "e": 510
          },
          {
            "s": 478,
            "e": 478
          },
          {
            "s": 479,
            "e": 479
          },
          {
            "s": 479,
            "e": 479
          },
          {
            "s": 479,
            "e": 479
          },
          {
            "s": 479,
            "e": 479
          },
          {
            "s": 479,
            "e": 479
          },
          {
            "s": 481,
            "e": 481
          },
          {
            "s": 481,
            "e": 481
          },
          {
            "s": 481,
            "e": 481
          },
          {
            "s": 498,
            "e": 498
          },
          {
            "s": 508,
            "e": 508
          },
          {
            "s": 508,
            "e": 508
          },
          {
            "s": 508,
            "e": 508
          },
          {
            "s": 508,
            "e": 508
          },
          {
            "s": 508,
            "e": 508
          },
          {
            "s": 508,
            "e": 508
          },
          {
            "s": 519,
            "e": 531
          },
          {
            "s": 546,
            "e": 589
          },
          {
            "s": 599,
            "e": 608
          },
          {
            "s": 617,
            "e": 661
          },
          {
            "s": 661,
            "e": 711
          },
          {
            "s": 726,
            "e": 766
          },
          {
            "s": 780,
            "e": 804
          },
          {
            "s": 826,
            "e": 876
          },
          {
            "s": 827,
            "e": 827
          },
          {
            "s": 827,
            "e": 827
          },
          {
            "s": 828,
            "e": 828
          },
          {
            "s": 828,
            "e": 828
          },
          {
            "s": 829,
            "e": 829
          },
          {
            "s": 829,
            "e": 829
          },
          {
            "s": 830,
            "e": 830
          },
          {
            "s": 833,
            "e": 833
          },
          {
            "s": 833,
            "e": 833
          },
          {
            "s": 833,
            "e": 833
          },
          {
            "s": 833,
            "e": 833
          },
          {
            "s": 833,
            "e": 833
          },
          {
            "s": 835,
            "e": 835
          },
          {
            "s": 835,
            "e": 835
          },
          {
            "s": 835,
            "e": 835
          },
          {
            "s": 835,
            "e": 835
          },
          {
            "s": 835,
            "e": 835
          },
          {
            "s": 837,
            "e": 837
          },
          {
            "s": 837,
            "e": 837
          },
          {
            "s": 837,
            "e": 837
          },
          {
            "s": 837,
            "e": 837
          },
          {
            "s": 840,
            "e": 875
          },
          {
            "s": 840,
            "e": 875
          },
          {
            "s": 841,
            "e": 841
          },
          {
            "s": 841,
            "e": 841
          },
          {
            "s": 843,
            "e": 843
          },
          {
            "s": 844,
            "e": 846
          },
          {
            "s": 844,
            "e": 846
          },
          {
            "s": 849,
            "e": 849
          },
          {
            "s": 849,
            "e": 849
          },
          {
            "s": 851,
            "e": 851
          },
          {
            "s": 861,
            "e": 874
          },
          {
            "s": 861,
            "e": 874
          },
          {
            "s": 861,
            "e": 861
          },
          {
            "s": 862,
            "e": 862
          },
          {
            "s": 864,
            "e": 864
          },
          {
            "s": 864,
            "e": 864
          },
          {
            "s": 864,
            "e": 864
          },
          {
            "s": 864,
            "e": 864
          },
          {
            "s": 866,
            "e": 866
          },
          {
            "s": 870,
            "e": 870
          },
          {
            "s": 870,
            "e": 870
          },
          {
            "s": 886,
            "e": 913
          },
          {
            "s": 923,
            "e": 934
          },
          {
            "s": 945,
            "e": 956
          },
          {
            "s": 976,
            "e": 986
          },
          {
            "s": 994,
            "e": 994
          },
          {
            "s": 995,
            "e": 995
          },
          {
            "s": 1008,
            "e": 1017
          },
          {
            "s": 1024,
            "e": 1027
          },
          {
            "s": 1034,
            "e": 1037
          },
          {
            "s": 1050,
            "e": 1059
          },
          {
            "s": 1083,
            "e": 1143
          },
          {
            "s": 1167,
            "e": 1243
          },
          {
            "s": 1256,
            "e": 1264
          },
          {
            "s": 1275,
            "e": 1277
          },
          {
            "s": 1287,
            "e": 1297
          },
          {
            "s": 1312,
            "e": 1356
          },
          {
            "s": 1343,
            "e": 1343
          },
          {
            "s": 1343,
            "e": 1343
          },
          {
            "s": 1365,
            "e": 1379
          },
          {
            "s": 1366,
            "e": 1366
          },
          {
            "s": 1368,
            "e": 1378
          },
          {
            "s": 1368,
            "e": 1378
          },
          {
            "s": 1368,
            "e": 1368
          },
          {
            "s": 1369,
            "e": 1369
          },
          {
            "s": 1369,
            "e": 1369
          },
          {
            "s": 1369,
            "e": 1369
          },
          {
            "s": 1369,
            "e": 1369
          },
          {
            "s": 1370,
            "e": 1370
          },
          {
            "s": 1370,
            "e": 1370
          },
          {
            "s": 1393,
            "e": 1416
          },
          {
            "s": 1416,
            "e": 1453
          },
          {
            "s": 1418,
            "e": 1418
          },
          {
            "s": 1418,
            "e": 1418
          },
          {
            "s": 1421,
            "e": 1421
          },
          {
            "s": 1421,
            "e": 1421
          },
          {
            "s": 1421,
            "e": 1421
          },
          {
            "s": 1422,
            "e": 1422
          },
          {
            "s": 1423,
            "e": 1423
          },
          {
            "s": 1427,
            "e": 1427
          },
          {
            "s": 1442,
            "e": 1442
          },
          {
            "s": 1442,
            "e": 1442
          },
          {
            "s": 1442,
            "e": 1442
          },
          {
            "s": 1444,
            "e": 1444
          },
          {
            "s": 1444,
            "e": 1444
          },
          {
            "s": 1444,
            "e": 1444
          },
          {
            "s": 1444,
            "e": 1444
          },
          {
            "s": 1453,
            "e": 1465
          },
          {
            "s": 1465,
            "e": 1482
          },
          {
            "s": 1467,
            "e": 1467
          },
          {
            "s": 1467,
            "e": 1467
          },
          {
            "s": 1469,
            "e": 1469
          },
          {
            "s": 1471,
            "e": 1471
          },
          {
            "s": 1471,
            "e": 1471
          },
          {
            "s": 1473,
            "e": 1473
          },
          {
            "s": 1473,
            "e": 1473
          },
          {
            "s": 1482,
            "e": 1492
          },
          {
            "s": 1484,
            "e": 1484
          },
          {
            "s": 1484,
            "e": 1484
          },
          {
            "s": 1484,
            "e": 1484
          },
          {
            "s": 1492,
            "e": 1506
          },
          {
            "s": 1506,
            "e": 1515
          },
          {
            "s": 1507,
            "e": 1507
          },
          {
            "s": 1509,
            "e": 1510
          },
          {
            "s": 1509,
            "e": 1509
          },
          {
            "s": 1509,
            "e": 1509
          },
          {
            "s": 1509,
            "e": 1509
          },
          {
            "s": 1509,
            "e": 1509
          },
          {
            "s": 1515,
            "e": 1626
          },
          {
            "s": 1517,
            "e": 1517
          },
          {
            "s": 1517,
            "e": 1517
          },
          {
            "s": 1517,
            "e": 1517
          },
          {
            "s": 1517,
            "e": 1517
          },
          {
            "s": 1518,
            "e": 1518
          },
          {
            "s": 1518,
            "e": 1518
          },
          {
            "s": 1518,
            "e": 1518
          },
          {
            "s": 1518,
            "e": 1518
          },
          {
            "s": 1519,
            "e": 1519
          },
          {
            "s": 1519,
            "e": 1519
          },
          {
            "s": 1519,
            "e": 1519
          },
          {
            "s": 1520,
            "e": 1520
          },
          {
            "s": 1520,
            "e": 1520
          },
          {
            "s": 1520,
            "e": 1520
          },
          {
            "s": 1520,
            "e": 1520
          },
          {
            "s": 1523,
            "e": 1523
          },
          {
            "s": 1523,
            "e": 1523
          },
          {
            "s": 1523,
            "e": 1523
          },
          {
            "s": 1523,
            "e": 1523
          },
          {
            "s": 1523,
            "e": 1523
          },
          {
            "s": 1523,
            "e": 1523
          },
          {
            "s": 1526,
            "e": 1526
          },
          {
            "s": 1526,
            "e": 1526
          },
          {
            "s": 1526,
            "e": 1526
          },
          {
            "s": 1526,
            "e": 1526
          },
          {
            "s": 1531,
            "e": 1531
          },
          {
            "s": 1531,
            "e": 1531
          },
          {
            "s": 1531,
            "e": 1531
          },
          {
            "s": 1536,
            "e": 1536
          },
          {
            "s": 1536,
            "e": 1536
          },
          {
            "s": 1536,
            "e": 1536
          },
          {
            "s": 1536,
            "e": 1536
          },
          {
            "s": 1536,
            "e": 1536
          },
          {
            "s": 1536,
            "e": 1536
          },
          {
            "s": 1538,
            "e": 1538
          },
          {
            "s": 1538,
            "e": 1538
          },
          {
            "s": 1538,
            "e": 1538
          },
          {
            "s": 1538,
            "e": 1538
          },
          {
            "s": 1538,
            "e": 1538
          },
          {
            "s": 1541,
            "e": 1541
          },
          {
            "s": 1541,
            "e": 1541
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1542,
            "e": 1542
          },
          {
            "s": 1546,
            "e": 1546
          },
          {
            "s": 1546,
            "e": 1546
          },
          {
            "s": 1548,
            "e": 1548
          },
          {
            "s": 1548,
            "e": 1548
          },
          {
            "s": 1548,
            "e": 1548
          },
          {
            "s": 1548,
            "e": 1548
          },
          {
            "s": 1548,
            "e": 1548
          },
          {
            "s": 1556,
            "e": 1556
          },
          {
            "s": 1556,
            "e": 1556
          },
          {
            "s": 1559,
            "e": 1559
          },
          {
            "s": 1559,
            "e": 1559
          },
          {
            "s": 1562,
            "e": 1567
          },
          {
            "s": 1562,
            "e": 1567
          },
          {
            "s": 1626,
            "e": 1729
          },
          {
            "s": 1729,
            "e": 1797
          },
          {
            "s": 1730,
            "e": 1730
          },
          {
            "s": 1733,
            "e": 1733
          },
          {
            "s": 1733,
            "e": 1733
          },
          {
            "s": 1733,
            "e": 1733
          },
          {
            "s": 1734,
            "e": 1734
          },
          {
            "s": 1735,
            "e": 1735
          },
          {
            "s": 1739,
            "e": 1739
          },
          {
            "s": 1739,
            "e": 1739
          },
          {
            "s": 1739,
            "e": 1739
          },
          {
            "s": 1750,
            "e": 1750
          },
          {
            "s": 1750,
            "e": 1750
          },
          {
            "s": 1750,
            "e": 1750
          },
          {
            "s": 1754,
            "e": 1754
          },
          {
            "s": 1754,
            "e": 1754
          },
          {
            "s": 1754,
            "e": 1754
          },
          {
            "s": 1754,
            "e": 1754
          },
          {
            "s": 1758,
            "e": 1758
          },
          {
            "s": 1758,
            "e": 1758
          },
          {
            "s": 1758,
            "e": 1758
          },
          {
            "s": 1758,
            "e": 1758
          },
          {
            "s": 1763,
            "e": 1763
          },
          {
            "s": 1763,
            "e": 1763
          },
          {
            "s": 1763,
            "e": 1763
          },
          {
            "s": 1794,
            "e": 1795
          },
          {
            "s": 1794,
            "e": 1794
          },
          {
            "s": 1802,
            "e": 1859
          },
          {
            "s": 1804,
            "e": 1804
          },
          {
            "s": 1804,
            "e": 1804
          },
          {
            "s": 1806,
            "e": 1806
          },
          {
            "s": 1806,
            "e": 1806
          },
          {
            "s": 1806,
            "e": 1806
          },
          {
            "s": 1806,
            "e": 1806
          },
          {
            "s": 1807,
            "e": 1807
          },
          {
            "s": 1807,
            "e": 1807
          },
          {
            "s": 1807,
            "e": 1807
          },
          {
            "s": 1808,
            "e": 1808
          },
          {
            "s": 1808,
            "e": 1808
          },
          {
            "s": 1808,
            "e": 1808
          },
          {
            "s": 1810,
            "e": 1810
          },
          {
            "s": 1810,
            "e": 1810
          },
          {
            "s": 1810,
            "e": 1810
          },
          {
            "s": 1810,
            "e": 1810
          },
          {
            "s": 1813,
            "e": 1813
          },
          {
            "s": 1813,
            "e": 1813
          },
          {
            "s": 1813,
            "e": 1813
          },
          {
            "s": 1815,
            "e": 1815
          },
          {
            "s": 1815,
            "e": 1815
          },
          {
            "s": 1817,
            "e": 1817
          },
          {
            "s": 1817,
            "e": 1817
          },
          {
            "s": 1817,
            "e": 1817
          },
          {
            "s": 1822,
            "e": 1822
          },
          {
            "s": 1822,
            "e": 1822
          },
          {
            "s": 1822,
            "e": 1822
          },
          {
            "s": 1822,
            "e": 1822
          },
          {
            "s": 1822,
            "e": 1822
          },
          {
            "s": 1824,
            "e": 1824
          },
          {
            "s": 1824,
            "e": 1824
          },
          {
            "s": 1827,
            "e": 1827
          },
          {
            "s": 1827,
            "e": 1827
          },
          {
            "s": 1832,
            "e": 1832
          },
          {
            "s": 1832,
            "e": 1832
          },
          {
            "s": 1833,
            "e": 1833
          },
          {
            "s": 1833,
            "e": 1833
          },
          {
            "s": 1833,
            "e": 1833
          },
          {
            "s": 1833,
            "e": 1833
          },
          {
            "s": 1834,
            "e": 1834
          },
          {
            "s": 1834,
            "e": 1834
          },
          {
            "s": 1834,
            "e": 1834
          },
          {
            "s": 1835,
            "e": 1835
          },
          {
            "s": 1835,
            "e": 1835
          },
          {
            "s": 1835,
            "e": 1835
          },
          {
            "s": 1838,
            "e": 1851
          },
          {
            "s": 1838,
            "e": 1851
          },
          {
            "s": 1859,
            "e": 1923
          },
          {
            "s": 1860,
            "e": 1860
          },
          {
            "s": 1863,
            "e": 1863
          },
          {
            "s": 1863,
            "e": 1863
          },
          {
            "s": 1863,
            "e": 1863
          },
          {
            "s": 1863,
            "e": 1863
          },
          {
            "s": 1863,
            "e": 1863
          },
          {
            "s": 1863,
            "e": 1863
          },
          {
            "s": 1869,
            "e": 1869
          },
          {
            "s": 1869,
            "e": 1869
          },
          {
            "s": 1869,
            "e": 1869
          },
          {
            "s": 1869,
            "e": 1869
          },
          {
            "s": 1881,
            "e": 1881
          },
          {
            "s": 1881,
            "e": 1881
          },
          {
            "s": 1885,
            "e": 1885
          },
          {
            "s": 1885,
            "e": 1885
          },
          {
            "s": 1885,
            "e": 1885
          },
          {
            "s": 1889,
            "e": 1889
          },
          {
            "s": 1889,
            "e": 1889
          },
          {
            "s": 1889,
            "e": 1889
          },
          {
            "s": 1889,
            "e": 1889
          },
          {
            "s": 1894,
            "e": 1894
          },
          {
            "s": 1894,
            "e": 1894
          },
          {
            "s": 1894,
            "e": 1894
          },
          {
            "s": 1913,
            "e": 1914
          },
          {
            "s": 1913,
            "e": 1913
          },
          {
            "s": 1923,
            "e": 1923
          },
          {
            "s": 1929,
            "e": 1929
          },
          {
            "s": 1936,
            "e": 1956
          },
          {
            "s": 1944,
            "e": 1944
          },
          {
            "s": 1944,
            "e": 1944
          },
          {
            "s": 1944,
            "e": 1944
          },
          {
            "s": 1945,
            "e": 1945
          },
          {
            "s": 1956,
            "e": 1956
          },
          {
            "s": 1972,
            "e": 2103
          },
          {
            "s": 2103,
            "e": 2107
          },
          {
            "s": 2103,
            "e": 2107
          },
          {
            "s": 2115,
            "e": 2115
          },
          {
            "s": 2116,
            "e": 2116
          },
          {
            "s": 2123,
            "e": 2131
          },
          {
            "s": 2124,
            "e": 2124
          },
          {
            "s": 2124,
            "e": 2124
          },
          {
            "s": 2125,
            "e": 2125
          },
          {
            "s": 2125,
            "e": 2125
          },
          {
            "s": 2126,
            "e": 2126
          },
          {
            "s": 2126,
            "e": 2126
          },
          {
            "s": 2127,
            "e": 2127
          },
          {
            "s": 2127,
            "e": 2127
          },
          {
            "s": 2128,
            "e": 2128
          },
          {
            "s": 2128,
            "e": 2128
          },
          {
            "s": 2129,
            "e": 2129
          },
          {
            "s": 2129,
            "e": 2129
          }
        ],
        "total": 2130,
        "coverage": {
          "60": {
            "partial": true,
            "source": "  if(!(this instanceof Db)) return new Db(databaseName, serverConfig, options);",
            "missing": [
              {
                "startCol": 28,
                "endCol": 79
              }
            ]
          },
          "65": {
            "partial": true,
            "source": "  this.options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 35,
                "endCol": 37
              }
            ]
          },
          "69": {
            "partial": true,
            "source": "  var overrideUsedFlag = this.options['override_used_flag'] == null ? false : this.options['override_used_flag'];",
            "missing": [
              {
                "startCol": 78,
                "endCol": 112
              }
            ]
          },
          "72": {
            "partial": false,
            "source": "    throw new Error(\"A Server or ReplSet instance cannot be shared across multiple Db instances\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 98
              }
            ]
          },
          "85": {
            "partial": true,
            "source": "    var bsonLib = this.bsonLib = this.options.native_parser ? require('bson').BSONNative : new require('bson').BSONPure;",
            "missing": [
              {
                "startCol": 69,
                "endCol": 77
              }
            ]
          },
          "95": {
            "partial": false,
            "source": "    var msg = \"Native bson parser not compiled, please compile \"",
            "missing": [
              {}
            ]
          },
          "96": {
            "partial": false,
            "source": "            + \"or avoid using native_parser=true\";",
            "missing": [
              {}
            ]
          },
          "97": {
            "partial": false,
            "source": "    throw Error(msg);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 21
              },
              {
                "startCol": 10,
                "endCol": 20
              }
            ]
          },
          "103": {
            "partial": true,
            "source": "  this.pkFactory = this.options.pk == null ? bsonLib.ObjectID : this.options.pk;",
            "missing": [
              {
                "startCol": 64,
                "endCol": 79
              }
            ]
          },
          "107": {
            "partial": true,
            "source": "  this.strict = this.options.strict == null ? null : this.options.strict;",
            "missing": [
              {
                "startCol": 53,
                "endCol": 72
              }
            ]
          },
          "108": {
            "partial": true,
            "source": "  this.strict = this.options.safe == null ? this.strict : this.options.safe;  ",
            "missing": [
              {
                "startCol": 44,
                "endCol": 55
              }
            ]
          },
          "112": {
            "partial": false,
            "source": "    console.log(\"========================================================================================\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "113": {
            "partial": false,
            "source": "    console.log(\"=  Please ensure that you set the default safe variable to one of the                  =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "114": {
            "partial": false,
            "source": "    console.log(\"=   allowed values of [true | false | {j:true} | {w:n, wtimeout:n} | {fsync:true}]     =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "115": {
            "partial": false,
            "source": "    console.log(\"=   the default value is false which means the driver receives does                    =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "116": {
            "partial": false,
            "source": "    console.log(\"=   return the information of the success/error of the insert/update/remove            =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "117": {
            "partial": false,
            "source": "    console.log(\"=                                                                                      =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "118": {
            "partial": false,
            "source": "    console.log(\"=   ex: new Db(new Server('localhost', 27017), {safe:true})                            =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "119": {
            "partial": false,
            "source": "    console.log(\"=                                                                                      =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "120": {
            "partial": false,
            "source": "    console.log(\"=   http://www.mongodb.org/display/DOCS/getLastError+Command                           =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "121": {
            "partial": false,
            "source": "    console.log(\"=                                                                                      =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "122": {
            "partial": false,
            "source": "    console.log(\"=  The default of false will change to true in the near future                         =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "123": {
            "partial": false,
            "source": "    console.log(\"=                                                                                      =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "124": {
            "partial": false,
            "source": "    console.log(\"=  This message will disappear when the default safe is set on the driver Db           =\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "125": {
            "partial": false,
            "source": "    console.log(\"========================================================================================\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 107
              }
            ]
          },
          "142": {
            "partial": false,
            "source": "    && (typeof this.options.logger.debug == 'function')",
            "missing": [
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 8,
                "endCol": 40
              }
            ]
          },
          "143": {
            "partial": false,
            "source": "    && (typeof this.options.logger.error == 'function')",
            "missing": [
              {
                "startCol": 7,
                "endCol": 55
              },
              {
                "startCol": 8,
                "endCol": 40
              }
            ]
          },
          "144": {
            "partial": false,
            "source": "    && (typeof this.options.logger.log == 'function')",
            "missing": [
              {
                "startCol": 7,
                "endCol": 53
              },
              {
                "startCol": 8,
                "endCol": 38
              }
            ]
          },
          "145": {
            "partial": true,
            "source": "      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};",
            "missing": [
              {
                "startCol": 8,
                "endCol": 27
              }
            ]
          },
          "147": {
            "partial": true,
            "source": "  this.slaveOk = this.options[\"slave_ok\"] == null ? false : this.options[\"slave_ok\"];",
            "missing": [
              {
                "startCol": 60,
                "endCol": 84
              }
            ]
          },
          "157": {
            "partial": true,
            "source": "  this.serializeFunctions = this.options.serializeFunctions != null ? this.options.serializeFunctions : false;",
            "missing": [
              {
                "startCol": 70,
                "endCol": 101
              }
            ]
          },
          "160": {
            "partial": true,
            "source": "  this.raw = this.options.raw != null ? this.options.raw : false;",
            "missing": [
              {
                "startCol": 40,
                "endCol": 56
              }
            ]
          },
          "163": {
            "partial": true,
            "source": "  this.recordQueryStats = this.options.recordQueryStats != null ? this.options.recordQueryStats : false;",
            "missing": [
              {
                "startCol": 66,
                "endCol": 95
              }
            ]
          },
          "167": {
            "partial": false,
            "source": "    this.serverConfig.enableRecordQueryStats(true);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              }
            ]
          },
          "171": {
            "partial": true,
            "source": "  this.reaperEnabled = this.options.reaper != null ? this.options.reaper : false;",
            "missing": [
              {
                "startCol": 53,
                "endCol": 72
              }
            ]
          },
          "175": {
            "partial": true,
            "source": "  this.retryMiliSeconds = this.options.retryMiliSeconds != null ? this.options.retryMiliSeconds : 1000;",
            "missing": [
              {
                "startCol": 66,
                "endCol": 95
              }
            ]
          },
          "176": {
            "partial": true,
            "source": "  this.numberOfRetries = this.options.numberOfRetries != null ? this.options.numberOfRetries : 60;",
            "missing": [
              {
                "startCol": 64,
                "endCol": 92
              }
            ]
          },
          "179": {
            "partial": true,
            "source": "  this.reaperInterval = this.options.reaperInterval != null ? this.options.reaperInterval : 10000;",
            "missing": [
              {
                "startCol": 62,
                "endCol": 89
              }
            ]
          },
          "180": {
            "partial": true,
            "source": "  this.reaperTimeout = this.options.reaperTimeout != null ? this.options.reaperTimeout : 30000;",
            "missing": [
              {
                "startCol": 60,
                "endCol": 86
              }
            ]
          },
          "194": {
            "partial": false,
            "source": "  var currentTime = new Date().getTime();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 41
              },
              {
                "startCol": 20,
                "endCol": 40
              }
            ]
          },
          "196": {
            "partial": false,
            "source": "  if((currentTime - dbInstance._lastReaperTimestamp) >= reaperInterval) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 52
              },
              {
                "startCol": 6,
                "endCol": 17
              },
              {
                "startCol": 56,
                "endCol": 70
              }
            ]
          },
          "198": {
            "partial": false,
            "source": "    dbInstance._lastReaperTimestamp = currentTime;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 50
              }
            ]
          },
          "200": {
            "partial": false,
            "source": "    var keys = Object.keys(dbInstance._callBackStore._notReplied);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 66
              },
              {
                "startCol": 15,
                "endCol": 65
              }
            ]
          },
          "202": {
            "partial": false,
            "source": "    for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 36,
                "endCol": 39
              }
            ]
          },
          "204": {
            "partial": false,
            "source": "      var key = keys[i];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 24
              }
            ]
          },
          "206": {
            "partial": false,
            "source": "      var info = dbInstance._callBackStore._notReplied[key];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 60
              }
            ]
          },
          "208": {
            "partial": false,
            "source": "      if((currentTime - info.start) > reaperTimeout) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 35
              },
              {
                "startCol": 10,
                "endCol": 21
              },
              {
                "startCol": 38,
                "endCol": 51
              }
            ]
          },
          "210": {
            "partial": false,
            "source": "        delete dbInstance._callBackStore._notReplied[key];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 57
              }
            ]
          },
          "212": {
            "partial": false,
            "source": "        process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "213": {
            "partial": false,
            "source": "          if(dbInstance._callBackStore ",
            "missing": [
              {}
            ]
          },
          "214": {
            "partial": false,
            "source": "            && dbInstance._callBackStore.listeners(key).length > 0",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 66
              },
              {
                "startCol": 50,
                "endCol": 55
              }
            ]
          },
          "215": {
            "partial": false,
            "source": "            && typeof dbInstance._callBackStore.listeners(key)[0] == 'function') {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 65
              },
              {
                "startCol": 57,
                "endCol": 62
              },
              {}
            ]
          },
          "216": {
            "partial": false,
            "source": "            dbInstance._callBackStore.emit(key, new Error(\"operation timed out\"), null);            ",
            "missing": [
              {
                "startCol": 12,
                "endCol": 87
              },
              {}
            ]
          },
          "217": {
            "partial": false,
            "source": "          } else if(dbInstance._callBackStore ",
            "missing": [
              {}
            ]
          },
          "218": {
            "partial": false,
            "source": "            && dbInstance._callBackStore.listeners(key).length > 0) {",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 66
              },
              {
                "startCol": 50,
                "endCol": 55
              }
            ]
          },
          "219": {
            "partial": false,
            "source": "            console.log(\"================================================= _callBackStore listener not a function\");",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 115
              }
            ]
          },
          "220": {
            "partial": false,
            "source": "            console.dir(dbInstance._callBackStore.listeners(key));",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 65
              },
              {
                "startCol": 24,
                "endCol": 64
              }
            ]
          },
          "221": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "222": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "226": {
            "partial": false,
            "source": "    return true;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "229": {
            "partial": false,
            "source": "    return false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "237": {
            "partial": true,
            "source": "  if(typeof databaseName !== 'string') throw new Error(\"database name must be a string\");",
            "missing": [
              {
                "startCol": 39,
                "endCol": 89
              }
            ]
          },
          "238": {
            "partial": true,
            "source": "  if(databaseName.length === 0) throw new Error(\"database name cannot be the empty string\");",
            "missing": [
              {
                "startCol": 32,
                "endCol": 92
              }
            ]
          },
          "242": {
            "partial": true,
            "source": "    if(databaseName.indexOf(invalidChars[i]) != -1) throw new Error(\"database names cannot contain the character '\" + invalidChars[i] + \"'\");",
            "missing": [
              {
                "startCol": 52,
                "endCol": 141
              },
              {
                "startCol": 68,
                "endCol": 133
              }
            ]
          },
          "264": {
            "partial": false,
            "source": "    this.close();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "266": {
            "partial": false,
            "source": "    throw new Error(\"db object already connecting, open cannot be called multiple times\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 90
              }
            ]
          },
          "270": {
            "partial": true,
            "source": "  if(this.readPreference != null) this.serverConfig.setReadPreference(this.readPreference);",
            "missing": [
              {
                "startCol": 34,
                "endCol": 90
              }
            ]
          },
          "277": {
            "partial": true,
            "source": "  if(self.serverConfig instanceof Server || self.serverConfig instanceof ReplSet || self.serverConfig instanceof Mongos) {",
            "missing": [
              {
                "startCol": 44,
                "endCol": 80
              },
              {
                "startCol": 73,
                "endCol": 80
              },
              {
                "startCol": 84,
                "endCol": 119
              },
              {
                "startCol": 113,
                "endCol": 119
              }
            ]
          },
          "281": {
            "partial": false,
            "source": "        self.openCalled = false;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 32
              }
            ]
          },
          "283": {
            "partial": false,
            "source": "        return callback(err, null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 35
              },
              {
                "startCol": 15,
                "endCol": 34
              }
            ]
          },
          "291": {
            "partial": false,
            "source": "    return callback(Error(\"Server parameter must be of type Server, ReplSet or Mongos\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 95
              },
              {
                "startCol": 11,
                "endCol": 94
              },
              {
                "startCol": 20,
                "endCol": 87
              }
            ]
          },
          "304": {
            "partial": false,
            "source": "  var options = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "306": {
            "partial": false,
            "source": "    options[key] = this.options[key];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 37
              }
            ]
          },
          "309": {
            "partial": false,
            "source": "  options['override_used_flag'] = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              }
            ]
          },
          "311": {
            "partial": false,
            "source": "  var newDbInstance = new Db(dbName, this.serverConfig, options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 65
              }
            ]
          },
          "314": {
            "partial": false,
            "source": "    newDbInstance.auths = this.serverConfig.db.auths;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 53
              }
            ]
          },
          "317": {
            "partial": false,
            "source": "  var allServerInstances = this.serverConfig.allServerInstances();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 66
              },
              {
                "startCol": 27,
                "endCol": 65
              }
            ]
          },
          "319": {
            "partial": false,
            "source": "  for(var i = 0; i < allServerInstances.length; i++) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 18
              },
              {
                "startCol": 48,
                "endCol": 51
              }
            ]
          },
          "320": {
            "partial": false,
            "source": "    var server = allServerInstances[i];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              }
            ]
          },
          "321": {
            "partial": false,
            "source": "    server.dbInstances.push(newDbInstance);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "324": {
            "partial": false,
            "source": "  return newDbInstance;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "341": {
            "partial": false,
            "source": "    callback = forceClose;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "343": {
            "partial": false,
            "source": "    this._applicationClosed = forceClose;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              }
            ]
          },
          "358": {
            "partial": false,
            "source": "    \t  for(var i = 0; i < server.dbInstances.length; i++) {",
            "missing": [
              {
                "startCol": 22,
                "endCol": 23
              },
              {
                "startCol": 53,
                "endCol": 56
              }
            ]
          },
          "359": {
            "partial": false,
            "source": "          var dbInstance = server.dbInstances[i];",
            "missing": [
              {
                "startCol": 10,
                "endCol": 49
              }
            ]
          },
          "361": {
            "partial": false,
            "source": "          if(dbInstance.databaseName !== self.databaseName && dbInstance.tag !== self.tag) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 58
              },
              {
                "startCol": 62,
                "endCol": 89
              }
            ]
          },
          "362": {
            "partial": false,
            "source": "            server.dbInstances[i].emit(\"close\");",
            "missing": [
              {
                "startCol": 12,
                "endCol": 47
              }
            ]
          },
          "373": {
            "partial": true,
            "source": "    if(callback) callback(err, result);",
            "missing": [
              {
                "startCol": 17,
                "endCol": 38
              }
            ]
          },
          "385": {
            "partial": false,
            "source": "  if(callback == null) return new Admin(this);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 13
              },
              {
                "startCol": 23,
                "endCol": 46
              }
            ]
          },
          "386": {
            "partial": false,
            "source": "  callback(null, new Admin(this));",
            "missing": [
              {
                "startCol": 2,
                "endCol": 33
              }
            ]
          },
          "398": {
            "partial": true,
            "source": "  if(callback == null && typeof collectionName == 'function') { callback = collectionName; collectionName = null; }",
            "missing": [
              {
                "startCol": 25,
                "endCol": 46
              },
              {
                "startCol": 32,
                "endCol": 46
              },
              {
                "startCol": 64,
                "endCol": 90
              },
              {
                "startCol": 91,
                "endCol": 113
              }
            ]
          },
          "409": {
            "partial": false,
            "source": "    return new Cursor(this, new Collection(this, DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 99
              }
            ]
          },
          "429": {
            "partial": true,
            "source": "  collectionName = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 48,
                "endCol": 52
              }
            ]
          },
          "430": {
            "partial": true,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 26,
                "endCol": 38
              }
            ]
          },
          "434": {
            "partial": false,
            "source": "    options = collectionName;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "435": {
            "partial": false,
            "source": "    collectionName = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "440": {
            "partial": true,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 20,
                "endCol": 47
              },
              {
                "startCol": 27,
                "endCol": 46
              }
            ]
          },
          "443": {
            "partial": true,
            "source": "      if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 22,
                "endCol": 49
              },
              {
                "startCol": 29,
                "endCol": 48
              }
            ]
          },
          "447": {
            "partial": false,
            "source": "        return !(document.name.indexOf(self.databaseName) == -1 || document.name.indexOf('$') != -1);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 101
              },
              {
                "startCol": 15,
                "endCol": 100
              },
              {
                "startCol": 16,
                "endCol": 100
              },
              {
                "startCol": 17,
                "endCol": 57
              },
              {
                "startCol": 61,
                "endCol": 63
              },
              {
                "startCol": 67,
                "endCol": 93
              },
              {
                "startCol": 97,
                "endCol": 99
              }
            ]
          },
          "452": {
            "partial": false,
            "source": "        filtered_documents = filtered_documents.map(function(document) { return document.name });",
            "missing": [
              {
                "startCol": 8,
                "endCol": 97
              },
              {
                "startCol": 29,
                "endCol": 96
              },
              {
                "startCol": 73,
                "endCol": 94
              }
            ]
          },
          "482": {
            "partial": false,
            "source": "    self.collectionNames(collectionName, function(err, collections) {",
            "missing": [
              {}
            ]
          },
          "483": {
            "partial": false,
            "source": "      if(err != null) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 49
              },
              {
                "startCol": 29,
                "endCol": 48
              }
            ]
          },
          "484": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "485": {
            "partial": false,
            "source": "      if(collections.length == 0) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 32
              }
            ]
          },
          "486": {
            "partial": false,
            "source": "        return callback(new Error(\"Collection \" + collectionName + \" does not exist. Currently in strict mode.\"), null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 120
              },
              {
                "startCol": 15,
                "endCol": 119
              },
              {
                "startCol": 34,
                "endCol": 64
              },
              {
                "startCol": 50,
                "endCol": 64
              },
              {}
            ]
          },
          "487": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "488": {
            "partial": false,
            "source": "        try {",
            "missing": [
              {}
            ]
          },
          "489": {
            "partial": false,
            "source": "          var collection = new Collection(self, collectionName, self.pkFactory, options);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 89
              },
              {}
            ]
          },
          "490": {
            "partial": false,
            "source": "        } catch(err) {",
            "missing": [
              {}
            ]
          },
          "491": {
            "partial": false,
            "source": "          return callback(err, null);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 37
              },
              {},
              {
                "startCol": 17,
                "endCol": 36
              }
            ]
          },
          "492": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "493": {
            "partial": false,
            "source": "        return callback(null, collection);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 42
              },
              {},
              {
                "startCol": 15,
                "endCol": 41
              }
            ]
          },
          "494": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "495": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "500": {
            "partial": false,
            "source": "      if(callback == null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 17
              }
            ]
          },
          "501": {
            "partial": false,
            "source": "        throw err;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 18
              }
            ]
          },
          "503": {
            "partial": false,
            "source": "        return callback(err, null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 35
              },
              {
                "startCol": 15,
                "endCol": 34
              }
            ]
          },
          "520": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "522": {
            "partial": false,
            "source": "  self.collectionNames(function(err, documents) {",
            "missing": [
              {}
            ]
          },
          "523": {
            "partial": false,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              },
              {
                "startCol": 27,
                "endCol": 46
              },
              {
                "startCol": 20,
                "endCol": 47
              },
              {}
            ]
          },
          "524": {
            "partial": false,
            "source": "    var collections = [];",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 25
              }
            ]
          },
          "525": {
            "partial": false,
            "source": "    documents.forEach(function(document) {",
            "missing": [
              {}
            ]
          },
          "526": {
            "partial": false,
            "source": "      collections.push(new Collection(self, document.name.replace(self.databaseName + \".\", ''), self.pkFactory));",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 112
              },
              {
                "startCol": 44,
                "endCol": 94
              },
              {
                "startCol": 66,
                "endCol": 89
              }
            ]
          },
          "527": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "528": {
            "partial": false,
            "source": "    // Return the collection objects",
            "missing": [
              {}
            ]
          },
          "529": {
            "partial": false,
            "source": "    callback(null, collections);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              },
              {}
            ]
          },
          "530": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "548": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "549": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "550": {
            "partial": false,
            "source": "  parameters = args.length ? args.shift() : parameters;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 29,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 54
              }
            ]
          },
          "551": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "553": {
            "partial": false,
            "source": "  var finalCode = code;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "554": {
            "partial": false,
            "source": "  var finalParameters = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "556": {
            "partial": false,
            "source": "  if(!(finalCode instanceof this.bsonLib.Code)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 46
              },
              {
                "startCol": 6,
                "endCol": 46
              },
              {
                "startCol": 7,
                "endCol": 16
              }
            ]
          },
          "557": {
            "partial": false,
            "source": "    finalCode = new this.bsonLib.Code(finalCode);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 49
              }
            ]
          },
          "561": {
            "partial": false,
            "source": "  if(parameters != null && parameters.constructor != Array && typeof parameters !== 'function') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 15
              },
              {
                "startCol": 27,
                "endCol": 58
              },
              {
                "startCol": 53,
                "endCol": 58
              },
              {
                "startCol": 62,
                "endCol": 79
              },
              {
                "startCol": 69,
                "endCol": 79
              }
            ]
          },
          "562": {
            "partial": false,
            "source": "    finalParameters = [parameters];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "563": {
            "partial": false,
            "source": "  } else if(parameters != null && parameters.constructor == Array && typeof parameters !== 'function') {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 22
              },
              {
                "startCol": 34,
                "endCol": 65
              },
              {
                "startCol": 60,
                "endCol": 65
              },
              {
                "startCol": 69,
                "endCol": 86
              },
              {
                "startCol": 76,
                "endCol": 86
              }
            ]
          },
          "564": {
            "partial": false,
            "source": "    finalParameters = parameters;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "568": {
            "partial": false,
            "source": "  var selector = {'$eval':finalCode, 'args':finalParameters};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 61
              }
            ]
          },
          "571": {
            "partial": false,
            "source": "    selector['nolock'] = options['nolock'];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 43
              }
            ]
          },
          "575": {
            "partial": false,
            "source": "  options.readPreference = ReadPreference.PRIMARY;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              }
            ]
          },
          "578": {
            "partial": false,
            "source": "  this.collection(DbCommand.SYSTEM_COMMAND_COLLECTION).findOne(selector, options, function(err, result) {",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 54
              }
            ]
          },
          "579": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 32
              },
              {}
            ]
          },
          "580": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "581": {
            "partial": false,
            "source": "    if(result && result.ok == 1) {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 13
              },
              {
                "startCol": 17,
                "endCol": 31
              }
            ]
          },
          "582": {
            "partial": false,
            "source": "      callback(null, result.retval);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 35
              },
              {}
            ]
          },
          "583": {
            "partial": false,
            "source": "    } else if(result) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 20
              },
              {}
            ]
          },
          "584": {
            "partial": false,
            "source": "      callback(new Error(\"eval failed: \" + result.errmsg), null); return;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 64
              },
              {
                "startCol": 25,
                "endCol": 56
              },
              {
                "startCol": 66,
                "endCol": 73
              }
            ]
          },
          "585": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "586": {
            "partial": false,
            "source": "      callback(err, result);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 27
              },
              {}
            ]
          },
          "587": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "588": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "600": {
            "partial": false,
            "source": "  var db = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 16
              }
            ]
          },
          "602": {
            "partial": false,
            "source": "  if(dbRef.db != null) db = this.db(dbRef.db);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 21
              },
              {
                "startCol": 23,
                "endCol": 46
              },
              {
                "startCol": 28,
                "endCol": 45
              }
            ]
          },
          "604": {
            "partial": false,
            "source": "  var collection = db.collection(dbRef.namespace);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              },
              {
                "startCol": 19,
                "endCol": 49
              }
            ]
          },
          "605": {
            "partial": false,
            "source": "  collection.findOne({'_id':dbRef.oid}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "606": {
            "partial": false,
            "source": "    callback(err, result);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              },
              {}
            ]
          },
          "607": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "618": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "620": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "621": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "622": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "625": {
            "partial": false,
            "source": "  var numberOfConnections = this.serverConfig.allRawConnections().length;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 73
              },
              {
                "startCol": 63,
                "endCol": 65
              }
            ]
          },
          "628": {
            "partial": false,
            "source": "  var logoutCommand = DbCommand.logoutCommand(self, {logout:1}, options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 73
              },
              {
                "startCol": 22,
                "endCol": 72
              }
            ]
          },
          "629": {
            "partial": false,
            "source": "  self._executeQueryCommand(logoutCommand, {onAll:true}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "630": {
            "partial": false,
            "source": "    // Count down",
            "missing": [
              {}
            ]
          },
          "631": {
            "partial": false,
            "source": "    numberOfConnections = numberOfConnections - 1;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 50
              },
              {
                "startCol": 26,
                "endCol": 45
              }
            ]
          },
          "632": {
            "partial": false,
            "source": "    // Work around the case where the number of connections are 0",
            "missing": [
              {}
            ]
          },
          "633": {
            "partial": false,
            "source": "    if(numberOfConnections <= 0 && typeof callback == 'function') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 64
              },
              {},
              {
                "startCol": 35,
                "endCol": 64
              },
              {
                "startCol": 42,
                "endCol": 50
              }
            ]
          },
          "634": {
            "partial": false,
            "source": "      var internalCallback = callback;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              },
              {}
            ]
          },
          "635": {
            "partial": false,
            "source": "      callback = null;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "636": {
            "partial": false,
            "source": "      // Reset auth",
            "missing": [
              {}
            ]
          },
          "637": {
            "partial": false,
            "source": "      self.auths = [];",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "638": {
            "partial": false,
            "source": "      // Handle any errors",
            "missing": [
              {}
            ]
          },
          "639": {
            "partial": false,
            "source": "      if(err == null && result.documents[0].ok == 1) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 24,
                "endCol": 51
              }
            ]
          },
          "640": {
            "partial": false,
            "source": "        internalCallback(null, true);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 36
              }
            ]
          },
          "641": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "642": {
            "partial": false,
            "source": "        err != null ? internalCallback(err, false) : internalCallback(new Error(result.documents[0].errmsg), false);",
            "missing": [
              {
                "startCol": 22,
                "endCol": 50
              },
              {
                "startCol": 53,
                "endCol": 115
              },
              {},
              {
                "startCol": 8,
                "endCol": 116
              }
            ]
          },
          "643": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "644": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "645": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "662": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "664": {
            "partial": false,
            "source": "  if (typeof callback === 'undefined') {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 21
              },
              {
                "startCol": 13,
                "endCol": 21
              }
            ]
          },
          "665": {
            "partial": false,
            "source": "    callback = options;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "666": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "670": {
            "partial": false,
            "source": "  var authdb = options.authdb ? options.authdb : self.databaseName;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 67
              },
              {
                "startCol": 32,
                "endCol": 46
              },
              {
                "startCol": 49,
                "endCol": 66
              }
            ]
          },
          "674": {
            "partial": false,
            "source": "  var numberOfConnections = this.serverConfig.allRawConnections().length;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 73
              },
              {
                "startCol": 63,
                "endCol": 65
              }
            ]
          },
          "675": {
            "partial": false,
            "source": "  var errorObject = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "678": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createGetNonceCommand(self), {onAll:true}, function(err, result, connection) {",
            "missing": [
              {
                "startCol": 28,
                "endCol": 65
              },
              {}
            ]
          },
          "679": {
            "partial": false,
            "source": "    // Execute on all the connections",
            "missing": [
              {}
            ]
          },
          "680": {
            "partial": false,
            "source": "    if(err == null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {}
            ]
          },
          "681": {
            "partial": false,
            "source": "      // Nonce used to make authentication request with md5 hash",
            "missing": [
              {}
            ]
          },
          "682": {
            "partial": false,
            "source": "      var nonce = result.documents[0].nonce;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 44
              }
            ]
          },
          "683": {
            "partial": false,
            "source": "      // Execute command",
            "missing": [
              {}
            ]
          },
          "684": {
            "partial": false,
            "source": "      self._executeQueryCommand(DbCommand.createAuthenticationCommand(self, username, password, nonce, authdb), {connection:connection}, function(err, result) {",
            "missing": [
              {
                "startCol": 32,
                "endCol": 110
              },
              {}
            ]
          },
          "685": {
            "partial": false,
            "source": "        // Count down",
            "missing": [
              {}
            ]
          },
          "686": {
            "partial": false,
            "source": "        numberOfConnections = numberOfConnections - 1;",
            "missing": [
              {
                "startCol": 30,
                "endCol": 53
              },
              {},
              {
                "startCol": 8,
                "endCol": 54
              }
            ]
          },
          "687": {
            "partial": false,
            "source": "        // Ensure we save any error",
            "missing": [
              {}
            ]
          },
          "688": {
            "partial": false,
            "source": "        if(err) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 14
              }
            ]
          },
          "689": {
            "partial": false,
            "source": "          errorObject = err;",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 28
              }
            ]
          },
          "690": {
            "partial": false,
            "source": "        } else if(result.documents[0].err != null || result.documents[0].errmsg != null){",
            "missing": [
              {
                "startCol": 53,
                "endCol": 87
              },
              {},
              {
                "startCol": 18,
                "endCol": 87
              }
            ]
          },
          "691": {
            "partial": false,
            "source": "          errorObject = self.wrap(result.documents[0]);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 55
              },
              {
                "startCol": 24,
                "endCol": 54
              }
            ]
          },
          "692": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "693": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "694": {
            "partial": false,
            "source": "        // Work around the case where the number of connections are 0",
            "missing": [
              {}
            ]
          },
          "695": {
            "partial": false,
            "source": "        if(numberOfConnections <= 0 && typeof callback == 'function') {",
            "missing": [
              {},
              {
                "startCol": 46,
                "endCol": 54
              },
              {
                "startCol": 39,
                "endCol": 54
              },
              {
                "startCol": 11,
                "endCol": 30
              }
            ]
          },
          "696": {
            "partial": false,
            "source": "          var internalCallback = callback;",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 42
              }
            ]
          },
          "697": {
            "partial": false,
            "source": "          callback = null;",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 26
              }
            ]
          },
          "698": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "699": {
            "partial": false,
            "source": "          if(errorObject == null && result.documents[0].ok == 1) {",
            "missing": [
              {},
              {
                "startCol": 36,
                "endCol": 63
              },
              {
                "startCol": 13,
                "endCol": 24
              }
            ]
          },
          "700": {
            "partial": false,
            "source": "            // We authenticated correctly save the credentials",
            "missing": [
              {}
            ]
          },
          "701": {
            "partial": false,
            "source": "            self.auths = [{'username':username, 'password':password, 'authdb': authdb}];",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 88
              }
            ]
          },
          "702": {
            "partial": false,
            "source": "            // Return callback",
            "missing": [
              {}
            ]
          },
          "703": {
            "partial": false,
            "source": "            internalCallback(errorObject, true);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 47
              },
              {}
            ]
          },
          "704": {
            "partial": false,
            "source": "          } else {",
            "missing": [
              {}
            ]
          },
          "705": {
            "partial": false,
            "source": "            internalCallback(errorObject, false);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 49
              },
              {}
            ]
          },
          "706": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "707": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "708": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "709": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "710": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "727": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "728": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "729": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "730": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "733": {
            "partial": false,
            "source": "  var safe = self.strict != null && self.strict == false ? true : self.strict;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 78
              },
              {
                "startCol": 13,
                "endCol": 32
              },
              {
                "startCol": 36,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 77
              }
            ]
          },
          "735": {
            "partial": false,
            "source": "  safe = options != null && options['safe'] != null ? options['safe'] : safe;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 77
              },
              {
                "startCol": 9,
                "endCol": 16
              },
              {
                "startCol": 28,
                "endCol": 51
              },
              {
                "startCol": 54,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 76
              }
            ]
          },
          "737": {
            "partial": false,
            "source": "  safe = safe == null ? true : safe;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 36
              },
              {
                "startCol": 9,
                "endCol": 13
              },
              {
                "startCol": 24,
                "endCol": 28
              },
              {
                "startCol": 31,
                "endCol": 35
              }
            ]
          },
          "740": {
            "partial": false,
            "source": "  var md5 = crypto.createHash('md5');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 37
              },
              {
                "startCol": 12,
                "endCol": 36
              }
            ]
          },
          "742": {
            "partial": false,
            "source": "  md5.update(username + \":mongo:\" + password);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 13,
                "endCol": 21
              },
              {
                "startCol": 36,
                "endCol": 44
              }
            ]
          },
          "743": {
            "partial": false,
            "source": "  var userPassword = md5.digest('hex');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              },
              {
                "startCol": 21,
                "endCol": 38
              }
            ]
          },
          "745": {
            "partial": false,
            "source": "  var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 69
              },
              {
                "startCol": 19,
                "endCol": 68
              }
            ]
          },
          "747": {
            "partial": false,
            "source": "  collection.count({}, function(err, count) {",
            "missing": [
              {}
            ]
          },
          "748": {
            "partial": false,
            "source": "    // We got an error (f.ex not authorized)",
            "missing": [
              {}
            ]
          },
          "749": {
            "partial": false,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 20,
                "endCol": 47
              },
              {
                "startCol": 27,
                "endCol": 46
              }
            ]
          },
          "750": {
            "partial": false,
            "source": "    // Check if the user exists and update i",
            "missing": [
              {}
            ]
          },
          "751": {
            "partial": false,
            "source": "    collection.find({user: username}, {dbName: options['dbName']}).toArray(function(err, documents) {",
            "missing": [
              {},
              {
                "startCol": 19,
                "endCol": 66
              }
            ]
          },
          "752": {
            "partial": false,
            "source": "      // We got an error (f.ex not authorized)",
            "missing": [
              {}
            ]
          },
          "753": {
            "partial": false,
            "source": "      if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              },
              {},
              {
                "startCol": 22,
                "endCol": 49
              },
              {
                "startCol": 29,
                "endCol": 48
              }
            ]
          },
          "754": {
            "partial": false,
            "source": "      // We have a user, let's update the password or upsert if not",
            "missing": [
              {}
            ]
          },
          "755": {
            "partial": false,
            "source": "      collection.update({user: username},{$set: {user: username, pwd: userPassword}}, {safe:safe, dbName: options['dbName'], upsert:true}, function(err, results) {",
            "missing": [
              {}
            ]
          },
          "756": {
            "partial": false,
            "source": "        if(count == 0 && err) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 16
              },
              {
                "startCol": 25,
                "endCol": 28
              }
            ]
          },
          "757": {
            "partial": false,
            "source": "          callback(null, [{user:username, pwd:userPassword}]);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 62
              },
              {}
            ]
          },
          "758": {
            "partial": false,
            "source": "        } else if(err) {",
            "missing": [
              {},
              {
                "startCol": 18,
                "endCol": 21
              }
            ]
          },
          "759": {
            "partial": false,
            "source": "          callback(err, null)",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 29
              }
            ]
          },
          "760": {
            "partial": false,
            "source": "        } else {",
            "missing": [
              {}
            ]
          },
          "761": {
            "partial": false,
            "source": "          callback(null, [{user:username, pwd:userPassword}]);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 61
              }
            ]
          },
          "762": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "763": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "764": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "765": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "781": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "782": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "783": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "784": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "787": {
            "partial": false,
            "source": "  var safe = self.strict != null && self.strict == false ? true : self.strict;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 78
              },
              {
                "startCol": 13,
                "endCol": 32
              },
              {
                "startCol": 36,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 77
              }
            ]
          },
          "789": {
            "partial": false,
            "source": "  safe = options != null && options['safe'] != null ? options['safe'] : safe;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 77
              },
              {
                "startCol": 9,
                "endCol": 16
              },
              {
                "startCol": 28,
                "endCol": 51
              },
              {
                "startCol": 54,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 76
              }
            ]
          },
          "791": {
            "partial": false,
            "source": "  safe = safe == null ? true : safe;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 36
              },
              {
                "startCol": 9,
                "endCol": 13
              },
              {
                "startCol": 24,
                "endCol": 28
              },
              {
                "startCol": 31,
                "endCol": 35
              }
            ]
          },
          "794": {
            "partial": false,
            "source": "  var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 69
              },
              {
                "startCol": 19,
                "endCol": 68
              }
            ]
          },
          "795": {
            "partial": false,
            "source": "  collection.findOne({user: username}, {dbName: options['dbName']}, function(err, user) {",
            "missing": [
              {}
            ]
          },
          "796": {
            "partial": false,
            "source": "    if(user != null) {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 11
              }
            ]
          },
          "797": {
            "partial": false,
            "source": "      collection.remove({user: username}, {safe:safe, dbName: options['dbName']}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "798": {
            "partial": false,
            "source": "        callback(err, true);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "799": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "800": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "801": {
            "partial": false,
            "source": "      callback(err, false);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 26
              }
            ]
          },
          "802": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "803": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "829": {
            "partial": true,
            "source": "  options = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 26,
                "endCol": 38
              }
            ]
          },
          "833": {
            "partial": true,
            "source": "  var safe = self.strict != null && self.strict == false ? true : self.strict;",
            "missing": [
              {
                "startCol": 66,
                "endCol": 77
              }
            ]
          },
          "835": {
            "partial": true,
            "source": "  safe = options != null && options['safe'] != null ? options['safe'] : safe;",
            "missing": [
              {
                "startCol": 28,
                "endCol": 51
              },
              {
                "startCol": 54,
                "endCol": 69
              }
            ]
          },
          "837": {
            "partial": true,
            "source": "  safe = safe == null ? true : safe;",
            "missing": [
              {
                "startCol": 24,
                "endCol": 28
              }
            ]
          },
          "841": {
            "partial": true,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 20,
                "endCol": 47
              },
              {
                "startCol": 27,
                "endCol": 46
              }
            ]
          },
          "845": {
            "partial": false,
            "source": "      if(collection.name == self.databaseName + \".\" + collectionName) found = true;",
            "missing": [
              {
                "startCol": 9,
                "endCol": 68
              },
              {
                "startCol": 28,
                "endCol": 51
              },
              {
                "startCol": 54,
                "endCol": 68
              },
              {
                "startCol": 70,
                "endCol": 83
              }
            ]
          },
          "849": {
            "partial": true,
            "source": "    if(found && ((options && options.safe) || self.strict)) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 58
              },
              {
                "startCol": 17,
                "endCol": 42
              },
              {
                "startCol": 18,
                "endCol": 25
              }
            ]
          },
          "850": {
            "partial": false,
            "source": "      return callback(new Error(\"Collection \" + collectionName + \" already exists. Currently in strict mode.\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 118
              },
              {
                "startCol": 13,
                "endCol": 117
              },
              {
                "startCol": 32,
                "endCol": 62
              },
              {
                "startCol": 48,
                "endCol": 62
              }
            ]
          },
          "853": {
            "partial": false,
            "source": "        var collection = new Collection(self, collectionName, self.pkFactory, options);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 87
              }
            ]
          },
          "855": {
            "partial": false,
            "source": "        return callback(err, null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 35
              },
              {
                "startCol": 15,
                "endCol": 34
              }
            ]
          },
          "857": {
            "partial": false,
            "source": "      return callback(null, collection);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 40
              },
              {
                "startCol": 13,
                "endCol": 39
              }
            ]
          },
          "868": {
            "partial": false,
            "source": "          return callback(err, null);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 37
              },
              {
                "startCol": 17,
                "endCol": 36
              }
            ]
          },
          "872": {
            "partial": false,
            "source": "        err != null ? callback(err, null) : callback(self.wrap(document), null);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 11
              },
              {
                "startCol": 22,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 79
              },
              {
                "startCol": 53,
                "endCol": 72
              }
            ]
          },
          "887": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "888": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "889": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "892": {
            "partial": false,
            "source": "  var cursor = new Cursor(this",
            "missing": [
              {}
            ]
          },
          "893": {
            "partial": false,
            "source": "    , new Collection(this, DbCommand.SYSTEM_COMMAND_COLLECTION), selector, {}, 0, -1, null, null, null, null, QueryCommand.OPTS_NO_CURSOR_TIMEOUT",
            "missing": [
              {},
              {
                "startCol": 82,
                "endCol": 84
              }
            ]
          },
          "894": {
            "partial": false,
            "source": "    , null, null, null, null, null, null, null, null, null, null, null, null, null, options['dbName']);",
            "missing": [
              {}
            ]
          },
          "897": {
            "partial": false,
            "source": "  var readPreference = options['readPreference'] ? options['readPreference'] : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 85
              },
              {
                "startCol": 51,
                "endCol": 76
              },
              {
                "startCol": 79,
                "endCol": 84
              }
            ]
          },
          "900": {
            "partial": false,
            "source": "  if(readPreference != false) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              }
            ]
          },
          "901": {
            "partial": false,
            "source": "    if(selector['group'] || selector['aggregate'] || selector['collStats'] || selector['dbStats']",
            "missing": [
              {
                "startCol": 7,
                "endCol": 49
              },
              {}
            ]
          },
          "902": {
            "partial": false,
            "source": "      || selector['count'] || selector['distinct'] || selector['geoNear'] || selector['geoSearch'] || selector['geoWalk']",
            "missing": [
              {}
            ]
          },
          "903": {
            "partial": false,
            "source": "      || (selector['mapreduce'] && selector.out == 'inline')) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 60
              },
              {},
              {
                "startCol": 35,
                "endCol": 59
              }
            ]
          },
          "905": {
            "partial": false,
            "source": "      cursor.setReadPreference(readPreference);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 46
              }
            ]
          },
          "907": {
            "partial": false,
            "source": "      cursor.setReadPreference(ReadPreference.PRIMARY);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 54
              }
            ]
          },
          "912": {
            "partial": false,
            "source": "  cursor.nextObject(callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 29
              }
            ]
          },
          "924": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "927": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createDropCollectionCommand(this, collectionName), function(err, result) {",
            "missing": [
              {
                "startCol": 28,
                "endCol": 87
              },
              {}
            ]
          },
          "928": {
            "partial": false,
            "source": "    if(err == null && result.documents[0].ok == 1) {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 22,
                "endCol": 49
              }
            ]
          },
          "929": {
            "partial": false,
            "source": "      if(callback != null) return callback(null, true);",
            "missing": [
              {
                "startCol": 34,
                "endCol": 54
              },
              {
                "startCol": 27,
                "endCol": 55
              },
              {
                "startCol": 9,
                "endCol": 17
              },
              {}
            ]
          },
          "930": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "931": {
            "partial": false,
            "source": "      if(callback != null) err != null ? callback(err, null) : callback(self.wrap(result.documents[0]), null);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 17
              },
              {
                "startCol": 27,
                "endCol": 30
              },
              {
                "startCol": 41,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 109
              },
              {
                "startCol": 72,
                "endCol": 102
              }
            ]
          },
          "932": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "933": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "946": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "949": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createRenameCollectionCommand(this, fromCollection, toCollection), function(err, result) {",
            "missing": [
              {},
              {
                "startCol": 28,
                "endCol": 103
              }
            ]
          },
          "950": {
            "partial": false,
            "source": "    if(err == null && result.documents[0].ok == 1) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              },
              {},
              {
                "startCol": 22,
                "endCol": 49
              }
            ]
          },
          "951": {
            "partial": false,
            "source": "      if(callback != null) return callback(null, new Collection(self, toCollection, self.pkFactory));",
            "missing": [
              {
                "startCol": 9,
                "endCol": 17
              },
              {},
              {
                "startCol": 27,
                "endCol": 101
              },
              {
                "startCol": 34,
                "endCol": 100
              }
            ]
          },
          "952": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "953": {
            "partial": false,
            "source": "      if(callback != null) err != null ? callback(err, null) : callback(self.wrap(result.documents[0]), null);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 17
              },
              {
                "startCol": 27,
                "endCol": 30
              },
              {
                "startCol": 41,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 109
              },
              {},
              {
                "startCol": 72,
                "endCol": 102
              }
            ]
          },
          "954": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "955": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "978": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "979": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "980": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "981": {
            "partial": false,
            "source": "  connectionOptions = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 36,
                "endCol": 48
              },
              {
                "startCol": 51,
                "endCol": 53
              }
            ]
          },
          "983": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createGetLastErrorCommand(options, this), connectionOptions, function(err, error) {",
            "missing": [
              {},
              {
                "startCol": 28,
                "endCol": 78
              }
            ]
          },
          "984": {
            "partial": false,
            "source": "    callback(err, error && error.documents);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 43
              },
              {
                "startCol": 18,
                "endCol": 23
              }
            ]
          },
          "985": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1010": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1011": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1012": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1014": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createGetPreviousErrorsCommand(this), options, function(err, error) {",
            "missing": [
              {},
              {
                "startCol": 28,
                "endCol": 74
              }
            ]
          },
          "1015": {
            "partial": false,
            "source": "    callback(err, error.documents);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "1016": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1025": {
            "partial": false,
            "source": "  if(callback == null) { callback = options; options = {}; }",
            "missing": [
              {
                "startCol": 5,
                "endCol": 13
              },
              {
                "startCol": 25,
                "endCol": 44
              },
              {
                "startCol": 45,
                "endCol": 58
              }
            ]
          },
          "1026": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this, command_hash, options), options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 109
              },
              {
                "startCol": 28,
                "endCol": 89
              }
            ]
          },
          "1035": {
            "partial": false,
            "source": "  if(callback == null) { callback = options; options = {}; }",
            "missing": [
              {
                "startCol": 5,
                "endCol": 13
              },
              {
                "startCol": 25,
                "endCol": 44
              },
              {
                "startCol": 45,
                "endCol": 58
              }
            ]
          },
          "1036": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createAdminDbCommand(this, command_hash), options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 98
              },
              {
                "startCol": 28,
                "endCol": 78
              }
            ]
          },
          "1052": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1053": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1054": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1056": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createResetErrorHistoryCommand(this), options, function(err, error) {",
            "missing": [
              {},
              {
                "startCol": 28,
                "endCol": 74
              }
            ]
          },
          "1057": {
            "partial": false,
            "source": "    callback(err, error.documents);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "1058": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1084": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "1085": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1086": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1087": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1088": {
            "partial": false,
            "source": "  options = typeof callback === 'function' ? options : callback;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 12,
                "endCol": 27
              },
              {
                "startCol": 19,
                "endCol": 27
              },
              {
                "startCol": 45,
                "endCol": 52
              },
              {
                "startCol": 55,
                "endCol": 63
              }
            ]
          },
          "1089": {
            "partial": false,
            "source": "  options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 12,
                "endCol": 19
              },
              {
                "startCol": 30,
                "endCol": 32
              },
              {
                "startCol": 35,
                "endCol": 42
              }
            ]
          },
          "1092": {
            "partial": false,
            "source": "  var errorOptions = options.safe != null ? options.safe : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 21,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 63
              }
            ]
          },
          "1093": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && self.strict != null ? self.strict : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 90
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 74
              },
              {
                "startCol": 77,
                "endCol": 89
              }
            ]
          },
          "1096": {
            "partial": false,
            "source": "  if(errorOptions != null && errorOptions != false && (typeof callback !== 'function' && typeof options !== 'function')) throw new Error(\"safe cannot be used without a callback\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 29,
                "endCol": 41
              },
              {
                "startCol": 54,
                "endCol": 119
              },
              {
                "startCol": 55,
                "endCol": 70
              },
              {
                "startCol": 62,
                "endCol": 70
              },
              {
                "startCol": 89,
                "endCol": 103
              },
              {
                "startCol": 96,
                "endCol": 103
              },
              {
                "startCol": 121,
                "endCol": 179
              }
            ]
          },
          "1099": {
            "partial": false,
            "source": "  var command = DbCommand.createCreateIndexCommand(this, collectionName, fieldOrSpec, options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 95
              },
              {
                "startCol": 16,
                "endCol": 94
              }
            ]
          },
          "1101": {
            "partial": false,
            "source": "  var commandOptions = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "1104": {
            "partial": false,
            "source": "  if(errorOptions && errorOptions != false) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 21,
                "endCol": 33
              }
            ]
          },
          "1106": {
            "partial": false,
            "source": "    commandOptions['read'] = false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "1108": {
            "partial": false,
            "source": "    if(errorOptions == null) commandOptions['async'] = true;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 19
              },
              {
                "startCol": 29,
                "endCol": 60
              }
            ]
          },
          "1111": {
            "partial": false,
            "source": "    commandOptions['safe'] = errorOptions;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              }
            ]
          },
          "1113": {
            "partial": false,
            "source": "    if(typeof errorOptions == 'object') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 26
              },
              {
                "startCol": 14,
                "endCol": 26
              }
            ]
          },
          "1114": {
            "partial": false,
            "source": "      var keys = Object.keys(errorOptions);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 43
              },
              {
                "startCol": 17,
                "endCol": 42
              }
            ]
          },
          "1115": {
            "partial": false,
            "source": "      for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 38,
                "endCol": 41
              }
            ]
          },
          "1116": {
            "partial": false,
            "source": "        commandOptions[keys[i]] = errorOptions[keys[i]];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 56
              }
            ]
          },
          "1121": {
            "partial": false,
            "source": "    this._executeInsertCommand(command, commandOptions, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "1122": {
            "partial": false,
            "source": "      if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 20
              },
              {},
              {
                "startCol": 29,
                "endCol": 48
              },
              {
                "startCol": 22,
                "endCol": 49
              }
            ]
          },
          "1123": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1124": {
            "partial": false,
            "source": "      result = result && result.documents;",
            "missing": [
              {
                "startCol": 15,
                "endCol": 21
              },
              {},
              {
                "startCol": 6,
                "endCol": 42
              }
            ]
          },
          "1125": {
            "partial": false,
            "source": "      if (result[0].err) {",
            "missing": [
              {}
            ]
          },
          "1126": {
            "partial": false,
            "source": "        callback(self.wrap(result[0]));",
            "missing": [
              {
                "startCol": 8,
                "endCol": 38
              },
              {},
              {
                "startCol": 17,
                "endCol": 37
              }
            ]
          },
          "1127": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "1128": {
            "partial": false,
            "source": "        callback(null, command.documents[0].name);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 49
              },
              {}
            ]
          },
          "1129": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "1130": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1133": {
            "partial": false,
            "source": "    var result = this._executeInsertCommand(command, commandOptions);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 69
              },
              {
                "startCol": 17,
                "endCol": 68
              }
            ]
          },
          "1135": {
            "partial": false,
            "source": "    if(!callback) return;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 16
              },
              {
                "startCol": 8,
                "endCol": 16
              },
              {
                "startCol": 18,
                "endCol": 25
              }
            ]
          },
          "1137": {
            "partial": false,
            "source": "    if(result instanceof Error) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 13
              },
              {
                "startCol": 25,
                "endCol": 30
              }
            ]
          },
          "1138": {
            "partial": false,
            "source": "      return callback(result);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 30
              },
              {
                "startCol": 13,
                "endCol": 29
              }
            ]
          },
          "1141": {
            "partial": false,
            "source": "    return callback(null, null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 32
              },
              {
                "startCol": 11,
                "endCol": 31
              }
            ]
          },
          "1168": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "1170": {
            "partial": false,
            "source": "  if (typeof callback === 'undefined' && typeof options === 'function') {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 21
              },
              {
                "startCol": 13,
                "endCol": 21
              },
              {
                "startCol": 41,
                "endCol": 55
              },
              {
                "startCol": 48,
                "endCol": 55
              }
            ]
          },
          "1171": {
            "partial": false,
            "source": "    callback = options;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "1172": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1175": {
            "partial": false,
            "source": "  if (options == null) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 13
              }
            ]
          },
          "1176": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1180": {
            "partial": false,
            "source": "  var errorOptions = options.safe != null ? options.safe : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 21,
                "endCol": 41
              },
              {
                "startCol": 44,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 63
              }
            ]
          },
          "1181": {
            "partial": false,
            "source": "  errorOptions = errorOptions == null && self.strict != null ? self.strict : errorOptions;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 90
              },
              {
                "startCol": 17,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 74
              },
              {
                "startCol": 77,
                "endCol": 89
              }
            ]
          },
          "1184": {
            "partial": false,
            "source": "  if(errorOptions != null && errorOptions != false && (typeof callback !== 'function' && typeof options !== 'function')) throw new Error(\"safe cannot be used without a callback\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 29,
                "endCol": 41
              },
              {
                "startCol": 54,
                "endCol": 119
              },
              {
                "startCol": 55,
                "endCol": 70
              },
              {
                "startCol": 62,
                "endCol": 70
              },
              {
                "startCol": 89,
                "endCol": 103
              },
              {
                "startCol": 96,
                "endCol": 103
              },
              {
                "startCol": 121,
                "endCol": 179
              }
            ]
          },
          "1187": {
            "partial": false,
            "source": "  var command = DbCommand.createCreateIndexCommand(this, collectionName, fieldOrSpec, options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 95
              },
              {
                "startCol": 16,
                "endCol": 94
              }
            ]
          },
          "1188": {
            "partial": false,
            "source": "  var index_name = command.documents[0].name;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              }
            ]
          },
          "1191": {
            "partial": false,
            "source": "  var commandOptions = {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "1193": {
            "partial": false,
            "source": "  this.indexInformation(collectionName, function(err, collectionInfo) {",
            "missing": [
              {}
            ]
          },
          "1194": {
            "partial": false,
            "source": "    if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {},
              {
                "startCol": 20,
                "endCol": 47
              },
              {
                "startCol": 27,
                "endCol": 46
              }
            ]
          },
          "1195": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1196": {
            "partial": false,
            "source": "    if(!collectionInfo[index_name])  {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 34
              }
            ]
          },
          "1197": {
            "partial": false,
            "source": "      // If we have error conditions set handle them",
            "missing": [
              {}
            ]
          },
          "1198": {
            "partial": false,
            "source": "      if(errorOptions && errorOptions != false) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 21
              },
              {},
              {
                "startCol": 25,
                "endCol": 37
              }
            ]
          },
          "1199": {
            "partial": false,
            "source": "        // Insert options",
            "missing": [
              {}
            ]
          },
          "1200": {
            "partial": false,
            "source": "        commandOptions['read'] = false;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 39
              },
              {}
            ]
          },
          "1201": {
            "partial": false,
            "source": "        // If we have safe set set async to false",
            "missing": [
              {}
            ]
          },
          "1202": {
            "partial": false,
            "source": "        if(errorOptions == null) commandOptions['async'] = true;",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 23
              },
              {
                "startCol": 33,
                "endCol": 64
              }
            ]
          },
          "1203": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1204": {
            "partial": false,
            "source": "        // Set safe option",
            "missing": [
              {}
            ]
          },
          "1205": {
            "partial": false,
            "source": "        commandOptions['safe'] = errorOptions;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 46
              }
            ]
          },
          "1206": {
            "partial": false,
            "source": "        // If we have an error option",
            "missing": [
              {}
            ]
          },
          "1207": {
            "partial": false,
            "source": "        if(typeof errorOptions == 'object') {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 30
              },
              {
                "startCol": 18,
                "endCol": 30
              }
            ]
          },
          "1208": {
            "partial": false,
            "source": "          var keys = Object.keys(errorOptions);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 47
              },
              {},
              {
                "startCol": 21,
                "endCol": 46
              }
            ]
          },
          "1209": {
            "partial": false,
            "source": "          for(var i = 0; i < keys.length; i++) {",
            "missing": [
              {
                "startCol": 25,
                "endCol": 26
              },
              {},
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "1210": {
            "partial": false,
            "source": "            commandOptions[keys[i]] = errorOptions[keys[i]];",
            "missing": [
              {
                "startCol": 12,
                "endCol": 60
              },
              {}
            ]
          },
          "1211": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "1212": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1213": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1214": {
            "partial": false,
            "source": "        self._executeInsertCommand(command, commandOptions, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "1215": {
            "partial": false,
            "source": "          // Only callback if we have one specified",
            "missing": [
              {}
            ]
          },
          "1216": {
            "partial": false,
            "source": "          if(typeof callback === 'function') {",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 28
              },
              {
                "startCol": 20,
                "endCol": 28
              }
            ]
          },
          "1217": {
            "partial": false,
            "source": "            if(err != null) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 18
              },
              {
                "startCol": 28,
                "endCol": 55
              },
              {
                "startCol": 35,
                "endCol": 54
              }
            ]
          },
          "1218": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1219": {
            "partial": false,
            "source": "            result = result && result.documents;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 48
              },
              {},
              {
                "startCol": 21,
                "endCol": 27
              }
            ]
          },
          "1220": {
            "partial": false,
            "source": "            if (result[0].err) {",
            "missing": [
              {}
            ]
          },
          "1221": {
            "partial": false,
            "source": "              callback(self.wrap(result[0]));",
            "missing": [
              {
                "startCol": 14,
                "endCol": 45
              },
              {
                "startCol": 23,
                "endCol": 43
              },
              {}
            ]
          },
          "1222": {
            "partial": false,
            "source": "            } else {",
            "missing": [
              {}
            ]
          },
          "1223": {
            "partial": false,
            "source": "              callback(null, command.documents[0].name);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 56
              },
              {}
            ]
          },
          "1224": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "1225": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "1226": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "1227": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "1228": {
            "partial": false,
            "source": "        // Execute insert command",
            "missing": [
              {}
            ]
          },
          "1229": {
            "partial": false,
            "source": "        var result = self._executeInsertCommand(command, commandOptions);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 73
              },
              {
                "startCol": 21,
                "endCol": 72
              }
            ]
          },
          "1230": {
            "partial": false,
            "source": "        // If no callback just return",
            "missing": [
              {}
            ]
          },
          "1231": {
            "partial": false,
            "source": "        if(!callback) return;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 20
              },
              {
                "startCol": 22,
                "endCol": 29
              },
              {},
              {
                "startCol": 11,
                "endCol": 20
              }
            ]
          },
          "1232": {
            "partial": false,
            "source": "        // If error return error",
            "missing": [
              {}
            ]
          },
          "1233": {
            "partial": false,
            "source": "        if(result instanceof Error) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 17
              },
              {},
              {
                "startCol": 29,
                "endCol": 34
              }
            ]
          },
          "1234": {
            "partial": false,
            "source": "          return callback(result);",
            "missing": [
              {
                "startCol": 17,
                "endCol": 33
              },
              {},
              {
                "startCol": 10,
                "endCol": 34
              }
            ]
          },
          "1235": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1236": {
            "partial": false,
            "source": "        // Otherwise just return",
            "missing": [
              {}
            ]
          },
          "1237": {
            "partial": false,
            "source": "        return callback(null, index_name);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 42
              },
              {
                "startCol": 15,
                "endCol": 41
              },
              {}
            ]
          },
          "1238": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "1239": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1240": {
            "partial": false,
            "source": "      if(typeof callback === 'function') return callback(null, index_name);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 24
              },
              {
                "startCol": 16,
                "endCol": 24
              },
              {
                "startCol": 41,
                "endCol": 75
              },
              {
                "startCol": 48,
                "endCol": 74
              }
            ]
          },
          "1241": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1242": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1257": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1258": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1259": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1261": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this, {'cursorInfo':1}), options, function(err, result) {",
            "missing": [
              {
                "startCol": 28,
                "endCol": 84
              },
              {}
            ]
          },
          "1262": {
            "partial": false,
            "source": "    callback(err, result.documents[0]);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 38
              },
              {}
            ]
          },
          "1263": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1276": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createDropIndexCommand(this, collectionName, indexName), callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 104
              },
              {
                "startCol": 28,
                "endCol": 93
              }
            ]
          },
          "1288": {
            "partial": false,
            "source": "  this._executeQueryCommand(DbCommand.createReIndexCommand(this, collectionName), function(err, result) {",
            "missing": [
              {},
              {
                "startCol": 28,
                "endCol": 80
              }
            ]
          },
          "1289": {
            "partial": false,
            "source": "    if(err != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {}
            ]
          },
          "1290": {
            "partial": false,
            "source": "      callback(err, false);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 26
              },
              {}
            ]
          },
          "1291": {
            "partial": false,
            "source": "    } else if(result.documents[0].errmsg == null) {",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 48
              }
            ]
          },
          "1292": {
            "partial": false,
            "source": "      callback(null, true);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 27
              },
              {}
            ]
          },
          "1293": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1294": {
            "partial": false,
            "source": "      callback(new Error(result.documents[0].errmsg), false);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 61
              }
            ]
          },
          "1295": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1296": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1313": {
            "partial": false,
            "source": "  if(typeof callback === 'undefined') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 20
              },
              {
                "startCol": 12,
                "endCol": 20
              }
            ]
          },
          "1314": {
            "partial": false,
            "source": "    if(typeof options === 'undefined') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 21
              },
              {
                "startCol": 14,
                "endCol": 21
              }
            ]
          },
          "1315": {
            "partial": false,
            "source": "      callback = collectionName;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "1316": {
            "partial": false,
            "source": "      collectionName = null;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 28
              }
            ]
          },
          "1318": {
            "partial": false,
            "source": "      callback = options;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 25
              }
            ]
          },
          "1320": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1324": {
            "partial": false,
            "source": "  var full = options['full'] == null ? false : options['full'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 63
              },
              {
                "startCol": 13,
                "endCol": 36
              },
              {
                "startCol": 39,
                "endCol": 44
              },
              {
                "startCol": 47,
                "endCol": 62
              }
            ]
          },
          "1326": {
            "partial": false,
            "source": "  var selector = collectionName != null ? {ns: (this.databaseName + \".\" + collectionName)} : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              },
              {
                "startCol": 17,
                "endCol": 31
              },
              {
                "startCol": 42,
                "endCol": 90
              },
              {
                "startCol": 47,
                "endCol": 89
              },
              {
                "startCol": 48,
                "endCol": 71
              },
              {
                "startCol": 74,
                "endCol": 88
              },
              {
                "startCol": 93,
                "endCol": 95
              }
            ]
          },
          "1329": {
            "partial": false,
            "source": "  var readPreference = options['readPreference'] ? options['readPreference'] : ReadPreference.PRIMARY;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 102
              },
              {
                "startCol": 51,
                "endCol": 76
              },
              {
                "startCol": 79,
                "endCol": 101
              }
            ]
          },
          "1332": {
            "partial": false,
            "source": "  this.collection(DbCommand.SYSTEM_INDEX_COLLECTION, function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "1333": {
            "partial": false,
            "source": "    // Perform the find for the collection",
            "missing": [
              {}
            ]
          },
          "1334": {
            "partial": false,
            "source": "    collection.find(selector).setReadPreference(readPreference).toArray(function(err, indexes) {",
            "missing": [
              {},
              {
                "startCol": 19,
                "endCol": 29
              },
              {
                "startCol": 47,
                "endCol": 63
              }
            ]
          },
          "1335": {
            "partial": false,
            "source": "      if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 22,
                "endCol": 49
              },
              {},
              {
                "startCol": 29,
                "endCol": 48
              },
              {
                "startCol": 9,
                "endCol": 20
              }
            ]
          },
          "1336": {
            "partial": false,
            "source": "      // Contains all the information",
            "missing": [
              {}
            ]
          },
          "1337": {
            "partial": false,
            "source": "      var info = {};",
            "missing": [
              {
                "startCol": 6,
                "endCol": 20
              },
              {}
            ]
          },
          "1338": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1339": {
            "partial": false,
            "source": "      // if full defined just return all the indexes directly",
            "missing": [
              {}
            ]
          },
          "1340": {
            "partial": false,
            "source": "      if(full) return callback(null, indexes);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 13
              },
              {
                "startCol": 15,
                "endCol": 46
              },
              {
                "startCol": 22,
                "endCol": 45
              }
            ]
          },
          "1341": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1342": {
            "partial": false,
            "source": "      // Process all the indexes",
            "missing": [
              {}
            ]
          },
          "1343": {
            "partial": true,
            "source": "      for(var i = 0; i < indexes.length; i++) {",
            "missing": [
              {},
              {
                "startCol": 41,
                "endCol": 44
              }
            ]
          },
          "1344": {
            "partial": false,
            "source": "        var index = indexes[i];",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 31
              }
            ]
          },
          "1345": {
            "partial": false,
            "source": "        // Let's unpack the object",
            "missing": [
              {}
            ]
          },
          "1346": {
            "partial": false,
            "source": "        info[index.name] = [];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 30
              },
              {}
            ]
          },
          "1347": {
            "partial": false,
            "source": "        for(var name in index.key) {",
            "missing": [
              {}
            ]
          },
          "1348": {
            "partial": false,
            "source": "          info[index.name].push([name, index.key[name]]);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 56
              }
            ]
          },
          "1349": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1350": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "1351": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1352": {
            "partial": false,
            "source": "      // Return all the indexes",
            "missing": [
              {}
            ]
          },
          "1353": {
            "partial": false,
            "source": "      callback(null, info);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 27
              },
              {}
            ]
          },
          "1354": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1355": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1372": {
            "partial": false,
            "source": "      if (err) {",
            "missing": [
              {
                "startCol": 10,
                "endCol": 13
              }
            ]
          },
          "1373": {
            "partial": false,
            "source": "        callback(err, false);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 28
              }
            ]
          },
          "1375": {
            "partial": false,
            "source": "        callback(self.wrap(result.documents[0]), false);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 55
              },
              {
                "startCol": 17,
                "endCol": 47
              }
            ]
          },
          "1394": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1395": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1397": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1400": {
            "partial": false,
            "source": "  var commandObject = {",
            "missing": [
              {}
            ]
          },
          "1401": {
            "partial": false,
            "source": "    dbStats:this.collectionName,",
            "missing": [
              {}
            ]
          },
          "1402": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "1403": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1404": {
            "partial": false,
            "source": "  // Check if we have the scale value",
            "missing": [
              {}
            ]
          },
          "1405": {
            "partial": false,
            "source": "  if(options['scale'] != null) commandObject['scale'] = options['scale'];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 29
              },
              {
                "startCol": 31,
                "endCol": 73
              },
              {}
            ]
          },
          "1408": {
            "partial": false,
            "source": "  this.command(commandObject, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              }
            ]
          },
          "1429": {
            "partial": false,
            "source": "    var chainedIds = [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "1431": {
            "partial": false,
            "source": "    for(var i = 0; i < db_command.length; i++) chainedIds.push(db_command[i].getRequestId().toString());",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 42,
                "endCol": 45
              },
              {
                "startCol": 47,
                "endCol": 103
              },
              {
                "startCol": 63,
                "endCol": 102
              },
              {
                "startCol": 89,
                "endCol": 91
              }
            ]
          },
          "1433": {
            "partial": false,
            "source": "    for(var i = 0; i < db_command.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 42,
                "endCol": 45
              }
            ]
          },
          "1434": {
            "partial": false,
            "source": "      var command = db_command[i];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 34
              }
            ]
          },
          "1436": {
            "partial": false,
            "source": "      this._callBackStore.once(command.getRequestId(), callback);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 64
              },
              {
                "startCol": 31,
                "endCol": 53
              }
            ]
          },
          "1438": {
            "partial": false,
            "source": "      this._callBackStore._notReplied[command.getRequestId().toString()] = {start: new Date().getTime(), 'raw': raw, chained:chainedIds, connection:connection, exhaust:false};",
            "missing": [
              {
                "startCol": 6,
                "endCol": 175
              },
              {
                "startCol": 38,
                "endCol": 71
              },
              {
                "startCol": 58,
                "endCol": 60
              },
              {
                "startCol": 83,
                "endCol": 103
              }
            ]
          },
          "1455": {
            "partial": false,
            "source": "  this._callBackStore.once(newId, object.callback.listener);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 59
              }
            ]
          },
          "1457": {
            "partial": false,
            "source": "  this._callBackStore._notReplied[newId] = object.info;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              }
            ]
          },
          "1494": {
            "partial": false,
            "source": "  if(this._callBackStore._notReplied[id] != null) delete this._callBackStore._notReplied[id];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 48
              },
              {
                "startCol": 50,
                "endCol": 92
              }
            ]
          },
          "1496": {
            "partial": false,
            "source": "  this._callBackStore.removeAllListeners(id);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              }
            ]
          },
          "1498": {
            "partial": false,
            "source": "  if(this._callBackStore._events != null) delete this._callBackStore._events[id];",
            "missing": [
              {
                "startCol": 5,
                "endCol": 40
              },
              {
                "startCol": 42,
                "endCol": 80
              }
            ]
          },
          "1509": {
            "partial": true,
            "source": "  return {info:info, callback:(this._callBackStore.listeners(id).length >= 1) ? this._callBackStore.listeners(id)[0] : null}",
            "missing": [
              {
                "startCol": 119,
                "endCol": 123
              }
            ]
          },
          "1519": {
            "partial": true,
            "source": "  var onAll = options['onAll'] != null ? options['onAll'] : false;",
            "missing": [
              {
                "startCol": 41,
                "endCol": 57
              }
            ]
          },
          "1524": {
            "partial": false,
            "source": "    read = (read == null || read == 'primary' || read == false) ? ReadPreference.PRIMARY : read;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 96
              },
              {
                "startCol": 11,
                "endCol": 63
              },
              {
                "startCol": 12,
                "endCol": 16
              },
              {
                "startCol": 28,
                "endCol": 32
              },
              {
                "startCol": 49,
                "endCol": 53
              },
              {
                "startCol": 66,
                "endCol": 88
              },
              {
                "startCol": 91,
                "endCol": 95
              }
            ]
          },
          "1525": {
            "partial": false,
            "source": "    if(!ReadPreference.isValid(read)) return callback(new Error(\"Illegal readPreference mode specified, \" + read));",
            "missing": [
              {
                "startCol": 7,
                "endCol": 36
              },
              {
                "startCol": 8,
                "endCol": 36
              },
              {
                "startCol": 38,
                "endCol": 115
              },
              {
                "startCol": 45,
                "endCol": 114
              },
              {
                "startCol": 64,
                "endCol": 112
              },
              {
                "startCol": 108,
                "endCol": 112
              }
            ]
          },
          "1526": {
            "partial": true,
            "source": "  } else if(typeof read == 'object' && read._type == 'ReadPreference') {",
            "missing": [
              {
                "startCol": 39,
                "endCol": 69
              }
            ]
          },
          "1527": {
            "partial": false,
            "source": "    if(!read.isValid()) return callback(new Error(\"Illegal readPreference mode specified, \" + read.mode));",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 8,
                "endCol": 22
              },
              {
                "startCol": 24,
                "endCol": 106
              },
              {
                "startCol": 31,
                "endCol": 105
              },
              {
                "startCol": 50,
                "endCol": 103
              }
            ]
          },
          "1531": {
            "partial": true,
            "source": "  if(self.serverConfig.isMongos() && read != null && read != false) {",
            "missing": [
              {
                "startCol": 37,
                "endCol": 41
              },
              {
                "startCol": 53,
                "endCol": 57
              }
            ]
          },
          "1532": {
            "partial": false,
            "source": "    db_command.setMongosReadPreference(read);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 44
              }
            ]
          },
          "1542": {
            "partial": true,
            "source": "      connection = read == null || read == 'primary' || read == false ? self.serverConfig.checkoutWriter(true) : self.serverConfig.checkoutReader(read);",
            "missing": [
              {
                "startCol": 113,
                "endCol": 151
              }
            ]
          },
          "1547": {
            "partial": false,
            "source": "      return callback(new Error(\"no open connections\"));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 56
              },
              {
                "startCol": 13,
                "endCol": 55
              }
            ]
          },
          "1549": {
            "partial": false,
            "source": "      return callback(connection);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 34
              },
              {
                "startCol": 13,
                "endCol": 33
              }
            ]
          },
          "1553": {
            "partial": false,
            "source": "    if(self.reaperEnabled) reaper(self, self.reaperInterval, self.reaperTimeout);",
            "missing": [
              {
                "startCol": 27,
                "endCol": 80
              }
            ]
          },
          "1563": {
            "partial": false,
            "source": "      if(err != null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              }
            ]
          },
          "1565": {
            "partial": false,
            "source": "        self._callHandler(db_command.getRequestId(), null, err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 63
              },
              {
                "startCol": 26,
                "endCol": 51
              }
            ]
          },
          "1568": {
            "partial": false,
            "source": "  } else if(typeof callback === 'function' && onAll) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 27
              },
              {
                "startCol": 19,
                "endCol": 27
              },
              {
                "startCol": 46,
                "endCol": 51
              }
            ]
          },
          "1569": {
            "partial": false,
            "source": "    var connections = self.serverConfig.allRawConnections();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 60
              },
              {
                "startCol": 22,
                "endCol": 59
              }
            ]
          },
          "1570": {
            "partial": false,
            "source": "    var numberOfEntries = connections.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 45
              }
            ]
          },
          "1572": {
            "partial": false,
            "source": "    for(var i = 0; i < connections.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 43,
                "endCol": 46
              }
            ]
          },
          "1574": {
            "partial": false,
            "source": "      var connection = connections[i];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "1576": {
            "partial": false,
            "source": "      connection = specifiedConnection != null ? specifiedConnection : connection;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 82
              },
              {
                "startCol": 19,
                "endCol": 38
              },
              {
                "startCol": 49,
                "endCol": 68
              },
              {
                "startCol": 71,
                "endCol": 81
              }
            ]
          },
          "1578": {
            "partial": false,
            "source": "      if(connection == null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 19
              }
            ]
          },
          "1579": {
            "partial": false,
            "source": "        return callback(new Error(\"no open connections\"));",
            "missing": [
              {
                "startCol": 8,
                "endCol": 58
              },
              {
                "startCol": 15,
                "endCol": 57
              }
            ]
          },
          "1580": {
            "partial": false,
            "source": "      } else if(connection instanceof Error) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 26
              },
              {
                "startCol": 38,
                "endCol": 43
              }
            ]
          },
          "1581": {
            "partial": false,
            "source": "        return callback(connection);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 36
              },
              {
                "startCol": 15,
                "endCol": 35
              }
            ]
          },
          "1585": {
            "partial": false,
            "source": "      self._registerHandler(db_command, raw, connection, callback);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 66
              }
            ]
          },
          "1588": {
            "partial": false,
            "source": "      connection.write(db_command, function(err) {",
            "missing": [
              {}
            ]
          },
          "1589": {
            "partial": false,
            "source": "        // Adjust the number of entries we need to process",
            "missing": [
              {}
            ]
          },
          "1590": {
            "partial": false,
            "source": "        numberOfEntries = numberOfEntries - 1;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 41
              },
              {}
            ]
          },
          "1591": {
            "partial": false,
            "source": "        // Remove listener",
            "missing": [
              {}
            ]
          },
          "1592": {
            "partial": false,
            "source": "        if(err != null) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 22
              },
              {}
            ]
          },
          "1593": {
            "partial": false,
            "source": "          // Clean up listener and return error",
            "missing": [
              {}
            ]
          },
          "1594": {
            "partial": false,
            "source": "          self._removeHandler(db_command.getRequestId());",
            "missing": [
              {
                "startCol": 10,
                "endCol": 56
              },
              {
                "startCol": 30,
                "endCol": 55
              },
              {}
            ]
          },
          "1595": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1596": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1597": {
            "partial": false,
            "source": "        // No more entries to process callback with the error",
            "missing": [
              {}
            ]
          },
          "1598": {
            "partial": false,
            "source": "        if(numberOfEntries <= 0) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 26
              }
            ]
          },
          "1599": {
            "partial": false,
            "source": "          callback(err);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 24
              }
            ]
          },
          "1600": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1601": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "1604": {
            "partial": false,
            "source": "      db_command.updateRequestId();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 34
              }
            ]
          },
          "1608": {
            "partial": false,
            "source": "    var connection = read == null || read == 'primary' || read == false ? self.serverConfig.checkoutWriter(true) : self.serverConfig.checkoutReader(read);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 154
              },
              {
                "startCol": 21,
                "endCol": 25
              },
              {
                "startCol": 37,
                "endCol": 41
              },
              {
                "startCol": 58,
                "endCol": 62
              },
              {
                "startCol": 74,
                "endCol": 112
              },
              {
                "startCol": 115,
                "endCol": 153
              }
            ]
          },
          "1610": {
            "partial": false,
            "source": "    connection = specifiedConnection != null ? specifiedConnection : connection;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 80
              },
              {
                "startCol": 17,
                "endCol": 36
              },
              {
                "startCol": 47,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 79
              }
            ]
          },
          "1612": {
            "partial": false,
            "source": "    if(connection == null || connection instanceof Error || connection['message'] != null) return null;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 17
              },
              {
                "startCol": 29,
                "endCol": 39
              },
              {
                "startCol": 51,
                "endCol": 56
              },
              {
                "startCol": 60,
                "endCol": 89
              },
              {
                "startCol": 91,
                "endCol": 103
              }
            ]
          },
          "1614": {
            "partial": false,
            "source": "    connection.write(db_command, function(err) {",
            "missing": [
              {}
            ]
          },
          "1615": {
            "partial": false,
            "source": "      if(err != null) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              }
            ]
          },
          "1616": {
            "partial": false,
            "source": "        // Emit the error",
            "missing": [
              {}
            ]
          },
          "1617": {
            "partial": false,
            "source": "        self.emit(\"error\", err);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 31
              }
            ]
          },
          "1618": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "1619": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1627": {
            "partial": false,
            "source": "  if(this._state == 'connected' || this._state == 'disconnected') this._state = 'connecting';",
            "missing": [
              {
                "startCol": 5,
                "endCol": 31
              },
              {
                "startCol": 35,
                "endCol": 64
              },
              {
                "startCol": 66,
                "endCol": 93
              }
            ]
          },
          "1629": {
            "partial": false,
            "source": "  var numberOfRetriesDone = numberOfTimes;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              }
            ]
          },
          "1631": {
            "partial": false,
            "source": "  var retryFunction = function(_self, _numberOfRetriesDone, _retryInMilliseconds, _numberOfTimes, _command, _db_command, _options, _callback) {",
            "missing": [
              {}
            ]
          },
          "1632": {
            "partial": false,
            "source": "    _self.serverConfig.connect(_self, {}, function(err, result, _serverConfig) {",
            "missing": [
              {}
            ]
          },
          "1633": {
            "partial": false,
            "source": "      // Adjust the number of retries left",
            "missing": [
              {}
            ]
          },
          "1634": {
            "partial": false,
            "source": "      _numberOfRetriesDone = _numberOfRetriesDone - 1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 54
              },
              {
                "startCol": 29,
                "endCol": 49
              },
              {}
            ]
          },
          "1635": {
            "partial": false,
            "source": "      // Definitively restart",
            "missing": [
              {}
            ]
          },
          "1636": {
            "partial": false,
            "source": "      if(err != null && _numberOfRetriesDone > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 20
              },
              {
                "startCol": 24,
                "endCol": 44
              },
              {}
            ]
          },
          "1637": {
            "partial": false,
            "source": "        _self._state = 'connecting';",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 36
              }
            ]
          },
          "1638": {
            "partial": false,
            "source": "        // Close the server config",
            "missing": [
              {}
            ]
          },
          "1639": {
            "partial": false,
            "source": "        _serverConfig.close(function(err) {",
            "missing": [
              {}
            ]
          },
          "1640": {
            "partial": false,
            "source": "          // Retry the connect",
            "missing": [
              {}
            ]
          },
          "1641": {
            "partial": false,
            "source": "          setTimeout(function() {",
            "missing": [
              {}
            ]
          },
          "1642": {
            "partial": false,
            "source": "            retryFunction(_self, _numberOfRetriesDone, _retryInMilliseconds, _numberOfTimes, _command, _db_command, _options, _callback);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 137
              }
            ]
          },
          "1643": {
            "partial": false,
            "source": "          }, _retryInMilliseconds);",
            "missing": [
              {}
            ]
          },
          "1644": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "1645": {
            "partial": false,
            "source": "      } else if(err != null && _numberOfRetriesDone <= 0) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 56
              },
              {},
              {
                "startCol": 31,
                "endCol": 51
              }
            ]
          },
          "1646": {
            "partial": false,
            "source": "        _self._state = 'disconnected';",
            "missing": [
              {
                "startCol": 8,
                "endCol": 38
              },
              {}
            ]
          },
          "1647": {
            "partial": false,
            "source": "        // Force close the current connections",
            "missing": [
              {}
            ]
          },
          "1648": {
            "partial": false,
            "source": "        _serverConfig.close(function(_err) {",
            "missing": [
              {}
            ]
          },
          "1649": {
            "partial": false,
            "source": "          // Force close the current connections",
            "missing": [
              {}
            ]
          },
          "1650": {
            "partial": false,
            "source": "          if(typeof _callback == 'function') _callback(err, null);",
            "missing": [
              {
                "startCol": 13,
                "endCol": 29
              },
              {
                "startCol": 20,
                "endCol": 29
              },
              {
                "startCol": 45,
                "endCol": 66
              },
              {}
            ]
          },
          "1651": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "1652": {
            "partial": false,
            "source": "      } else if(err == null && _self.serverConfig.isConnected() == true && Array.isArray(_self.auths) && _self.auths.length > 0) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 19
              },
              {},
              {
                "startCol": 31,
                "endCol": 63
              },
              {
                "startCol": 75,
                "endCol": 101
              },
              {
                "startCol": 105,
                "endCol": 127
              }
            ]
          },
          "1653": {
            "partial": false,
            "source": "        _self._state = 'connected';",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 35
              }
            ]
          },
          "1654": {
            "partial": false,
            "source": "        // Get number of auths we need to execute",
            "missing": [
              {}
            ]
          },
          "1655": {
            "partial": false,
            "source": "        var numberOfAuths = _self.auths.length;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 47
              }
            ]
          },
          "1656": {
            "partial": false,
            "source": "        // Apply all auths",
            "missing": [
              {}
            ]
          },
          "1657": {
            "partial": false,
            "source": "        for(var i = 0; i < _self.auths.length; i++) {",
            "missing": [
              {},
              {
                "startCol": 23,
                "endCol": 24
              },
              {
                "startCol": 47,
                "endCol": 50
              }
            ]
          },
          "1658": {
            "partial": false,
            "source": "          _self.authenticate(_self.auths[i].username, _self.auths[i].password, {'authdb':_self.auths[i].authdb}, function(err, authenticated) {",
            "missing": [
              {}
            ]
          },
          "1659": {
            "partial": false,
            "source": "            numberOfAuths = numberOfAuths - 1;",
            "missing": [
              {},
              {
                "startCol": 28,
                "endCol": 41
              },
              {
                "startCol": 12,
                "endCol": 46
              }
            ]
          },
          "1660": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1661": {
            "partial": false,
            "source": "            // If we have no more authentications to replay",
            "missing": [
              {}
            ]
          },
          "1662": {
            "partial": false,
            "source": "            if(numberOfAuths == 0) {",
            "missing": [
              {
                "startCol": 15,
                "endCol": 33
              },
              {}
            ]
          },
          "1663": {
            "partial": false,
            "source": "              if(err != null || !authenticated) {",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 28
              },
              {
                "startCol": 33,
                "endCol": 46
              },
              {
                "startCol": 32,
                "endCol": 46
              }
            ]
          },
          "1664": {
            "partial": false,
            "source": "                if(typeof _callback == 'function') _callback(err, null);",
            "missing": [
              {
                "startCol": 19,
                "endCol": 35
              },
              {},
              {
                "startCol": 26,
                "endCol": 35
              },
              {
                "startCol": 51,
                "endCol": 71
              }
            ]
          },
          "1665": {
            "partial": false,
            "source": "                return;",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 23
              }
            ]
          },
          "1666": {
            "partial": false,
            "source": "              } else {",
            "missing": [
              {}
            ]
          },
          "1667": {
            "partial": false,
            "source": "                // Execute command",
            "missing": [
              {}
            ]
          },
          "1668": {
            "partial": false,
            "source": "                command(_self, _db_command, _options, _callback);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 64
              }
            ]
          },
          "1669": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1670": {
            "partial": false,
            "source": "                // Execute any backed up commands",
            "missing": [
              {}
            ]
          },
          "1671": {
            "partial": false,
            "source": "                process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "1672": {
            "partial": false,
            "source": "                  // Execute any backed up commands",
            "missing": [
              {}
            ]
          },
          "1673": {
            "partial": false,
            "source": "                  while(_self.commands.length > 0) {",
            "missing": [
              {},
              {
                "startCol": 24,
                "endCol": 49
              }
            ]
          },
          "1674": {
            "partial": false,
            "source": "                    // Fetch the command",
            "missing": [
              {}
            ]
          },
          "1675": {
            "partial": false,
            "source": "                    var command = _self.commands.shift();",
            "missing": [
              {},
              {
                "startCol": 34,
                "endCol": 56
              },
              {
                "startCol": 20,
                "endCol": 57
              }
            ]
          },
          "1676": {
            "partial": false,
            "source": "                    // Execute based on type",
            "missing": [
              {}
            ]
          },
          "1677": {
            "partial": false,
            "source": "                    if(command['type'] == 'query') {",
            "missing": [
              {
                "startCol": 23,
                "endCol": 49
              },
              {}
            ]
          },
          "1678": {
            "partial": false,
            "source": "                      __executeQueryCommand(_self, command['db_command'], command['options'], command['callback']);",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 115
              }
            ]
          },
          "1679": {
            "partial": false,
            "source": "                    } else if(command['type'] == 'insert') {",
            "missing": [
              {},
              {
                "startCol": 30,
                "endCol": 57
              }
            ]
          },
          "1680": {
            "partial": false,
            "source": "                      __executeInsertCommand(_self, command['db_command'], command['options'], command['callback']);",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 115
              }
            ]
          },
          "1681": {
            "partial": false,
            "source": "                    }",
            "missing": [
              {}
            ]
          },
          "1682": {
            "partial": false,
            "source": "                  }",
            "missing": [
              {}
            ]
          },
          "1683": {
            "partial": false,
            "source": "                });",
            "missing": [
              {}
            ]
          },
          "1684": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "1685": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "1686": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "1687": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1688": {
            "partial": false,
            "source": "      } else if(err == null && _self.serverConfig.isConnected() == true) {",
            "missing": [
              {
                "startCol": 16,
                "endCol": 27
              },
              {},
              {
                "startCol": 31,
                "endCol": 63
              }
            ]
          },
          "1689": {
            "partial": false,
            "source": "        _self._state = 'connected';",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 35
              }
            ]
          },
          "1690": {
            "partial": false,
            "source": "        // Execute command",
            "missing": [
              {}
            ]
          },
          "1691": {
            "partial": false,
            "source": "        command(_self, _db_command, _options, _callback);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 56
              },
              {}
            ]
          },
          "1692": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1693": {
            "partial": false,
            "source": "        process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "1694": {
            "partial": false,
            "source": "          // Execute any backed up commands",
            "missing": [
              {}
            ]
          },
          "1695": {
            "partial": false,
            "source": "          while(_self.commands.length > 0) {",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 41
              }
            ]
          },
          "1696": {
            "partial": false,
            "source": "            // Fetch the command",
            "missing": [
              {}
            ]
          },
          "1697": {
            "partial": false,
            "source": "            var command = _self.commands.shift();",
            "missing": [
              {},
              {
                "startCol": 26,
                "endCol": 48
              },
              {
                "startCol": 12,
                "endCol": 49
              }
            ]
          },
          "1698": {
            "partial": false,
            "source": "            // Execute based on type",
            "missing": [
              {}
            ]
          },
          "1699": {
            "partial": false,
            "source": "            if(command['type'] == 'query') {",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 41
              }
            ]
          },
          "1700": {
            "partial": false,
            "source": "              __executeQueryCommand(_self, command['db_command'], command['options'], command['callback']);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 107
              },
              {}
            ]
          },
          "1701": {
            "partial": false,
            "source": "            } else if(command['type'] == 'insert') {",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 49
              }
            ]
          },
          "1702": {
            "partial": false,
            "source": "              __executeInsertCommand(_self, command['db_command'], command['options'], command['callback']);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 108
              },
              {}
            ]
          },
          "1703": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "1704": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "1705": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "1706": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "1707": {
            "partial": false,
            "source": "        _self._state = 'connecting';",
            "missing": [
              {
                "startCol": 8,
                "endCol": 36
              },
              {}
            ]
          },
          "1708": {
            "partial": false,
            "source": "        // Force close the current connections",
            "missing": [
              {}
            ]
          },
          "1709": {
            "partial": false,
            "source": "        _serverConfig.close(function(err) {",
            "missing": [
              {}
            ]
          },
          "1710": {
            "partial": false,
            "source": "        // _self.serverConfig.close(function(err) {",
            "missing": [
              {}
            ]
          },
          "1711": {
            "partial": false,
            "source": "          // Retry the connect",
            "missing": [
              {}
            ]
          },
          "1712": {
            "partial": false,
            "source": "          setTimeout(function() {",
            "missing": [
              {}
            ]
          },
          "1713": {
            "partial": false,
            "source": "            retryFunction(_self, _numberOfRetriesDone, _retryInMilliseconds, _numberOfTimes, _command, _db_command, _options, _callback);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 137
              },
              {}
            ]
          },
          "1714": {
            "partial": false,
            "source": "          }, _retryInMilliseconds);",
            "missing": [
              {}
            ]
          },
          "1715": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "1716": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "1717": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1718": {
            "partial": false,
            "source": "  };",
            "missing": [
              {}
            ]
          },
          "1721": {
            "partial": false,
            "source": "  retryFunction(self, numberOfRetriesDone, retryInMilliseconds, numberOfTimes, command, db_command, options, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 118
              }
            ]
          },
          "1739": {
            "partial": true,
            "source": "  var failFast = options['failFast'] != null ? options['failFast'] : false;",
            "missing": [
              {
                "startCol": 47,
                "endCol": 66
              }
            ]
          },
          "1742": {
            "partial": false,
            "source": "    if(typeof callback == 'function') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "1743": {
            "partial": false,
            "source": "      return callback(new Error(\"db closed by application\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 67
              },
              {
                "startCol": 13,
                "endCol": 66
              }
            ]
          },
          "1745": {
            "partial": false,
            "source": "      throw new Error(\"db closed by application\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 50
              }
            ]
          },
          "1750": {
            "partial": true,
            "source": "  if(this._state == 'connecting' && this.serverConfig.autoReconnect && !failFast) {",
            "missing": [
              {
                "startCol": 71,
                "endCol": 80
              },
              {
                "startCol": 72,
                "endCol": 80
              }
            ]
          },
          "1751": {
            "partial": false,
            "source": "    process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "1752": {
            "partial": false,
            "source": "      self.commands.push({type:'query', 'db_command':db_command, 'options':options, 'callback':callback});",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 105
              }
            ]
          },
          "1753": {
            "partial": false,
            "source": "    })",
            "missing": [
              {}
            ]
          },
          "1754": {
            "partial": true,
            "source": "  } else if(!this.serverConfig.isConnected() && this.serverConfig.autoReconnect && !failFast) {",
            "missing": [
              {
                "startCol": 83,
                "endCol": 92
              },
              {
                "startCol": 84,
                "endCol": 92
              },
              {}
            ]
          },
          "1755": {
            "partial": false,
            "source": "    this._state = 'connecting';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              }
            ]
          },
          "1757": {
            "partial": false,
            "source": "    __retryCommandOnFailure(this, this.retryMiliSeconds, this.numberOfRetries, __executeQueryCommand, db_command, options, callback);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 132
              }
            ]
          },
          "1758": {
            "partial": true,
            "source": "  } else if(!this.serverConfig.isConnected() && !this.serverConfig.autoReconnect && callback) {",
            "missing": [
              {
                "startCol": 48,
                "endCol": 80
              },
              {
                "startCol": 84,
                "endCol": 92
              }
            ]
          },
          "1760": {
            "partial": false,
            "source": "    callback(new Error(\"no open connections\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              }
            ]
          },
          "1763": {
            "partial": true,
            "source": "    if(this.serverConfig instanceof ReplSet && this.serverConfig._checkReplicaSet()) {",
            "missing": [
              {
                "startCol": 47,
                "endCol": 83
              }
            ]
          },
          "1765": {
            "partial": false,
            "source": "      __executeQueryCommand(self, db_command, options, function(err, result, connection) {",
            "missing": [
              {}
            ]
          },
          "1766": {
            "partial": false,
            "source": "        if(!err) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 15
              },
              {
                "startCol": 12,
                "endCol": 15
              },
              {}
            ]
          },
          "1767": {
            "partial": false,
            "source": "          process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "1768": {
            "partial": false,
            "source": "            // Force close if we are disconnected",
            "missing": [
              {}
            ]
          },
          "1769": {
            "partial": false,
            "source": "            if(self._state == 'disconnected') {",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 44
              }
            ]
          },
          "1770": {
            "partial": false,
            "source": "              self.close();",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 26
              }
            ]
          },
          "1771": {
            "partial": false,
            "source": "              return;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 21
              },
              {}
            ]
          },
          "1772": {
            "partial": false,
            "source": "            }",
            "missing": [
              {}
            ]
          },
          "1773": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1774": {
            "partial": false,
            "source": "            var replSetGetStatusCommand = DbCommand.createAdminDbCommandSlaveOk(self, {replSetGetStatus:1}, {});",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 112
              },
              {
                "startCol": 42,
                "endCol": 111
              }
            ]
          },
          "1775": {
            "partial": false,
            "source": "            // Do a freaking ping",
            "missing": [
              {}
            ]
          },
          "1776": {
            "partial": false,
            "source": "            __executeQueryCommand(self, replSetGetStatusCommand, {readPreference:ReadPreference.SECONDARY_PREFERRED}, function(_replerr, _replresult) {",
            "missing": [
              {}
            ]
          },
          "1777": {
            "partial": false,
            "source": "              // Force close if we are disconnected",
            "missing": [
              {}
            ]
          },
          "1778": {
            "partial": false,
            "source": "              if(self._state == 'disconnected') {",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 46
              }
            ]
          },
          "1779": {
            "partial": false,
            "source": "                self.close(true);",
            "missing": [
              {
                "startCol": 16,
                "endCol": 33
              },
              {}
            ]
          },
          "1780": {
            "partial": false,
            "source": "                return;",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 23
              }
            ]
          },
          "1781": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "1782": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1783": {
            "partial": false,
            "source": "              // Handle the HA",
            "missing": [
              {}
            ]
          },
          "1784": {
            "partial": false,
            "source": "              if(_replerr == null) {",
            "missing": [
              {
                "startCol": 17,
                "endCol": 25
              },
              {}
            ]
          },
          "1785": {
            "partial": false,
            "source": "                self.serverConfig._validateReplicaset(_replresult, self.auths);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 78
              }
            ]
          },
          "1786": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "1787": {
            "partial": false,
            "source": "            })",
            "missing": [
              {}
            ]
          },
          "1788": {
            "partial": false,
            "source": "          })",
            "missing": [
              {}
            ]
          },
          "1789": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1790": {
            "partial": false,
            "source": "        // Call the original method",
            "missing": [
              {}
            ]
          },
          "1791": {
            "partial": false,
            "source": "        callback(err, result, connection)",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 41
              }
            ]
          },
          "1792": {
            "partial": false,
            "source": "      })",
            "missing": [
              {}
            ]
          },
          "1793": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1807": {
            "partial": true,
            "source": "  var raw = options['raw'] != null ? options['raw'] : self.raw;",
            "missing": [
              {
                "startCol": 37,
                "endCol": 51
              }
            ]
          },
          "1808": {
            "partial": true,
            "source": "  var specifiedConnection = options['connection'] != null ? options['connection'] : null;",
            "missing": [
              {
                "startCol": 60,
                "endCol": 81
              }
            ]
          },
          "1810": {
            "partial": true,
            "source": "  connection = specifiedConnection != null ? specifiedConnection : connection;",
            "missing": [
              {
                "startCol": 45,
                "endCol": 64
              }
            ]
          },
          "1816": {
            "partial": false,
            "source": "      return callback(new Error(\"no open connections\"));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 56
              },
              {
                "startCol": 13,
                "endCol": 55
              }
            ]
          },
          "1818": {
            "partial": false,
            "source": "      return callback(connection);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 34
              },
              {
                "startCol": 13,
                "endCol": 33
              }
            ]
          },
          "1832": {
            "partial": true,
            "source": "  if(connection == null) return null;",
            "missing": [
              {
                "startCol": 25,
                "endCol": 37
              }
            ]
          },
          "1833": {
            "partial": true,
            "source": "  if(connection instanceof Error && typeof callback == 'function') return callback(connection, null);",
            "missing": [
              {
                "startCol": 36,
                "endCol": 51
              },
              {
                "startCol": 43,
                "endCol": 51
              },
              {
                "startCol": 67,
                "endCol": 101
              },
              {
                "startCol": 74,
                "endCol": 100
              }
            ]
          },
          "1834": {
            "partial": true,
            "source": "  if(connection instanceof Error) return null;",
            "missing": [
              {
                "startCol": 34,
                "endCol": 46
              }
            ]
          },
          "1835": {
            "partial": true,
            "source": "  if(connection == null && typeof callback == 'function') return callback(new Error(\"no primary server found\"), null);",
            "missing": [
              {
                "startCol": 27,
                "endCol": 42
              },
              {
                "startCol": 34,
                "endCol": 42
              },
              {
                "startCol": 58,
                "endCol": 118
              },
              {
                "startCol": 65,
                "endCol": 117
              }
            ]
          },
          "1840": {
            "partial": false,
            "source": "    if(typeof callback === 'function' && (safe == null || safe == false)) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              },
              {
                "startCol": 41,
                "endCol": 72
              },
              {
                "startCol": 42,
                "endCol": 46
              },
              {
                "startCol": 58,
                "endCol": 62
              }
            ]
          },
          "1842": {
            "partial": false,
            "source": "      if(self.reaperEnabled) reaper(self, self.reaperInterval, self.reaperTimeout);",
            "missing": [
              {
                "startCol": 29,
                "endCol": 82
              }
            ]
          },
          "1844": {
            "partial": false,
            "source": "      callback(err, null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 25
              }
            ]
          },
          "1845": {
            "partial": false,
            "source": "    } else if(typeof callback === 'function'){",
            "missing": [
              {
                "startCol": 14,
                "endCol": 29
              },
              {
                "startCol": 21,
                "endCol": 29
              }
            ]
          },
          "1847": {
            "partial": false,
            "source": "      self._callHandler(db_command[1].getRequestId(), null, err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 64
              },
              {
                "startCol": 24,
                "endCol": 52
              }
            ]
          },
          "1849": {
            "partial": false,
            "source": "      self.emit(\"error\", err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 29
              }
            ]
          },
          "1864": {
            "partial": false,
            "source": "    callback = options;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "1865": {
            "partial": false,
            "source": "    options = {};",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1869": {
            "partial": true,
            "source": "  options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 30,
                "endCol": 32
              }
            ]
          },
          "1873": {
            "partial": false,
            "source": "    if(typeof callback == 'function') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 22
              },
              {
                "startCol": 14,
                "endCol": 22
              }
            ]
          },
          "1874": {
            "partial": false,
            "source": "      return callback(new Error(\"db closed by application\"), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 67
              },
              {
                "startCol": 13,
                "endCol": 66
              }
            ]
          },
          "1876": {
            "partial": false,
            "source": "      throw new Error(\"db closed by application\");",
            "missing": [
              {
                "startCol": 6,
                "endCol": 50
              }
            ]
          },
          "1882": {
            "partial": false,
            "source": "    process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "1883": {
            "partial": false,
            "source": "      self.commands.push({type:'insert', 'db_command':db_command, 'options':options, 'callback':callback});",
            "missing": [
              {
                "startCol": 6,
                "endCol": 106
              },
              {}
            ]
          },
          "1884": {
            "partial": false,
            "source": "    })",
            "missing": [
              {}
            ]
          },
          "1885": {
            "partial": true,
            "source": "  } else if(!this.serverConfig.isConnected() && this.serverConfig.autoReconnect) {",
            "missing": [
              {}
            ]
          },
          "1886": {
            "partial": false,
            "source": "    this._state = 'connecting';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              }
            ]
          },
          "1888": {
            "partial": false,
            "source": "    __retryCommandOnFailure(this, this.retryMiliSeconds, this.numberOfRetries, __executeInsertCommand, db_command, options, callback);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 133
              }
            ]
          },
          "1889": {
            "partial": true,
            "source": "  } else if(!this.serverConfig.isConnected() && !this.serverConfig.autoReconnect && callback) {",
            "missing": [
              {
                "startCol": 48,
                "endCol": 80
              },
              {
                "startCol": 84,
                "endCol": 92
              }
            ]
          },
          "1891": {
            "partial": false,
            "source": "    if(callback) callback(new Error(\"no open connections\"), null);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 15
              },
              {
                "startCol": 17,
                "endCol": 65
              }
            ]
          },
          "1894": {
            "partial": true,
            "source": "    if(this.serverConfig instanceof ReplSet && this.serverConfig._checkReplicaSet()) {",
            "missing": [
              {
                "startCol": 47,
                "endCol": 83
              }
            ]
          },
          "1896": {
            "partial": false,
            "source": "      __executeInsertCommand(self, db_command, options, callback)",
            "missing": [
              {
                "startCol": 6,
                "endCol": 65
              },
              {}
            ]
          },
          "1897": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1898": {
            "partial": false,
            "source": "      var replSetGetStatusCommand = DbCommand.createAdminDbCommandSlaveOk(self, {replSetGetStatus:1}, {});",
            "missing": [
              {
                "startCol": 6,
                "endCol": 106
              },
              {
                "startCol": 36,
                "endCol": 105
              },
              {}
            ]
          },
          "1900": {
            "partial": false,
            "source": "      __executeQueryCommand(self, replSetGetStatusCommand, {readPreference:ReadPreference.SECONDARY_PREFERRED}, function(_replerr, _replresult) {",
            "missing": [
              {}
            ]
          },
          "1901": {
            "partial": false,
            "source": "        // Force close if we are disconnected",
            "missing": [
              {}
            ]
          },
          "1902": {
            "partial": false,
            "source": "        if(self._state == 'disconnected') {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 40
              }
            ]
          },
          "1903": {
            "partial": false,
            "source": "          self.close(true);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 27
              },
              {}
            ]
          },
          "1904": {
            "partial": false,
            "source": "          return;",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 17
              }
            ]
          },
          "1905": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1906": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1907": {
            "partial": false,
            "source": "        // Handle the HA",
            "missing": [
              {}
            ]
          },
          "1908": {
            "partial": false,
            "source": "        if(_replerr == null) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 19
              }
            ]
          },
          "1909": {
            "partial": false,
            "source": "          self.serverConfig._validateReplicaset(_replresult, self.auths);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 72
              },
              {}
            ]
          },
          "1910": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1911": {
            "partial": false,
            "source": "      })",
            "missing": [
              {}
            ]
          },
          "1912": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1937": {
            "partial": false,
            "source": "  var msg = error.err || error.errmsg || error;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 47
              },
              {
                "startCol": 12,
                "endCol": 37
              },
              {
                "startCol": 41,
                "endCol": 46
              }
            ]
          },
          "1938": {
            "partial": false,
            "source": "  var e = new Error(msg);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "1939": {
            "partial": false,
            "source": "  e.name = 'MongoError';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "1942": {
            "partial": false,
            "source": "  var keys = Object.keys(error);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              },
              {
                "startCol": 13,
                "endCol": 31
              }
            ]
          },
          "1948": {
            "partial": false,
            "source": "  return e;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 11
              }
            ]
          },
          "1973": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1974": {
            "partial": false,
            "source": "  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 13,
                "endCol": 41
              },
              {
                "startCol": 25,
                "endCol": 40
              },
              {
                "startCol": 58,
                "endCol": 68
              },
              {
                "startCol": 71,
                "endCol": 75
              }
            ]
          },
          "1975": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 45
              }
            ]
          },
          "1976": {
            "partial": false,
            "source": "  options = options || {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              },
              {
                "startCol": 12,
                "endCol": 19
              }
            ]
          },
          "1977": {
            "partial": false,
            "source": "  var serverOptions = options.server || {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 22,
                "endCol": 42
              }
            ]
          },
          "1978": {
            "partial": false,
            "source": "  var replSetServersOptions = options.replSet || options.replSetServers || {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 78
              },
              {
                "startCol": 30,
                "endCol": 71
              }
            ]
          },
          "1979": {
            "partial": false,
            "source": "  var dbOptions = options.db || {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              },
              {
                "startCol": 18,
                "endCol": 34
              }
            ]
          },
          "1982": {
            "partial": false,
            "source": "  serverOptions.socketOptions = serverOptions.socketOptions || {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 66
              },
              {
                "startCol": 32,
                "endCol": 65
              }
            ]
          },
          "1983": {
            "partial": false,
            "source": "  replSetServersOptions.socketOptions = serverOptions.socketOptions || {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              },
              {
                "startCol": 40,
                "endCol": 73
              }
            ]
          },
          "1986": {
            "partial": false,
            "source": "  var urlRE = new RegExp('^mongo(?:db)?://(?:|([^@/]*)@)([^@/]*)(?:|/([^?]*)(?:|\\\\?([^?]*)))$');",
            "missing": [
              {
                "startCol": 2,
                "endCol": 96
              }
            ]
          },
          "1987": {
            "partial": false,
            "source": "  var match = (url || Db.DEFAULT_URL).match(urlRE);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              },
              {
                "startCol": 14,
                "endCol": 37
              },
              {
                "startCol": 15,
                "endCol": 18
              }
            ]
          },
          "1988": {
            "partial": false,
            "source": "  if (!match)",
            "missing": [
              {
                "startCol": 6,
                "endCol": 12
              },
              {
                "startCol": 7,
                "endCol": 12
              }
            ]
          },
          "1989": {
            "partial": false,
            "source": "    throw Error(\"URL must be in the format mongodb://user:pass@host:port/dbname\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 82
              },
              {
                "startCol": 10,
                "endCol": 81
              }
            ]
          },
          "1991": {
            "partial": false,
            "source": "  var authPart = match[1] || '';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 32
              },
              {
                "startCol": 17,
                "endCol": 31
              }
            ]
          },
          "1992": {
            "partial": false,
            "source": "  var auth = authPart.split(':', 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 36
              },
              {
                "startCol": 13,
                "endCol": 35
              }
            ]
          },
          "1994": {
            "partial": false,
            "source": "    auth[0] = decodeURIComponent(auth[0]);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 42
              },
              {
                "startCol": 14,
                "endCol": 41
              }
            ]
          },
          "1996": {
            "partial": false,
            "source": "      auth[1] = decodeURIComponent(auth[1]);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 44
              },
              {
                "startCol": 16,
                "endCol": 43
              }
            ]
          },
          "2000": {
            "partial": false,
            "source": "  var hostPart = match[2];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "2001": {
            "partial": false,
            "source": "  var dbname = match[3] || 'default';",
            "missing": [
              {
                "startCol": 2,
                "endCol": 37
              },
              {
                "startCol": 15,
                "endCol": 36
              }
            ]
          },
          "2002": {
            "partial": false,
            "source": "  var urlOptions = (match[4] || '').split(/[&;]/);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 50
              },
              {
                "startCol": 19,
                "endCol": 35
              }
            ]
          },
          "2005": {
            "partial": false,
            "source": "  urlOptions.forEach(function(opt) {",
            "missing": [
              {}
            ]
          },
          "2006": {
            "partial": false,
            "source": "    if(!opt) return;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 11
              },
              {
                "startCol": 13,
                "endCol": 20
              },
              {
                "startCol": 7,
                "endCol": 11
              }
            ]
          },
          "2007": {
            "partial": false,
            "source": "    var splitOpt = opt.split('='), name = splitOpt[0], value = splitOpt[1];",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 75
              },
              {
                "startCol": 19,
                "endCol": 33
              }
            ]
          },
          "2008": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "2009": {
            "partial": false,
            "source": "    // Options implementations",
            "missing": [
              {}
            ]
          },
          "2010": {
            "partial": false,
            "source": "    switch(name) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 15
              },
              {}
            ]
          },
          "2011": {
            "partial": false,
            "source": "      case 'slaveOk':",
            "missing": [
              {}
            ]
          },
          "2012": {
            "partial": false,
            "source": "      case 'slave_ok':",
            "missing": [
              {}
            ]
          },
          "2013": {
            "partial": false,
            "source": "        serverOptions.slave_ok = (value == 'true');",
            "missing": [
              {
                "startCol": 33,
                "endCol": 50
              },
              {},
              {
                "startCol": 34,
                "endCol": 39
              },
              {
                "startCol": 8,
                "endCol": 51
              }
            ]
          },
          "2014": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2015": {
            "partial": false,
            "source": "      case 'poolSize':",
            "missing": [
              {}
            ]
          },
          "2016": {
            "partial": false,
            "source": "        serverOptions.poolSize = Number(value);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 47
              },
              {
                "startCol": 33,
                "endCol": 46
              }
            ]
          },
          "2017": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2018": {
            "partial": false,
            "source": "      case 'autoReconnect':",
            "missing": [
              {}
            ]
          },
          "2019": {
            "partial": false,
            "source": "      case 'auto_reconnect':",
            "missing": [
              {}
            ]
          },
          "2020": {
            "partial": false,
            "source": "        serverOptions.auto_reconnect = (value == 'true');",
            "missing": [
              {
                "startCol": 8,
                "endCol": 57
              },
              {},
              {
                "startCol": 39,
                "endCol": 56
              },
              {
                "startCol": 40,
                "endCol": 45
              }
            ]
          },
          "2021": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2022": {
            "partial": false,
            "source": "      case 'ssl':",
            "missing": [
              {}
            ]
          },
          "2023": {
            "partial": false,
            "source": "        serverOptions.ssl = (value == 'true');",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 46
              },
              {
                "startCol": 28,
                "endCol": 45
              },
              {
                "startCol": 29,
                "endCol": 34
              }
            ]
          },
          "2024": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2025": {
            "partial": false,
            "source": "      case 'replicaSet':",
            "missing": [
              {}
            ]
          },
          "2026": {
            "partial": false,
            "source": "      case 'rs_name':",
            "missing": [
              {}
            ]
          },
          "2027": {
            "partial": false,
            "source": "        replSetServersOptions.rs_name = value;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 46
              },
              {}
            ]
          },
          "2028": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2029": {
            "partial": false,
            "source": "      case 'reconnectWait':",
            "missing": [
              {}
            ]
          },
          "2030": {
            "partial": false,
            "source": "        replSetServersOptions.reconnectWait = Number(value);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 60
              },
              {
                "startCol": 46,
                "endCol": 59
              }
            ]
          },
          "2031": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2032": {
            "partial": false,
            "source": "      case 'retries':",
            "missing": [
              {}
            ]
          },
          "2033": {
            "partial": false,
            "source": "        replSetServersOptions.retries = Number(value);",
            "missing": [
              {},
              {
                "startCol": 40,
                "endCol": 53
              },
              {
                "startCol": 8,
                "endCol": 54
              }
            ]
          },
          "2034": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2035": {
            "partial": false,
            "source": "      case 'readSecondary':",
            "missing": [
              {}
            ]
          },
          "2036": {
            "partial": false,
            "source": "      case 'read_secondary':",
            "missing": [
              {}
            ]
          },
          "2037": {
            "partial": false,
            "source": "        replSetServersOptions.retries = Number(value);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 54
              },
              {},
              {
                "startCol": 40,
                "endCol": 53
              }
            ]
          },
          "2038": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2039": {
            "partial": false,
            "source": "      case 'safe':",
            "missing": [
              {}
            ]
          },
          "2040": {
            "partial": false,
            "source": "        dbOptions.safe = (value == 'true');",
            "missing": [
              {
                "startCol": 8,
                "endCol": 43
              },
              {},
              {
                "startCol": 25,
                "endCol": 42
              },
              {
                "startCol": 26,
                "endCol": 31
              }
            ]
          },
          "2041": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2042": {
            "partial": false,
            "source": "      case 'nativeParser':",
            "missing": [
              {}
            ]
          },
          "2043": {
            "partial": false,
            "source": "      case 'native_parser':",
            "missing": [
              {}
            ]
          },
          "2044": {
            "partial": false,
            "source": "        dbOptions.native_parser = (value == 'true');",
            "missing": [
              {
                "startCol": 8,
                "endCol": 52
              },
              {},
              {
                "startCol": 34,
                "endCol": 51
              },
              {
                "startCol": 35,
                "endCol": 40
              }
            ]
          },
          "2045": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2046": {
            "partial": false,
            "source": "      case 'safe':",
            "missing": [
              {}
            ]
          },
          "2047": {
            "partial": false,
            "source": "        dbOptions.safe = (value == 'true');",
            "missing": [
              {
                "startCol": 8,
                "endCol": 43
              },
              {
                "startCol": 25,
                "endCol": 42
              },
              {
                "startCol": 26,
                "endCol": 31
              },
              {}
            ]
          },
          "2048": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2049": {
            "partial": false,
            "source": "      case 'strict':",
            "missing": [
              {}
            ]
          },
          "2050": {
            "partial": false,
            "source": "        dbOptions.strict = (value == 'true');",
            "missing": [
              {
                "startCol": 8,
                "endCol": 45
              },
              {},
              {
                "startCol": 27,
                "endCol": 44
              },
              {
                "startCol": 28,
                "endCol": 33
              }
            ]
          },
          "2051": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2052": {
            "partial": false,
            "source": "      case 'connectTimeoutMS':",
            "missing": [
              {}
            ]
          },
          "2053": {
            "partial": false,
            "source": "        serverOptions.socketOptions.connectTimeoutMS = Number(value);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 69
              },
              {
                "startCol": 55,
                "endCol": 68
              },
              {}
            ]
          },
          "2054": {
            "partial": false,
            "source": "        replSetServersOptions.socketOptions.connectTimeoutMS = Number(value);",
            "missing": [
              {
                "startCol": 63,
                "endCol": 76
              },
              {},
              {
                "startCol": 8,
                "endCol": 77
              }
            ]
          },
          "2055": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2056": {
            "partial": false,
            "source": "      case 'socketTimeoutMS':",
            "missing": [
              {}
            ]
          },
          "2057": {
            "partial": false,
            "source": "        serverOptions.socketOptions.socketTimeoutMS = Number(value);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 68
              },
              {
                "startCol": 54,
                "endCol": 67
              }
            ]
          },
          "2058": {
            "partial": false,
            "source": "        replSetServersOptions.socketOptions.socketTimeoutMS = Number(value);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 76
              },
              {
                "startCol": 62,
                "endCol": 75
              }
            ]
          },
          "2059": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2060": {
            "partial": false,
            "source": "      default:",
            "missing": [
              {}
            ]
          },
          "2061": {
            "partial": false,
            "source": "        break;",
            "missing": [
              {}
            ]
          },
          "2062": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "2063": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "2065": {
            "partial": false,
            "source": "  var servers = hostPart.split(',').map(function(h) {",
            "missing": [
              {},
              {
                "startCol": 30,
                "endCol": 35
              }
            ]
          },
          "2066": {
            "partial": false,
            "source": "    var hostPort = h.split(':', 2);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 35
              },
              {
                "startCol": 19,
                "endCol": 34
              }
            ]
          },
          "2067": {
            "partial": false,
            "source": "    return new Server(hostPort[0] || 'localhost', hostPort[1] != null ? parseInt(hostPort[1]) : 27017, serverOptions);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 118
              },
              {
                "startCol": 22,
                "endCol": 48
              },
              {
                "startCol": 50,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 93
              },
              {},
              {
                "startCol": 96,
                "endCol": 101
              }
            ]
          },
          "2068": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "2070": {
            "partial": false,
            "source": "  var server;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 13
              }
            ]
          },
          "2071": {
            "partial": false,
            "source": "  if (servers.length == 1) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 25
              }
            ]
          },
          "2072": {
            "partial": false,
            "source": "    server = servers[0];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "2074": {
            "partial": false,
            "source": "    server = new ReplSet(servers, replSetServersOptions);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 57
              }
            ]
          },
          "2077": {
            "partial": false,
            "source": "  var db = new Db(dbname, server, dbOptions);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              }
            ]
          },
          "2079": {
            "partial": false,
            "source": "    return db;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 14
              }
            ]
          },
          "2082": {
            "partial": false,
            "source": "  if(callback == null) throw new Error(\"no callback function provided\");",
            "missing": [
              {
                "startCol": 5,
                "endCol": 13
              },
              {
                "startCol": 23,
                "endCol": 72
              }
            ]
          },
          "2084": {
            "partial": false,
            "source": "  db.open(function(err, db){",
            "missing": [
              {}
            ]
          },
          "2085": {
            "partial": false,
            "source": "    if(err == null && authPart){",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 22,
                "endCol": 30
              },
              {}
            ]
          },
          "2086": {
            "partial": false,
            "source": "      db.authenticate(auth[0], auth[1], function(err, success){",
            "missing": [
              {}
            ]
          },
          "2087": {
            "partial": false,
            "source": "        if(success){",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 18
              }
            ]
          },
          "2088": {
            "partial": false,
            "source": "          callback(null, db);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 28
              }
            ]
          },
          "2089": {
            "partial": false,
            "source": "        } else {",
            "missing": [
              {}
            ]
          },
          "2090": {
            "partial": false,
            "source": "          callback(err ? err : new Error('Could not authenticate user ' + auth[0]), db);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 88
              },
              {
                "startCol": 41,
                "endCol": 81
              },
              {
                "startCol": 31,
                "endCol": 82
              },
              {
                "startCol": 19,
                "endCol": 22
              },
              {
                "startCol": 25,
                "endCol": 28
              }
            ]
          },
          "2091": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "2092": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "2093": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "2094": {
            "partial": false,
            "source": "      callback(err, db);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 23
              }
            ]
          },
          "2095": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "2096": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "2105": {
            "partial": false,
            "source": "      return this.serverConfig._serverState;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 44
              }
            ]
          }
        },
        "source": "/**\n * Module dependencies.\n * @ignore\n */\nvar QueryCommand = require('./commands/query_command').QueryCommand,\n  DbCommand = require('./commands/db_command').DbCommand,\n  MongoReply = require('./responses/mongo_reply').MongoReply,\n  Admin = require('./admin').Admin,\n  Collection = require('./collection').Collection,\n  Server = require('./connection/server').Server,\n  ReplSet = require('./connection/repl_set').ReplSet,\n  ReadPreference = require('./connection/read_preference').ReadPreference,\n  Mongos = require('./connection/mongos').Mongos,\n  Cursor = require('./cursor').Cursor,\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  crypto = require('crypto');\n\n/**\n * Internal class for callback storage\n * @ignore\n */\nvar CallbackStore = function() {\n  // Make class an event emitter\n  EventEmitter.call(this);\n  // Add a info about call variable\n  this._notReplied = {};\n}\n\n/**\n * @ignore\n */\ninherits(CallbackStore, EventEmitter);\n\n/**\n * Create a new Db instance.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, execute insert with a getLastError command returning the result of the insert command.\n *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n *  - **native_parser** {Boolean, default:false}, use c++ bson parser.\n *  - **forceServerObjectId** {Boolean, default:false}, force server to create _id fields instead of client.\n *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.\n *  - **serializeFunctions** {Boolean, default:false}, serialize functions.\n *  - **raw** {Boolean, default:false}, peform operations using raw bson buffers.\n *  - **recordQueryStats** {Boolean, default:false}, record query statistics during execution.\n *  - **reaper** {Boolean, default:false}, enables the reaper, timing out calls that never return.\n *  - **reaperInterval** {Number, default:10000}, number of miliseconds between reaper wakups.\n *  - **reaperTimeout** {Number, default:30000}, the amount of time before a callback times out.\n *  - **retryMiliSeconds** {Number, default:5000}, number of miliseconds between retries.\n *  - **numberOfRetries** {Number, default:5}, number of retries off connection.\n *\n * @class Represents a Collection\n * @param {String} databaseName name of the database.\n * @param {Object} serverConfig server config object.\n * @param {Object} [options] additional options for the collection.\n */\nfunction Db(databaseName, serverConfig, options) {\n\n  if(!(this instanceof Db)) return new Db(databaseName, serverConfig, options);\n\n  EventEmitter.call(this);\n  this.databaseName = databaseName;\n  this.serverConfig = serverConfig;\n  this.options = options == null ? {} : options;\n  // State to check against if the user force closed db\n  this._applicationClosed = false;\n  // Fetch the override flag if any\n  var overrideUsedFlag = this.options['override_used_flag'] == null ? false : this.options['override_used_flag'];\n  // Verify that nobody is using this config\n  if(!overrideUsedFlag && typeof this.serverConfig == 'object' && this.serverConfig._isUsed()) {\n    throw new Error(\"A Server or ReplSet instance cannot be shared across multiple Db instances\");\n  } else if(!overrideUsedFlag && typeof this.serverConfig == 'object'){\n    // Set being used\n    this.serverConfig._used = true;\n  }\n\n  // Ensure we have a valid db name\n  validateDatabaseName(databaseName);\n\n  // Contains all the connections for the db\n  try {\n    this.native_parser = this.options.native_parser;\n    // The bson lib\n    var bsonLib = this.bsonLib = this.options.native_parser ? require('bson').BSONNative : new require('bson').BSONPure;\n    // Fetch the serializer object\n    var BSON = bsonLib.BSON;\n    // Create a new instance\n    this.bson = new BSON([bsonLib.Long, bsonLib.ObjectID, bsonLib.Binary, bsonLib.Code, bsonLib.DBRef, bsonLib.Symbol, bsonLib.Double, bsonLib.Timestamp, bsonLib.MaxKey, bsonLib.MinKey]);\n    // Backward compatibility to access types\n    this.bson_deserializer = bsonLib;\n    this.bson_serializer = bsonLib;\n  } catch (err) {\n    // If we tried to instantiate the native driver\n    var msg = \"Native bson parser not compiled, please compile \"\n            + \"or avoid using native_parser=true\";\n    throw Error(msg);\n  }\n\n  // Internal state of the server\n  this._state = 'disconnected';\n\n  this.pkFactory = this.options.pk == null ? bsonLib.ObjectID : this.options.pk;\n  this.forceServerObjectId = this.options.forceServerObjectId != null ? this.options.forceServerObjectId : false;\n\n  // Added strict\n  this.strict = this.options.strict == null ? null : this.options.strict;\n  this.strict = this.options.safe == null ? this.strict : this.options.safe;  \n\n  // If we have not specified a \"safe mode\" we just print a warning to the console\n  if(this.options.strict == null && this.options.safe == null) {\n    console.log(\"========================================================================================\");\n    console.log(\"=  Please ensure that you set the default safe variable to one of the                  =\");\n    console.log(\"=   allowed values of [true | false | {j:true} | {w:n, wtimeout:n} | {fsync:true}]     =\");\n    console.log(\"=   the default value is false which means the driver receives does                    =\");\n    console.log(\"=   return the information of the success/error of the insert/update/remove            =\");\n    console.log(\"=                                                                                      =\");\n    console.log(\"=   ex: new Db(new Server('localhost', 27017), {safe:true})                            =\");\n    console.log(\"=                                                                                      =\");\n    console.log(\"=   http://www.mongodb.org/display/DOCS/getLastError+Command                           =\");\n    console.log(\"=                                                                                      =\");\n    console.log(\"=  The default of false will change to true in the near future                         =\");\n    console.log(\"=                                                                                      =\");\n    console.log(\"=  This message will disappear when the default safe is set on the driver Db           =\");\n    console.log(\"========================================================================================\");\n  }\n\n  // Internal states variables\n  this.notReplied ={};\n  this.isInitializing = true;\n  this.auths = [];\n  this.openCalled = false;\n\n  // Command queue, keeps a list of incoming commands that need to be executed once the connection is up\n  this.commands = [];\n\n  // Contains all the callbacks\n  this._callBackStore = new CallbackStore();\n\n  // Set up logger\n  this.logger = this.options.logger != null\n    && (typeof this.options.logger.debug == 'function')\n    && (typeof this.options.logger.error == 'function')\n    && (typeof this.options.logger.log == 'function')\n      ? this.options.logger : {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};\n  // Allow slaveOk\n  this.slaveOk = this.options[\"slave_ok\"] == null ? false : this.options[\"slave_ok\"];\n\n  var self = this;\n  // Associate the logger with the server config\n  this.serverConfig.logger = this.logger;\n  this.tag = new Date().getTime();\n  // Just keeps list of events we allow\n  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[]};\n\n  // Controls serialization options\n  this.serializeFunctions = this.options.serializeFunctions != null ? this.options.serializeFunctions : false;\n\n  // Raw mode\n  this.raw = this.options.raw != null ? this.options.raw : false;\n\n  // Record query stats\n  this.recordQueryStats = this.options.recordQueryStats != null ? this.options.recordQueryStats : false;\n\n  // If we have server stats let's make sure the driver objects have it enabled\n  if(this.recordQueryStats == true) {\n    this.serverConfig.enableRecordQueryStats(true);\n  }\n\n  // Reaper enable setting\n  this.reaperEnabled = this.options.reaper != null ? this.options.reaper : false;\n  this._lastReaperTimestamp = new Date().getTime();\n\n  // Retry information\n  this.retryMiliSeconds = this.options.retryMiliSeconds != null ? this.options.retryMiliSeconds : 1000;\n  this.numberOfRetries = this.options.numberOfRetries != null ? this.options.numberOfRetries : 60;\n\n  // Reaper information\n  this.reaperInterval = this.options.reaperInterval != null ? this.options.reaperInterval : 10000;\n  this.reaperTimeout = this.options.reaperTimeout != null ? this.options.reaperTimeout : 30000;\n\n  // Set default read preference if any\n  this.readPreference = this.options.readPreference;\n};\n\n/**\n * The reaper cleans up any callbacks that have not returned inside the space set by\n * the parameter reaperTimeout, it will only attempt to reap if the time since last reap\n * is bigger or equal to the reaperInterval value\n * @ignore\n */\nvar reaper = function(dbInstance, reaperInterval, reaperTimeout) {\n  // Get current time, compare to reaper interval\n  var currentTime = new Date().getTime();\n  // Now calculate current time difference to check if it's time to reap\n  if((currentTime - dbInstance._lastReaperTimestamp) >= reaperInterval) {\n    // Save current timestamp for next reaper iteration\n    dbInstance._lastReaperTimestamp = currentTime;\n    // Get all non-replied to messages\n    var keys = Object.keys(dbInstance._callBackStore._notReplied);\n    // Iterate over all callbacks\n    for(var i = 0; i < keys.length; i++) {\n      // Fetch the current key\n      var key = keys[i];\n      // Get info element\n      var info = dbInstance._callBackStore._notReplied[key];\n      // If it's timed out let's remove the callback and return an error\n      if((currentTime - info.start) > reaperTimeout) {\n        // Cleanup\n        delete dbInstance._callBackStore._notReplied[key];\n        // Perform callback in next Tick\n        process.nextTick(function() {\n          if(dbInstance._callBackStore \n            && dbInstance._callBackStore.listeners(key).length > 0\n            && typeof dbInstance._callBackStore.listeners(key)[0] == 'function') {\n            dbInstance._callBackStore.emit(key, new Error(\"operation timed out\"), null);            \n          } else if(dbInstance._callBackStore \n            && dbInstance._callBackStore.listeners(key).length > 0) {\n            console.log(\"================================================= _callBackStore listener not a function\");\n            console.dir(dbInstance._callBackStore.listeners(key));\n          }\n        });\n      }\n    }\n    // Return reaping was done\n    return true;\n  } else {\n    // No reaping done\n    return false;\n  }\n}\n\n/**\n * @ignore\n */\nfunction validateDatabaseName(databaseName) {\n  if(typeof databaseName !== 'string') throw new Error(\"database name must be a string\");\n  if(databaseName.length === 0) throw new Error(\"database name cannot be the empty string\");\n\n  var invalidChars = [\" \", \".\", \"$\", \"/\", \"\\\\\"];\n  for(var i = 0; i < invalidChars.length; i++) {\n    if(databaseName.indexOf(invalidChars[i]) != -1) throw new Error(\"database names cannot contain the character '\" + invalidChars[i] + \"'\");\n  }\n}\n\n/**\n * @ignore\n */\ninherits(Db, EventEmitter);\n\n/**\n * Initialize the database connection.\n *\n * @param {Function} callback returns index information.\n * @return {null}\n * @api public\n */\nDb.prototype.open = function(callback) {\n  var self = this;\n\n  // Check that the user has not called this twice\n  if(this.openCalled) {\n    // Close db\n    this.close();\n    // Throw error\n    throw new Error(\"db object already connecting, open cannot be called multiple times\");\n  }\n\n  // If we have a specified read preference\n  if(this.readPreference != null) this.serverConfig.setReadPreference(this.readPreference);\n\n  // Set that db has been opened\n  this.openCalled = true;\n  // Set the status of the server\n  self._state = 'connecting';\n  // Set up connections\n  if(self.serverConfig instanceof Server || self.serverConfig instanceof ReplSet || self.serverConfig instanceof Mongos) {\n    self.serverConfig.connect(self, {firstCall: true}, function(err, result) {\n      if(err != null) {\n        // Set that db has been closed\n        self.openCalled = false;\n        // Return error from connection\n        return callback(err, null);\n      }\n      // Set the status of the server\n      self._state = 'connected';\n      // Callback\n      return callback(null, self);\n    });\n  } else {\n    return callback(Error(\"Server parameter must be of type Server, ReplSet or Mongos\"), null);\n  }\n};\n\n/**\n * Create a new Db instance sharing the current socket connections.\n *\n * @param {String} dbName the name of the database we want to use.\n * @return {Db} a db instance using the new database.\n * @api public\n */\nDb.prototype.db = function(dbName) {\n  // Copy the options and add out internal override of the not shared flag\n  var options = {};\n  for(var key in this.options) {\n    options[key] = this.options[key];\n  }\n  // Add override flag\n  options['override_used_flag'] = true;\n  // Create a new db instance\n  var newDbInstance = new Db(dbName, this.serverConfig, options);\n  //copy over any auths, we may need them for reconnecting\n  if (this.serverConfig.db) {\n    newDbInstance.auths = this.serverConfig.db.auths;\n  }\n  // Add the instance to the list of approved db instances\n  var allServerInstances = this.serverConfig.allServerInstances();\n  // Add ourselves to all server callback instances\n  for(var i = 0; i < allServerInstances.length; i++) {\n    var server = allServerInstances[i];\n    server.dbInstances.push(newDbInstance);\n  }\n  // Return new db object\n  return newDbInstance;\n}\n\n/**\n * Close the current db connection, including all the child db instances. Emits close event if no callback is provided.\n *\n * @param {Boolean} [forceClose] connection can never be reused.\n * @param {Function} [callback] returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.close = function(forceClose, callback) {\n  var self = this;\n  // Ensure we force close all connections\n  this._applicationClosed = false;\n\n  if(typeof forceClose == 'function') {\n    callback = forceClose;\n  } else if(typeof forceClose == 'boolean') {\n    this._applicationClosed = forceClose;\n  }\n\n  // Remove all listeners and close the connection\n  this.serverConfig.close(function(err, result) {\n    // Emit the close event\n    if(typeof callback !== 'function') self.emit(\"close\");\n\n    // Emit close event across all db instances sharing the sockets\n    var allServerInstances = self.serverConfig.allServerInstances();\n    // Fetch the first server instance\n    if(Array.isArray(allServerInstances) && allServerInstances.length > 0) {\n      var server = allServerInstances[0];\n      // For all db instances signal all db instances\n      if(Array.isArray(server.dbInstances) && server.dbInstances.length > 1) {\n    \t  for(var i = 0; i < server.dbInstances.length; i++) {\n          var dbInstance = server.dbInstances[i];\n          // Check if it's our current db instance and skip if it is\n          if(dbInstance.databaseName !== self.databaseName && dbInstance.tag !== self.tag) {\n            server.dbInstances[i].emit(\"close\");\n          }\n        }\n      }\n    }\n\n    // Remove all listeners\n    self.removeAllEventListeners();\n    // You can reuse the db as everything is shut down\n    self.openCalled = false;\n    // If we have a callback call it\n    if(callback) callback(err, result);\n  });\n};\n\n/**\n * Access the Admin database\n *\n * @param {Function} [callback] returns the results.\n * @return {Admin} the admin db object.\n * @api public\n */\nDb.prototype.admin = function(callback) {\n  if(callback == null) return new Admin(this);\n  callback(null, new Admin(this));\n};\n\n/**\n * Returns a cursor to all the collection information.\n *\n * @param {String} [collectionName] the collection name we wish to retrieve the information from.\n * @param {Function} callback returns option results.\n * @return {null}\n * @api public\n */\nDb.prototype.collectionsInfo = function(collectionName, callback) {\n  if(callback == null && typeof collectionName == 'function') { callback = collectionName; collectionName = null; }\n  // Create selector\n  var selector = {};\n  // If we are limiting the access to a specific collection name\n  if(collectionName != null) selector.name = this.databaseName + \".\" + collectionName;\n\n  // Return Cursor\n  // callback for backward compatibility\n  if(callback) {\n    callback(null, new Cursor(this, new Collection(this, DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector));\n  } else {\n    return new Cursor(this, new Collection(this, DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector);\n  }\n};\n\n/**\n * Get the list of all collection names for the specified db\n *\n * Options\n *  - **namesOnly** {String, default:false}, Return only the full collection namespace.\n *\n * @param {String} [collectionName] the collection name we wish to filter by.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback returns option results.\n * @return {null}\n * @api public\n */\nDb.prototype.collectionNames = function(collectionName, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  collectionName = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  // Ensure no breaking behavior\n  if(collectionName != null && typeof collectionName == 'object') {\n    options = collectionName;\n    collectionName = null;\n  }\n\n  // Let's make our own callback to reuse the existing collections info method\n  self.collectionsInfo(collectionName, function(err, cursor) {\n    if(err != null) return callback(err, null);\n\n    cursor.toArray(function(err, documents) {\n      if(err != null) return callback(err, null);\n\n      // List of result documents that have been filtered\n      var filtered_documents = documents.filter(function(document) {\n        return !(document.name.indexOf(self.databaseName) == -1 || document.name.indexOf('$') != -1);\n      });\n\n      // If we are returning only the names\n      if(options.namesOnly) {\n        filtered_documents = filtered_documents.map(function(document) { return document.name });\n      }\n\n      // Return filtered items\n      callback(null, filtered_documents);\n    });\n  });\n};\n\n/**\n * Fetch a specific collection (containing the actual collection information)\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.\n *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.\n *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.\n *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n *\n * @param {String} collectionName the collection name we wish to access.\n * @param {Object} [options] returns option results.\n * @param {Function} [callback] returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.collection = function(collectionName, options, callback) {\n  var self = this;\n  if(typeof options === \"function\") { callback = options; options = {}; }\n  // Execute safe\n  if(options && options.safe || this.strict) {\n    self.collectionNames(collectionName, function(err, collections) {\n      if(err != null) return callback(err, null);\n\n      if(collections.length == 0) {\n        return callback(new Error(\"Collection \" + collectionName + \" does not exist. Currently in strict mode.\"), null);\n      } else {\n        try {\n          var collection = new Collection(self, collectionName, self.pkFactory, options);\n        } catch(err) {\n          return callback(err, null);\n        }\n        return callback(null, collection);\n      }\n    });\n  } else {\n    try {\n      var collection = new Collection(self, collectionName, self.pkFactory, options);\n    } catch(err) {\n      if(callback == null) {\n        throw err;\n      } else {\n        return callback(err, null);\n      }\n    }\n\n    // If we have no callback return collection object\n    return callback == null ? collection : callback(null, collection);\n  }\n};\n\n/**\n * Fetch all collections for the current db.\n *\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.collections = function(callback) {\n  var self = this;\n  // Let's get the collection names\n  self.collectionNames(function(err, documents) {\n    if(err != null) return callback(err, null);\n    var collections = [];\n    documents.forEach(function(document) {\n      collections.push(new Collection(self, document.name.replace(self.databaseName + \".\", ''), self.pkFactory));\n    });\n    // Return the collection objects\n    callback(null, collections);\n  });\n};\n\n/**\n * Evaluate javascript on the server\n *\n * Options\n *  - **nolock** {Boolean, default:false}, Tell MongoDB not to block on the evaulation of the javascript.\n *\n * @param {Code} code javascript to execute on server.\n * @param {Object|Array} [parameters] the parameters for the call.\n * @param {Object} [options] the options\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.eval = function(code, parameters, options, callback) {\n  // Unpack calls\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  parameters = args.length ? args.shift() : parameters;\n  options = args.length ? args.shift() : {};\n\n  var finalCode = code;\n  var finalParameters = [];\n  // If not a code object translate to one\n  if(!(finalCode instanceof this.bsonLib.Code)) {\n    finalCode = new this.bsonLib.Code(finalCode);\n  }\n\n  // Ensure the parameters are correct\n  if(parameters != null && parameters.constructor != Array && typeof parameters !== 'function') {\n    finalParameters = [parameters];\n  } else if(parameters != null && parameters.constructor == Array && typeof parameters !== 'function') {\n    finalParameters = parameters;\n  }\n\n  // Create execution selector\n  var selector = {'$eval':finalCode, 'args':finalParameters};\n  // Check if the nolock parameter is passed in\n  if(options['nolock']) {\n    selector['nolock'] = options['nolock'];\n  }\n\n  // Set primary read preference\n  options.readPreference = ReadPreference.PRIMARY;\n\n  // Execute the eval\n  this.collection(DbCommand.SYSTEM_COMMAND_COLLECTION).findOne(selector, options, function(err, result) {\n    if(err) return callback(err);\n\n    if(result && result.ok == 1) {\n      callback(null, result.retval);\n    } else if(result) {\n      callback(new Error(\"eval failed: \" + result.errmsg), null); return;\n    } else {\n      callback(err, result);\n    }\n  });\n};\n\n/**\n * Dereference a dbref, against a db\n *\n * @param {DBRef} dbRef db reference object we wish to resolve.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.dereference = function(dbRef, callback) {\n  var db = this;\n  // If we have a db reference then let's get the db first\n  if(dbRef.db != null) db = this.db(dbRef.db);\n  // Fetch the collection and find the reference\n  var collection = db.collection(dbRef.namespace);\n  collection.findOne({'_id':dbRef.oid}, function(err, result) {\n    callback(err, result);\n  });\n};\n\n/**\n * Logout user from server, fire off on all connections and remove all auth info\n *\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.logout = function(options, callback) {\n  var self = this;\n  // Unpack calls\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  // Number of connections we need to logout from\n  var numberOfConnections = this.serverConfig.allRawConnections().length;\n\n  // Let's generate the logout command object\n  var logoutCommand = DbCommand.logoutCommand(self, {logout:1}, options);\n  self._executeQueryCommand(logoutCommand, {onAll:true}, function(err, result) {\n    // Count down\n    numberOfConnections = numberOfConnections - 1;\n    // Work around the case where the number of connections are 0\n    if(numberOfConnections <= 0 && typeof callback == 'function') {\n      var internalCallback = callback;\n      callback = null;\n      // Reset auth\n      self.auths = [];\n      // Handle any errors\n      if(err == null && result.documents[0].ok == 1) {\n        internalCallback(null, true);\n      } else {\n        err != null ? internalCallback(err, false) : internalCallback(new Error(result.documents[0].errmsg), false);\n      }\n    }\n  });\n}\n\n/**\n * Authenticate a user against the server.\n *\n * Options\n *  - **authdb** {String}, The database that the credentials are for,\n *    different from the name of the current DB, for example admin\n * @param {String} username username.\n * @param {String} password password.\n * @param {Object} [options] the options\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.authenticate = function(username, password, options, callback) {\n  var self = this;\n\n  if (typeof callback === 'undefined') {\n    callback = options;\n    options = {};\n  }\n  // the default db to authenticate against is 'this'\n  // if authententicate is called from a retry context, it may be another one, like admin\n  var authdb = options.authdb ? options.authdb : self.databaseName;\n\n  // Push the new auth if we have no previous record\n  // Get the amount of connections in the pool to ensure we have authenticated all comments\n  var numberOfConnections = this.serverConfig.allRawConnections().length;\n  var errorObject = null;\n\n  // Execute all four\n  this._executeQueryCommand(DbCommand.createGetNonceCommand(self), {onAll:true}, function(err, result, connection) {\n    // Execute on all the connections\n    if(err == null) {\n      // Nonce used to make authentication request with md5 hash\n      var nonce = result.documents[0].nonce;\n      // Execute command\n      self._executeQueryCommand(DbCommand.createAuthenticationCommand(self, username, password, nonce, authdb), {connection:connection}, function(err, result) {\n        // Count down\n        numberOfConnections = numberOfConnections - 1;\n        // Ensure we save any error\n        if(err) {\n          errorObject = err;\n        } else if(result.documents[0].err != null || result.documents[0].errmsg != null){\n          errorObject = self.wrap(result.documents[0]);\n        }\n\n        // Work around the case where the number of connections are 0\n        if(numberOfConnections <= 0 && typeof callback == 'function') {\n          var internalCallback = callback;\n          callback = null;\n\n          if(errorObject == null && result.documents[0].ok == 1) {\n            // We authenticated correctly save the credentials\n            self.auths = [{'username':username, 'password':password, 'authdb': authdb}];\n            // Return callback\n            internalCallback(errorObject, true);\n          } else {\n            internalCallback(errorObject, false);\n          }\n        }\n      });\n    }\n  });\n};\n\n/**\n * Add a user to the database.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *\n * @param {String} username username.\n * @param {String} password password.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.addUser = function(username, password, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  // Figure out the safe mode settings\n  var safe = self.strict != null && self.strict == false ? true : self.strict;\n  // Override with options passed in if applicable\n  safe = options != null && options['safe'] != null ? options['safe'] : safe;\n  // Ensure it's at least set to safe\n  safe = safe == null ? true : safe;\n\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + \":mongo:\" + password);\n  var userPassword = md5.digest('hex');\n  // Fetch a user collection\n  var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);\n  // Check if we are inserting the first user\n  collection.count({}, function(err, count) {\n    // We got an error (f.ex not authorized)\n    if(err != null) return callback(err, null);\n    // Check if the user exists and update i\n    collection.find({user: username}, {dbName: options['dbName']}).toArray(function(err, documents) {\n      // We got an error (f.ex not authorized)\n      if(err != null) return callback(err, null);\n      // We have a user, let's update the password or upsert if not\n      collection.update({user: username},{$set: {user: username, pwd: userPassword}}, {safe:safe, dbName: options['dbName'], upsert:true}, function(err, results) {\n        if(count == 0 && err) {\n          callback(null, [{user:username, pwd:userPassword}]);\n        } else if(err) {\n          callback(err, null)\n        } else {\n          callback(null, [{user:username, pwd:userPassword}]);\n        }\n      });\n    });\n  });\n};\n\n/**\n * Remove a user from a database\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *\n * @param {String} username username.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.removeUser = function(username, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  // Figure out the safe mode settings\n  var safe = self.strict != null && self.strict == false ? true : self.strict;\n  // Override with options passed in if applicable\n  safe = options != null && options['safe'] != null ? options['safe'] : safe;\n  // Ensure it's at least set to safe\n  safe = safe == null ? true : safe;\n\n  // Fetch a user collection\n  var collection = this.collection(DbCommand.SYSTEM_USER_COLLECTION);\n  collection.findOne({user: username}, {dbName: options['dbName']}, function(err, user) {\n    if(user != null) {\n      collection.remove({user: username}, {safe:safe, dbName: options['dbName']}, function(err, result) {\n        callback(err, true);\n      });\n    } else {\n      callback(err, false);\n    }\n  });\n};\n\n/**\n * Creates a collection on a server pre-allocating space, need to create f.ex capped collections.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.\n *  - **serializeFunctions** {Boolean, default:false}, serialize functions on the document.\n *  - **raw** {Boolean, default:false}, perform all operations using raw bson objects.\n *  - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.\n *  - **capped** {Boolean, default:false}, create a capped collection.\n *  - **size** {Number}, the size of the capped collection in bytes.\n *  - **max** {Number}, the maximum number of documents in the capped collection.\n *  - **autoIndexId** {Boolean, default:false}, create an index on the _id field of the document, not created automatically on capped collections.\n *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n *\n * @param {String} collectionName the collection name we wish to access.\n * @param {Object} [options] returns option results.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.createCollection = function(collectionName, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : null;\n  var self = this;\n\n  // Figure out the safe mode settings\n  var safe = self.strict != null && self.strict == false ? true : self.strict;\n  // Override with options passed in if applicable\n  safe = options != null && options['safe'] != null ? options['safe'] : safe;\n  // Ensure it's at least set to safe\n  safe = safe == null ? true : safe;\n\n  // Check if we have the name\n  this.collectionNames(collectionName, function(err, collections) {\n    if(err != null) return callback(err, null);\n\n    var found = false;\n    collections.forEach(function(collection) {\n      if(collection.name == self.databaseName + \".\" + collectionName) found = true;\n    });\n\n    // If the collection exists either throw an exception (if db in strict mode) or return the existing collection\n    if(found && ((options && options.safe) || self.strict)) {\n      return callback(new Error(\"Collection \" + collectionName + \" already exists. Currently in strict mode.\"), null);\n    } else if(found){\n      try {\n        var collection = new Collection(self, collectionName, self.pkFactory, options);\n      } catch(err) {\n        return callback(err, null);\n      }\n      return callback(null, collection);\n    }\n\n    // Create a new collection and return it\n    self._executeQueryCommand(DbCommand.createCreateCollectionCommand(self, collectionName, options), {read:false, safe:safe}, function(err, result) {\n      var document = result.documents[0];\n      // If we have no error let's return the collection\n      if(err == null && document.ok == 1) {\n        try {\n          var collection = new Collection(self, collectionName, self.pkFactory, options);\n        } catch(err) {\n          return callback(err, null);\n        }\n        return callback(null, collection);\n      } else {\n        err != null ? callback(err, null) : callback(self.wrap(document), null);\n      }\n    });\n  });\n};\n\n/**\n * Execute a command hash against MongoDB. This lets you acess any commands not available through the api on the server.\n *\n * @param {Object} selector the command hash to send to the server, ex: {ping:1}.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.command = function(selector, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  // Set up the options\n  var cursor = new Cursor(this\n    , new Collection(this, DbCommand.SYSTEM_COMMAND_COLLECTION), selector, {}, 0, -1, null, null, null, null, QueryCommand.OPTS_NO_CURSOR_TIMEOUT\n    , null, null, null, null, null, null, null, null, null, null, null, null, null, options['dbName']);\n\n  // Set read preference if we set one\n  var readPreference = options['readPreference'] ? options['readPreference'] : false;\n\n  // Ensure only commands who support read Prefrences are exeuted otherwise override and use Primary\n  if(readPreference != false) {\n    if(selector['group'] || selector['aggregate'] || selector['collStats'] || selector['dbStats']\n      || selector['count'] || selector['distinct'] || selector['geoNear'] || selector['geoSearch'] || selector['geoWalk']\n      || (selector['mapreduce'] && selector.out == 'inline')) {\n      // Set the read preference\n      cursor.setReadPreference(readPreference);\n    } else {\n      cursor.setReadPreference(ReadPreference.PRIMARY);\n    }\n  }\n\n  // Return the next object\n  cursor.nextObject(callback);\n};\n\n/**\n * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n *\n * @param {String} collectionName the name of the collection we wish to drop.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.dropCollection = function(collectionName, callback) {\n  var self = this;\n\n  // Drop the collection\n  this._executeQueryCommand(DbCommand.createDropCollectionCommand(this, collectionName), function(err, result) {\n    if(err == null && result.documents[0].ok == 1) {\n      if(callback != null) return callback(null, true);\n    } else {\n      if(callback != null) err != null ? callback(err, null) : callback(self.wrap(result.documents[0]), null);\n    }\n  });\n};\n\n/**\n * Rename a collection.\n *\n * @param {String} fromCollection the name of the current collection we wish to rename.\n * @param {String} toCollection the new name of the collection.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.renameCollection = function(fromCollection, toCollection, callback) {\n  var self = this;\n\n  // Execute the command, return the new renamed collection if successful\n  this._executeQueryCommand(DbCommand.createRenameCollectionCommand(this, fromCollection, toCollection), function(err, result) {\n    if(err == null && result.documents[0].ok == 1) {\n      if(callback != null) return callback(null, new Collection(self, toCollection, self.pkFactory));\n    } else {\n      if(callback != null) err != null ? callback(err, null) : callback(self.wrap(result.documents[0]), null);\n    }\n  });\n};\n\n/**\n * Return last error message for the given connection, note options can be combined.\n *\n * Options\n *  - **fsync** {Boolean, default:false}, option forces the database to fsync all files before returning.\n *  - **j** {Boolean, default:false}, awaits the journal commit before returning, > MongoDB 2.0.\n *  - **w** {Number}, until a write operation has been replicated to N servers.\n *  - **wtimeout** {Number}, number of miliseconds to wait before timing out.\n *\n * Connection Options\n *  - **connection** {Connection}, fire the getLastError down a specific connection.\n *\n * @param {Object} [options] returns option results.\n * @param {Object} [connectionOptions] returns option results.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.lastError = function(options, connectionOptions, callback) {\n  // Unpack calls\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  connectionOptions = args.length ? args.shift() : {};\n\n  this._executeQueryCommand(DbCommand.createGetLastErrorCommand(options, this), connectionOptions, function(err, error) {\n    callback(err, error && error.documents);\n  });\n};\n\n/**\n * Legacy method calls.\n *\n * @ignore\n * @api private\n */\nDb.prototype.error = Db.prototype.lastError;\nDb.prototype.lastStatus = Db.prototype.lastError;\n\n/**\n * Return all errors up to the last time db reset_error_history was called.\n *\n * Options\n *  - **connection** {Connection}, fire the getLastError down a specific connection.\n *\n * @param {Object} [options] returns option results.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.previousErrors = function(options, callback) {\n  // Unpack calls\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  this._executeQueryCommand(DbCommand.createGetPreviousErrorsCommand(this), options, function(err, error) {\n    callback(err, error.documents);\n  });\n};\n\n/**\n * Runs a command on the database.\n * @ignore\n * @api private\n */\nDb.prototype.executeDbCommand = function(command_hash, options, callback) {\n  if(callback == null) { callback = options; options = {}; }\n  this._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this, command_hash, options), options, callback);\n};\n\n/**\n * Runs a command on the database as admin.\n * @ignore\n * @api private\n */\nDb.prototype.executeDbAdminCommand = function(command_hash, options, callback) {\n  if(callback == null) { callback = options; options = {}; }\n  this._executeQueryCommand(DbCommand.createAdminDbCommand(this, command_hash), options, callback);\n};\n\n/**\n * Resets the error history of the mongo instance.\n *\n * Options\n *  - **connection** {Connection}, fire the getLastError down a specific connection.\n *\n * @param {Object} [options] returns option results.\n * @param {Function} callback returns the results.\n * @return {null}\n * @api public\n */\nDb.prototype.resetErrorHistory = function(options, callback) {\n  // Unpack calls\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  this._executeQueryCommand(DbCommand.createResetErrorHistoryCommand(this), options, function(err, error) {\n    callback(err, error.documents);\n  });\n};\n\n/**\n * Creates an index on the collection.\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a\n *  - **unique** {Boolean, default:false}, creates an unique index.\n *  - **sparse** {Boolean, default:false}, creates a sparse index.\n *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.\n *  - **dropDups** {Boolean, default:false}, a unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.\n *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.\n *  - **v** {Number}, specify the format version of the indexes.\n *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n *\n * @param {String} collectionName name of the collection to create the index on.\n * @param {Object} fieldOrSpec fieldOrSpec that defines the index.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback for results.\n * @return {null}\n * @api public\n */\nDb.prototype.createIndex = function(collectionName, fieldOrSpec, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  options = typeof callback === 'function' ? options : callback;\n  options = options == null ? {} : options;\n\n  // Collect errorOptions\n  var errorOptions = options.safe != null ? options.safe : null;\n  errorOptions = errorOptions == null && self.strict != null ? self.strict : errorOptions;\n\n  // If we have a write concern set and no callback throw error\n  if(errorOptions != null && errorOptions != false && (typeof callback !== 'function' && typeof options !== 'function')) throw new Error(\"safe cannot be used without a callback\");\n\n  // Create command\n  var command = DbCommand.createCreateIndexCommand(this, collectionName, fieldOrSpec, options);\n  // Default command options\n  var commandOptions = {};\n\n  // If we have error conditions set handle them\n  if(errorOptions && errorOptions != false) {\n    // Insert options\n    commandOptions['read'] = false;\n    // If we have safe set set async to false\n    if(errorOptions == null) commandOptions['async'] = true;\n\n    // Set safe option\n    commandOptions['safe'] = errorOptions;\n    // If we have an error option\n    if(typeof errorOptions == 'object') {\n      var keys = Object.keys(errorOptions);\n      for(var i = 0; i < keys.length; i++) {\n        commandOptions[keys[i]] = errorOptions[keys[i]];\n      }\n    }\n\n    // Execute insert command\n    this._executeInsertCommand(command, commandOptions, function(err, result) {\n      if(err != null) return callback(err, null);\n\n      result = result && result.documents;\n      if (result[0].err) {\n        callback(self.wrap(result[0]));\n      } else {\n        callback(null, command.documents[0].name);\n      }\n    });\n  } else {\n    // Execute insert command\n    var result = this._executeInsertCommand(command, commandOptions);\n    // If no callback just return\n    if(!callback) return;\n    // If error return error\n    if(result instanceof Error) {\n      return callback(result);\n    }\n    // Otherwise just return\n    return callback(null, null);\n  }\n};\n\n/**\n * Ensures that an index exists, if it does not it creates it\n *\n * Options\n *  - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a\n *  - **unique** {Boolean, default:false}, creates an unique index.\n *  - **sparse** {Boolean, default:false}, creates a sparse index.\n *  - **background** {Boolean, default:false}, creates the index in the background, yielding whenever possible.\n *  - **dropDups** {Boolean, default:false}, a unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n *  - **min** {Number}, for geospatial indexes set the lower bound for the co-ordinates.\n *  - **max** {Number}, for geospatial indexes set the high bound for the co-ordinates.\n *  - **v** {Number}, specify the format version of the indexes.\n *  - **expireAfterSeconds** {Number}, allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n *  - **name** {String}, override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n *\n * @param {String} collectionName name of the collection to create the index on.\n * @param {Object} fieldOrSpec fieldOrSpec that defines the index.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback for results.\n * @return {null}\n * @api public\n */\nDb.prototype.ensureIndex = function(collectionName, fieldOrSpec, options, callback) {\n  var self = this;\n\n  if (typeof callback === 'undefined' && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  if (options == null) {\n    options = {};\n  }\n\n  // Collect errorOptions\n  var errorOptions = options.safe != null ? options.safe : null;\n  errorOptions = errorOptions == null && self.strict != null ? self.strict : errorOptions;\n\n  // If we have a write concern set and no callback throw error\n  if(errorOptions != null && errorOptions != false && (typeof callback !== 'function' && typeof options !== 'function')) throw new Error(\"safe cannot be used without a callback\");\n\n  // Create command\n  var command = DbCommand.createCreateIndexCommand(this, collectionName, fieldOrSpec, options);\n  var index_name = command.documents[0].name;\n\n  // Default command options\n  var commandOptions = {};\n  // Check if the index allready exists\n  this.indexInformation(collectionName, function(err, collectionInfo) {\n    if(err != null) return callback(err, null);\n\n    if(!collectionInfo[index_name])  {\n      // If we have error conditions set handle them\n      if(errorOptions && errorOptions != false) {\n        // Insert options\n        commandOptions['read'] = false;\n        // If we have safe set set async to false\n        if(errorOptions == null) commandOptions['async'] = true;\n\n        // Set safe option\n        commandOptions['safe'] = errorOptions;\n        // If we have an error option\n        if(typeof errorOptions == 'object') {\n          var keys = Object.keys(errorOptions);\n          for(var i = 0; i < keys.length; i++) {\n            commandOptions[keys[i]] = errorOptions[keys[i]];\n          }\n        }\n\n        self._executeInsertCommand(command, commandOptions, function(err, result) {\n          // Only callback if we have one specified\n          if(typeof callback === 'function') {\n            if(err != null) return callback(err, null);\n\n            result = result && result.documents;\n            if (result[0].err) {\n              callback(self.wrap(result[0]));\n            } else {\n              callback(null, command.documents[0].name);\n            }\n          }\n        });\n      } else {\n        // Execute insert command\n        var result = self._executeInsertCommand(command, commandOptions);\n        // If no callback just return\n        if(!callback) return;\n        // If error return error\n        if(result instanceof Error) {\n          return callback(result);\n        }\n        // Otherwise just return\n        return callback(null, index_name);\n      }\n    } else {\n      if(typeof callback === 'function') return callback(null, index_name);\n    }\n  });\n};\n\n/**\n * Returns the information available on allocated cursors.\n *\n * Options\n *  - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n *\n * @param {Object} [options] additional options during update.\n * @param {Function} callback for results.\n * @return {null}\n * @api public\n */\nDb.prototype.cursorInfo = function(options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  this._executeQueryCommand(DbCommand.createDbSlaveOkCommand(this, {'cursorInfo':1}), options, function(err, result) {\n    callback(err, result.documents[0]);\n  });\n};\n\n/**\n * Drop an index on a collection.\n *\n * @param {String} collectionName the name of the collection where the command will drop an index.\n * @param {String} indexName name of the index to drop.\n * @param {Function} callback for results.\n * @return {null}\n * @api public\n */\nDb.prototype.dropIndex = function(collectionName, indexName, callback) {\n  this._executeQueryCommand(DbCommand.createDropIndexCommand(this, collectionName, indexName), callback);\n};\n\n/**\n * Reindex all indexes on the collection\n * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n *\n * @param {String} collectionName the name of the collection.\n * @param {Function} callback returns the results.\n * @api public\n**/\nDb.prototype.reIndex = function(collectionName, callback) {\n  this._executeQueryCommand(DbCommand.createReIndexCommand(this, collectionName), function(err, result) {\n    if(err != null) {\n      callback(err, false);\n    } else if(result.documents[0].errmsg == null) {\n      callback(null, true);\n    } else {\n      callback(new Error(result.documents[0].errmsg), false);\n    }\n  });\n};\n\n/**\n * Retrieves this collections index info.\n *\n * Options\n *  - **full** {Boolean, default:false}, returns the full raw index information.\n *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {String} collectionName the name of the collection.\n * @param {Object} [options] additional options during update.\n * @param {Function} callback returns the index information.\n * @return {null}\n * @api public\n */\nDb.prototype.indexInformation = function(collectionName, options, callback) {\n  if(typeof callback === 'undefined') {\n    if(typeof options === 'undefined') {\n      callback = collectionName;\n      collectionName = null;\n    } else {\n      callback = options;\n    }\n    options = {};\n  }\n\n  // If we specified full information\n  var full = options['full'] == null ? false : options['full'];\n  // Build selector for the indexes\n  var selector = collectionName != null ? {ns: (this.databaseName + \".\" + collectionName)} : {};\n\n  // Set read preference if we set one\n  var readPreference = options['readPreference'] ? options['readPreference'] : ReadPreference.PRIMARY;\n\n  // Iterate through all the fields of the index\n  this.collection(DbCommand.SYSTEM_INDEX_COLLECTION, function(err, collection) {\n    // Perform the find for the collection\n    collection.find(selector).setReadPreference(readPreference).toArray(function(err, indexes) {\n      if(err != null) return callback(err, null);\n      // Contains all the information\n      var info = {};\n\n      // if full defined just return all the indexes directly\n      if(full) return callback(null, indexes);\n\n      // Process all the indexes\n      for(var i = 0; i < indexes.length; i++) {\n        var index = indexes[i];\n        // Let's unpack the object\n        info[index.name] = [];\n        for(var name in index.key) {\n          info[index.name].push([name, index.key[name]]);\n        }\n      }\n\n      // Return all the indexes\n      callback(null, info);\n    });\n  });\n};\n\n/**\n * Drop a database.\n *\n * @param {Function} callback returns the index information.\n * @return {null}\n * @api public\n */\nDb.prototype.dropDatabase = function(callback) {\n  var self = this;\n\n  this._executeQueryCommand(DbCommand.createDropDatabaseCommand(this), function(err, result) {\n    if (err == null && result.documents[0].ok == 1) {\n      callback(null, true);\n    } else {\n      if (err) {\n        callback(err, false);\n      } else {\n        callback(self.wrap(result.documents[0]), false);\n      }\n    }\n  });\n};\n\n/**\n * Get all the db statistics.\n *\n * Options\n *  - **scale** {Number}, divide the returned sizes by scale value.\n *  - **readPreference** {String}, the preferred read preference ((Server.PRIMARY, Server.PRIMARY_PREFERRED, Server.SECONDARY, Server.SECONDARY_PREFERRED, Server.NEAREST).\n *\n * @param {Objects} [options] options for the stats command\n * @param {Function} callback returns statistical information for the db.\n * @return {null}\n * @api public\n */\nDb.prototype.stats = function stats(options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  // Fetch all commands\n  options = args.length ? args.shift() : {};\n\n  // Build command object\n  var commandObject = {\n    dbStats:this.collectionName,\n  }\n\n  // Check if we have the scale value\n  if(options['scale'] != null) commandObject['scale'] = options['scale'];\n\n  // Execute the command\n  this.command(commandObject, options, callback);\n}\n\n/**\n * Register a handler\n * @ignore\n * @api private\n */\nDb.prototype._registerHandler = function(db_command, raw, connection, exhaust, callback) {\n  // If we have an array of commands, chain them\n  var chained = Array.isArray(db_command);\n\n  // Check if we have exhausted\n  if(typeof exhaust == 'function') {\n    callback = exhaust;\n    exhaust = false;\n  }\n\n  // If they are chained we need to add a special handler situation\n  if(chained) {\n    // List off chained id's\n    var chainedIds = [];\n    // Add all id's\n    for(var i = 0; i < db_command.length; i++) chainedIds.push(db_command[i].getRequestId().toString());\n    // Register all the commands together\n    for(var i = 0; i < db_command.length; i++) {\n      var command = db_command[i];\n      // Add the callback to the store\n      this._callBackStore.once(command.getRequestId(), callback);\n      // Add the information about the reply\n      this._callBackStore._notReplied[command.getRequestId().toString()] = {start: new Date().getTime(), 'raw': raw, chained:chainedIds, connection:connection, exhaust:false};\n    }\n  } else {\n    // Add the callback to the list of handlers\n    this._callBackStore.once(db_command.getRequestId(), callback);\n    // Add the information about the reply\n    this._callBackStore._notReplied[db_command.getRequestId().toString()] = {start: new Date().getTime(), 'raw': raw, connection:connection, exhaust:exhaust};\n  }\n}\n\n/**\n * Re-Register a handler, on the cursor id f.ex\n * @ignore\n * @api private\n */\nDb.prototype._reRegisterHandler = function(newId, object, callback) {\n  // Add the callback to the list of handlers\n  this._callBackStore.once(newId, object.callback.listener);\n  // Add the information about the reply\n  this._callBackStore._notReplied[newId] = object.info;\n}\n\n/**\n *\n * @ignore\n * @api private\n */\nDb.prototype._callHandler = function(id, document, err) {\n  // If there is a callback peform it\n  if(this._callBackStore.listeners(id).length >= 1) {\n    // Get info object\n    var info = this._callBackStore._notReplied[id];\n    // Delete the current object\n    delete this._callBackStore._notReplied[id];\n    // Emit to the callback of the object\n    this._callBackStore.emit(id, err, document, info.connection);\n  }\n}\n\n/**\n *\n * @ignore\n * @api private\n */\nDb.prototype._hasHandler = function(id) {\n  // If there is a callback peform it\n  return this._callBackStore.listeners(id).length >= 1;\n}\n\n/**\n *\n * @ignore\n * @api private\n */\nDb.prototype._removeHandler = function(id) {\n  // Remove the information\n  if(this._callBackStore._notReplied[id] != null) delete this._callBackStore._notReplied[id];\n  // Remove the callback if it's registered\n  this._callBackStore.removeAllListeners(id);\n  // Force cleanup _events, node.js seems to set it as a null value\n  if(this._callBackStore._events != null) delete this._callBackStore._events[id];\n}\n\n/**\n *\n * @ignore\n * @api private\n */\nDb.prototype._findHandler = function(id) {\n  var info = this._callBackStore._notReplied[id];\n  // Return the callback\n  return {info:info, callback:(this._callBackStore.listeners(id).length >= 1) ? this._callBackStore.listeners(id)[0] : null}\n}\n\n/**\n * @ignore\n */\nvar __executeQueryCommand = function(self, db_command, options, callback) {\n  // Options unpacking\n  var read = options['read'] != null ? options['read'] : false;\n  var raw = options['raw'] != null ? options['raw'] : self.raw;\n  var onAll = options['onAll'] != null ? options['onAll'] : false;\n  var specifiedConnection = options['connection'] != null ? options['connection'] : null;\n\n  // Correct read preference to default primary if set to false, null or primary\n  if(!(typeof read == 'object') && read._type == 'ReadPreference') {\n    read = (read == null || read == 'primary' || read == false) ? ReadPreference.PRIMARY : read;\n    if(!ReadPreference.isValid(read)) return callback(new Error(\"Illegal readPreference mode specified, \" + read));\n  } else if(typeof read == 'object' && read._type == 'ReadPreference') {\n    if(!read.isValid()) return callback(new Error(\"Illegal readPreference mode specified, \" + read.mode));\n  }\n\n  // If we have a read preference set and we are a mongos pass the read preference on to the mongos instance,\n  if(self.serverConfig.isMongos() && read != null && read != false) {\n    db_command.setMongosReadPreference(read);\n  }\n\n  // If we got a callback object\n  if(typeof callback === 'function' && !onAll) {\n    // Override connection if we passed in a specific connection\n    var connection = specifiedConnection != null ? specifiedConnection : null;\n    // Fetch either a reader or writer dependent on the specified read option if no connection\n    // was passed in\n    if(connection == null) {\n      connection = read == null || read == 'primary' || read == false ? self.serverConfig.checkoutWriter(true) : self.serverConfig.checkoutReader(read);\n    }\n\n    // Ensure we have a valid connection\n    if(connection == null) {\n      return callback(new Error(\"no open connections\"));\n    } else if(connection instanceof Error || connection['message'] != null) {\n      return callback(connection);\n    }\n\n    // Perform reaping of any dead connection\n    if(self.reaperEnabled) reaper(self, self.reaperInterval, self.reaperTimeout);\n\n    // Exhaust Option\n    var exhaust = options.exhaust || false;\n\n    // Register the handler in the data structure\n    self._registerHandler(db_command, raw, connection, exhaust, callback);\n\n    // Write the message out and handle any errors if there are any\n    connection.write(db_command, function(err) {\n      if(err != null) {\n        // Call the handler with an error\n        self._callHandler(db_command.getRequestId(), null, err);\n      }\n    });\n  } else if(typeof callback === 'function' && onAll) {\n    var connections = self.serverConfig.allRawConnections();\n    var numberOfEntries = connections.length;\n    // Go through all the connections\n    for(var i = 0; i < connections.length; i++) {\n      // Fetch a connection\n      var connection = connections[i];\n      // Override connection if needed\n      connection = specifiedConnection != null ? specifiedConnection : connection;\n      // Ensure we have a valid connection\n      if(connection == null) {\n        return callback(new Error(\"no open connections\"));\n      } else if(connection instanceof Error) {\n        return callback(connection);\n      }\n\n      // Register the handler in the data structure\n      self._registerHandler(db_command, raw, connection, callback);\n\n      // Write the message out\n      connection.write(db_command, function(err) {\n        // Adjust the number of entries we need to process\n        numberOfEntries = numberOfEntries - 1;\n        // Remove listener\n        if(err != null) {\n          // Clean up listener and return error\n          self._removeHandler(db_command.getRequestId());\n        }\n\n        // No more entries to process callback with the error\n        if(numberOfEntries <= 0) {\n          callback(err);\n        }\n      });\n\n      // Update the db_command request id\n      db_command.updateRequestId();\n    }\n  } else {\n    // Fetch either a reader or writer dependent on the specified read option\n    var connection = read == null || read == 'primary' || read == false ? self.serverConfig.checkoutWriter(true) : self.serverConfig.checkoutReader(read);\n    // Override connection if needed\n    connection = specifiedConnection != null ? specifiedConnection : connection;\n    // Ensure we have a valid connection\n    if(connection == null || connection instanceof Error || connection['message'] != null) return null;\n    // Write the message out\n    connection.write(db_command, function(err) {\n      if(err != null) {\n        // Emit the error\n        self.emit(\"error\", err);\n      }\n    });\n  }\n}\n\n/**\n * @ignore\n */\nvar __retryCommandOnFailure = function(self, retryInMilliseconds, numberOfTimes, command, db_command, options, callback) {\n  if(this._state == 'connected' || this._state == 'disconnected') this._state = 'connecting';\n  // Number of retries done\n  var numberOfRetriesDone = numberOfTimes;\n  // Retry function, execute once\n  var retryFunction = function(_self, _numberOfRetriesDone, _retryInMilliseconds, _numberOfTimes, _command, _db_command, _options, _callback) {\n    _self.serverConfig.connect(_self, {}, function(err, result, _serverConfig) {\n      // Adjust the number of retries left\n      _numberOfRetriesDone = _numberOfRetriesDone - 1;\n      // Definitively restart\n      if(err != null && _numberOfRetriesDone > 0) {\n        _self._state = 'connecting';\n        // Close the server config\n        _serverConfig.close(function(err) {\n          // Retry the connect\n          setTimeout(function() {\n            retryFunction(_self, _numberOfRetriesDone, _retryInMilliseconds, _numberOfTimes, _command, _db_command, _options, _callback);\n          }, _retryInMilliseconds);\n        });\n      } else if(err != null && _numberOfRetriesDone <= 0) {\n        _self._state = 'disconnected';\n        // Force close the current connections\n        _serverConfig.close(function(_err) {\n          // Force close the current connections\n          if(typeof _callback == 'function') _callback(err, null);\n        });\n      } else if(err == null && _self.serverConfig.isConnected() == true && Array.isArray(_self.auths) && _self.auths.length > 0) {\n        _self._state = 'connected';\n        // Get number of auths we need to execute\n        var numberOfAuths = _self.auths.length;\n        // Apply all auths\n        for(var i = 0; i < _self.auths.length; i++) {\n          _self.authenticate(_self.auths[i].username, _self.auths[i].password, {'authdb':_self.auths[i].authdb}, function(err, authenticated) {\n            numberOfAuths = numberOfAuths - 1;\n\n            // If we have no more authentications to replay\n            if(numberOfAuths == 0) {\n              if(err != null || !authenticated) {\n                if(typeof _callback == 'function') _callback(err, null);\n                return;\n              } else {\n                // Execute command\n                command(_self, _db_command, _options, _callback);\n\n                // Execute any backed up commands\n                process.nextTick(function() {\n                  // Execute any backed up commands\n                  while(_self.commands.length > 0) {\n                    // Fetch the command\n                    var command = _self.commands.shift();\n                    // Execute based on type\n                    if(command['type'] == 'query') {\n                      __executeQueryCommand(_self, command['db_command'], command['options'], command['callback']);\n                    } else if(command['type'] == 'insert') {\n                      __executeInsertCommand(_self, command['db_command'], command['options'], command['callback']);\n                    }\n                  }\n                });\n              }\n            }\n          });\n        }\n      } else if(err == null && _self.serverConfig.isConnected() == true) {\n        _self._state = 'connected';\n        // Execute command\n        command(_self, _db_command, _options, _callback);\n\n        process.nextTick(function() {\n          // Execute any backed up commands\n          while(_self.commands.length > 0) {\n            // Fetch the command\n            var command = _self.commands.shift();\n            // Execute based on type\n            if(command['type'] == 'query') {\n              __executeQueryCommand(_self, command['db_command'], command['options'], command['callback']);\n            } else if(command['type'] == 'insert') {\n              __executeInsertCommand(_self, command['db_command'], command['options'], command['callback']);\n            }\n          }\n        });\n      } else {\n        _self._state = 'connecting';\n        // Force close the current connections\n        _serverConfig.close(function(err) {\n        // _self.serverConfig.close(function(err) {\n          // Retry the connect\n          setTimeout(function() {\n            retryFunction(_self, _numberOfRetriesDone, _retryInMilliseconds, _numberOfTimes, _command, _db_command, _options, _callback);\n          }, _retryInMilliseconds);\n        });\n      }\n    });\n  };\n\n  // Execute function first time\n  retryFunction(self, numberOfRetriesDone, retryInMilliseconds, numberOfTimes, command, db_command, options, callback);\n}\n\n/**\n * Execute db query command (not safe)\n * @ignore\n * @api private\n */\nDb.prototype._executeQueryCommand = function(db_command, options, callback) {\n  var self = this;\n\n  // Unpack the parameters\n  if (typeof callback === 'undefined') {\n    callback = options;\n    options = {};\n  }\n\n  // fast fail option used for HA, no retry\n  var failFast = options['failFast'] != null ? options['failFast'] : false;\n  // Check if the user force closed the command\n  if(this._applicationClosed) {\n    if(typeof callback == 'function') {\n      return callback(new Error(\"db closed by application\"), null);\n    } else {\n      throw new Error(\"db closed by application\");\n    }\n  }\n\n  // If the pool is not connected, attemp to reconnect to send the message\n  if(this._state == 'connecting' && this.serverConfig.autoReconnect && !failFast) {\n    process.nextTick(function() {\n      self.commands.push({type:'query', 'db_command':db_command, 'options':options, 'callback':callback});\n    })\n  } else if(!this.serverConfig.isConnected() && this.serverConfig.autoReconnect && !failFast) {\n    this._state = 'connecting';\n    // Retry command\n    __retryCommandOnFailure(this, this.retryMiliSeconds, this.numberOfRetries, __executeQueryCommand, db_command, options, callback);\n  } else if(!this.serverConfig.isConnected() && !this.serverConfig.autoReconnect && callback) {\n    // Fire an error to the callback if we are not connected and don't do reconnect\n    callback(new Error(\"no open connections\"), null);\n  } else {\n    // If we have a\n    if(this.serverConfig instanceof ReplSet && this.serverConfig._checkReplicaSet()) {\n      // Execute the command in waiting\n      __executeQueryCommand(self, db_command, options, function(err, result, connection) {\n        if(!err) {\n          process.nextTick(function() {\n            // Force close if we are disconnected\n            if(self._state == 'disconnected') {\n              self.close();\n              return;\n            }\n\n            var replSetGetStatusCommand = DbCommand.createAdminDbCommandSlaveOk(self, {replSetGetStatus:1}, {});\n            // Do a freaking ping\n            __executeQueryCommand(self, replSetGetStatusCommand, {readPreference:ReadPreference.SECONDARY_PREFERRED}, function(_replerr, _replresult) {\n              // Force close if we are disconnected\n              if(self._state == 'disconnected') {\n                self.close(true);\n                return;\n              }\n\n              // Handle the HA\n              if(_replerr == null) {\n                self.serverConfig._validateReplicaset(_replresult, self.auths);\n              }\n            })\n          })\n        }\n        // Call the original method\n        callback(err, result, connection)\n      })\n    } else {\n      __executeQueryCommand(self, db_command, options, callback)\n    }\n  }\n};\n\n/**\n * @ignore\n */\nvar __executeInsertCommand = function(self, db_command, options, callback) {\n  // Always checkout a writer for this kind of operations\n  var connection = self.serverConfig.checkoutWriter();\n  // Get strict mode\n  var safe = options['safe'] != null ? options['safe'] : false;\n  var raw = options['raw'] != null ? options['raw'] : self.raw;\n  var specifiedConnection = options['connection'] != null ? options['connection'] : null;\n  // Override connection if needed\n  connection = specifiedConnection != null ? specifiedConnection : connection;\n\n  // Ensure we have a valid connection\n  if(typeof callback === 'function') {\n    // Ensure we have a valid connection\n    if(connection == null) {\n      return callback(new Error(\"no open connections\"));\n    } else if(connection instanceof Error) {\n      return callback(connection);\n    }\n\n    // We are expecting a check right after the actual operation\n    if(safe != null && safe != false) {\n      // db command is now an array of commands (original command + lastError)\n      db_command = [db_command, DbCommand.createGetLastErrorCommand(safe, self)];\n\n      // Register the handler in the data structure\n      self._registerHandler(db_command[1], raw, connection, callback);\n    }\n  }\n\n  // If we have no callback and there is no connection\n  if(connection == null) return null;\n  if(connection instanceof Error && typeof callback == 'function') return callback(connection, null);\n  if(connection instanceof Error) return null;\n  if(connection == null && typeof callback == 'function') return callback(new Error(\"no primary server found\"), null);\n\n  // Write the message out\n  connection.write(db_command, function(err) {\n    // Return the callback if it's not a safe operation and the callback is defined\n    if(typeof callback === 'function' && (safe == null || safe == false)) {\n      // Perform reaping\n      if(self.reaperEnabled) reaper(self, self.reaperInterval, self.reaperTimeout);\n      // Perform the callback\n      callback(err, null);\n    } else if(typeof callback === 'function'){\n      // Call the handler with an error\n      self._callHandler(db_command[1].getRequestId(), null, err);\n    } else {\n      self.emit(\"error\", err);\n    }\n  });\n}\n\n/**\n * Execute an insert Command\n * @ignore\n * @api private\n */\nDb.prototype._executeInsertCommand = function(db_command, options, callback) {\n  var self = this;\n\n  // Unpack the parameters\n  if(callback == null && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // Ensure options are not null\n  options = options == null ? {} : options;\n\n  // Check if the user force closed the command\n  if(this._applicationClosed) {\n    if(typeof callback == 'function') {\n      return callback(new Error(\"db closed by application\"), null);\n    } else {\n      throw new Error(\"db closed by application\");\n    }\n  }\n\n  // If the pool is not connected, attemp to reconnect to send the message\n  if(self._state == 'connecting' && this.serverConfig.autoReconnect) {\n    process.nextTick(function() {\n      self.commands.push({type:'insert', 'db_command':db_command, 'options':options, 'callback':callback});\n    })\n  } else if(!this.serverConfig.isConnected() && this.serverConfig.autoReconnect) {\n    this._state = 'connecting';\n    // Retry command\n    __retryCommandOnFailure(this, this.retryMiliSeconds, this.numberOfRetries, __executeInsertCommand, db_command, options, callback);\n  } else if(!this.serverConfig.isConnected() && !this.serverConfig.autoReconnect && callback) {\n    // Fire an error to the callback if we are not connected and don't do reconnect\n    if(callback) callback(new Error(\"no open connections\"), null);\n  } else {\n    // If we have a\n    if(this.serverConfig instanceof ReplSet && this.serverConfig._checkReplicaSet()) {\n      // Execute insert command\n      __executeInsertCommand(self, db_command, options, callback)\n\n      var replSetGetStatusCommand = DbCommand.createAdminDbCommandSlaveOk(self, {replSetGetStatus:1}, {});\n      // Do a freaking ping\n      __executeQueryCommand(self, replSetGetStatusCommand, {readPreference:ReadPreference.SECONDARY_PREFERRED}, function(_replerr, _replresult) {\n        // Force close if we are disconnected\n        if(self._state == 'disconnected') {\n          self.close(true);\n          return;\n        }\n\n        // Handle the HA\n        if(_replerr == null) {\n          self.serverConfig._validateReplicaset(_replresult, self.auths);\n        }\n      })\n    } else {\n      __executeInsertCommand(self, db_command, options, callback)\n    }\n  }\n}\n\n/**\n * Update command is the same\n * @ignore\n * @api private\n */\nDb.prototype._executeUpdateCommand = Db.prototype._executeInsertCommand;\n/**\n * Remove command is the same\n * @ignore\n * @api private\n */\nDb.prototype._executeRemoveCommand = Db.prototype._executeInsertCommand;\n\n/**\n * Wrap a Mongo error document into an Error instance\n * @ignore\n * @api private\n */\nDb.prototype.wrap = function(error) {\n  var msg = error.err || error.errmsg || error;\n  var e = new Error(msg);\n  e.name = 'MongoError';\n\n  // Get all object keys\n  var keys = Object.keys(error);\n  // Populate error object with properties\n  for(var i = 0; i < keys.length; i++) {\n    e[keys[i]] = error[keys[i]];\n  }\n\n  return e;\n}\n\n/**\n * Default URL\n *\n * @classconstant DEFAULT_URL\n **/\nDb.DEFAULT_URL = 'mongodb://localhost:27017/default';\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  www.mongodb.org/display/DOCS/Connections\n *\n * Options\n *  - **uri_decode_auth** {Boolean, default:false} uri decode the user name and password for authentication\n *\n * @param {String} url connection url for MongoDB.\n * @param {Object} [options] optional options for insert command\n * @param {Function} callback callback returns the initialized db.\n * @return {null}\n * @api public\n */\nDb.connect = function(url, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n  var serverOptions = options.server || {};\n  var replSetServersOptions = options.replSet || options.replSetServers || {};\n  var dbOptions = options.db || {};\n\n  // Ensure empty socket option field\n  serverOptions.socketOptions = serverOptions.socketOptions || {};\n  replSetServersOptions.socketOptions = serverOptions.socketOptions || {};\n\n  // Match the url format\n  var urlRE = new RegExp('^mongo(?:db)?://(?:|([^@/]*)@)([^@/]*)(?:|/([^?]*)(?:|\\\\?([^?]*)))$');\n  var match = (url || Db.DEFAULT_URL).match(urlRE);\n  if (!match)\n    throw Error(\"URL must be in the format mongodb://user:pass@host:port/dbname\");\n\n  var authPart = match[1] || '';\n  var auth = authPart.split(':', 2);\n  if(options['uri_decode_auth']){\n    auth[0] = decodeURIComponent(auth[0]);\n    if(auth[1]){\n      auth[1] = decodeURIComponent(auth[1]);\n    }\n  }\n\n  var hostPart = match[2];\n  var dbname = match[3] || 'default';\n  var urlOptions = (match[4] || '').split(/[&;]/);\n\n  // Ugh, we have to figure out which options go to which constructor manually.\n  urlOptions.forEach(function(opt) {\n    if(!opt) return;\n    var splitOpt = opt.split('='), name = splitOpt[0], value = splitOpt[1];\n\n    // Options implementations\n    switch(name) {\n      case 'slaveOk':\n      case 'slave_ok':\n        serverOptions.slave_ok = (value == 'true');\n        break;\n      case 'poolSize':\n        serverOptions.poolSize = Number(value);\n        break;\n      case 'autoReconnect':\n      case 'auto_reconnect':\n        serverOptions.auto_reconnect = (value == 'true');\n        break;\n      case 'ssl':\n        serverOptions.ssl = (value == 'true');\n        break;\n      case 'replicaSet':\n      case 'rs_name':\n        replSetServersOptions.rs_name = value;\n        break;\n      case 'reconnectWait':\n        replSetServersOptions.reconnectWait = Number(value);\n        break;\n      case 'retries':\n        replSetServersOptions.retries = Number(value);\n        break;\n      case 'readSecondary':\n      case 'read_secondary':\n        replSetServersOptions.retries = Number(value);\n        break;\n      case 'safe':\n        dbOptions.safe = (value == 'true');\n        break;\n      case 'nativeParser':\n      case 'native_parser':\n        dbOptions.native_parser = (value == 'true');\n        break;\n      case 'safe':\n        dbOptions.safe = (value == 'true');\n        break;\n      case 'strict':\n        dbOptions.strict = (value == 'true');\n        break;\n      case 'connectTimeoutMS':\n        serverOptions.socketOptions.connectTimeoutMS = Number(value);\n        replSetServersOptions.socketOptions.connectTimeoutMS = Number(value);\n        break;\n      case 'socketTimeoutMS':\n        serverOptions.socketOptions.socketTimeoutMS = Number(value);\n        replSetServersOptions.socketOptions.socketTimeoutMS = Number(value);\n        break;\n      default:\n        break;\n    }\n  });\n\n  var servers = hostPart.split(',').map(function(h) {\n    var hostPort = h.split(':', 2);\n    return new Server(hostPort[0] || 'localhost', hostPort[1] != null ? parseInt(hostPort[1]) : 27017, serverOptions);\n  });\n\n  var server;\n  if (servers.length == 1) {\n    server = servers[0];\n  } else {\n    server = new ReplSet(servers, replSetServersOptions);\n  }\n\n  var db = new Db(dbname, server, dbOptions);\n  if(options.noOpen)\n    return db;\n\n  // If callback is null throw an exception\n  if(callback == null) throw new Error(\"no callback function provided\");\n\n  db.open(function(err, db){\n    if(err == null && authPart){\n      db.authenticate(auth[0], auth[1], function(err, success){\n        if(success){\n          callback(null, db);\n        } else {\n          callback(err ? err : new Error('Could not authenticate user ' + auth[0]), db);\n        }\n      });\n    } else {\n      callback(err, db);\n    }\n  });\n}\n\n/**\n * State of the db connection\n * @ignore\n */\nObject.defineProperty(Db.prototype, \"state\", { enumerable: true\n  , get: function () {\n      return this.serverConfig._serverState;\n    }\n});\n\n/**\n * Legacy support\n *\n * @ignore\n * @api private\n */\nexports.connect = Db.connect;\nexports.Db = Db;\n\n/**\n * Remove all listeners to the db instance.\n * @ignore\n * @api private\n */\nDb.prototype.removeAllEventListeners = function() {\n  this.removeAllListeners(\"close\");\n  this.removeAllListeners(\"error\");\n  this.removeAllListeners(\"timeout\");\n  this.removeAllListeners(\"parseError\");\n  this.removeAllListeners(\"poolReady\");\n  this.removeAllListeners(\"message\");\n}",
        "blocks": {
          "total": 374,
          "seen": 53,
          "missing": 321,
          "percentage": 0.14171122994652408
        }
      },
      "hash": "7b659e4741bc57484d8b29f5ac2594ab"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/gridfs/grid.js": {
      "stats": {
        "percentage": 0.7142857142857143,
        "lines": [
          {
            "lineno": 14
          },
          {
            "lineno": 16
          },
          {
            "lineno": 17
          },
          {
            "lineno": 30
          },
          {
            "lineno": 31
          },
          {
            "lineno": 32
          },
          {
            "lineno": 33
          },
          {
            "lineno": 35
          },
          {
            "lineno": 38
          },
          {
            "lineno": 40
          },
          {
            "lineno": 42
          },
          {
            "lineno": 43
          },
          {
            "lineno": 44
          },
          {
            "lineno": 46
          },
          {
            "lineno": 47
          },
          {
            "lineno": 49
          },
          {
            "lineno": 50
          },
          {
            "lineno": 51
          },
          {
            "lineno": 67
          },
          {
            "lineno": 69
          },
          {
            "lineno": 70
          },
          {
            "lineno": 71
          },
          {
            "lineno": 74
          },
          {
            "lineno": 75
          },
          {
            "lineno": 90
          },
          {
            "lineno": 92
          },
          {
            "lineno": 93
          },
          {
            "lineno": 94
          }
        ],
        "missing": 28,
        "seen": 70,
        "seen_lines": [
          {
            "s": 1,
            "e": 2
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 29,
            "e": 65
          },
          {
            "s": 65,
            "e": 88
          },
          {
            "s": 88,
            "e": 98
          },
          {
            "s": 98,
            "e": 98
          }
        ],
        "total": 98,
        "coverage": {
          "14": {
            "partial": false,
            "source": "  if(!(this instanceof Grid)) return new Grid(db, fsName);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 28
              },
              {
                "startCol": 6,
                "endCol": 28
              },
              {
                "startCol": 23,
                "endCol": 27
              },
              {
                "startCol": 30,
                "endCol": 58
              }
            ]
          },
          "16": {
            "partial": false,
            "source": "  this.db = db;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "17": {
            "partial": false,
            "source": "  this.fsName = fsName == null ? GridStore.DEFAULT_ROOT_COLLECTION : fsName;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 16,
                "endCol": 22
              },
              {
                "startCol": 33,
                "endCol": 66
              },
              {
                "startCol": 69,
                "endCol": 75
              }
            ]
          },
          "30": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "32": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "33": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "35": {
            "partial": false,
            "source": "  options['root'] = options['root'] == null ? this.fsName : options['root'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 20,
                "endCol": 43
              },
              {
                "startCol": 46,
                "endCol": 57
              },
              {
                "startCol": 60,
                "endCol": 75
              }
            ]
          },
          "38": {
            "partial": false,
            "source": "  if(!(Buffer.isBuffer(data))) return callback(new Error(\"Data object must be a buffer object\"), null);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 29
              },
              {
                "startCol": 6,
                "endCol": 29
              },
              {
                "startCol": 31,
                "endCol": 103
              },
              {
                "startCol": 38,
                "endCol": 102
              }
            ]
          },
          "40": {
            "partial": false,
            "source": "  var filename = options['filename'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 37
              }
            ]
          },
          "42": {
            "partial": false,
            "source": "  var gridStore = new GridStore(this.db, filename, \"w\", options);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 65
              }
            ]
          },
          "43": {
            "partial": false,
            "source": "  gridStore.open(function(err, gridStore) {",
            "missing": [
              {}
            ]
          },
          "44": {
            "partial": false,
            "source": "    if(err) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 19,
                "endCol": 38
              },
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 39
              }
            ]
          },
          "45": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "46": {
            "partial": false,
            "source": "    gridStore.write(data, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "47": {
            "partial": false,
            "source": "      if(err) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 14,
                "endCol": 41
              },
              {
                "startCol": 21,
                "endCol": 40
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "49": {
            "partial": false,
            "source": "      gridStore.close(function(err, result) {",
            "missing": [
              {}
            ]
          },
          "50": {
            "partial": false,
            "source": "        if(err) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 43
              },
              {
                "startCol": 23,
                "endCol": 42
              }
            ]
          },
          "51": {
            "partial": false,
            "source": "        callback(null, result);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 30
              },
              {}
            ]
          },
          "52": {
            "partial": false,
            "source": "      })",
            "missing": [
              {}
            ]
          },
          "53": {
            "partial": false,
            "source": "    })",
            "missing": [
              {}
            ]
          },
          "54": {
            "partial": false,
            "source": "  })",
            "missing": [
              {}
            ]
          },
          "55": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "67": {
            "partial": false,
            "source": "  if(!(id instanceof ObjectID)) return callback(new Error(\"Not a valid ObjectID\", null));",
            "missing": [
              {
                "startCol": 5,
                "endCol": 30
              },
              {
                "startCol": 6,
                "endCol": 30
              },
              {
                "startCol": 7,
                "endCol": 9
              },
              {
                "startCol": 21,
                "endCol": 29
              },
              {
                "startCol": 32,
                "endCol": 89
              },
              {
                "startCol": 39,
                "endCol": 88
              }
            ]
          },
          "69": {
            "partial": false,
            "source": "  var gridStore = new GridStore(this.db, id, \"r\", {root:this.fsName});",
            "missing": [
              {
                "startCol": 2,
                "endCol": 70
              }
            ]
          },
          "70": {
            "partial": false,
            "source": "  gridStore.open(function(err, gridStore) {",
            "missing": [
              {}
            ]
          },
          "71": {
            "partial": false,
            "source": "    if(err) return callback(err, null);",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 39
              },
              {
                "startCol": 19,
                "endCol": 38
              }
            ]
          },
          "72": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "73": {
            "partial": false,
            "source": "    // Return the data",
            "missing": [
              {}
            ]
          },
          "74": {
            "partial": false,
            "source": "    gridStore.read(function(err, data) {",
            "missing": [
              {}
            ]
          },
          "75": {
            "partial": false,
            "source": "      return callback(err, data)",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 32
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "77": {
            "partial": false,
            "source": "  })",
            "missing": [
              {}
            ]
          },
          "78": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "90": {
            "partial": false,
            "source": "  if(!(id instanceof ObjectID)) return callback(new Error(\"Not a valid ObjectID\", null));",
            "missing": [
              {
                "startCol": 5,
                "endCol": 30
              },
              {
                "startCol": 6,
                "endCol": 30
              },
              {
                "startCol": 7,
                "endCol": 9
              },
              {
                "startCol": 21,
                "endCol": 29
              },
              {
                "startCol": 32,
                "endCol": 89
              },
              {
                "startCol": 39,
                "endCol": 88
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "  GridStore.unlink(this.db, id, {root:this.fsName}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "93": {
            "partial": false,
            "source": "    if(err) return callback(err, false);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 40
              },
              {},
              {
                "startCol": 19,
                "endCol": 39
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "    return callback(null, true);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 32
              },
              {},
              {
                "startCol": 11,
                "endCol": 31
              }
            ]
          },
          "95": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          }
        },
        "source": "var GridStore = require('./gridstore').GridStore,\n  ObjectID = require('bson').ObjectID;\n\n/**\n * A class representation of a simple Grid interface.\n *\n * @class Represents the Grid.\n * @param {Db} db A database instance to interact with.\n * @param {String} [fsName] optional different root collection for GridFS.\n * @return {Grid}\n */\nfunction Grid(db, fsName) {\n\n  if(!(this instanceof Grid)) return new Grid(db, fsName);\n\n  this.db = db;\n  this.fsName = fsName == null ? GridStore.DEFAULT_ROOT_COLLECTION : fsName;\n}\n\n/**\n * Puts binary data to the grid\n *\n * @param {Buffer} data buffer with Binary Data.\n * @param {Object} [options] the options for the files.\n * @callback {Function} this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGrid.prototype.put = function(data, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  // If root is not defined add our default one\n  options['root'] = options['root'] == null ? this.fsName : options['root'];\n\n  // Return if we don't have a buffer object as data\n  if(!(Buffer.isBuffer(data))) return callback(new Error(\"Data object must be a buffer object\"), null);\n  // Get filename if we are using it\n  var filename = options['filename'];\n  // Create gridstore\n  var gridStore = new GridStore(this.db, filename, \"w\", options);\n  gridStore.open(function(err, gridStore) {\n    if(err) return callback(err, null);\n\n    gridStore.write(data, function(err, result) {\n      if(err) return callback(err, null);\n\n      gridStore.close(function(err, result) {\n        if(err) return callback(err, null);\n        callback(null, result);\n      })\n    })\n  })\n}\n\n/**\n * Get binary data to the grid\n *\n * @param {ObjectID} id ObjectID for file.\n * @callback {Function} this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGrid.prototype.get = function(id, callback) {\n  // Validate that we have a valid ObjectId\n  if(!(id instanceof ObjectID)) return callback(new Error(\"Not a valid ObjectID\", null));\n  // Create gridstore\n  var gridStore = new GridStore(this.db, id, \"r\", {root:this.fsName});\n  gridStore.open(function(err, gridStore) {\n    if(err) return callback(err, null);\n\n    // Return the data\n    gridStore.read(function(err, data) {\n      return callback(err, data)\n    });\n  })\n}\n\n/**\n * Delete file from grid\n *\n * @param {ObjectID} id ObjectID for file.\n * @callback {Function} this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGrid.prototype.delete = function(id, callback) {\n  // Validate that we have a valid ObjectId\n  if(!(id instanceof ObjectID)) return callback(new Error(\"Not a valid ObjectID\", null));\n  // Create gridstore\n  GridStore.unlink(this.db, id, {root:this.fsName}, function(err, result) {\n    if(err) return callback(err, false);\n    return callback(null, true);\n  });\n}\n\nexports.Grid = Grid;",
        "blocks": {
          "total": 19,
          "seen": 0,
          "missing": 19,
          "percentage": 0
        }
      },
      "hash": "3e06682636999661d79430f72ec08f4c"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/gridfs/gridstore.js": {
      "stats": {
        "percentage": 0.6407634628493524,
        "lines": [
          {
            "lineno": 45
          },
          {
            "lineno": 47
          },
          {
            "lineno": 48
          },
          {
            "lineno": 51
          },
          {
            "lineno": 52
          },
          {
            "lineno": 55
          },
          {
            "lineno": 59
          },
          {
            "lineno": 61
          },
          {
            "lineno": 62
          },
          {
            "lineno": 63
          },
          {
            "lineno": 64
          },
          {
            "lineno": 65
          },
          {
            "lineno": 66
          },
          {
            "lineno": 67
          },
          {
            "lineno": 71
          },
          {
            "lineno": 72
          },
          {
            "lineno": 73
          },
          {
            "lineno": 74
          },
          {
            "lineno": 75
          },
          {
            "lineno": 76
          },
          {
            "lineno": 77
          },
          {
            "lineno": 78
          },
          {
            "lineno": 79
          },
          {
            "lineno": 80
          },
          {
            "lineno": 81
          },
          {
            "lineno": 83
          },
          {
            "lineno": 84
          },
          {
            "lineno": 85
          },
          {
            "lineno": 89
          },
          {
            "lineno": 90
          },
          {
            "lineno": 91
          },
          {
            "lineno": 92
          },
          {
            "lineno": 94
          },
          {
            "lineno": 96
          },
          {
            "lineno": 109
          },
          {
            "lineno": 124
          },
          {
            "lineno": 125
          },
          {
            "lineno": 126
          },
          {
            "lineno": 129
          },
          {
            "lineno": 131
          },
          {
            "lineno": 133
          },
          {
            "lineno": 134
          },
          {
            "lineno": 137
          },
          {
            "lineno": 138
          },
          {
            "lineno": 141
          },
          {
            "lineno": 142
          },
          {
            "lineno": 145
          },
          {
            "lineno": 146
          },
          {
            "lineno": 147
          },
          {
            "lineno": 154
          },
          {
            "lineno": 164
          },
          {
            "lineno": 165
          },
          {
            "lineno": 166
          },
          {
            "lineno": 167
          },
          {
            "lineno": 171
          },
          {
            "lineno": 172
          },
          {
            "lineno": 175
          },
          {
            "lineno": 176
          },
          {
            "lineno": 177
          },
          {
            "lineno": 180
          },
          {
            "lineno": 181
          },
          {
            "lineno": 184
          },
          {
            "lineno": 185
          },
          {
            "lineno": 186
          },
          {
            "lineno": 187
          },
          {
            "lineno": 188
          },
          {
            "lineno": 189
          },
          {
            "lineno": 190
          },
          {
            "lineno": 191
          },
          {
            "lineno": 192
          },
          {
            "lineno": 193
          },
          {
            "lineno": 194
          },
          {
            "lineno": 195
          },
          {
            "lineno": 196
          },
          {
            "lineno": 197
          },
          {
            "lineno": 198
          },
          {
            "lineno": 200
          },
          {
            "lineno": 201
          },
          {
            "lineno": 205
          },
          {
            "lineno": 206
          },
          {
            "lineno": 207
          },
          {
            "lineno": 208
          },
          {
            "lineno": 209
          },
          {
            "lineno": 210
          },
          {
            "lineno": 212
          },
          {
            "lineno": 214
          },
          {
            "lineno": 215
          },
          {
            "lineno": 216
          },
          {
            "lineno": 217
          },
          {
            "lineno": 218
          },
          {
            "lineno": 219
          },
          {
            "lineno": 220
          },
          {
            "lineno": 221
          },
          {
            "lineno": 223
          },
          {
            "lineno": 224
          },
          {
            "lineno": 225
          },
          {
            "lineno": 227
          },
          {
            "lineno": 228
          },
          {
            "lineno": 229
          },
          {
            "lineno": 230
          },
          {
            "lineno": 231
          },
          {
            "lineno": 238
          },
          {
            "lineno": 239
          },
          {
            "lineno": 240
          },
          {
            "lineno": 241
          },
          {
            "lineno": 243
          },
          {
            "lineno": 244
          },
          {
            "lineno": 247
          },
          {
            "lineno": 249
          },
          {
            "lineno": 250
          },
          {
            "lineno": 251
          },
          {
            "lineno": 252
          },
          {
            "lineno": 253
          },
          {
            "lineno": 254
          },
          {
            "lineno": 255
          },
          {
            "lineno": 256
          },
          {
            "lineno": 258
          },
          {
            "lineno": 259
          },
          {
            "lineno": 260
          },
          {
            "lineno": 262
          },
          {
            "lineno": 263
          },
          {
            "lineno": 264
          },
          {
            "lineno": 265
          },
          {
            "lineno": 266
          },
          {
            "lineno": 275
          },
          {
            "lineno": 276
          },
          {
            "lineno": 289
          },
          {
            "lineno": 290
          },
          {
            "lineno": 291
          },
          {
            "lineno": 292
          },
          {
            "lineno": 293
          },
          {
            "lineno": 295
          },
          {
            "lineno": 298
          },
          {
            "lineno": 299
          },
          {
            "lineno": 301
          },
          {
            "lineno": 302
          },
          {
            "lineno": 304
          },
          {
            "lineno": 305
          },
          {
            "lineno": 306
          },
          {
            "lineno": 309
          },
          {
            "lineno": 310
          },
          {
            "lineno": 311
          },
          {
            "lineno": 313
          },
          {
            "lineno": 316
          },
          {
            "lineno": 317
          },
          {
            "lineno": 318
          },
          {
            "lineno": 320
          },
          {
            "lineno": 321
          },
          {
            "lineno": 323
          },
          {
            "lineno": 326
          },
          {
            "lineno": 328
          },
          {
            "lineno": 329
          },
          {
            "lineno": 330
          },
          {
            "lineno": 332
          },
          {
            "lineno": 340
          },
          {
            "lineno": 360
          },
          {
            "lineno": 361
          },
          {
            "lineno": 363
          },
          {
            "lineno": 364
          },
          {
            "lineno": 366
          },
          {
            "lineno": 369
          },
          {
            "lineno": 370
          },
          {
            "lineno": 371
          },
          {
            "lineno": 372
          },
          {
            "lineno": 374
          },
          {
            "lineno": 376
          },
          {
            "lineno": 378
          },
          {
            "lineno": 379
          },
          {
            "lineno": 380
          },
          {
            "lineno": 382
          },
          {
            "lineno": 384
          },
          {
            "lineno": 386
          },
          {
            "lineno": 390
          },
          {
            "lineno": 392
          },
          {
            "lineno": 395
          },
          {
            "lineno": 397
          },
          {
            "lineno": 399
          },
          {
            "lineno": 400
          },
          {
            "lineno": 401
          },
          {
            "lineno": 402
          },
          {
            "lineno": 404
          },
          {
            "lineno": 406
          },
          {
            "lineno": 407
          },
          {
            "lineno": 413
          },
          {
            "lineno": 415
          },
          {
            "lineno": 416
          },
          {
            "lineno": 446
          },
          {
            "lineno": 447
          },
          {
            "lineno": 449
          },
          {
            "lineno": 450
          },
          {
            "lineno": 452
          },
          {
            "lineno": 453
          },
          {
            "lineno": 457
          },
          {
            "lineno": 458
          },
          {
            "lineno": 462
          },
          {
            "lineno": 469
          },
          {
            "lineno": 470
          },
          {
            "lineno": 471
          },
          {
            "lineno": 472
          },
          {
            "lineno": 486
          },
          {
            "lineno": 488
          },
          {
            "lineno": 489
          },
          {
            "lineno": 490
          },
          {
            "lineno": 491
          },
          {
            "lineno": 493
          },
          {
            "lineno": 494
          },
          {
            "lineno": 497
          },
          {
            "lineno": 498
          },
          {
            "lineno": 499
          },
          {
            "lineno": 501
          },
          {
            "lineno": 502
          },
          {
            "lineno": 503
          },
          {
            "lineno": 508
          },
          {
            "lineno": 509
          },
          {
            "lineno": 510
          },
          {
            "lineno": 511
          },
          {
            "lineno": 518
          },
          {
            "lineno": 519
          },
          {
            "lineno": 521
          },
          {
            "lineno": 522
          },
          {
            "lineno": 523
          },
          {
            "lineno": 524
          },
          {
            "lineno": 529
          },
          {
            "lineno": 530
          },
          {
            "lineno": 532
          },
          {
            "lineno": 549
          },
          {
            "lineno": 550
          },
          {
            "lineno": 552
          },
          {
            "lineno": 553
          },
          {
            "lineno": 555
          },
          {
            "lineno": 556
          },
          {
            "lineno": 558
          },
          {
            "lineno": 559
          },
          {
            "lineno": 571
          },
          {
            "lineno": 581
          },
          {
            "lineno": 592
          },
          {
            "lineno": 605
          },
          {
            "lineno": 606
          },
          {
            "lineno": 607
          },
          {
            "lineno": 608
          },
          {
            "lineno": 609
          },
          {
            "lineno": 610
          },
          {
            "lineno": 614
          },
          {
            "lineno": 626
          },
          {
            "lineno": 627
          },
          {
            "lineno": 628
          },
          {
            "lineno": 629
          },
          {
            "lineno": 630
          },
          {
            "lineno": 633
          },
          {
            "lineno": 634
          },
          {
            "lineno": 635
          },
          {
            "lineno": 636
          },
          {
            "lineno": 639
          },
          {
            "lineno": 640
          },
          {
            "lineno": 654
          },
          {
            "lineno": 666
          },
          {
            "lineno": 667
          },
          {
            "lineno": 668
          },
          {
            "lineno": 670
          },
          {
            "lineno": 671
          },
          {
            "lineno": 673
          },
          {
            "lineno": 674
          },
          {
            "lineno": 675
          },
          {
            "lineno": 676
          },
          {
            "lineno": 679
          },
          {
            "lineno": 692
          },
          {
            "lineno": 694
          },
          {
            "lineno": 695
          },
          {
            "lineno": 696
          },
          {
            "lineno": 697
          },
          {
            "lineno": 698
          },
          {
            "lineno": 699
          },
          {
            "lineno": 700
          },
          {
            "lineno": 703
          },
          {
            "lineno": 704
          },
          {
            "lineno": 705
          },
          {
            "lineno": 706
          },
          {
            "lineno": 707
          },
          {
            "lineno": 708
          },
          {
            "lineno": 712
          },
          {
            "lineno": 713
          },
          {
            "lineno": 714
          },
          {
            "lineno": 734
          },
          {
            "lineno": 736
          },
          {
            "lineno": 737
          },
          {
            "lineno": 738
          },
          {
            "lineno": 739
          },
          {
            "lineno": 742
          },
          {
            "lineno": 743
          },
          {
            "lineno": 745
          },
          {
            "lineno": 747
          },
          {
            "lineno": 748
          },
          {
            "lineno": 750
          },
          {
            "lineno": 752
          },
          {
            "lineno": 754
          },
          {
            "lineno": 756
          },
          {
            "lineno": 758
          },
          {
            "lineno": 760
          },
          {
            "lineno": 762
          },
          {
            "lineno": 765
          },
          {
            "lineno": 766
          },
          {
            "lineno": 768
          },
          {
            "lineno": 769
          },
          {
            "lineno": 770
          },
          {
            "lineno": 772
          },
          {
            "lineno": 773
          },
          {
            "lineno": 775
          },
          {
            "lineno": 790
          },
          {
            "lineno": 810
          },
          {
            "lineno": 812
          },
          {
            "lineno": 813
          },
          {
            "lineno": 814
          },
          {
            "lineno": 816
          },
          {
            "lineno": 817
          },
          {
            "lineno": 818
          },
          {
            "lineno": 819
          },
          {
            "lineno": 820
          },
          {
            "lineno": 821
          },
          {
            "lineno": 822
          },
          {
            "lineno": 824
          },
          {
            "lineno": 827
          },
          {
            "lineno": 828
          },
          {
            "lineno": 829
          },
          {
            "lineno": 830
          },
          {
            "lineno": 831
          },
          {
            "lineno": 832
          },
          {
            "lineno": 833
          },
          {
            "lineno": 834
          },
          {
            "lineno": 838
          },
          {
            "lineno": 839
          },
          {
            "lineno": 840
          },
          {
            "lineno": 841
          },
          {
            "lineno": 844
          },
          {
            "lineno": 847
          },
          {
            "lineno": 848
          },
          {
            "lineno": 849
          },
          {
            "lineno": 860
          },
          {
            "lineno": 871
          },
          {
            "lineno": 873
          },
          {
            "lineno": 874
          },
          {
            "lineno": 875
          },
          {
            "lineno": 876
          },
          {
            "lineno": 877
          },
          {
            "lineno": 878
          },
          {
            "lineno": 879
          },
          {
            "lineno": 882
          },
          {
            "lineno": 883
          },
          {
            "lineno": 897
          },
          {
            "lineno": 898
          },
          {
            "lineno": 915
          },
          {
            "lineno": 964
          },
          {
            "lineno": 965
          },
          {
            "lineno": 966
          },
          {
            "lineno": 969
          },
          {
            "lineno": 970
          },
          {
            "lineno": 971
          },
          {
            "lineno": 974
          },
          {
            "lineno": 975
          },
          {
            "lineno": 976
          },
          {
            "lineno": 978
          },
          {
            "lineno": 979
          },
          {
            "lineno": 981
          },
          {
            "lineno": 982
          },
          {
            "lineno": 983
          },
          {
            "lineno": 999
          },
          {
            "lineno": 1000
          },
          {
            "lineno": 1001
          },
          {
            "lineno": 1002
          },
          {
            "lineno": 1005
          },
          {
            "lineno": 1006
          },
          {
            "lineno": 1007
          },
          {
            "lineno": 1011
          },
          {
            "lineno": 1013
          },
          {
            "lineno": 1014
          },
          {
            "lineno": 1015
          },
          {
            "lineno": 1016
          },
          {
            "lineno": 1018
          },
          {
            "lineno": 1019
          },
          {
            "lineno": 1021
          },
          {
            "lineno": 1022
          },
          {
            "lineno": 1023
          },
          {
            "lineno": 1025
          },
          {
            "lineno": 1052
          },
          {
            "lineno": 1053
          },
          {
            "lineno": 1054
          },
          {
            "lineno": 1055
          },
          {
            "lineno": 1056
          },
          {
            "lineno": 1058
          },
          {
            "lineno": 1059
          },
          {
            "lineno": 1061
          },
          {
            "lineno": 1062
          },
          {
            "lineno": 1063
          },
          {
            "lineno": 1065
          },
          {
            "lineno": 1066
          },
          {
            "lineno": 1067
          },
          {
            "lineno": 1068
          },
          {
            "lineno": 1071
          },
          {
            "lineno": 1088
          },
          {
            "lineno": 1089
          },
          {
            "lineno": 1090
          },
          {
            "lineno": 1091
          },
          {
            "lineno": 1093
          },
          {
            "lineno": 1094
          },
          {
            "lineno": 1095
          },
          {
            "lineno": 1096
          },
          {
            "lineno": 1111
          },
          {
            "lineno": 1112
          },
          {
            "lineno": 1113
          },
          {
            "lineno": 1114
          },
          {
            "lineno": 1116
          },
          {
            "lineno": 1117
          },
          {
            "lineno": 1118
          },
          {
            "lineno": 1119
          },
          {
            "lineno": 1120
          },
          {
            "lineno": 1121
          },
          {
            "lineno": 1122
          },
          {
            "lineno": 1127
          },
          {
            "lineno": 1128
          },
          {
            "lineno": 1129
          },
          {
            "lineno": 1130
          },
          {
            "lineno": 1131
          },
          {
            "lineno": 1132
          },
          {
            "lineno": 1133
          },
          {
            "lineno": 1134
          },
          {
            "lineno": 1153
          },
          {
            "lineno": 1156
          },
          {
            "lineno": 1157
          },
          {
            "lineno": 1159
          },
          {
            "lineno": 1175
          },
          {
            "lineno": 1186
          },
          {
            "lineno": 1187
          },
          {
            "lineno": 1190
          },
          {
            "lineno": 1193
          },
          {
            "lineno": 1203
          },
          {
            "lineno": 1204
          },
          {
            "lineno": 1206
          },
          {
            "lineno": 1209
          },
          {
            "lineno": 1226
          },
          {
            "lineno": 1228
          },
          {
            "lineno": 1229
          },
          {
            "lineno": 1231
          },
          {
            "lineno": 1232
          },
          {
            "lineno": 1235
          },
          {
            "lineno": 1236
          },
          {
            "lineno": 1237
          },
          {
            "lineno": 1238
          },
          {
            "lineno": 1242
          },
          {
            "lineno": 1251
          },
          {
            "lineno": 1252
          },
          {
            "lineno": 1255
          },
          {
            "lineno": 1270
          },
          {
            "lineno": 1271
          },
          {
            "lineno": 1275
          },
          {
            "lineno": 1276
          },
          {
            "lineno": 1277
          },
          {
            "lineno": 1281
          },
          {
            "lineno": 1283
          },
          {
            "lineno": 1284
          },
          {
            "lineno": 1285
          },
          {
            "lineno": 1286
          },
          {
            "lineno": 1290
          },
          {
            "lineno": 1291
          },
          {
            "lineno": 1293
          },
          {
            "lineno": 1302
          },
          {
            "lineno": 1303
          },
          {
            "lineno": 1305
          },
          {
            "lineno": 1306
          },
          {
            "lineno": 1307
          },
          {
            "lineno": 1318
          },
          {
            "lineno": 1319
          },
          {
            "lineno": 1321
          },
          {
            "lineno": 1329
          },
          {
            "lineno": 1331
          },
          {
            "lineno": 1332
          },
          {
            "lineno": 1333
          },
          {
            "lineno": 1335
          },
          {
            "lineno": 1337
          },
          {
            "lineno": 1339
          },
          {
            "lineno": 1348
          },
          {
            "lineno": 1349
          },
          {
            "lineno": 1352
          },
          {
            "lineno": 1353
          },
          {
            "lineno": 1354
          },
          {
            "lineno": 1356
          },
          {
            "lineno": 1358
          },
          {
            "lineno": 1359
          },
          {
            "lineno": 1361
          },
          {
            "lineno": 1365
          },
          {
            "lineno": 1366
          },
          {
            "lineno": 1369
          },
          {
            "lineno": 1370
          },
          {
            "lineno": 1373
          },
          {
            "lineno": 1374
          },
          {
            "lineno": 1377
          },
          {
            "lineno": 1380
          },
          {
            "lineno": 1383
          },
          {
            "lineno": 1384
          },
          {
            "lineno": 1385
          },
          {
            "lineno": 1386
          },
          {
            "lineno": 1389
          },
          {
            "lineno": 1390
          },
          {
            "lineno": 1391
          },
          {
            "lineno": 1401
          },
          {
            "lineno": 1410
          },
          {
            "lineno": 1418
          },
          {
            "lineno": 1419
          },
          {
            "lineno": 1420
          },
          {
            "lineno": 1423
          },
          {
            "lineno": 1424
          },
          {
            "lineno": 1425
          },
          {
            "lineno": 1428
          },
          {
            "lineno": 1430
          },
          {
            "lineno": 1433
          },
          {
            "lineno": 1434
          },
          {
            "lineno": 1435
          },
          {
            "lineno": 1436
          },
          {
            "lineno": 1441
          },
          {
            "lineno": 1442
          },
          {
            "lineno": 1445
          },
          {
            "lineno": 1446
          },
          {
            "lineno": 1447
          },
          {
            "lineno": 1448
          },
          {
            "lineno": 1449
          },
          {
            "lineno": 1454
          },
          {
            "lineno": 1455
          },
          {
            "lineno": 1459
          },
          {
            "lineno": 1460
          }
        ],
        "missing": 527,
        "seen": 940,
        "seen_lines": [
          {
            "s": 9,
            "e": 17
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 10,
            "e": 10
          },
          {
            "s": 11,
            "e": 11
          },
          {
            "s": 12,
            "e": 12
          },
          {
            "s": 13,
            "e": 13
          },
          {
            "s": 14,
            "e": 14
          },
          {
            "s": 16,
            "e": 16
          },
          {
            "s": 17,
            "e": 17
          },
          {
            "s": 19,
            "e": 20
          },
          {
            "s": 44,
            "e": 105
          },
          {
            "s": 105,
            "e": 105
          },
          {
            "s": 105,
            "e": 105
          },
          {
            "s": 105,
            "e": 105
          },
          {
            "s": 106,
            "e": 107
          },
          {
            "s": 113,
            "e": 113
          },
          {
            "s": 123,
            "e": 156
          },
          {
            "s": 163,
            "e": 278
          },
          {
            "s": 288,
            "e": 343
          },
          {
            "s": 359,
            "e": 419
          },
          {
            "s": 444,
            "e": 474
          },
          {
            "s": 485,
            "e": 534
          },
          {
            "s": 548,
            "e": 563
          },
          {
            "s": 570,
            "e": 580
          },
          {
            "s": 580,
            "e": 582
          },
          {
            "s": 591,
            "e": 593
          },
          {
            "s": 604,
            "e": 616
          },
          {
            "s": 625,
            "e": 644
          },
          {
            "s": 653,
            "e": 655
          },
          {
            "s": 665,
            "e": 681
          },
          {
            "s": 691,
            "e": 716
          },
          {
            "s": 733,
            "e": 789
          },
          {
            "s": 789,
            "e": 791
          },
          {
            "s": 809,
            "e": 851
          },
          {
            "s": 859,
            "e": 861
          },
          {
            "s": 870,
            "e": 885
          },
          {
            "s": 896,
            "e": 899
          },
          {
            "s": 914,
            "e": 916
          },
          {
            "s": 923,
            "e": 923
          },
          {
            "s": 930,
            "e": 930
          },
          {
            "s": 937,
            "e": 937
          },
          {
            "s": 944,
            "e": 944
          },
          {
            "s": 951,
            "e": 951
          },
          {
            "s": 963,
            "e": 987
          },
          {
            "s": 998,
            "e": 1030
          },
          {
            "s": 1051,
            "e": 1074
          },
          {
            "s": 1087,
            "e": 1098
          },
          {
            "s": 1110,
            "e": 1140
          },
          {
            "s": 1151,
            "e": 1162
          },
          {
            "s": 1151,
            "e": 1162
          },
          {
            "s": 1173,
            "e": 1177
          },
          {
            "s": 1173,
            "e": 1177
          },
          {
            "s": 1184,
            "e": 1195
          },
          {
            "s": 1184,
            "e": 1195
          },
          {
            "s": 1201,
            "e": 1211
          },
          {
            "s": 1201,
            "e": 1211
          },
          {
            "s": 1213,
            "e": 1213
          },
          {
            "s": 1219,
            "e": 1219
          },
          {
            "s": 1225,
            "e": 1249
          },
          {
            "s": 1249,
            "e": 1268
          },
          {
            "s": 1268,
            "e": 1300
          },
          {
            "s": 1300,
            "e": 1315
          },
          {
            "s": 1315,
            "e": 1328
          },
          {
            "s": 1328,
            "e": 1347
          },
          {
            "s": 1347,
            "e": 1399
          },
          {
            "s": 1399,
            "e": 1408
          },
          {
            "s": 1408,
            "e": 1417
          },
          {
            "s": 1417,
            "e": 1440
          },
          {
            "s": 1440,
            "e": 1453
          },
          {
            "s": 1453,
            "e": 1458
          },
          {
            "s": 1458,
            "e": 1467
          },
          {
            "s": 1467,
            "e": 1467
          }
        ],
        "total": 1467,
        "coverage": {
          "45": {
            "partial": false,
            "source": "  if(!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 33
              },
              {
                "startCol": 6,
                "endCol": 33
              },
              {
                "startCol": 23,
                "endCol": 32
              },
              {
                "startCol": 35,
                "endCol": 89
              }
            ]
          },
          "47": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "  this.db = db;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 15
              }
            ]
          },
          "51": {
            "partial": false,
            "source": "  if(typeof Stream == 'function') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 18
              },
              {
                "startCol": 12,
                "endCol": 18
              }
            ]
          },
          "52": {
            "partial": false,
            "source": "    Stream.call(this);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 21
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "    Stream.Stream.call(this);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 28
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "  if(options == null) options = {};",
            "missing": [
              {
                "startCol": 5,
                "endCol": 12
              },
              {
                "startCol": 22,
                "endCol": 35
              }
            ]
          },
          "61": {
            "partial": false,
            "source": "  if(mode == null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 9
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "    mode = filename;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "    filename = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "64": {
            "partial": false,
            "source": "  } else if(typeof mode == 'object') {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 23
              },
              {
                "startCol": 19,
                "endCol": 23
              }
            ]
          },
          "65": {
            "partial": false,
            "source": "    options = mode;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 19
              }
            ]
          },
          "66": {
            "partial": false,
            "source": "    mode = filename;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "67": {
            "partial": false,
            "source": "    filename = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "  if(id instanceof ObjectID && (typeof filename == 'string' || filename == null)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 7
              },
              {
                "startCol": 19,
                "endCol": 27
              },
              {
                "startCol": 31,
                "endCol": 80
              },
              {
                "startCol": 32,
                "endCol": 47
              },
              {
                "startCol": 39,
                "endCol": 47
              },
              {
                "startCol": 63,
                "endCol": 71
              }
            ]
          },
          "72": {
            "partial": false,
            "source": "    this.referenceBy = 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              }
            ]
          },
          "73": {
            "partial": false,
            "source": "    this.fileId = id;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 21
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "    this.filename = filename;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "75": {
            "partial": false,
            "source": "  } else if(!(id instanceof ObjectID) && typeof id == 'string' && mode.indexOf(\"w\") != null) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 37
              },
              {
                "startCol": 13,
                "endCol": 37
              },
              {
                "startCol": 14,
                "endCol": 16
              },
              {
                "startCol": 28,
                "endCol": 36
              },
              {
                "startCol": 41,
                "endCol": 50
              },
              {
                "startCol": 48,
                "endCol": 50
              },
              {
                "startCol": 66,
                "endCol": 83
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "    this.referenceBy = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "    this.fileId = new ObjectID();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 33
              }
            ]
          },
          "78": {
            "partial": false,
            "source": "    this.filename = id;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "  } else if(!(id instanceof ObjectID) && typeof id == 'string' && mode.indexOf(\"r\") != null) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 37
              },
              {
                "startCol": 13,
                "endCol": 37
              },
              {
                "startCol": 14,
                "endCol": 16
              },
              {
                "startCol": 28,
                "endCol": 36
              },
              {
                "startCol": 41,
                "endCol": 50
              },
              {
                "startCol": 48,
                "endCol": 50
              },
              {
                "startCol": 66,
                "endCol": 83
              }
            ]
          },
          "80": {
            "partial": false,
            "source": "    this.referenceBy = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "    this.filename = filename;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "83": {
            "partial": false,
            "source": "    this.referenceBy = 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              }
            ]
          },
          "84": {
            "partial": false,
            "source": "    this.fileId = id;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 21
              }
            ]
          },
          "85": {
            "partial": false,
            "source": "    this.filename = filename;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "89": {
            "partial": false,
            "source": "  this.mode = mode == null ? \"r\" : mode;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 40
              },
              {
                "startCol": 14,
                "endCol": 18
              },
              {
                "startCol": 29,
                "endCol": 32
              },
              {
                "startCol": 35,
                "endCol": 39
              }
            ]
          },
          "90": {
            "partial": false,
            "source": "  this.options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              },
              {
                "startCol": 17,
                "endCol": 24
              },
              {
                "startCol": 35,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 47
              }
            ]
          },
          "91": {
            "partial": false,
            "source": "  this.root = this.options['root'] == null ? exports.GridStore.DEFAULT_ROOT_COLLECTION : this.options['root'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 110
              },
              {
                "startCol": 14,
                "endCol": 42
              },
              {
                "startCol": 45,
                "endCol": 86
              },
              {
                "startCol": 89,
                "endCol": 109
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "  this.position = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "  this.internalChunkSize = this.options['chunkSize'] == null ? Chunk.DEFAULT_CHUNK_SIZE : this.options['chunkSize'];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 116
              },
              {
                "startCol": 27,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 87
              },
              {
                "startCol": 90,
                "endCol": 115
              }
            ]
          },
          "96": {
            "partial": false,
            "source": "  this.previousChunkSize = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 29
              }
            ]
          },
          "109": {
            "partial": false,
            "source": "  GridStore.prototype = { __proto__: Stream.Stream.prototype }",
            "missing": [
              {}
            ]
          },
          "110": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "124": {
            "partial": false,
            "source": "  if( this.mode != \"w\" && this.mode != \"w+\" && this.mode != \"r\"){",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              },
              {
                "startCol": 26,
                "endCol": 43
              },
              {
                "startCol": 47,
                "endCol": 63
              }
            ]
          },
          "125": {
            "partial": false,
            "source": "    callback(new Error(\"Illegal mode \" + this.mode), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 58
              },
              {
                "startCol": 23,
                "endCol": 50
              }
            ]
          },
          "126": {
            "partial": false,
            "source": "    return;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 11
              }
            ]
          },
          "129": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "131": {
            "partial": false,
            "source": "  if((self.mode == \"w\" || self.mode == \"w+\") && self.db.serverConfig.primary != null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 44
              },
              {
                "startCol": 6,
                "endCol": 22
              },
              {
                "startCol": 26,
                "endCol": 43
              },
              {
                "startCol": 48,
                "endCol": 84
              }
            ]
          },
          "133": {
            "partial": false,
            "source": "    self.collection(function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "134": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {
                "startCol": 14,
                "endCol": 35
              },
              {
                "startCol": 21,
                "endCol": 34
              },
              {},
              {
                "startCol": 9,
                "endCol": 12
              }
            ]
          },
          "135": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "136": {
            "partial": false,
            "source": "      // Put index on filename",
            "missing": [
              {}
            ]
          },
          "137": {
            "partial": false,
            "source": "      collection.ensureIndex([['filename', 1]], function(err, index) {",
            "missing": [
              {}
            ]
          },
          "138": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 37
              },
              {
                "startCol": 23,
                "endCol": 36
              }
            ]
          },
          "139": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "140": {
            "partial": false,
            "source": "        // Get chunk collection",
            "missing": [
              {}
            ]
          },
          "141": {
            "partial": false,
            "source": "        self.chunkCollection(function(err, chunkCollection) {",
            "missing": [
              {}
            ]
          },
          "142": {
            "partial": false,
            "source": "          if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 25,
                "endCol": 38
              },
              {
                "startCol": 18,
                "endCol": 39
              },
              {
                "startCol": 13,
                "endCol": 16
              }
            ]
          },
          "143": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "144": {
            "partial": false,
            "source": "          // Ensure index on chunk collection",
            "missing": [
              {}
            ]
          },
          "145": {
            "partial": false,
            "source": "          chunkCollection.ensureIndex([['files_id', 1], ['n', 1]], function(err, index) {",
            "missing": [
              {}
            ]
          },
          "146": {
            "partial": false,
            "source": "            if(err) return callback(err);",
            "missing": [
              {
                "startCol": 15,
                "endCol": 18
              },
              {
                "startCol": 20,
                "endCol": 41
              },
              {},
              {
                "startCol": 27,
                "endCol": 40
              }
            ]
          },
          "147": {
            "partial": false,
            "source": "            _open(self, callback);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 34
              },
              {}
            ]
          },
          "148": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "149": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "150": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "151": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "154": {
            "partial": false,
            "source": "    _open(self, callback);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              }
            ]
          },
          "164": {
            "partial": false,
            "source": "  self.collection(function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "165": {
            "partial": false,
            "source": "    if(err!==null) {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              }
            ]
          },
          "166": {
            "partial": false,
            "source": "      callback(new Error(\"at collection: \"+err), null);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 54
              },
              {},
              {
                "startCol": 25,
                "endCol": 46
              },
              {
                "startCol": 43,
                "endCol": 46
              }
            ]
          },
          "167": {
            "partial": false,
            "source": "      return;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 13
              }
            ]
          },
          "168": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "169": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "170": {
            "partial": false,
            "source": "    // Create the query",
            "missing": [
              {}
            ]
          },
          "171": {
            "partial": false,
            "source": "    var query = self.referenceBy == REFERENCE_BY_ID ? {_id:self.fileId} : {filename:self.filename};",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 99
              },
              {
                "startCol": 16,
                "endCol": 51
              },
              {
                "startCol": 36,
                "endCol": 51
              },
              {
                "startCol": 54,
                "endCol": 71
              },
              {
                "startCol": 74,
                "endCol": 98
              }
            ]
          },
          "172": {
            "partial": false,
            "source": "    query = null == self.fileId && this.filename == null ? null : query;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 72
              },
              {
                "startCol": 12,
                "endCol": 31
              },
              {
                "startCol": 35,
                "endCol": 56
              },
              {},
              {
                "startCol": 59,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 71
              }
            ]
          },
          "173": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "174": {
            "partial": false,
            "source": "    // Fetch the chunks",
            "missing": [
              {}
            ]
          },
          "175": {
            "partial": false,
            "source": "    if(query != null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 12
              },
              {}
            ]
          },
          "176": {
            "partial": false,
            "source": "      collection.find(query, function(err, cursor) {",
            "missing": [
              {}
            ]
          },
          "177": {
            "partial": false,
            "source": "        if(err) return error(err);",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 34
              },
              {
                "startCol": 23,
                "endCol": 33
              }
            ]
          },
          "178": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "179": {
            "partial": false,
            "source": "        // Fetch the file",
            "missing": [
              {}
            ]
          },
          "180": {
            "partial": false,
            "source": "        cursor.nextObject(function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "181": {
            "partial": false,
            "source": "          if(err) return error(err);",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 16
              },
              {
                "startCol": 18,
                "endCol": 36
              },
              {
                "startCol": 25,
                "endCol": 35
              }
            ]
          },
          "182": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "183": {
            "partial": false,
            "source": "          // Check if the collection for the files exists otherwise prepare the new one",
            "missing": [
              {}
            ]
          },
          "184": {
            "partial": false,
            "source": "          if(doc != null) {",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 24
              }
            ]
          },
          "185": {
            "partial": false,
            "source": "            self.fileId = doc._id;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 34
              }
            ]
          },
          "186": {
            "partial": false,
            "source": "            self.filename = doc.filename;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 41
              },
              {}
            ]
          },
          "187": {
            "partial": false,
            "source": "            self.contentType = doc.contentType;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 47
              }
            ]
          },
          "188": {
            "partial": false,
            "source": "            self.internalChunkSize = doc.chunkSize;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 51
              }
            ]
          },
          "189": {
            "partial": false,
            "source": "            self.uploadDate = doc.uploadDate;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 45
              },
              {}
            ]
          },
          "190": {
            "partial": false,
            "source": "            self.aliases = doc.aliases;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 39
              }
            ]
          },
          "191": {
            "partial": false,
            "source": "            self.length = doc.length;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 37
              }
            ]
          },
          "192": {
            "partial": false,
            "source": "            self.metadata = doc.metadata;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 41
              }
            ]
          },
          "193": {
            "partial": false,
            "source": "            self.internalMd5 = doc.md5;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 39
              }
            ]
          },
          "194": {
            "partial": false,
            "source": "          } else if (self.mode != 'r') {",
            "missing": [
              {},
              {
                "startCol": 21,
                "endCol": 37
              }
            ]
          },
          "195": {
            "partial": false,
            "source": "            self.fileId = self.fileId == null ? new ObjectID() : self.fileId;",
            "missing": [
              {},
              {
                "startCol": 26,
                "endCol": 45
              },
              {
                "startCol": 65,
                "endCol": 76
              },
              {
                "startCol": 48,
                "endCol": 62
              },
              {
                "startCol": 12,
                "endCol": 77
              }
            ]
          },
          "196": {
            "partial": false,
            "source": "            self.contentType = exports.GridStore.DEFAULT_CONTENT_TYPE;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 70
              }
            ]
          },
          "197": {
            "partial": false,
            "source": "            self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;",
            "missing": [
              {},
              {
                "startCol": 97,
                "endCol": 119
              },
              {
                "startCol": 70,
                "endCol": 94
              },
              {
                "startCol": 12,
                "endCol": 120
              },
              {
                "startCol": 37,
                "endCol": 67
              }
            ]
          },
          "198": {
            "partial": false,
            "source": "            self.length = 0;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 28
              }
            ]
          },
          "199": {
            "partial": false,
            "source": "          } else {",
            "missing": [
              {}
            ]
          },
          "200": {
            "partial": false,
            "source": "            self.length = 0;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 28
              }
            ]
          },
          "201": {
            "partial": false,
            "source": "            return error(new Error((self.referenceBy == REFERENCE_BY_ID ? self.fileId.toHexString() : self.filename) + \" does not exist\", self));",
            "missing": [
              {
                "startCol": 35,
                "endCol": 136
              },
              {},
              {
                "startCol": 19,
                "endCol": 144
              },
              {
                "startCol": 56,
                "endCol": 71
              },
              {
                "startCol": 12,
                "endCol": 145
              },
              {
                "startCol": 36,
                "endCol": 71
              },
              {
                "startCol": 74,
                "endCol": 99
              },
              {
                "startCol": 102,
                "endCol": 115
              }
            ]
          },
          "202": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "203": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "204": {
            "partial": false,
            "source": "          // Process the mode of the object",
            "missing": [
              {}
            ]
          },
          "205": {
            "partial": false,
            "source": "          if(self.mode == \"r\") {",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 29
              }
            ]
          },
          "206": {
            "partial": false,
            "source": "            nthChunk(self, 0, function(err, chunk) {",
            "missing": [
              {}
            ]
          },
          "207": {
            "partial": false,
            "source": "              if(err) return error(err);",
            "missing": [
              {
                "startCol": 17,
                "endCol": 20
              },
              {
                "startCol": 22,
                "endCol": 40
              },
              {},
              {
                "startCol": 29,
                "endCol": 39
              }
            ]
          },
          "208": {
            "partial": false,
            "source": "              self.currentChunk = chunk;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 40
              }
            ]
          },
          "209": {
            "partial": false,
            "source": "              self.position = 0;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 32
              },
              {}
            ]
          },
          "210": {
            "partial": false,
            "source": "              callback(null, self);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "211": {
            "partial": false,
            "source": "            });",
            "missing": [
              {}
            ]
          },
          "212": {
            "partial": false,
            "source": "          } else if(self.mode == \"w\") {",
            "missing": [
              {
                "startCol": 20,
                "endCol": 36
              },
              {}
            ]
          },
          "213": {
            "partial": false,
            "source": "            // Delete any existing chunks",
            "missing": [
              {}
            ]
          },
          "214": {
            "partial": false,
            "source": "            deleteChunks(self, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "215": {
            "partial": false,
            "source": "              if(err) return error(err);",
            "missing": [
              {
                "startCol": 17,
                "endCol": 20
              },
              {
                "startCol": 22,
                "endCol": 40
              },
              {},
              {
                "startCol": 29,
                "endCol": 39
              }
            ]
          },
          "216": {
            "partial": false,
            "source": "              self.currentChunk = new Chunk(self, {'n':0});",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 59
              }
            ]
          },
          "217": {
            "partial": false,
            "source": "              self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 120
              },
              {
                "startCol": 33,
                "endCol": 69
              },
              {
                "startCol": 72,
                "endCol": 88
              },
              {
                "startCol": 91,
                "endCol": 119
              }
            ]
          },
          "218": {
            "partial": false,
            "source": "              self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];",
            "missing": [
              {
                "startCol": 14,
                "endCol": 128
              },
              {},
              {
                "startCol": 101,
                "endCol": 127
              },
              {
                "startCol": 76,
                "endCol": 98
              },
              {
                "startCol": 39,
                "endCol": 73
              }
            ]
          },
          "219": {
            "partial": false,
            "source": "              self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];",
            "missing": [
              {
                "startCol": 14,
                "endCol": 106
              },
              {
                "startCol": 30,
                "endCol": 62
              },
              {
                "startCol": 65,
                "endCol": 78
              },
              {},
              {
                "startCol": 81,
                "endCol": 105
              }
            ]
          },
          "220": {
            "partial": false,
            "source": "              self.position = 0;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 32
              }
            ]
          },
          "221": {
            "partial": false,
            "source": "              callback(null, self);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 35
              }
            ]
          },
          "222": {
            "partial": false,
            "source": "            });",
            "missing": [
              {}
            ]
          },
          "223": {
            "partial": false,
            "source": "          } else if(self.mode == \"w+\") {",
            "missing": [
              {},
              {
                "startCol": 20,
                "endCol": 37
              }
            ]
          },
          "224": {
            "partial": false,
            "source": "            nthChunk(self, lastChunkNumber(self), function(err, chunk) {",
            "missing": [
              {},
              {
                "startCol": 27,
                "endCol": 48
              }
            ]
          },
          "225": {
            "partial": false,
            "source": "              if(err) return error(err);",
            "missing": [
              {},
              {
                "startCol": 29,
                "endCol": 39
              },
              {
                "startCol": 17,
                "endCol": 20
              },
              {
                "startCol": 22,
                "endCol": 40
              }
            ]
          },
          "226": {
            "partial": false,
            "source": "              // Set the current chunk",
            "missing": [
              {}
            ]
          },
          "227": {
            "partial": false,
            "source": "              self.currentChunk = chunk == null ? new Chunk(self, {'n':0}) : chunk;",
            "missing": [
              {
                "startCol": 14,
                "endCol": 83
              },
              {},
              {
                "startCol": 34,
                "endCol": 39
              },
              {
                "startCol": 77,
                "endCol": 82
              },
              {
                "startCol": 50,
                "endCol": 74
              }
            ]
          },
          "228": {
            "partial": false,
            "source": "              self.currentChunk.position = self.currentChunk.data.length();",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 75
              },
              {
                "startCol": 43,
                "endCol": 74
              }
            ]
          },
          "229": {
            "partial": false,
            "source": "              self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];",
            "missing": [
              {},
              {
                "startCol": 30,
                "endCol": 62
              },
              {
                "startCol": 81,
                "endCol": 105
              },
              {
                "startCol": 65,
                "endCol": 78
              },
              {
                "startCol": 14,
                "endCol": 106
              }
            ]
          },
          "230": {
            "partial": false,
            "source": "              self.position = self.length;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 42
              }
            ]
          },
          "231": {
            "partial": false,
            "source": "              callback(null, self);",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "232": {
            "partial": false,
            "source": "            });",
            "missing": [
              {}
            ]
          },
          "233": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "234": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "235": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "236": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "237": {
            "partial": false,
            "source": "      // Write only mode",
            "missing": [
              {}
            ]
          },
          "238": {
            "partial": false,
            "source": "      self.fileId = null == self.fileId ? new ObjectID() : self.fileId;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 71
              },
              {
                "startCol": 20,
                "endCol": 39
              },
              {
                "startCol": 42,
                "endCol": 56
              },
              {},
              {
                "startCol": 59,
                "endCol": 70
              }
            ]
          },
          "239": {
            "partial": false,
            "source": "      self.contentType = exports.GridStore.DEFAULT_CONTENT_TYPE;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 64
              },
              {}
            ]
          },
          "240": {
            "partial": false,
            "source": "      self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 114
              },
              {
                "startCol": 31,
                "endCol": 61
              },
              {
                "startCol": 64,
                "endCol": 88
              },
              {},
              {
                "startCol": 91,
                "endCol": 113
              }
            ]
          },
          "241": {
            "partial": false,
            "source": "      self.length = 0;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "242": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "243": {
            "partial": false,
            "source": "      self.chunkCollection(function(err, collection2) {",
            "missing": [
              {}
            ]
          },
          "244": {
            "partial": false,
            "source": "        if(err) return error(err);",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 34
              },
              {
                "startCol": 23,
                "endCol": 33
              }
            ]
          },
          "245": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "246": {
            "partial": false,
            "source": "        // No file exists set up write mode",
            "missing": [
              {}
            ]
          },
          "247": {
            "partial": false,
            "source": "        if(self.mode == \"w\") {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 27
              }
            ]
          },
          "248": {
            "partial": false,
            "source": "          // Delete any existing chunks",
            "missing": [
              {}
            ]
          },
          "249": {
            "partial": false,
            "source": "          deleteChunks(self, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "250": {
            "partial": false,
            "source": "            if(err) return error(err);",
            "missing": [
              {
                "startCol": 15,
                "endCol": 18
              },
              {
                "startCol": 27,
                "endCol": 37
              },
              {},
              {
                "startCol": 20,
                "endCol": 38
              }
            ]
          },
          "251": {
            "partial": false,
            "source": "            self.currentChunk = new Chunk(self, {'n':0});",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 57
              }
            ]
          },
          "252": {
            "partial": false,
            "source": "            self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];",
            "missing": [
              {
                "startCol": 12,
                "endCol": 118
              },
              {},
              {
                "startCol": 31,
                "endCol": 67
              },
              {
                "startCol": 89,
                "endCol": 117
              },
              {
                "startCol": 70,
                "endCol": 86
              }
            ]
          },
          "253": {
            "partial": false,
            "source": "            self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];",
            "missing": [
              {
                "startCol": 74,
                "endCol": 96
              },
              {},
              {
                "startCol": 12,
                "endCol": 126
              },
              {
                "startCol": 99,
                "endCol": 125
              },
              {
                "startCol": 37,
                "endCol": 71
              }
            ]
          },
          "254": {
            "partial": false,
            "source": "            self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];",
            "missing": [
              {
                "startCol": 12,
                "endCol": 104
              },
              {},
              {
                "startCol": 28,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 76
              },
              {
                "startCol": 79,
                "endCol": 103
              }
            ]
          },
          "255": {
            "partial": false,
            "source": "            self.position = 0;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 30
              }
            ]
          },
          "256": {
            "partial": false,
            "source": "            callback(null, self);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 32
              }
            ]
          },
          "257": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "258": {
            "partial": false,
            "source": "        } else if(self.mode == \"w+\") {",
            "missing": [
              {},
              {
                "startCol": 18,
                "endCol": 35
              }
            ]
          },
          "259": {
            "partial": false,
            "source": "          nthChunk(self, lastChunkNumber(self), function(err, chunk) {",
            "missing": [
              {},
              {
                "startCol": 25,
                "endCol": 46
              }
            ]
          },
          "260": {
            "partial": false,
            "source": "            if(err) return error(err);",
            "missing": [
              {},
              {
                "startCol": 20,
                "endCol": 38
              },
              {
                "startCol": 15,
                "endCol": 18
              },
              {
                "startCol": 27,
                "endCol": 37
              }
            ]
          },
          "261": {
            "partial": false,
            "source": "            // Set the current chunk",
            "missing": [
              {}
            ]
          },
          "262": {
            "partial": false,
            "source": "            self.currentChunk = chunk == null ? new Chunk(self, {'n':0}) : chunk;",
            "missing": [
              {
                "startCol": 12,
                "endCol": 81
              },
              {
                "startCol": 32,
                "endCol": 37
              },
              {},
              {
                "startCol": 48,
                "endCol": 72
              },
              {
                "startCol": 75,
                "endCol": 80
              }
            ]
          },
          "263": {
            "partial": false,
            "source": "            self.currentChunk.position = self.currentChunk.data.length();",
            "missing": [
              {
                "startCol": 12,
                "endCol": 73
              },
              {},
              {
                "startCol": 41,
                "endCol": 72
              }
            ]
          },
          "264": {
            "partial": false,
            "source": "            self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];",
            "missing": [
              {
                "startCol": 79,
                "endCol": 103
              },
              {},
              {
                "startCol": 12,
                "endCol": 104
              },
              {
                "startCol": 63,
                "endCol": 76
              },
              {
                "startCol": 28,
                "endCol": 60
              }
            ]
          },
          "265": {
            "partial": false,
            "source": "            self.position = self.length;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 40
              }
            ]
          },
          "266": {
            "partial": false,
            "source": "            callback(null, self);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 32
              }
            ]
          },
          "267": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "268": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "269": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "270": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "271": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "275": {
            "partial": false,
            "source": "    if(error.err) return;",
            "missing": [
              {
                "startCol": 18,
                "endCol": 25
              }
            ]
          },
          "276": {
            "partial": false,
            "source": "    callback(error.err = err);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "289": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "290": {
            "partial": false,
            "source": "  if (typeof file === 'string') {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 17
              },
              {
                "startCol": 13,
                "endCol": 17
              }
            ]
          },
          "291": {
            "partial": false,
            "source": "    fs.open(file, 'r', 0666, function (err, fd) {",
            "missing": [
              {}
            ]
          },
          "292": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 14,
                "endCol": 35
              },
              {
                "startCol": 21,
                "endCol": 34
              }
            ]
          },
          "293": {
            "partial": false,
            "source": "      self.writeFile(fd, callback);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 34
              }
            ]
          },
          "294": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "295": {
            "partial": false,
            "source": "    return;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 11
              }
            ]
          },
          "298": {
            "partial": false,
            "source": "  self.open(function (err, self) {",
            "missing": [
              {}
            ]
          },
          "299": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 19,
                "endCol": 32
              },
              {},
              {
                "startCol": 12,
                "endCol": 33
              }
            ]
          },
          "300": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "301": {
            "partial": false,
            "source": "    fs.fstat(file, function (err, stats) {",
            "missing": [
              {}
            ]
          },
          "302": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              },
              {},
              {
                "startCol": 21,
                "endCol": 34
              },
              {
                "startCol": 14,
                "endCol": 35
              }
            ]
          },
          "303": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "304": {
            "partial": false,
            "source": "      var offset = 0;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 21
              }
            ]
          },
          "305": {
            "partial": false,
            "source": "      var index = 0;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 20
              }
            ]
          },
          "306": {
            "partial": false,
            "source": "      var numberOfChunksLeft = Math.min(stats.size / self.chunkSize);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 69
              },
              {
                "startCol": 31,
                "endCol": 68
              },
              {},
              {
                "startCol": 40,
                "endCol": 67
              }
            ]
          },
          "307": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "308": {
            "partial": false,
            "source": "      // Write a chunk",
            "missing": [
              {}
            ]
          },
          "309": {
            "partial": false,
            "source": "      var writeChunk = function() {",
            "missing": [
              {}
            ]
          },
          "310": {
            "partial": false,
            "source": "        fs.read(file, self.chunkSize, offset, 'binary', function(err, data, bytesRead) {",
            "missing": [
              {}
            ]
          },
          "311": {
            "partial": false,
            "source": "          if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 16
              },
              {
                "startCol": 18,
                "endCol": 39
              },
              {
                "startCol": 25,
                "endCol": 38
              }
            ]
          },
          "312": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "313": {
            "partial": false,
            "source": "          offset = offset + bytesRead;",
            "missing": [
              {
                "startCol": 19,
                "endCol": 37
              },
              {},
              {
                "startCol": 28,
                "endCol": 37
              },
              {
                "startCol": 10,
                "endCol": 38
              }
            ]
          },
          "314": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "315": {
            "partial": false,
            "source": "          // Create a new chunk for the data",
            "missing": [
              {}
            ]
          },
          "316": {
            "partial": false,
            "source": "          var chunk = new Chunk(self, {n:index++});",
            "missing": [
              {
                "startCol": 41,
                "endCol": 48
              },
              {},
              {
                "startCol": 10,
                "endCol": 51
              }
            ]
          },
          "317": {
            "partial": false,
            "source": "          chunk.write(data, function(err, chunk) {",
            "missing": [
              {}
            ]
          },
          "318": {
            "partial": false,
            "source": "            if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 18
              },
              {
                "startCol": 20,
                "endCol": 41
              },
              {
                "startCol": 27,
                "endCol": 40
              }
            ]
          },
          "319": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "320": {
            "partial": false,
            "source": "            chunk.save(function(err, result) {",
            "missing": [
              {}
            ]
          },
          "321": {
            "partial": false,
            "source": "              if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 43
              },
              {
                "startCol": 17,
                "endCol": 20
              },
              {
                "startCol": 29,
                "endCol": 42
              }
            ]
          },
          "322": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "323": {
            "partial": false,
            "source": "              self.position = self.position + data.length;",
            "missing": [
              {},
              {
                "startCol": 30,
                "endCol": 57
              },
              {
                "startCol": 14,
                "endCol": 58
              }
            ]
          },
          "324": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "325": {
            "partial": false,
            "source": "              // Point to current chunk",
            "missing": [
              {}
            ]
          },
          "326": {
            "partial": false,
            "source": "              self.currentChunk = chunk;",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 40
              }
            ]
          },
          "327": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "328": {
            "partial": false,
            "source": "              if(offset >= stats.size) {",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 23
              }
            ]
          },
          "329": {
            "partial": false,
            "source": "                fs.close(file);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 30
              }
            ]
          },
          "330": {
            "partial": false,
            "source": "                self.close(callback);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 36
              }
            ]
          },
          "331": {
            "partial": false,
            "source": "              } else {",
            "missing": [
              {}
            ]
          },
          "332": {
            "partial": false,
            "source": "                return process.nextTick(writeChunk);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 52
              },
              {
                "startCol": 23,
                "endCol": 51
              }
            ]
          },
          "333": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "334": {
            "partial": false,
            "source": "            });",
            "missing": [
              {}
            ]
          },
          "335": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "336": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "337": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "338": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "339": {
            "partial": false,
            "source": "      // Process the first write",
            "missing": [
              {}
            ]
          },
          "340": {
            "partial": false,
            "source": "      process.nextTick(writeChunk);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 35
              }
            ]
          },
          "341": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "342": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "360": {
            "partial": false,
            "source": "  if(typeof close === \"function\") { callback = close; close = null; }",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 12,
                "endCol": 17
              },
              {
                "startCol": 36,
                "endCol": 53
              },
              {
                "startCol": 54,
                "endCol": 67
              }
            ]
          },
          "361": {
            "partial": false,
            "source": "  var finalClose = (close == null) ? false : close;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              },
              {
                "startCol": 19,
                "endCol": 34
              },
              {
                "startCol": 20,
                "endCol": 25
              },
              {
                "startCol": 37,
                "endCol": 42
              },
              {
                "startCol": 45,
                "endCol": 50
              }
            ]
          },
          "363": {
            "partial": false,
            "source": "  if(self.mode[0] != \"w\") {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 24
              }
            ]
          },
          "364": {
            "partial": false,
            "source": "    callback(new Error((self.referenceBy == REFERENCE_BY_ID ? self.toHexString() : self.filename) + \" not opened for writing\"), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 133
              },
              {
                "startCol": 23,
                "endCol": 125
              },
              {
                "startCol": 24,
                "endCol": 59
              },
              {
                "startCol": 44,
                "endCol": 59
              },
              {
                "startCol": 62,
                "endCol": 80
              },
              {
                "startCol": 83,
                "endCol": 96
              }
            ]
          },
          "366": {
            "partial": false,
            "source": "    if(self.currentChunk.position + buffer.length >= self.chunkSize) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 49
              }
            ]
          },
          "369": {
            "partial": false,
            "source": "      var previousChunkNumber = self.currentChunk.chunkNumber;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 62
              }
            ]
          },
          "370": {
            "partial": false,
            "source": "      var leftOverDataSize = self.chunkSize - self.currentChunk.position;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 73
              },
              {
                "startCol": 29,
                "endCol": 72
              }
            ]
          },
          "371": {
            "partial": false,
            "source": "      var firstChunkData = buffer.slice(0, leftOverDataSize);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 61
              },
              {
                "startCol": 27,
                "endCol": 60
              }
            ]
          },
          "372": {
            "partial": false,
            "source": "      var leftOverData = buffer.slice(leftOverDataSize);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 56
              },
              {
                "startCol": 25,
                "endCol": 55
              }
            ]
          },
          "374": {
            "partial": false,
            "source": "      var chunksToWrite = [self.currentChunk.write(firstChunkData)];",
            "missing": [
              {
                "startCol": 6,
                "endCol": 68
              },
              {
                "startCol": 27,
                "endCol": 66
              }
            ]
          },
          "376": {
            "partial": false,
            "source": "      while(leftOverData.length >= self.chunkSize) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 49
              }
            ]
          },
          "378": {
            "partial": false,
            "source": "        var newChunk = new Chunk(self, {'n': (previousChunkNumber + 1)});",
            "missing": [
              {
                "startCol": 8,
                "endCol": 73
              },
              {
                "startCol": 45,
                "endCol": 70
              },
              {
                "startCol": 46,
                "endCol": 65
              }
            ]
          },
          "379": {
            "partial": false,
            "source": "        var firstChunkData = leftOverData.slice(0, self.chunkSize);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 67
              },
              {
                "startCol": 29,
                "endCol": 66
              }
            ]
          },
          "380": {
            "partial": false,
            "source": "        leftOverData = leftOverData.slice(self.chunkSize);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 58
              },
              {
                "startCol": 23,
                "endCol": 57
              }
            ]
          },
          "382": {
            "partial": false,
            "source": "        previousChunkNumber = previousChunkNumber + 1;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 54
              },
              {
                "startCol": 30,
                "endCol": 49
              }
            ]
          },
          "384": {
            "partial": false,
            "source": "        newChunk.write(firstChunkData);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 38
              }
            ]
          },
          "386": {
            "partial": false,
            "source": "        chunksToWrite.push(newChunk);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 36
              }
            ]
          },
          "390": {
            "partial": false,
            "source": "      self.currentChunk = new Chunk(self, {'n': (previousChunkNumber + 1)});",
            "missing": [
              {
                "startCol": 6,
                "endCol": 76
              },
              {
                "startCol": 48,
                "endCol": 73
              },
              {
                "startCol": 49,
                "endCol": 68
              }
            ]
          },
          "392": {
            "partial": false,
            "source": "      if(leftOverData.length > 0) self.currentChunk.write(leftOverData);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 32
              },
              {
                "startCol": 34,
                "endCol": 71
              }
            ]
          },
          "395": {
            "partial": false,
            "source": "      self.position = self.position + buffer.length;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              },
              {
                "startCol": 22,
                "endCol": 51
              }
            ]
          },
          "397": {
            "partial": false,
            "source": "      var numberOfChunksToWrite = chunksToWrite.length;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 55
              }
            ]
          },
          "399": {
            "partial": false,
            "source": "      for(var i = 0; i < chunksToWrite.length; i++) {",
            "missing": [
              {
                "startCol": 21,
                "endCol": 22
              },
              {
                "startCol": 47,
                "endCol": 50
              }
            ]
          },
          "400": {
            "partial": false,
            "source": "        var chunk = chunksToWrite[i];",
            "missing": [
              {
                "startCol": 8,
                "endCol": 37
              }
            ]
          },
          "401": {
            "partial": false,
            "source": "        chunk.save(function(err, result) {",
            "missing": [
              {}
            ]
          },
          "402": {
            "partial": false,
            "source": "          if(err) return callback(err);",
            "missing": [
              {
                "startCol": 13,
                "endCol": 16
              },
              {},
              {
                "startCol": 25,
                "endCol": 38
              },
              {
                "startCol": 18,
                "endCol": 39
              }
            ]
          },
          "403": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "404": {
            "partial": false,
            "source": "          numberOfChunksToWrite = numberOfChunksToWrite - 1;",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 60
              },
              {
                "startCol": 34,
                "endCol": 55
              }
            ]
          },
          "405": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "406": {
            "partial": false,
            "source": "          if(numberOfChunksToWrite <= 0) {",
            "missing": [
              {
                "startCol": 13,
                "endCol": 34
              },
              {}
            ]
          },
          "407": {
            "partial": false,
            "source": "            return callback(null, self);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 40
              },
              {},
              {
                "startCol": 19,
                "endCol": 39
              }
            ]
          },
          "408": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "409": {
            "partial": false,
            "source": "        })",
            "missing": [
              {}
            ]
          },
          "410": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "413": {
            "partial": false,
            "source": "      self.position = self.position + buffer.length;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 52
              },
              {
                "startCol": 22,
                "endCol": 51
              }
            ]
          },
          "415": {
            "partial": false,
            "source": "      self.currentChunk.write(buffer);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 37
              }
            ]
          },
          "416": {
            "partial": false,
            "source": "      callback(null, self);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 26
              }
            ]
          },
          "446": {
            "partial": false,
            "source": "  var chunkNumber = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "447": {
            "partial": false,
            "source": "  var previousChunkSize = self.previousChunkSize;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 49
              }
            ]
          },
          "449": {
            "partial": false,
            "source": "  if(null != self.currentChunk && self.currentChunk.chunkNumber > 0 && self.currentChunk.position == 0) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 30
              },
              {
                "startCol": 34,
                "endCol": 67
              },
              {
                "startCol": 71,
                "endCol": 102
              }
            ]
          },
          "450": {
            "partial": false,
            "source": "    chunkNumber = self.currentChunk.chunkNumber - 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 18,
                "endCol": 51
              }
            ]
          },
          "452": {
            "partial": false,
            "source": "    chunkNumber = self.currentChunk.chunkNumber;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 48
              }
            ]
          },
          "453": {
            "partial": false,
            "source": "    previousChunkSize = self.currentChunk.position;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              }
            ]
          },
          "457": {
            "partial": false,
            "source": "  var length = self.currentChunk != null ? (chunkNumber * self.chunkSize + previousChunkSize) : 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 98
              },
              {
                "startCol": 15,
                "endCol": 40
              },
              {
                "startCol": 43,
                "endCol": 93
              },
              {
                "startCol": 44,
                "endCol": 55
              },
              {
                "startCol": 75,
                "endCol": 92
              },
              {
                "startCol": 96,
                "endCol": 97
              }
            ]
          },
          "458": {
            "partial": false,
            "source": "  var mongoObject = {",
            "missing": [
              {}
            ]
          },
          "459": {
            "partial": false,
            "source": "    '_id': self.fileId,",
            "missing": [
              {}
            ]
          },
          "460": {
            "partial": false,
            "source": "    'filename': self.filename,",
            "missing": [
              {}
            ]
          },
          "461": {
            "partial": false,
            "source": "    'contentType': self.contentType,",
            "missing": [
              {}
            ]
          },
          "462": {
            "partial": false,
            "source": "    'length': self.position ? self.position : 0,",
            "missing": [
              {},
              {
                "startCol": 30,
                "endCol": 43
              },
              {
                "startCol": 46,
                "endCol": 47
              }
            ]
          },
          "463": {
            "partial": false,
            "source": "    'chunkSize': self.chunkSize,",
            "missing": [
              {}
            ]
          },
          "464": {
            "partial": false,
            "source": "    'uploadDate': self.uploadDate,",
            "missing": [
              {}
            ]
          },
          "465": {
            "partial": false,
            "source": "    'aliases': self.aliases,",
            "missing": [
              {}
            ]
          },
          "466": {
            "partial": false,
            "source": "    'metadata': self.metadata",
            "missing": [
              {}
            ]
          },
          "467": {
            "partial": false,
            "source": "  };",
            "missing": [
              {}
            ]
          },
          "469": {
            "partial": false,
            "source": "  var md5Command = {filemd5:self.fileId, root:self.root};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 57
              }
            ]
          },
          "470": {
            "partial": false,
            "source": "  self.db.command(md5Command, function(err, results) {",
            "missing": [
              {}
            ]
          },
          "471": {
            "partial": false,
            "source": "    mongoObject.md5 = results.md5;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 34
              }
            ]
          },
          "472": {
            "partial": false,
            "source": "    callback(mongoObject);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              },
              {}
            ]
          },
          "473": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "486": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "488": {
            "partial": false,
            "source": "  if(self.mode[0] == \"w\") {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 24
              }
            ]
          },
          "489": {
            "partial": false,
            "source": "    if(self.currentChunk != null && self.currentChunk.position > 0) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 32
              },
              {
                "startCol": 36,
                "endCol": 66
              }
            ]
          },
          "490": {
            "partial": false,
            "source": "      self.currentChunk.save(function(err, chunk) {",
            "missing": [
              {}
            ]
          },
          "491": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {
                "startCol": 23,
                "endCol": 36
              },
              {},
              {
                "startCol": 16,
                "endCol": 37
              },
              {
                "startCol": 11,
                "endCol": 14
              }
            ]
          },
          "492": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "493": {
            "partial": false,
            "source": "        self.collection(function(err, files) {",
            "missing": [
              {}
            ]
          },
          "494": {
            "partial": false,
            "source": "          if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 16
              },
              {
                "startCol": 18,
                "endCol": 39
              },
              {
                "startCol": 25,
                "endCol": 38
              }
            ]
          },
          "495": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "496": {
            "partial": false,
            "source": "          // Build the mongo object",
            "missing": [
              {}
            ]
          },
          "497": {
            "partial": false,
            "source": "          if(self.uploadDate != null) {",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 36
              }
            ]
          },
          "498": {
            "partial": false,
            "source": "            files.remove({'_id':self.fileId}, {safe:true}, function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "499": {
            "partial": false,
            "source": "              if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 20
              },
              {
                "startCol": 22,
                "endCol": 43
              },
              {
                "startCol": 29,
                "endCol": 42
              }
            ]
          },
          "500": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "501": {
            "partial": false,
            "source": "              buildMongoObject(self, function(mongoObject) {",
            "missing": [
              {}
            ]
          },
          "502": {
            "partial": false,
            "source": "                files.save(mongoObject, {safe:true}, function(err) {",
            "missing": [
              {}
            ]
          },
          "503": {
            "partial": false,
            "source": "                  callback(err, mongoObject);",
            "missing": [
              {},
              {
                "startCol": 18,
                "endCol": 45
              }
            ]
          },
          "504": {
            "partial": false,
            "source": "                });",
            "missing": [
              {}
            ]
          },
          "505": {
            "partial": false,
            "source": "              });",
            "missing": [
              {}
            ]
          },
          "506": {
            "partial": false,
            "source": "            });",
            "missing": [
              {}
            ]
          },
          "507": {
            "partial": false,
            "source": "          } else {",
            "missing": [
              {}
            ]
          },
          "508": {
            "partial": false,
            "source": "            self.uploadDate = new Date();",
            "missing": [
              {
                "startCol": 12,
                "endCol": 41
              },
              {}
            ]
          },
          "509": {
            "partial": false,
            "source": "            buildMongoObject(self, function(mongoObject) {",
            "missing": [
              {}
            ]
          },
          "510": {
            "partial": false,
            "source": "              files.save(mongoObject, {safe:true}, function(err) {",
            "missing": [
              {}
            ]
          },
          "511": {
            "partial": false,
            "source": "                callback(err, mongoObject);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 42
              }
            ]
          },
          "512": {
            "partial": false,
            "source": "              });",
            "missing": [
              {}
            ]
          },
          "513": {
            "partial": false,
            "source": "            });",
            "missing": [
              {}
            ]
          },
          "514": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "515": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "516": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "518": {
            "partial": false,
            "source": "      self.collection(function(err, files) {",
            "missing": [
              {}
            ]
          },
          "519": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 37
              },
              {
                "startCol": 23,
                "endCol": 36
              },
              {
                "startCol": 11,
                "endCol": 14
              }
            ]
          },
          "520": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "521": {
            "partial": false,
            "source": "        self.uploadDate = new Date();",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 37
              }
            ]
          },
          "522": {
            "partial": false,
            "source": "        buildMongoObject(self, function(mongoObject) {",
            "missing": [
              {}
            ]
          },
          "523": {
            "partial": false,
            "source": "          files.save(mongoObject, {safe:true}, function(err) {",
            "missing": [
              {}
            ]
          },
          "524": {
            "partial": false,
            "source": "            callback(err, mongoObject);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 38
              }
            ]
          },
          "525": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "526": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "527": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "529": {
            "partial": false,
            "source": "  } else if(self.mode[0] == \"r\") {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              }
            ]
          },
          "530": {
            "partial": false,
            "source": "    callback(null, null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "532": {
            "partial": false,
            "source": "    callback(new Error(\"Illegal mode \" + self.mode), null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 58
              },
              {
                "startCol": 23,
                "endCol": 50
              }
            ]
          },
          "549": {
            "partial": false,
            "source": "  self.chunkCollection(function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "550": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 32
              }
            ]
          },
          "551": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "552": {
            "partial": false,
            "source": "    collection.find({'files_id':self.fileId, 'n':chunkNumber}, function(err, cursor) {",
            "missing": [
              {}
            ]
          },
          "553": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 14,
                "endCol": 35
              },
              {},
              {
                "startCol": 21,
                "endCol": 34
              }
            ]
          },
          "554": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "555": {
            "partial": false,
            "source": "      cursor.nextObject(function(err, chunk) {",
            "missing": [
              {}
            ]
          },
          "556": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 23,
                "endCol": 36
              },
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 37
              }
            ]
          },
          "557": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "558": {
            "partial": false,
            "source": "        var finalChunk = chunk == null ? {} : chunk;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 52
              },
              {
                "startCol": 25,
                "endCol": 30
              },
              {
                "startCol": 41,
                "endCol": 43
              },
              {
                "startCol": 46,
                "endCol": 51
              }
            ]
          },
          "559": {
            "partial": false,
            "source": "        callback(null, new Chunk(self, finalChunk));",
            "missing": [
              {
                "startCol": 8,
                "endCol": 51
              },
              {}
            ]
          },
          "560": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "561": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "562": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "571": {
            "partial": false,
            "source": "  nthChunk(this, chunkNumber, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 39
              }
            ]
          },
          "581": {
            "partial": false,
            "source": "  return Math.floor(self.length/self.chunkSize);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              },
              {
                "startCol": 9,
                "endCol": 47
              },
              {
                "startCol": 20,
                "endCol": 46
              }
            ]
          },
          "592": {
            "partial": false,
            "source": "  this.db.collection((this.root + \".chunks\"), callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 55
              },
              {
                "startCol": 21,
                "endCol": 44
              }
            ]
          },
          "605": {
            "partial": false,
            "source": "  if(self.fileId != null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 24
              }
            ]
          },
          "606": {
            "partial": false,
            "source": "    self.chunkCollection(function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "607": {
            "partial": false,
            "source": "      if(err) return callback(err, false);",
            "missing": [
              {
                "startCol": 9,
                "endCol": 12
              },
              {},
              {
                "startCol": 14,
                "endCol": 42
              },
              {
                "startCol": 21,
                "endCol": 41
              }
            ]
          },
          "608": {
            "partial": false,
            "source": "      collection.remove({'files_id':self.fileId}, {safe:true}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "609": {
            "partial": false,
            "source": "        if(err) return callback(err, false);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 44
              },
              {
                "startCol": 23,
                "endCol": 43
              },
              {
                "startCol": 11,
                "endCol": 14
              }
            ]
          },
          "610": {
            "partial": false,
            "source": "        callback(null, true);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 28
              },
              {}
            ]
          },
          "611": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "612": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "614": {
            "partial": false,
            "source": "    callback(null, true);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "626": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "627": {
            "partial": false,
            "source": "  deleteChunks(this, function(err) {",
            "missing": [
              {}
            ]
          },
          "628": {
            "partial": false,
            "source": "    if(err!==null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 17
              },
              {}
            ]
          },
          "629": {
            "partial": false,
            "source": "      err.message = \"at deleteChunks: \" + err.message;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 54
              },
              {
                "startCol": 20,
                "endCol": 53
              },
              {}
            ]
          },
          "630": {
            "partial": false,
            "source": "      return callback(err);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 27
              },
              {},
              {
                "startCol": 13,
                "endCol": 26
              }
            ]
          },
          "631": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "632": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "633": {
            "partial": false,
            "source": "    self.collection(function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "634": {
            "partial": false,
            "source": "      if(err!==null) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 19
              },
              {}
            ]
          },
          "635": {
            "partial": false,
            "source": "        err.message = \"at collection: \" + err.message;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 54
              },
              {
                "startCol": 22,
                "endCol": 53
              },
              {}
            ]
          },
          "636": {
            "partial": false,
            "source": "        return callback(err);",
            "missing": [
              {},
              {
                "startCol": 15,
                "endCol": 28
              },
              {
                "startCol": 8,
                "endCol": 29
              }
            ]
          },
          "637": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "638": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "639": {
            "partial": false,
            "source": "      collection.remove({'_id':self.fileId}, {safe:true}, function(err) {",
            "missing": [
              {}
            ]
          },
          "640": {
            "partial": false,
            "source": "        callback(err, self);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 27
              }
            ]
          },
          "641": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "642": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "643": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "654": {
            "partial": false,
            "source": "  this.db.collection(this.root + \".files\", callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 52
              },
              {
                "startCol": 21,
                "endCol": 41
              }
            ]
          },
          "666": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "667": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "668": {
            "partial": false,
            "source": "  separator = args.length ? args.shift() : \"\\n\";",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              },
              {
                "startCol": 28,
                "endCol": 40
              },
              {
                "startCol": 43,
                "endCol": 47
              }
            ]
          },
          "670": {
            "partial": false,
            "source": "  this.read(function(err, data) {",
            "missing": [
              {}
            ]
          },
          "671": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {},
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 32
              }
            ]
          },
          "672": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "673": {
            "partial": false,
            "source": "    var items = data.toString().split(separator);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 49
              },
              {
                "startCol": 16,
                "endCol": 48
              },
              {
                "startCol": 29,
                "endCol": 31
              }
            ]
          },
          "674": {
            "partial": false,
            "source": "    items = items.length > 0 ? items.splice(0, items.length - 1) : [];",
            "missing": [
              {
                "startCol": 31,
                "endCol": 64
              },
              {},
              {
                "startCol": 12,
                "endCol": 28
              },
              {
                "startCol": 4,
                "endCol": 70
              },
              {
                "startCol": 47,
                "endCol": 63
              },
              {
                "startCol": 67,
                "endCol": 69
              }
            ]
          },
          "675": {
            "partial": false,
            "source": "    for(var i = 0; i < items.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 35
              },
              {},
              {
                "startCol": 37,
                "endCol": 40
              }
            ]
          },
          "676": {
            "partial": false,
            "source": "      items[i] = items[i] + separator;",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 37
              },
              {
                "startCol": 28,
                "endCol": 37
              },
              {
                "startCol": 6,
                "endCol": 38
              }
            ]
          },
          "677": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "678": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "679": {
            "partial": false,
            "source": "    callback(null, items);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 25
              },
              {}
            ]
          },
          "680": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "692": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "694": {
            "partial": false,
            "source": "  if(this.currentChunk.chunkNumber != 0) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 39
              }
            ]
          },
          "695": {
            "partial": false,
            "source": "    if(this.mode[0] == \"w\") {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 26
              }
            ]
          },
          "696": {
            "partial": false,
            "source": "      deleteChunks(self, function(err, gridStore) {",
            "missing": [
              {}
            ]
          },
          "697": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {
                "startCol": 11,
                "endCol": 14
              },
              {},
              {
                "startCol": 16,
                "endCol": 37
              },
              {
                "startCol": 23,
                "endCol": 36
              }
            ]
          },
          "698": {
            "partial": false,
            "source": "        self.currentChunk = new Chunk(self, {'n': 0});",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 54
              }
            ]
          },
          "699": {
            "partial": false,
            "source": "        self.position = 0;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 26
              },
              {}
            ]
          },
          "700": {
            "partial": false,
            "source": "        callback(null, self);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 28
              },
              {}
            ]
          },
          "701": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "703": {
            "partial": false,
            "source": "      self.currentChunk(0, function(err, chunk) {",
            "missing": [
              {}
            ]
          },
          "704": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {
                "startCol": 11,
                "endCol": 14
              },
              {},
              {
                "startCol": 16,
                "endCol": 37
              },
              {
                "startCol": 23,
                "endCol": 36
              }
            ]
          },
          "705": {
            "partial": false,
            "source": "        self.currentChunk = chunk;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 34
              }
            ]
          },
          "706": {
            "partial": false,
            "source": "        self.currentChunk.rewind();",
            "missing": [
              {
                "startCol": 8,
                "endCol": 34
              },
              {}
            ]
          },
          "707": {
            "partial": false,
            "source": "        self.position = 0;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 26
              }
            ]
          },
          "708": {
            "partial": false,
            "source": "        callback(null, self);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 28
              },
              {}
            ]
          },
          "709": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "712": {
            "partial": false,
            "source": "    self.currentChunk.rewind();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 30
              }
            ]
          },
          "713": {
            "partial": false,
            "source": "    self.position = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "714": {
            "partial": false,
            "source": "    callback(null, self);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "734": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "736": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "737": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "738": {
            "partial": false,
            "source": "  length = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 25,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 44
              }
            ]
          },
          "739": {
            "partial": false,
            "source": "  buffer = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 25,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 44
              }
            ]
          },
          "742": {
            "partial": false,
            "source": "  var finalLength = length == null ? self.length - self.position : length;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 74
              },
              {
                "startCol": 20,
                "endCol": 26
              },
              {
                "startCol": 37,
                "endCol": 64
              },
              {
                "startCol": 67,
                "endCol": 73
              }
            ]
          },
          "743": {
            "partial": false,
            "source": "  var finalBuffer = buffer == null ? new Buffer(finalLength) : buffer;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 70
              },
              {
                "startCol": 20,
                "endCol": 26
              },
              {
                "startCol": 37,
                "endCol": 60
              },
              {
                "startCol": 63,
                "endCol": 69
              }
            ]
          },
          "745": {
            "partial": false,
            "source": "  finalBuffer._index = buffer != null && buffer._index != null ? buffer._index : 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 83
              },
              {
                "startCol": 23,
                "endCol": 29
              },
              {
                "startCol": 41,
                "endCol": 62
              },
              {
                "startCol": 65,
                "endCol": 78
              },
              {
                "startCol": 81,
                "endCol": 82
              }
            ]
          },
          "747": {
            "partial": false,
            "source": "  if((self.currentChunk.length() - self.currentChunk.position + finalBuffer._index) >= finalLength) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 83
              },
              {
                "startCol": 6,
                "endCol": 32
              },
              {
                "startCol": 87,
                "endCol": 98
              }
            ]
          },
          "748": {
            "partial": false,
            "source": "    var slice = self.currentChunk.readSlice(finalLength - finalBuffer._index);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 78
              },
              {
                "startCol": 16,
                "endCol": 77
              },
              {
                "startCol": 44,
                "endCol": 55
              }
            ]
          },
          "750": {
            "partial": false,
            "source": "    slice.copy(finalBuffer, finalBuffer._index);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 47
              }
            ]
          },
          "752": {
            "partial": false,
            "source": "    self.position = finalBuffer.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              }
            ]
          },
          "754": {
            "partial": false,
            "source": "    if(finalLength == 0 && finalBuffer.length == 0) return callback(new Error(\"File does not exist\"), null);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 18
              },
              {
                "startCol": 27,
                "endCol": 50
              },
              {
                "startCol": 52,
                "endCol": 108
              },
              {
                "startCol": 59,
                "endCol": 107
              }
            ]
          },
          "756": {
            "partial": false,
            "source": "    callback(null, finalBuffer);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 31
              }
            ]
          },
          "758": {
            "partial": false,
            "source": "    var slice = self.currentChunk.readSlice(self.currentChunk.length() - self.currentChunk.position);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 101
              },
              {
                "startCol": 16,
                "endCol": 100
              },
              {
                "startCol": 44,
                "endCol": 70
              }
            ]
          },
          "760": {
            "partial": false,
            "source": "    slice.copy(finalBuffer, finalBuffer._index);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 47
              }
            ]
          },
          "762": {
            "partial": false,
            "source": "    finalBuffer._index += slice.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 39
              }
            ]
          },
          "765": {
            "partial": false,
            "source": "    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {",
            "missing": [
              {},
              {
                "startCol": 19,
                "endCol": 52
              }
            ]
          },
          "766": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 14,
                "endCol": 35
              },
              {
                "startCol": 21,
                "endCol": 34
              }
            ]
          },
          "767": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "768": {
            "partial": false,
            "source": "      if(chunk.length() > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 23
              },
              {}
            ]
          },
          "769": {
            "partial": false,
            "source": "        self.currentChunk = chunk;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 34
              },
              {}
            ]
          },
          "770": {
            "partial": false,
            "source": "        self.read(length, finalBuffer, callback);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 48
              }
            ]
          },
          "771": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "772": {
            "partial": false,
            "source": "        if (finalBuffer._index > 0) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 34
              },
              {}
            ]
          },
          "773": {
            "partial": false,
            "source": "          callback(null, finalBuffer)",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 37
              }
            ]
          },
          "774": {
            "partial": false,
            "source": "        } else {",
            "missing": [
              {}
            ]
          },
          "775": {
            "partial": false,
            "source": "          callback(new Error(\"no chunks found for file, possibly corrupt\"), null);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 81
              }
            ]
          },
          "776": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "777": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "778": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "790": {
            "partial": false,
            "source": "  callback(null, this.position);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 31
              }
            ]
          },
          "810": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "812": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "813": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "814": {
            "partial": false,
            "source": "  seekLocation = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              },
              {
                "startCol": 31,
                "endCol": 43
              },
              {
                "startCol": 46,
                "endCol": 50
              }
            ]
          },
          "816": {
            "partial": false,
            "source": "  var seekLocationFinal = seekLocation == null ? exports.GridStore.IO_SEEK_SET : seekLocation;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 94
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 49,
                "endCol": 78
              },
              {
                "startCol": 81,
                "endCol": 93
              }
            ]
          },
          "817": {
            "partial": false,
            "source": "  var finalPosition = position;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 31
              }
            ]
          },
          "818": {
            "partial": false,
            "source": "  var targetPosition = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "819": {
            "partial": false,
            "source": "  if(seekLocationFinal == exports.GridStore.IO_SEEK_CUR) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 22
              }
            ]
          },
          "820": {
            "partial": false,
            "source": "    targetPosition = self.position + finalPosition;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 51
              },
              {
                "startCol": 21,
                "endCol": 50
              },
              {
                "startCol": 37,
                "endCol": 50
              }
            ]
          },
          "821": {
            "partial": false,
            "source": "  } else if(seekLocationFinal == exports.GridStore.IO_SEEK_END) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 29
              }
            ]
          },
          "822": {
            "partial": false,
            "source": "    targetPosition = self.length + finalPosition;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 49
              },
              {
                "startCol": 21,
                "endCol": 48
              },
              {
                "startCol": 35,
                "endCol": 48
              }
            ]
          },
          "824": {
            "partial": false,
            "source": "    targetPosition = finalPosition;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "827": {
            "partial": false,
            "source": "  var newChunkNumber = Math.floor(targetPosition/self.chunkSize);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 65
              },
              {
                "startCol": 23,
                "endCol": 64
              },
              {
                "startCol": 34,
                "endCol": 48
              }
            ]
          },
          "828": {
            "partial": false,
            "source": "  if(newChunkNumber != self.currentChunk.chunkNumber) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              }
            ]
          },
          "829": {
            "partial": false,
            "source": "    var seekChunk = function() {",
            "missing": [
              {}
            ]
          },
          "830": {
            "partial": false,
            "source": "      nthChunk(self, newChunkNumber, function(err, chunk) {",
            "missing": [
              {}
            ]
          },
          "831": {
            "partial": false,
            "source": "        self.currentChunk = chunk;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 34
              }
            ]
          },
          "832": {
            "partial": false,
            "source": "        self.position = targetPosition;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 39
              },
              {}
            ]
          },
          "833": {
            "partial": false,
            "source": "        self.currentChunk.position = (self.position % self.chunkSize);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 70
              },
              {},
              {
                "startCol": 37,
                "endCol": 69
              }
            ]
          },
          "834": {
            "partial": false,
            "source": "        callback(err, self);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 27
              }
            ]
          },
          "835": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "836": {
            "partial": false,
            "source": "    };",
            "missing": [
              {}
            ]
          },
          "838": {
            "partial": false,
            "source": "    if(self.mode[0] == 'w') {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 26
              }
            ]
          },
          "839": {
            "partial": false,
            "source": "      self.currentChunk.save(function(err) {",
            "missing": [
              {}
            ]
          },
          "840": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {
                "startCol": 23,
                "endCol": 36
              },
              {},
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 37
              }
            ]
          },
          "841": {
            "partial": false,
            "source": "        seekChunk();",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 19
              }
            ]
          },
          "842": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "844": {
            "partial": false,
            "source": "      seekChunk();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 17
              }
            ]
          },
          "847": {
            "partial": false,
            "source": "    self.position = targetPosition;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "848": {
            "partial": false,
            "source": "    self.currentChunk.position = (self.position % self.chunkSize);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 66
              },
              {
                "startCol": 33,
                "endCol": 65
              }
            ]
          },
          "849": {
            "partial": false,
            "source": "    callback(null, self);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "860": {
            "partial": false,
            "source": "  return this.position == this.length ? true : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 53
              },
              {
                "startCol": 9,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 44
              },
              {
                "startCol": 47,
                "endCol": 52
              }
            ]
          },
          "871": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "873": {
            "partial": false,
            "source": "  if(self.eof()) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 15
              }
            ]
          },
          "874": {
            "partial": false,
            "source": "    callback(null, null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "875": {
            "partial": false,
            "source": "  } else if(self.currentChunk.eof()) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 35
              }
            ]
          },
          "876": {
            "partial": false,
            "source": "    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 52
              },
              {}
            ]
          },
          "877": {
            "partial": false,
            "source": "      self.currentChunk = chunk;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "878": {
            "partial": false,
            "source": "      self.position = self.position + 1;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 40
              },
              {
                "startCol": 22,
                "endCol": 39
              }
            ]
          },
          "879": {
            "partial": false,
            "source": "      callback(err, self.currentChunk.getc());",
            "missing": [
              {
                "startCol": 6,
                "endCol": 46
              },
              {},
              {
                "startCol": 20,
                "endCol": 44
              }
            ]
          },
          "880": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "882": {
            "partial": false,
            "source": "    self.position = self.position + 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 38
              },
              {
                "startCol": 20,
                "endCol": 37
              }
            ]
          },
          "883": {
            "partial": false,
            "source": "    callback(null, self.currentChunk.getc());",
            "missing": [
              {
                "startCol": 4,
                "endCol": 44
              },
              {
                "startCol": 19,
                "endCol": 43
              }
            ]
          },
          "897": {
            "partial": false,
            "source": "  var finalString = string.match(/\\n$/) == null ? string + \"\\n\" : string;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 73
              },
              {
                "startCol": 20,
                "endCol": 39
              },
              {
                "startCol": 50,
                "endCol": 56
              },
              {
                "startCol": 66,
                "endCol": 72
              }
            ]
          },
          "898": {
            "partial": false,
            "source": "  this.write(finalString, callback);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              }
            ]
          },
          "915": {
            "partial": false,
            "source": "  return new ReadStream(autoclose, this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 41
              }
            ]
          },
          "964": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "965": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "966": {
            "partial": false,
            "source": "  rootCollection = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 53
              },
              {
                "startCol": 33,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 52
              }
            ]
          },
          "969": {
            "partial": false,
            "source": "  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 104
              },
              {
                "startCol": 28,
                "endCol": 42
              },
              {
                "startCol": 53,
                "endCol": 67
              },
              {
                "startCol": 70,
                "endCol": 103
              }
            ]
          },
          "970": {
            "partial": false,
            "source": "  db.collection(rootCollectionFinal + \".files\", function(err, collection) {",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 35
              }
            ]
          },
          "971": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 32
              },
              {},
              {
                "startCol": 7,
                "endCol": 10
              }
            ]
          },
          "972": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "973": {
            "partial": false,
            "source": "    // Build query",
            "missing": [
              {}
            ]
          },
          "974": {
            "partial": false,
            "source": "    var query = (typeof fileIdObject == 'string' || Object.prototype.toString.call(fileIdObject) == '[object RegExp]' )",
            "missing": [
              {
                "startCol": 16,
                "endCol": 119
              },
              {
                "startCol": 17,
                "endCol": 48
              },
              {},
              {
                "startCol": 52,
                "endCol": 96
              },
              {
                "startCol": 24,
                "endCol": 36
              }
            ]
          },
          "975": {
            "partial": false,
            "source": "      ? {'filename':fileIdObject}",
            "missing": [
              {
                "startCol": 8,
                "endCol": 33
              },
              {}
            ]
          },
          "976": {
            "partial": false,
            "source": "      : {'_id':fileIdObject};    // Attempt to locate file",
            "missing": [
              {
                "startCol": 8,
                "endCol": 28
              },
              {}
            ]
          },
          "977": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "978": {
            "partial": false,
            "source": "    collection.find(query, function(err, cursor) {",
            "missing": [
              {}
            ]
          },
          "979": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 14,
                "endCol": 35
              },
              {
                "startCol": 21,
                "endCol": 34
              }
            ]
          },
          "980": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "981": {
            "partial": false,
            "source": "      cursor.nextObject(function(err, item) {",
            "missing": [
              {}
            ]
          },
          "982": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 23,
                "endCol": 36
              },
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 37
              }
            ]
          },
          "983": {
            "partial": false,
            "source": "        callback(null, item == null ? false : true);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 51
              },
              {},
              {
                "startCol": 38,
                "endCol": 43
              },
              {
                "startCol": 46,
                "endCol": 50
              },
              {
                "startCol": 23,
                "endCol": 35
              }
            ]
          },
          "984": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "985": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "986": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "999": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1000": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1001": {
            "partial": false,
            "source": "  rootCollection = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 53
              },
              {
                "startCol": 33,
                "endCol": 45
              },
              {
                "startCol": 48,
                "endCol": 52
              }
            ]
          },
          "1002": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : {};",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 43
              }
            ]
          },
          "1005": {
            "partial": false,
            "source": "  if(rootCollection != null && typeof rootCollection == 'object') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              },
              {
                "startCol": 31,
                "endCol": 52
              },
              {
                "startCol": 38,
                "endCol": 52
              }
            ]
          },
          "1006": {
            "partial": false,
            "source": "    options = rootCollection;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "1007": {
            "partial": false,
            "source": "    rootCollection = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "1011": {
            "partial": false,
            "source": "  var byId = options['id'] != null ? options['id'] : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 59
              },
              {
                "startCol": 13,
                "endCol": 34
              },
              {
                "startCol": 37,
                "endCol": 50
              },
              {
                "startCol": 53,
                "endCol": 58
              }
            ]
          },
          "1013": {
            "partial": false,
            "source": "  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 104
              },
              {
                "startCol": 28,
                "endCol": 42
              },
              {
                "startCol": 53,
                "endCol": 67
              },
              {
                "startCol": 70,
                "endCol": 103
              }
            ]
          },
          "1014": {
            "partial": false,
            "source": "  var items = [];",
            "missing": [
              {
                "startCol": 2,
                "endCol": 17
              }
            ]
          },
          "1015": {
            "partial": false,
            "source": "  db.collection((rootCollectionFinal + \".files\"), function(err, collection) {",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 48
              },
              {
                "startCol": 17,
                "endCol": 36
              }
            ]
          },
          "1016": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 33
              },
              {},
              {
                "startCol": 19,
                "endCol": 32
              }
            ]
          },
          "1017": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1018": {
            "partial": false,
            "source": "    collection.find(function(err, cursor) {",
            "missing": [
              {}
            ]
          },
          "1019": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {
                "startCol": 21,
                "endCol": 34
              },
              {
                "startCol": 9,
                "endCol": 12
              },
              {},
              {
                "startCol": 14,
                "endCol": 35
              }
            ]
          },
          "1020": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1021": {
            "partial": false,
            "source": "      cursor.each(function(err, item) {",
            "missing": [
              {}
            ]
          },
          "1022": {
            "partial": false,
            "source": "        if(item != null) {",
            "missing": [
              {
                "startCol": 11,
                "endCol": 23
              },
              {}
            ]
          },
          "1023": {
            "partial": false,
            "source": "          items.push(byId ? item._id : item.filename);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 54
              },
              {},
              {
                "startCol": 28,
                "endCol": 36
              },
              {
                "startCol": 39,
                "endCol": 52
              },
              {
                "startCol": 21,
                "endCol": 25
              }
            ]
          },
          "1024": {
            "partial": false,
            "source": "        } else {",
            "missing": [
              {}
            ]
          },
          "1025": {
            "partial": false,
            "source": "          callback(err, items);",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 31
              }
            ]
          },
          "1026": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1027": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "1028": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1029": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1052": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1053": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1054": {
            "partial": false,
            "source": "  length = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 25,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 44
              }
            ]
          },
          "1055": {
            "partial": false,
            "source": "  offset = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 25,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 44
              }
            ]
          },
          "1056": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 45
              }
            ]
          },
          "1058": {
            "partial": false,
            "source": "  new GridStore(db, name, \"r\", options).open(function(err, gridStore) {",
            "missing": [
              {}
            ]
          },
          "1059": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {},
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 32
              }
            ]
          },
          "1060": {
            "partial": false,
            "source": "    // Make sure we are not reading out of bounds",
            "missing": [
              {}
            ]
          },
          "1061": {
            "partial": false,
            "source": "    if(offset && offset >= gridStore.length) return callback(\"offset larger than size of file\", null);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 13
              },
              {},
              {
                "startCol": 17,
                "endCol": 23
              },
              {
                "startCol": 45,
                "endCol": 102
              },
              {
                "startCol": 52,
                "endCol": 101
              }
            ]
          },
          "1062": {
            "partial": false,
            "source": "    if(length && length > gridStore.length) return callback(\"length is larger than the size of the file\", null);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 13
              },
              {
                "startCol": 17,
                "endCol": 42
              },
              {
                "startCol": 51,
                "endCol": 111
              },
              {},
              {
                "startCol": 44,
                "endCol": 112
              }
            ]
          },
          "1063": {
            "partial": false,
            "source": "    if(offset && length && (offset + length) > gridStore.length) return callback(\"offset and length is larger than the size of the file\", null);",
            "missing": [
              {
                "startCol": 17,
                "endCol": 23
              },
              {
                "startCol": 27,
                "endCol": 63
              },
              {
                "startCol": 28,
                "endCol": 34
              },
              {
                "startCol": 37,
                "endCol": 43
              },
              {
                "startCol": 65,
                "endCol": 144
              },
              {
                "startCol": 72,
                "endCol": 143
              },
              {
                "startCol": 7,
                "endCol": 63
              },
              {}
            ]
          },
          "1064": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1065": {
            "partial": false,
            "source": "    if(offset != null) {",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 13
              }
            ]
          },
          "1066": {
            "partial": false,
            "source": "      gridStore.seek(offset, function(err, gridStore) {",
            "missing": [
              {}
            ]
          },
          "1067": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 37
              },
              {
                "startCol": 23,
                "endCol": 36
              }
            ]
          },
          "1068": {
            "partial": false,
            "source": "        gridStore.read(length, callback);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 41
              }
            ]
          },
          "1069": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "1070": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1071": {
            "partial": false,
            "source": "      gridStore.read(length, callback);",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 39
              }
            ]
          },
          "1072": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1073": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1088": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1089": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1090": {
            "partial": false,
            "source": "  separator = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 48
              },
              {
                "startCol": 28,
                "endCol": 40
              },
              {
                "startCol": 43,
                "endCol": 47
              }
            ]
          },
          "1091": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 45
              }
            ]
          },
          "1093": {
            "partial": false,
            "source": "  var finalSeperator = separator == null ? \"\\n\" : separator;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 60
              },
              {
                "startCol": 23,
                "endCol": 32
              },
              {
                "startCol": 43,
                "endCol": 47
              },
              {
                "startCol": 50,
                "endCol": 59
              }
            ]
          },
          "1094": {
            "partial": false,
            "source": "  new GridStore(db, name, \"r\", options).open(function(err, gridStore) {",
            "missing": [
              {}
            ]
          },
          "1095": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 33
              },
              {
                "startCol": 19,
                "endCol": 32
              },
              {}
            ]
          },
          "1096": {
            "partial": false,
            "source": "    gridStore.readlines(finalSeperator, callback);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 49
              }
            ]
          },
          "1097": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1111": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "1112": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 2);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "1113": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "1114": {
            "partial": false,
            "source": "  options = args.length ? args.shift() : null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 45
              }
            ]
          },
          "1116": {
            "partial": false,
            "source": "  if(names.constructor == Array) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 31
              },
              {
                "startCol": 26,
                "endCol": 31
              }
            ]
          },
          "1117": {
            "partial": false,
            "source": "    var tc = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 15
              }
            ]
          },
          "1118": {
            "partial": false,
            "source": "    for(var i = 0; i < names.length; i++) {",
            "missing": [
              {
                "startCol": 19,
                "endCol": 20
              },
              {
                "startCol": 37,
                "endCol": 40
              }
            ]
          },
          "1119": {
            "partial": false,
            "source": "      ++tc;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 10
              }
            ]
          },
          "1120": {
            "partial": false,
            "source": "      self.unlink(db, names[i], function(result) {",
            "missing": [
              {}
            ]
          },
          "1121": {
            "partial": false,
            "source": "        if(--tc == 0) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 15
              }
            ]
          },
          "1122": {
            "partial": false,
            "source": "            callback(null, self);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 32
              }
            ]
          },
          "1123": {
            "partial": false,
            "source": "        }",
            "missing": [
              {}
            ]
          },
          "1124": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "1127": {
            "partial": false,
            "source": "    new GridStore(db, names, \"w\", options).open(function(err, gridStore) {",
            "missing": [
              {}
            ]
          },
          "1128": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 14,
                "endCol": 35
              },
              {
                "startCol": 21,
                "endCol": 34
              }
            ]
          },
          "1129": {
            "partial": false,
            "source": "      deleteChunks(gridStore, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "1130": {
            "partial": false,
            "source": "        if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 14
              },
              {
                "startCol": 16,
                "endCol": 37
              },
              {
                "startCol": 23,
                "endCol": 36
              }
            ]
          },
          "1131": {
            "partial": false,
            "source": "        gridStore.collection(function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "1132": {
            "partial": false,
            "source": "          if(err) return callback(err);",
            "missing": [
              {
                "startCol": 13,
                "endCol": 16
              },
              {
                "startCol": 18,
                "endCol": 39
              },
              {},
              {
                "startCol": 25,
                "endCol": 38
              }
            ]
          },
          "1133": {
            "partial": false,
            "source": "          collection.remove({'_id':gridStore.fileId}, {safe:true}, function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "1134": {
            "partial": false,
            "source": "            callback(err, self);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 31
              },
              {}
            ]
          },
          "1135": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "1136": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "1137": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "1138": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1153": {
            "partial": false,
            "source": "     return this.internalChunkSize;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 35
              }
            ]
          },
          "1156": {
            "partial": false,
            "source": "     if(!(this.mode[0] == \"w\" && this.position == 0 && this.uploadDate == null)) {",
            "missing": [
              {
                "startCol": 8,
                "endCol": 79
              },
              {
                "startCol": 9,
                "endCol": 79
              },
              {
                "startCol": 10,
                "endCol": 29
              },
              {
                "startCol": 33,
                "endCol": 51
              },
              {
                "startCol": 55,
                "endCol": 78
              }
            ]
          },
          "1157": {
            "partial": false,
            "source": "       this.internalChunkSize = this.internalChunkSize;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 55
              }
            ]
          },
          "1159": {
            "partial": false,
            "source": "       this.internalChunkSize = value;",
            "missing": [
              {
                "startCol": 7,
                "endCol": 38
              }
            ]
          },
          "1175": {
            "partial": false,
            "source": "     return this.internalMd5;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 29
              }
            ]
          },
          "1186": {
            "partial": false,
            "source": "    if(this._writeable == null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 30
              }
            ]
          },
          "1187": {
            "partial": false,
            "source": "      this._writeable = this.mode != null && this.mode.indexOf(\"w\") != -1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 74
              },
              {
                "startCol": 24,
                "endCol": 41
              },
              {
                "startCol": 45,
                "endCol": 67
              },
              {
                "startCol": 71,
                "endCol": 73
              }
            ]
          },
          "1190": {
            "partial": false,
            "source": "    return this._writeable;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "1193": {
            "partial": false,
            "source": "    this._writeable = value;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 28
              }
            ]
          },
          "1203": {
            "partial": false,
            "source": "    if(this._readable == null) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 29
              }
            ]
          },
          "1204": {
            "partial": false,
            "source": "      this._readable = this.mode != null && this.mode.indexOf(\"r\") != -1;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 73
              },
              {
                "startCol": 23,
                "endCol": 40
              },
              {
                "startCol": 44,
                "endCol": 66
              },
              {
                "startCol": 70,
                "endCol": 72
              }
            ]
          },
          "1206": {
            "partial": false,
            "source": "    return this._readable;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "1209": {
            "partial": false,
            "source": "    this._readable = value;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "1226": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "1228": {
            "partial": false,
            "source": "  if(!this.writable) return;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              },
              {
                "startCol": 21,
                "endCol": 28
              }
            ]
          },
          "1229": {
            "partial": false,
            "source": "  this.writable = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "1231": {
            "partial": false,
            "source": "  if(data) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 9
              }
            ]
          },
          "1232": {
            "partial": false,
            "source": "    this._q.push(data);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "1235": {
            "partial": false,
            "source": "  this.on('drain', function () {",
            "missing": [
              {}
            ]
          },
          "1236": {
            "partial": false,
            "source": "    self.close(function (err) {",
            "missing": [
              {}
            ]
          },
          "1237": {
            "partial": false,
            "source": "      if (err) return _error(self, err);",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 39
              },
              {
                "startCol": 10,
                "endCol": 13
              },
              {
                "startCol": 15,
                "endCol": 40
              }
            ]
          },
          "1238": {
            "partial": false,
            "source": "      self.emit('close');",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 25
              }
            ]
          },
          "1239": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "1240": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1242": {
            "partial": false,
            "source": "  _flush(self);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "1251": {
            "partial": false,
            "source": "  if(Buffer.isBuffer(data)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 26
              }
            ]
          },
          "1252": {
            "partial": false,
            "source": "    return writeBuffer(self, data, close, callback);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              },
              {
                "startCol": 11,
                "endCol": 51
              }
            ]
          },
          "1255": {
            "partial": false,
            "source": "    return writeBuffer(self, new Buffer(data, 'binary'), close, callback);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 74
              },
              {
                "startCol": 11,
                "endCol": 73
              }
            ]
          },
          "1270": {
            "partial": false,
            "source": "  if(typeof close == 'function' || typeof callback == 'function') {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 17
              },
              {
                "startCol": 12,
                "endCol": 17
              },
              {
                "startCol": 35,
                "endCol": 50
              },
              {
                "startCol": 42,
                "endCol": 50
              }
            ]
          },
          "1271": {
            "partial": false,
            "source": "    return _writeNormal(this, data, close, callback);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 53
              },
              {
                "startCol": 11,
                "endCol": 52
              }
            ]
          },
          "1275": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "1276": {
            "partial": false,
            "source": "  if (!this.writable) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 20
              }
            ]
          },
          "1277": {
            "partial": false,
            "source": "    throw new Error('GridWriteStream is not writable');",
            "missing": [
              {
                "startCol": 4,
                "endCol": 55
              }
            ]
          },
          "1281": {
            "partial": false,
            "source": "  if (!this._opened) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 19
              }
            ]
          },
          "1283": {
            "partial": false,
            "source": "    this._q = [];",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1284": {
            "partial": false,
            "source": "    _openStream(self);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 21
              }
            ]
          },
          "1285": {
            "partial": false,
            "source": "    this._q.push(data);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "1286": {
            "partial": false,
            "source": "    return false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 17
              }
            ]
          },
          "1290": {
            "partial": false,
            "source": "  this._q.push(data);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "1291": {
            "partial": false,
            "source": "  _flush(this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "1293": {
            "partial": false,
            "source": "  return true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "1302": {
            "partial": false,
            "source": "  if(!this.writable) return;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 19
              },
              {
                "startCol": 21,
                "endCol": 28
              }
            ]
          },
          "1303": {
            "partial": false,
            "source": "  this.readable = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "1305": {
            "partial": false,
            "source": "    this.writable = false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "1306": {
            "partial": false,
            "source": "    this._q.length = 0;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "1307": {
            "partial": false,
            "source": "    this.emit('close');",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "1318": {
            "partial": false,
            "source": "  if(!this._q.length) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 20
              }
            ]
          },
          "1319": {
            "partial": false,
            "source": "    return this.destroy();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              },
              {
                "startCol": 11,
                "endCol": 25
              }
            ]
          },
          "1321": {
            "partial": false,
            "source": "  this._destroying = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 26
              }
            ]
          },
          "1329": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "1331": {
            "partial": false,
            "source": "  this.open(function(err, result) {",
            "missing": [
              {}
            ]
          },
          "1332": {
            "partial": false,
            "source": "    if(err) _errorRead(self, err);",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 34
              }
            ]
          },
          "1333": {
            "partial": false,
            "source": "    if(!self.readable) return;",
            "missing": [
              {},
              {
                "startCol": 7,
                "endCol": 21
              },
              {
                "startCol": 23,
                "endCol": 30
              }
            ]
          },
          "1334": {
            "partial": false,
            "source": "    // Set up the pipe",
            "missing": [
              {}
            ]
          },
          "1335": {
            "partial": false,
            "source": "    self._pipe(destination, options);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 36
              }
            ]
          },
          "1336": {
            "partial": false,
            "source": "    // Emit the stream is open",
            "missing": [
              {}
            ]
          },
          "1337": {
            "partial": false,
            "source": "    self.emit('open');",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 21
              }
            ]
          },
          "1338": {
            "partial": false,
            "source": "    // Read from the stream",
            "missing": [
              {}
            ]
          },
          "1339": {
            "partial": false,
            "source": "    _read(self);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              },
              {}
            ]
          },
          "1340": {
            "partial": false,
            "source": "  })",
            "missing": [
              {}
            ]
          },
          "1341": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "1348": {
            "partial": false,
            "source": "  if (!self.readable || self.paused || self.reading) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 20
              }
            ]
          },
          "1349": {
            "partial": false,
            "source": "    return;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 11
              }
            ]
          },
          "1352": {
            "partial": false,
            "source": "  self.reading = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "1353": {
            "partial": false,
            "source": "  var stream = self._stream = self.stream();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 44
              },
              {
                "startCol": 30,
                "endCol": 43
              }
            ]
          },
          "1354": {
            "partial": false,
            "source": "  stream.paused = self.paused;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 30
              }
            ]
          },
          "1356": {
            "partial": false,
            "source": "  stream.on('data', function (data) {",
            "missing": [
              {}
            ]
          },
          "1357": {
            "partial": false,
            "source": "    if (self._decoder) {",
            "missing": [
              {}
            ]
          },
          "1358": {
            "partial": false,
            "source": "      var str = self._decoder.write(data);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 42
              },
              {},
              {
                "startCol": 16,
                "endCol": 41
              }
            ]
          },
          "1359": {
            "partial": false,
            "source": "      if (str.length) self.emit('data', str);",
            "missing": [
              {},
              {
                "startCol": 22,
                "endCol": 44
              }
            ]
          },
          "1360": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "1361": {
            "partial": false,
            "source": "      self.emit('data', data);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 30
              },
              {}
            ]
          },
          "1362": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "1363": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1365": {
            "partial": false,
            "source": "  stream.on('end', function (data) {",
            "missing": [
              {}
            ]
          },
          "1366": {
            "partial": false,
            "source": "    self.emit('end', data);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "1367": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1369": {
            "partial": false,
            "source": "  stream.on('error', function (data) {",
            "missing": [
              {}
            ]
          },
          "1370": {
            "partial": false,
            "source": "    _errorRead(self, data);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              },
              {}
            ]
          },
          "1371": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1373": {
            "partial": false,
            "source": "  stream.on('close', function (data) {",
            "missing": [
              {}
            ]
          },
          "1374": {
            "partial": false,
            "source": "    self.emit('close', data);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 28
              }
            ]
          },
          "1375": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1377": {
            "partial": false,
            "source": "  self.pause = function () {",
            "missing": [
              {}
            ]
          },
          "1378": {
            "partial": false,
            "source": "    // native doesn't always pause.",
            "missing": [
              {}
            ]
          },
          "1379": {
            "partial": false,
            "source": "    // bypass its pause() method to hack it",
            "missing": [
              {}
            ]
          },
          "1380": {
            "partial": false,
            "source": "    self.paused = stream.paused = true;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 39
              }
            ]
          },
          "1381": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "1382": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1383": {
            "partial": false,
            "source": "  self.resume = function () {",
            "missing": [
              {}
            ]
          },
          "1384": {
            "partial": false,
            "source": "    self.paused = false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              },
              {}
            ]
          },
          "1385": {
            "partial": false,
            "source": "    stream.resume();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 19
              },
              {}
            ]
          },
          "1386": {
            "partial": false,
            "source": "    self.readable = stream.readable;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 36
              }
            ]
          },
          "1387": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "1388": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "1389": {
            "partial": false,
            "source": "  self.destroy = function () {",
            "missing": [
              {}
            ]
          },
          "1390": {
            "partial": false,
            "source": "    self.readable = false;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "1391": {
            "partial": false,
            "source": "    stream.destroy();",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "1392": {
            "partial": false,
            "source": "  }",
            "missing": [
              {}
            ]
          },
          "1393": {
            "partial": false,
            "source": "}",
            "missing": [
              {}
            ]
          },
          "1401": {
            "partial": false,
            "source": "  this.paused = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 21
              }
            ]
          },
          "1410": {
            "partial": false,
            "source": "  this.paused = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "1418": {
            "partial": false,
            "source": "  if (!self._opened) return;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 19
              },
              {
                "startCol": 21,
                "endCol": 28
              }
            ]
          },
          "1419": {
            "partial": false,
            "source": "  if (!_force && self._flushing) return;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 13
              },
              {
                "startCol": 7,
                "endCol": 13
              },
              {
                "startCol": 33,
                "endCol": 40
              }
            ]
          },
          "1420": {
            "partial": false,
            "source": "  self._flushing = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "1423": {
            "partial": false,
            "source": "  if (!self._q.length) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 21
              }
            ]
          },
          "1424": {
            "partial": false,
            "source": "    self._flushing = false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "1425": {
            "partial": false,
            "source": "    self.emit('drain');",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              }
            ]
          },
          "1428": {
            "partial": false,
            "source": "      self.destroy();",
            "missing": [
              {
                "startCol": 6,
                "endCol": 20
              }
            ]
          },
          "1430": {
            "partial": false,
            "source": "    return;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 11
              }
            ]
          },
          "1433": {
            "partial": false,
            "source": "  self.write(self._q.shift(), function (err, store) {",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 28
              }
            ]
          },
          "1434": {
            "partial": false,
            "source": "    if (err) return _error(self, err);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 11
              },
              {
                "startCol": 13,
                "endCol": 38
              },
              {
                "startCol": 20,
                "endCol": 37
              }
            ]
          },
          "1435": {
            "partial": false,
            "source": "    self.emit('progress', store.position);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 41
              },
              {}
            ]
          },
          "1436": {
            "partial": false,
            "source": "    _flush(self, true);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 22
              },
              {}
            ]
          },
          "1437": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1441": {
            "partial": false,
            "source": "  if(self._opening == true) return;",
            "missing": [
              {
                "startCol": 5,
                "endCol": 26
              },
              {
                "startCol": 28,
                "endCol": 35
              }
            ]
          },
          "1442": {
            "partial": false,
            "source": "  self._opening = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "1445": {
            "partial": false,
            "source": "  self.open(function (err, gridstore) {",
            "missing": [
              {}
            ]
          },
          "1446": {
            "partial": false,
            "source": "    if (err) return _error(self, err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 11
              },
              {},
              {
                "startCol": 13,
                "endCol": 38
              },
              {
                "startCol": 20,
                "endCol": 37
              }
            ]
          },
          "1447": {
            "partial": false,
            "source": "    self._opened = true;",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 24
              }
            ]
          },
          "1448": {
            "partial": false,
            "source": "    self.emit('open');",
            "missing": [
              {
                "startCol": 4,
                "endCol": 21
              },
              {}
            ]
          },
          "1449": {
            "partial": false,
            "source": "    _flush(self);",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "1450": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "1454": {
            "partial": false,
            "source": "  self.destroy();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 16
              }
            ]
          },
          "1455": {
            "partial": false,
            "source": "  self.emit('error', err);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "1459": {
            "partial": false,
            "source": "  self.readable = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "1460": {
            "partial": false,
            "source": "  self.emit('error', err);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          }
        },
        "source": "/**\n * @fileOverview GridFS is a tool for MongoDB to store files to the database.\n * Because of the restrictions of the object size the database can hold, a\n * facility to split a file into several chunks is needed. The {@link GridStore}\n * class offers a simplified api to interact with files while managing the\n * chunks of split files behind the scenes. More information about GridFS can be\n * found <a href=\"http://www.mongodb.org/display/DOCS/GridFS\">here</a>.\n */\nvar Chunk = require('./chunk').Chunk,\n  DbCommand = require('../commands/db_command').DbCommand,\n  ObjectID = require('bson').ObjectID,\n  Buffer = require('buffer').Buffer,\n  fs = require('fs'),\n  util = require('util'),\n  inherits = util.inherits,\n  ReadStream = require('./readstream').ReadStream,\n  Stream = require('stream');\n\nvar REFERENCE_BY_FILENAME = 0,\n  REFERENCE_BY_ID = 1;\n\n/**\n * A class representation of a file stored in GridFS.\n *\n * Modes\n *  - **\"r\"** - read only. This is the default mode.\n *  - **\"w\"** - write in truncate mode. Existing data will be overwriten.\n *  - **w+\"** - write in edit mode.\n *\n * Options\n *  - **root** {String}, root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n *  - **content_type** {String}, mime type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.\n *  - **chunk_size** {Number}, size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.\n *  - **metadata** {Object}, arbitrary data the user wants to store.\n *\n * @class Represents the GridStore.\n * @param {Db} db A database instance to interact with.\n * @param {ObjectID} id an unique ObjectID for this file\n * @param {String} [filename] optional a filename for this file, no unique constrain on the field\n * @param {String} mode set the mode for this file.\n * @param {Object} options optional properties to specify. Recognized keys:\n * @return {GridStore}\n */\nvar GridStore = function GridStore(db, id, filename, mode, options) {\n  if(!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);\n\n  var self = this;\n  this.db = db;\n\n  // Call stream constructor\n  if(typeof Stream == 'function') {\n    Stream.call(this);\n  } else {\n    // 0.4.X backward compatibility fix\n    Stream.Stream.call(this);\n  }\n\n  // Handle options\n  if(options == null) options = {};\n  // Handle mode\n  if(mode == null) {\n    mode = filename;\n    filename = null;\n  } else if(typeof mode == 'object') {\n    options = mode;\n    mode = filename;\n    filename = null;\n  }\n\n  // Handle id\n  if(id instanceof ObjectID && (typeof filename == 'string' || filename == null)) {\n    this.referenceBy = 1;\n    this.fileId = id;\n    this.filename = filename;\n  } else if(!(id instanceof ObjectID) && typeof id == 'string' && mode.indexOf(\"w\") != null) {\n    this.referenceBy = 0;\n    this.fileId = new ObjectID();\n    this.filename = id;\n  } else if(!(id instanceof ObjectID) && typeof id == 'string' && mode.indexOf(\"r\") != null) {\n    this.referenceBy = 0;\n    this.filename = filename;\n  } else {\n    this.referenceBy = 1;\n    this.fileId = id;\n    this.filename = filename;\n  }\n\n  // Set up the rest\n  this.mode = mode == null ? \"r\" : mode;\n  this.options = options == null ? {} : options;\n  this.root = this.options['root'] == null ? exports.GridStore.DEFAULT_ROOT_COLLECTION : this.options['root'];\n  this.position = 0;\n  // Set default chunk size\n  this.internalChunkSize = this.options['chunkSize'] == null ? Chunk.DEFAULT_CHUNK_SIZE : this.options['chunkSize'];\n  // Previous chunk size\n  this.previousChunkSize = 0;\n}\n\n/**\n *  Code for the streaming capabilities of the gridstore object\n *  Most code from Aaron heckmanns project https://github.com/aheckmann/gridfs-stream\n *  Modified to work on the gridstore object itself\n *  @ignore\n */\nif(typeof Stream == 'function') {\n  GridStore.prototype = { __proto__: Stream.prototype }\n} else {\n  // Node 0.4.X compatibility code\n  GridStore.prototype = { __proto__: Stream.Stream.prototype }\n}\n\n// Move pipe to _pipe\nGridStore.prototype._pipe = GridStore.prototype.pipe;\n\n/**\n * Opens the file from the database and initialize this object. Also creates a\n * new one if file does not exist.\n *\n * @param {Function} callback this will be called after executing this method. The first parameter will contain an **{Error}** object and the second parameter will be null if an error occured. Otherwise, the first parameter will be null and the second will contain the reference to this object.\n * @return {null}\n * @api public\n */\nGridStore.prototype.open = function(callback) {\n  if( this.mode != \"w\" && this.mode != \"w+\" && this.mode != \"r\"){\n    callback(new Error(\"Illegal mode \" + this.mode), null);\n    return;\n  }\n\n  var self = this;\n\n  if((self.mode == \"w\" || self.mode == \"w+\") && self.db.serverConfig.primary != null) {\n    // Get files collection\n    self.collection(function(err, collection) {\n      if(err) return callback(err);\n\n      // Put index on filename\n      collection.ensureIndex([['filename', 1]], function(err, index) {\n        if(err) return callback(err);\n\n        // Get chunk collection\n        self.chunkCollection(function(err, chunkCollection) {\n          if(err) return callback(err);\n\n          // Ensure index on chunk collection\n          chunkCollection.ensureIndex([['files_id', 1], ['n', 1]], function(err, index) {\n            if(err) return callback(err);\n            _open(self, callback);\n          });\n        });\n      });\n    });\n  } else {\n    // Open the gridstore\n    _open(self, callback);\n  }\n};\n\n/**\n * Hidding the _open function\n * @ignore\n * @api private\n */\nvar _open = function(self, callback) {\n  self.collection(function(err, collection) {\n    if(err!==null) {\n      callback(new Error(\"at collection: \"+err), null);\n      return;\n    }\n\n    // Create the query\n    var query = self.referenceBy == REFERENCE_BY_ID ? {_id:self.fileId} : {filename:self.filename};\n    query = null == self.fileId && this.filename == null ? null : query;\n\n    // Fetch the chunks\n    if(query != null) {\n      collection.find(query, function(err, cursor) {\n        if(err) return error(err);\n\n        // Fetch the file\n        cursor.nextObject(function(err, doc) {\n          if(err) return error(err);\n\n          // Check if the collection for the files exists otherwise prepare the new one\n          if(doc != null) {\n            self.fileId = doc._id;\n            self.filename = doc.filename;\n            self.contentType = doc.contentType;\n            self.internalChunkSize = doc.chunkSize;\n            self.uploadDate = doc.uploadDate;\n            self.aliases = doc.aliases;\n            self.length = doc.length;\n            self.metadata = doc.metadata;\n            self.internalMd5 = doc.md5;\n          } else if (self.mode != 'r') {\n            self.fileId = self.fileId == null ? new ObjectID() : self.fileId;\n            self.contentType = exports.GridStore.DEFAULT_CONTENT_TYPE;\n            self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;\n            self.length = 0;\n          } else {\n            self.length = 0;\n            return error(new Error((self.referenceBy == REFERENCE_BY_ID ? self.fileId.toHexString() : self.filename) + \" does not exist\", self));\n          }\n\n          // Process the mode of the object\n          if(self.mode == \"r\") {\n            nthChunk(self, 0, function(err, chunk) {\n              if(err) return error(err);\n              self.currentChunk = chunk;\n              self.position = 0;\n              callback(null, self);\n            });\n          } else if(self.mode == \"w\") {\n            // Delete any existing chunks\n            deleteChunks(self, function(err, result) {\n              if(err) return error(err);\n              self.currentChunk = new Chunk(self, {'n':0});\n              self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];\n              self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];\n              self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n              self.position = 0;\n              callback(null, self);\n            });\n          } else if(self.mode == \"w+\") {\n            nthChunk(self, lastChunkNumber(self), function(err, chunk) {\n              if(err) return error(err);\n              // Set the current chunk\n              self.currentChunk = chunk == null ? new Chunk(self, {'n':0}) : chunk;\n              self.currentChunk.position = self.currentChunk.data.length();\n              self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n              self.position = self.length;\n              callback(null, self);\n            });\n          }\n        });\n      });\n    } else {\n      // Write only mode\n      self.fileId = null == self.fileId ? new ObjectID() : self.fileId;\n      self.contentType = exports.GridStore.DEFAULT_CONTENT_TYPE;\n      self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;\n      self.length = 0;\n\n      self.chunkCollection(function(err, collection2) {\n        if(err) return error(err);\n\n        // No file exists set up write mode\n        if(self.mode == \"w\") {\n          // Delete any existing chunks\n          deleteChunks(self, function(err, result) {\n            if(err) return error(err);\n            self.currentChunk = new Chunk(self, {'n':0});\n            self.contentType = self.options['content_type'] == null ? self.contentType : self.options['content_type'];\n            self.internalChunkSize = self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];\n            self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n            self.position = 0;\n            callback(null, self);\n          });\n        } else if(self.mode == \"w+\") {\n          nthChunk(self, lastChunkNumber(self), function(err, chunk) {\n            if(err) return error(err);\n            // Set the current chunk\n            self.currentChunk = chunk == null ? new Chunk(self, {'n':0}) : chunk;\n            self.currentChunk.position = self.currentChunk.data.length();\n            self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n            self.position = self.length;\n            callback(null, self);\n          });\n        }\n      });\n    }\n  });\n\n  // only pass error to callback once\n  function error (err) {\n    if(error.err) return;\n    callback(error.err = err);\n  }\n};\n\n/**\n * Stores a file from the file system to the GridFS database.\n *\n * @param {String|Buffer|FileHandle} file the file to store.\n * @param {Function} callback this will be called after this method is executed. The first parameter will be null and the the second will contain the reference to this object.\n * @return {null}\n * @api public\n */\nGridStore.prototype.writeFile = function (file, callback) {\n  var self = this;\n  if (typeof file === 'string') {\n    fs.open(file, 'r', 0666, function (err, fd) {\n      if(err) return callback(err);\n      self.writeFile(fd, callback);\n    });\n    return;\n  }\n\n  self.open(function (err, self) {\n    if(err) return callback(err);\n\n    fs.fstat(file, function (err, stats) {\n      if(err) return callback(err);\n\n      var offset = 0;\n      var index = 0;\n      var numberOfChunksLeft = Math.min(stats.size / self.chunkSize);\n\n      // Write a chunk\n      var writeChunk = function() {\n        fs.read(file, self.chunkSize, offset, 'binary', function(err, data, bytesRead) {\n          if(err) return callback(err);\n\n          offset = offset + bytesRead;\n\n          // Create a new chunk for the data\n          var chunk = new Chunk(self, {n:index++});\n          chunk.write(data, function(err, chunk) {\n            if(err) return callback(err);\n\n            chunk.save(function(err, result) {\n              if(err) return callback(err);\n\n              self.position = self.position + data.length;\n\n              // Point to current chunk\n              self.currentChunk = chunk;\n\n              if(offset >= stats.size) {\n                fs.close(file);\n                self.close(callback);\n              } else {\n                return process.nextTick(writeChunk);\n              }\n            });\n          });\n        });\n      }\n\n      // Process the first write\n      process.nextTick(writeChunk);\n    });\n  });\n};\n\n/**\n * Writes some data. This method will work properly only if initialized with mode\n * \"w\" or \"w+\".\n *\n * @param string {string} The data to write.\n * @param close {boolean=false} opt_argument Closes this file after writing if\n *     true.\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n *\n * @ignore\n * @api private\n */\nvar writeBuffer = function(self, buffer, close, callback) {\n  if(typeof close === \"function\") { callback = close; close = null; }\n  var finalClose = (close == null) ? false : close;\n\n  if(self.mode[0] != \"w\") {\n    callback(new Error((self.referenceBy == REFERENCE_BY_ID ? self.toHexString() : self.filename) + \" not opened for writing\"), null);\n  } else {\n    if(self.currentChunk.position + buffer.length >= self.chunkSize) {\n      // Write out the current Chunk and then keep writing until we have less data left than a chunkSize left\n      // to a new chunk (recursively)\n      var previousChunkNumber = self.currentChunk.chunkNumber;\n      var leftOverDataSize = self.chunkSize - self.currentChunk.position;\n      var firstChunkData = buffer.slice(0, leftOverDataSize);\n      var leftOverData = buffer.slice(leftOverDataSize);\n      // A list of chunks to write out\n      var chunksToWrite = [self.currentChunk.write(firstChunkData)];\n      // If we have more data left than the chunk size let's keep writing new chunks\n      while(leftOverData.length >= self.chunkSize) {\n        // Create a new chunk and write to it\n        var newChunk = new Chunk(self, {'n': (previousChunkNumber + 1)});\n        var firstChunkData = leftOverData.slice(0, self.chunkSize);\n        leftOverData = leftOverData.slice(self.chunkSize);\n        // Update chunk number\n        previousChunkNumber = previousChunkNumber + 1;\n        // Write data\n        newChunk.write(firstChunkData);\n        // Push chunk to save list\n        chunksToWrite.push(newChunk);\n      }\n\n      // Set current chunk with remaining data\n      self.currentChunk = new Chunk(self, {'n': (previousChunkNumber + 1)});\n      // If we have left over data write it\n      if(leftOverData.length > 0) self.currentChunk.write(leftOverData);\n\n      // Update the position for the gridstore\n      self.position = self.position + buffer.length;\n      // Total number of chunks to write\n      var numberOfChunksToWrite = chunksToWrite.length;\n      // Write out all the chunks and then return\n      for(var i = 0; i < chunksToWrite.length; i++) {\n        var chunk = chunksToWrite[i];\n        chunk.save(function(err, result) {\n          if(err) return callback(err);\n\n          numberOfChunksToWrite = numberOfChunksToWrite - 1;\n\n          if(numberOfChunksToWrite <= 0) {\n            return callback(null, self);\n          }\n        })\n      }\n    } else {\n      // Update the position for the gridstore\n      self.position = self.position + buffer.length;\n      // We have less data than the chunk size just write it and callback\n      self.currentChunk.write(buffer);\n      callback(null, self);\n    }\n  }\n};\n\n/**\n * Creates a mongoDB object representation of this object.\n *\n * @param callback {function(object)} This will be called after executing this\n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this file\n *          'filename' : , // {string} name for this file\n *          'contentType' : , // {string} mime type for this file\n *          'length' : , // {number} size of this file?\n *          'chunksize' : , // {number} chunk size used by this file\n *          'uploadDate' : , // {Date}\n *          'aliases' : , // {array of string}\n *          'metadata' : , // {string}\n *        }\n *        </code></pre>\n *\n * @ignore\n * @api private\n */\nvar buildMongoObject = function(self, callback) {\n  // Keeps the final chunk number\n  var chunkNumber = 0;\n  var previousChunkSize = self.previousChunkSize;\n  // Get the correct chunk Number, if we have an empty chunk return the previous chunk number\n  if(null != self.currentChunk && self.currentChunk.chunkNumber > 0 && self.currentChunk.position == 0) {\n    chunkNumber = self.currentChunk.chunkNumber - 1;\n  } else {\n    chunkNumber = self.currentChunk.chunkNumber;\n    previousChunkSize = self.currentChunk.position;\n  }\n\n  // Calcuate the length\n  var length = self.currentChunk != null ? (chunkNumber * self.chunkSize + previousChunkSize) : 0;\n  var mongoObject = {\n    '_id': self.fileId,\n    'filename': self.filename,\n    'contentType': self.contentType,\n    'length': self.position ? self.position : 0,\n    'chunkSize': self.chunkSize,\n    'uploadDate': self.uploadDate,\n    'aliases': self.aliases,\n    'metadata': self.metadata\n  };\n\n  var md5Command = {filemd5:self.fileId, root:self.root};\n  self.db.command(md5Command, function(err, results) {\n    mongoObject.md5 = results.md5;\n    callback(mongoObject);\n  });\n};\n\n/**\n * Saves this file to the database. This will overwrite the old entry if it\n * already exists. This will work properly only if mode was initialized to\n * \"w\" or \"w+\".\n *\n * @param {Function} callback this will be called after executing this method. Passes an **{Error}** object to the first parameter and null to the second if an error occured. Otherwise, passes null to the first and a reference to this object to the second.\n * @return {null}\n * @api public\n */\nGridStore.prototype.close = function(callback) {\n  var self = this;\n\n  if(self.mode[0] == \"w\") {\n    if(self.currentChunk != null && self.currentChunk.position > 0) {\n      self.currentChunk.save(function(err, chunk) {\n        if(err) return callback(err);\n\n        self.collection(function(err, files) {\n          if(err) return callback(err);\n\n          // Build the mongo object\n          if(self.uploadDate != null) {\n            files.remove({'_id':self.fileId}, {safe:true}, function(err, collection) {\n              if(err) return callback(err);\n\n              buildMongoObject(self, function(mongoObject) {\n                files.save(mongoObject, {safe:true}, function(err) {\n                  callback(err, mongoObject);\n                });\n              });\n            });\n          } else {\n            self.uploadDate = new Date();\n            buildMongoObject(self, function(mongoObject) {\n              files.save(mongoObject, {safe:true}, function(err) {\n                callback(err, mongoObject);\n              });\n            });\n          }\n        });\n      });\n    } else {\n      self.collection(function(err, files) {\n        if(err) return callback(err);\n\n        self.uploadDate = new Date();\n        buildMongoObject(self, function(mongoObject) {\n          files.save(mongoObject, {safe:true}, function(err) {\n            callback(err, mongoObject);\n          });\n        });\n      });\n    }\n  } else if(self.mode[0] == \"r\") {\n    callback(null, null);\n  } else {\n    callback(new Error(\"Illegal mode \" + self.mode), null);\n  }\n};\n\n/**\n * Gets the nth chunk of this file.\n *\n * @param chunkNumber {number} The nth chunk to retrieve.\n * @param callback {function(*, Chunk|object)} This will be called after\n *     executing this method. null will be passed to the first parameter while\n *     a new {@link Chunk} instance will be passed to the second parameter if\n *     the chunk was found or an empty object {} if not.\n *\n * @ignore\n * @api private\n */\nvar nthChunk = function(self, chunkNumber, callback) {\n  self.chunkCollection(function(err, collection) {\n    if(err) return callback(err);\n\n    collection.find({'files_id':self.fileId, 'n':chunkNumber}, function(err, cursor) {\n      if(err) return callback(err);\n\n      cursor.nextObject(function(err, chunk) {\n        if(err) return callback(err);\n\n        var finalChunk = chunk == null ? {} : chunk;\n        callback(null, new Chunk(self, finalChunk));\n      });\n    });\n  });\n};\n\n/**\n *\n * @ignore\n * @api private\n */\nGridStore.prototype._nthChunk = function(chunkNumber, callback) {\n  nthChunk(this, chunkNumber, callback);\n}\n\n/**\n * @return {Number} The last chunk number of this file.\n *\n * @ignore\n * @api private\n */\nvar lastChunkNumber = function(self) {\n  return Math.floor(self.length/self.chunkSize);\n};\n\n/**\n * Retrieve this file's chunks collection.\n *\n * @param {Function} callback this will be called after executing this method. An exception object will be passed to the first parameter when an error occured or null otherwise. A new **{Collection}** object will be passed to the second parameter if no error occured.\n * @return {null}\n * @api public\n */\nGridStore.prototype.chunkCollection = function(callback) {\n  this.db.collection((this.root + \".chunks\"), callback);\n};\n\n/**\n * Deletes all the chunks of this file in the database.\n *\n * @param callback {function(*, boolean)} This will be called after this method\n *     executes. Passes null to the first and true to the second argument.\n *\n * @ignore\n * @api private\n */\nvar deleteChunks = function(self, callback) {\n  if(self.fileId != null) {\n    self.chunkCollection(function(err, collection) {\n      if(err) return callback(err, false);\n      collection.remove({'files_id':self.fileId}, {safe:true}, function(err, result) {\n        if(err) return callback(err, false);\n        callback(null, true);\n      });\n    });\n  } else {\n    callback(null, true);\n  }\n};\n\n/**\n * Deletes all the chunks of this file in the database.\n *\n * @param {Function} callback this will be called after this method executes. Passes null to the first and true to the second argument.\n * @return {null}\n * @api public\n */\nGridStore.prototype.unlink = function(callback) {\n  var self = this;\n  deleteChunks(this, function(err) {\n    if(err!==null) {\n      err.message = \"at deleteChunks: \" + err.message;\n      return callback(err);\n    }\n\n    self.collection(function(err, collection) {\n      if(err!==null) {\n        err.message = \"at collection: \" + err.message;\n        return callback(err);\n      }\n\n      collection.remove({'_id':self.fileId}, {safe:true}, function(err) {\n        callback(err, self);\n      });\n    });\n  });\n};\n\n/**\n * Retrieves the file collection associated with this object.\n *\n * @param {Function} callback this will be called after executing this method. An exception object will be passed to the first parameter when an error occured or null otherwise. A new **{Collection}** object will be passed to the second parameter if no error occured.\n * @return {null}\n * @api public\n */\nGridStore.prototype.collection = function(callback) {\n  this.db.collection(this.root + \".files\", callback);\n};\n\n/**\n * Reads the data of this file.\n *\n * @param {String} [separator] the character to be recognized as the newline separator.\n * @param {Function} callback This will be called after this method is executed. The first parameter will be null and the second parameter will contain an array of strings representing the entire data, each element representing a line including the separator character.\n * @return {null}\n * @api public\n */\nGridStore.prototype.readlines = function(separator, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  separator = args.length ? args.shift() : \"\\n\";\n\n  this.read(function(err, data) {\n    if(err) return callback(err);\n\n    var items = data.toString().split(separator);\n    items = items.length > 0 ? items.splice(0, items.length - 1) : [];\n    for(var i = 0; i < items.length; i++) {\n      items[i] = items[i] + separator;\n    }\n\n    callback(null, items);\n  });\n};\n\n/**\n * Deletes all the chunks of this file in the database if mode was set to \"w\" or\n * \"w+\" and resets the read/write head to the initial position.\n *\n * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGridStore.prototype.rewind = function(callback) {\n  var self = this;\n\n  if(this.currentChunk.chunkNumber != 0) {\n    if(this.mode[0] == \"w\") {\n      deleteChunks(self, function(err, gridStore) {\n        if(err) return callback(err);\n        self.currentChunk = new Chunk(self, {'n': 0});\n        self.position = 0;\n        callback(null, self);\n      });\n    } else {\n      self.currentChunk(0, function(err, chunk) {\n        if(err) return callback(err);\n        self.currentChunk = chunk;\n        self.currentChunk.rewind();\n        self.position = 0;\n        callback(null, self);\n      });\n    }\n  } else {\n    self.currentChunk.rewind();\n    self.position = 0;\n    callback(null, self);\n  }\n};\n\n/**\n * Retrieves the contents of this file and advances the read/write head. Works with Buffers only.\n *\n * There are 3 signatures for this method:\n *\n * (callback)\n * (length, callback)\n * (length, buffer, callback)\n *\n * @param {Number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.\n * @param {String|Buffer} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.\n * @param {Function} callback this will be called after this method is executed. null will be passed to the first parameter and a string containing the contents of the buffer concatenated with the contents read from this file will be passed to the second.\n * @return {null}\n * @api public\n */\nGridStore.prototype.read = function(length, buffer, callback) {\n  var self = this;\n\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  length = args.length ? args.shift() : null;\n  buffer = args.length ? args.shift() : null;\n\n  // The data is a c-terminated string and thus the length - 1\n  var finalLength = length == null ? self.length - self.position : length;\n  var finalBuffer = buffer == null ? new Buffer(finalLength) : buffer;\n  // Add a index to buffer to keep track of writing position or apply current index\n  finalBuffer._index = buffer != null && buffer._index != null ? buffer._index : 0;\n\n  if((self.currentChunk.length() - self.currentChunk.position + finalBuffer._index) >= finalLength) {\n    var slice = self.currentChunk.readSlice(finalLength - finalBuffer._index);\n    // Copy content to final buffer\n    slice.copy(finalBuffer, finalBuffer._index);\n    // Update internal position\n    self.position = finalBuffer.length;\n    // Check if we don't have a file at all\n    if(finalLength == 0 && finalBuffer.length == 0) return callback(new Error(\"File does not exist\"), null);\n    // Else return data\n    callback(null, finalBuffer);\n  } else {\n    var slice = self.currentChunk.readSlice(self.currentChunk.length() - self.currentChunk.position);\n    // Copy content to final buffer\n    slice.copy(finalBuffer, finalBuffer._index);\n    // Update index position\n    finalBuffer._index += slice.length;\n\n    // Load next chunk and read more\n    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {\n      if(err) return callback(err);\n\n      if(chunk.length() > 0) {\n        self.currentChunk = chunk;\n        self.read(length, finalBuffer, callback);\n      } else {\n        if (finalBuffer._index > 0) {\n          callback(null, finalBuffer)\n        } else {\n          callback(new Error(\"no chunks found for file, possibly corrupt\"), null);\n        }\n      }\n    });\n  }\n}\n\n/**\n * Retrieves the position of the read/write head of this file.\n *\n * @param {Function} callback This gets called after this method terminates. null is passed to the first parameter and the position is passed to the second.\n * @return {null}\n * @api public\n */\nGridStore.prototype.tell = function(callback) {\n  callback(null, this.position);\n};\n\n/**\n * Moves the read/write head to a new location.\n *\n * There are 3 signatures for this method\n *\n * Seek Location Modes\n *  - **GridStore.IO_SEEK_SET**, **(default)** set the position from the start of the file.\n *  - **GridStore.IO_SEEK_CUR**, set the position from the current position in the file.\n *  - **GridStore.IO_SEEK_END**, set the position from the end of the file.\n *\n * @param {Number} [position] the position to seek to\n * @param {Number} [seekLocation] seek mode. Use one of the Seek Location modes.\n * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGridStore.prototype.seek = function(position, seekLocation, callback) {\n  var self = this;\n\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  seekLocation = args.length ? args.shift() : null;\n\n  var seekLocationFinal = seekLocation == null ? exports.GridStore.IO_SEEK_SET : seekLocation;\n  var finalPosition = position;\n  var targetPosition = 0;\n  if(seekLocationFinal == exports.GridStore.IO_SEEK_CUR) {\n    targetPosition = self.position + finalPosition;\n  } else if(seekLocationFinal == exports.GridStore.IO_SEEK_END) {\n    targetPosition = self.length + finalPosition;\n  } else {\n    targetPosition = finalPosition;\n  }\n\n  var newChunkNumber = Math.floor(targetPosition/self.chunkSize);\n  if(newChunkNumber != self.currentChunk.chunkNumber) {\n    var seekChunk = function() {\n      nthChunk(self, newChunkNumber, function(err, chunk) {\n        self.currentChunk = chunk;\n        self.position = targetPosition;\n        self.currentChunk.position = (self.position % self.chunkSize);\n        callback(err, self);\n      });\n    };\n\n    if(self.mode[0] == 'w') {\n      self.currentChunk.save(function(err) {\n        if(err) return callback(err);\n        seekChunk();\n      });\n    } else {\n      seekChunk();\n    }\n  } else {\n    self.position = targetPosition;\n    self.currentChunk.position = (self.position % self.chunkSize);\n    callback(null, self);\n  }\n};\n\n/**\n * Verify if the file is at EOF.\n *\n * @return {Boolean} true if the read/write head is at the end of this file.\n * @api public\n */\nGridStore.prototype.eof = function() {\n  return this.position == this.length ? true : false;\n};\n\n/**\n * Retrieves a single character from this file.\n *\n * @param {Function} callback this gets called after this method is executed. Passes null to the first parameter and the character read to the second or null to the second if the read/write head is at the end of the file.\n * @return {null}\n * @api public\n */\nGridStore.prototype.getc = function(callback) {\n  var self = this;\n\n  if(self.eof()) {\n    callback(null, null);\n  } else if(self.currentChunk.eof()) {\n    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {\n      self.currentChunk = chunk;\n      self.position = self.position + 1;\n      callback(err, self.currentChunk.getc());\n    });\n  } else {\n    self.position = self.position + 1;\n    callback(null, self.currentChunk.getc());\n  }\n};\n\n/**\n * Writes a string to the file with a newline character appended at the end if\n * the given string does not have one.\n *\n * @param {String} string the string to write.\n * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGridStore.prototype.puts = function(string, callback) {\n  var finalString = string.match(/\\n$/) == null ? string + \"\\n\" : string;\n  this.write(finalString, callback);\n};\n\n/**\n * Returns read stream based on this GridStore file\n *\n * Events\n *  - **data** {function(item) {}} the data event triggers when a document is ready.\n *  - **end** {function() {}} the end event triggers when there is no more documents available.\n *  - **close** {function() {}} the close event triggers when the stream is closed.\n *  - **error** {function(err) {}} the error event triggers if an error happens.\n *\n * @param {Boolean} autoclose if true current GridStore will be closed when EOF and 'close' event will be fired\n * @return {null}\n * @api public\n */\nGridStore.prototype.stream = function(autoclose) {\n  return new ReadStream(autoclose, this);\n};\n\n/**\n* The collection to be used for holding the files and chunks collection.\n*\n* @classconstant DEFAULT_ROOT_COLLECTION\n**/\nGridStore.DEFAULT_ROOT_COLLECTION = 'fs';\n\n/**\n* Default file mime type\n*\n* @classconstant DEFAULT_CONTENT_TYPE\n**/\nGridStore.DEFAULT_CONTENT_TYPE = 'binary/octet-stream';\n\n/**\n* Seek mode where the given length is absolute.\n*\n* @classconstant IO_SEEK_SET\n**/\nGridStore.IO_SEEK_SET = 0;\n\n/**\n* Seek mode where the given length is an offset to the current read/write head.\n*\n* @classconstant IO_SEEK_CUR\n**/\nGridStore.IO_SEEK_CUR = 1;\n\n/**\n* Seek mode where the given length is an offset to the end of the file.\n*\n* @classconstant IO_SEEK_END\n**/\nGridStore.IO_SEEK_END = 2;\n\n/**\n * Checks if a file exists in the database.\n *\n * @param {Db} db the database to query.\n * @param {String} name the name of the file to look for.\n * @param {String} [rootCollection] the root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n * @param {Function} callback this will be called after this method executes. Passes null to the first and passes true to the second if the file exists and false otherwise.\n * @return {null}\n * @api public\n */\nGridStore.exist = function(db, fileIdObject, rootCollection, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  rootCollection = args.length ? args.shift() : null;\n\n  // Fetch collection\n  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;\n  db.collection(rootCollectionFinal + \".files\", function(err, collection) {\n    if(err) return callback(err);\n\n    // Build query\n    var query = (typeof fileIdObject == 'string' || Object.prototype.toString.call(fileIdObject) == '[object RegExp]' )\n      ? {'filename':fileIdObject}\n      : {'_id':fileIdObject};    // Attempt to locate file\n\n    collection.find(query, function(err, cursor) {\n      if(err) return callback(err);\n\n      cursor.nextObject(function(err, item) {\n        if(err) return callback(err);\n        callback(null, item == null ? false : true);\n      });\n    });\n  });\n};\n\n/**\n * Gets the list of files stored in the GridFS.\n *\n * @param {Db} db the database to query.\n * @param {String} [rootCollection] the root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n * @param {Function} callback this will be called after this method executes. Passes null to the first and passes an array of strings containing the names of the files.\n * @return {null}\n * @api public\n */\nGridStore.list = function(db, rootCollection, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  rootCollection = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  // Ensure we have correct values\n  if(rootCollection != null && typeof rootCollection == 'object') {\n    options = rootCollection;\n    rootCollection = null;\n  }\n\n  // Check if we are returning by id not filename\n  var byId = options['id'] != null ? options['id'] : false;\n  // Fetch item\n  var rootCollectionFinal = rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;\n  var items = [];\n  db.collection((rootCollectionFinal + \".files\"), function(err, collection) {\n    if(err) return callback(err);\n\n    collection.find(function(err, cursor) {\n      if(err) return callback(err);\n\n      cursor.each(function(err, item) {\n        if(item != null) {\n          items.push(byId ? item._id : item.filename);\n        } else {\n          callback(err, items);\n        }\n      });\n    });\n  });\n};\n\n/**\n * Reads the contents of a file.\n *\n * This method has the following signatures\n *\n * (db, name, callback)\n * (db, name, length, callback)\n * (db, name, length, offset, callback)\n * (db, name, length, offset, options, callback)\n *\n * @param {Db} db the database to query.\n * @param {String} name the name of the file.\n * @param {Number} [length] the size of data to read.\n * @param {Number} [offset] the offset from the head of the file of which to start reading from.\n * @param {Object} [options] the options for the file.\n * @param {Function} callback this will be called after this method executes. A string with an error message will be passed to the first parameter when the length and offset combination exceeds the length of the file while an Error object will be passed if other forms of error occured, otherwise, a string is passed. The second parameter will contain the data read if successful or null if an error occured.\n * @return {null}\n * @api public\n */\nGridStore.read = function(db, name, length, offset, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  length = args.length ? args.shift() : null;\n  offset = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : null;\n\n  new GridStore(db, name, \"r\", options).open(function(err, gridStore) {\n    if(err) return callback(err);\n    // Make sure we are not reading out of bounds\n    if(offset && offset >= gridStore.length) return callback(\"offset larger than size of file\", null);\n    if(length && length > gridStore.length) return callback(\"length is larger than the size of the file\", null);\n    if(offset && length && (offset + length) > gridStore.length) return callback(\"offset and length is larger than the size of the file\", null);\n\n    if(offset != null) {\n      gridStore.seek(offset, function(err, gridStore) {\n        if(err) return callback(err);\n        gridStore.read(length, callback);\n      });\n    } else {\n      gridStore.read(length, callback);\n    }\n  });\n};\n\n/**\n * Reads the data of this file.\n *\n * @param {Db} db the database to query.\n * @param {String} name the name of the file.\n * @param {String} [separator] the character to be recognized as the newline separator.\n * @param {Object} [options] file options.\n * @param {Function} callback this will be called after this method is executed. The first parameter will be null and the second parameter will contain an array of strings representing the entire data, each element representing a line including the separator character.\n * @return {null}\n * @api public\n */\nGridStore.readlines = function(db, name, separator, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  separator = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : null;\n\n  var finalSeperator = separator == null ? \"\\n\" : separator;\n  new GridStore(db, name, \"r\", options).open(function(err, gridStore) {\n    if(err) return callback(err);\n    gridStore.readlines(finalSeperator, callback);\n  });\n};\n\n/**\n * Deletes the chunks and metadata information of a file from GridFS.\n *\n * @param {Db} db the database to interact with.\n * @param {String|Array} names the name/names of the files to delete.\n * @param {Object} [options] the options for the files.\n * @callback {Function} this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGridStore.unlink = function(db, names, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  options = args.length ? args.shift() : null;\n\n  if(names.constructor == Array) {\n    var tc = 0;\n    for(var i = 0; i < names.length; i++) {\n      ++tc;\n      self.unlink(db, names[i], function(result) {\n        if(--tc == 0) {\n            callback(null, self);\n        }\n      });\n    }\n  } else {\n    new GridStore(db, names, \"w\", options).open(function(err, gridStore) {\n      if(err) return callback(err);\n      deleteChunks(gridStore, function(err, result) {\n        if(err) return callback(err);\n        gridStore.collection(function(err, collection) {\n          if(err) return callback(err);\n          collection.remove({'_id':gridStore.fileId}, {safe:true}, function(err, collection) {\n            callback(err, self);\n          });\n        });\n      });\n    });\n  }\n};\n\n/**\n * Returns the current chunksize of the file.\n *\n * @field chunkSize\n * @type {Number}\n * @getter\n * @setter\n * @property return number of bytes in the current chunkSize.\n */\nObject.defineProperty(GridStore.prototype, \"chunkSize\", { enumerable: true\n , get: function () {\n     return this.internalChunkSize;\n   }\n , set: function(value) {\n     if(!(this.mode[0] == \"w\" && this.position == 0 && this.uploadDate == null)) {\n       this.internalChunkSize = this.internalChunkSize;\n     } else {\n       this.internalChunkSize = value;\n     }\n   }\n});\n\n/**\n * The md5 checksum for this file.\n *\n * @field md5\n * @type {Number}\n * @getter\n * @setter\n * @property return this files md5 checksum.\n */\nObject.defineProperty(GridStore.prototype, \"md5\", { enumerable: true\n , get: function () {\n     return this.internalMd5;\n   }\n});\n\n/**\n *  GridStore Streaming methods\n *  Handles the correct return of the writeable stream status\n *  @ignore\n */\nObject.defineProperty(GridStore.prototype, \"writable\", { enumerable: true\n , get: function () {\n    if(this._writeable == null) {\n      this._writeable = this.mode != null && this.mode.indexOf(\"w\") != -1;\n    }\n    // Return the _writeable\n    return this._writeable;\n  }\n , set: function(value) {\n    this._writeable = value;\n  }\n});\n\n/**\n *  Handles the correct return of the readable stream status\n *  @ignore\n */\nObject.defineProperty(GridStore.prototype, \"readable\", { enumerable: true\n , get: function () {\n    if(this._readable == null) {\n      this._readable = this.mode != null && this.mode.indexOf(\"r\") != -1;\n    }\n    return this._readable;\n  }\n , set: function(value) {\n    this._readable = value;\n  }\n});\n\nGridStore.prototype.paused;\n\n/**\n *  Handles the correct setting of encoding for the stream\n *  @ignore\n */\nGridStore.prototype.setEncoding = fs.ReadStream.prototype.setEncoding;\n\n/**\n *  Handles the end events\n *  @ignore\n */\nGridStore.prototype.end = function end(data) {\n  var self = this;\n  // allow queued data to write before closing\n  if(!this.writable) return;\n  this.writable = false;\n\n  if(data) {\n    this._q.push(data);\n  }\n\n  this.on('drain', function () {\n    self.close(function (err) {\n      if (err) return _error(self, err);\n      self.emit('close');\n    });\n  });\n\n  _flush(self);\n}\n\n/**\n *  Handles the normal writes to gridstore\n *  @ignore\n */\nvar _writeNormal = function(self, data, close, callback) {\n  // If we have a buffer write it using the writeBuffer method\n  if(Buffer.isBuffer(data)) {\n    return writeBuffer(self, data, close, callback);\n  } else {\n    // Wrap the string in a buffer and write\n    return writeBuffer(self, new Buffer(data, 'binary'), close, callback);\n  }\n}\n\n/**\n * Writes some data. This method will work properly only if initialized with mode \"w\" or \"w+\".\n *\n * @param {String|Buffer} data the data to write.\n * @param {Boolean} [close] closes this file after writing if set to true.\n * @param {Function} callback this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {null}\n * @api public\n */\nGridStore.prototype.write = function write(data, close, callback) {\n  // If it's a normal write delegate the call\n  if(typeof close == 'function' || typeof callback == 'function') {\n    return _writeNormal(this, data, close, callback);\n  }\n\n  // Otherwise it's a stream write\n  var self = this;\n  if (!this.writable) {\n    throw new Error('GridWriteStream is not writable');\n  }\n\n  // queue data until we open.\n  if (!this._opened) {\n    // Set up a queue to save data until gridstore object is ready\n    this._q = [];\n    _openStream(self);\n    this._q.push(data);\n    return false;\n  }\n\n  // Push data to queue\n  this._q.push(data);\n  _flush(this);\n  // Return write successful\n  return true;\n}\n\n/**\n *  Handles the destroy part of a stream\n *  @ignore\n */\nGridStore.prototype.destroy = function destroy() {\n  // close and do not emit any more events. queued data is not sent.\n  if(!this.writable) return;\n  this.readable = false;\n  if(this.writable) {\n    this.writable = false;\n    this._q.length = 0;\n    this.emit('close');\n  }\n}\n\n/**\n *  Handles the destroySoon part of a stream\n *  @ignore\n */\nGridStore.prototype.destroySoon = function destroySoon() {\n  // as soon as write queue is drained, destroy.\n  // may call destroy immediately if no data is queued.\n  if(!this._q.length) {\n    return this.destroy();\n  }\n  this._destroying = true;\n}\n\n/**\n *  Handles the pipe part of the stream\n *  @ignore\n */\nGridStore.prototype.pipe = function(destination, options) {\n  var self = this;\n  // Open the gridstore\n  this.open(function(err, result) {\n    if(err) _errorRead(self, err);\n    if(!self.readable) return;\n    // Set up the pipe\n    self._pipe(destination, options);\n    // Emit the stream is open\n    self.emit('open');\n    // Read from the stream\n    _read(self);\n  })\n}\n\n/**\n *  Internal module methods\n *  @ignore\n */\nvar _read = function _read(self) {\n  if (!self.readable || self.paused || self.reading) {\n    return;\n  }\n\n  self.reading = true;\n  var stream = self._stream = self.stream();\n  stream.paused = self.paused;\n\n  stream.on('data', function (data) {\n    if (self._decoder) {\n      var str = self._decoder.write(data);\n      if (str.length) self.emit('data', str);\n    } else {\n      self.emit('data', data);\n    }\n  });\n\n  stream.on('end', function (data) {\n    self.emit('end', data);\n  });\n\n  stream.on('error', function (data) {\n    _errorRead(self, data);\n  });\n\n  stream.on('close', function (data) {\n    self.emit('close', data);\n  });\n\n  self.pause = function () {\n    // native doesn't always pause.\n    // bypass its pause() method to hack it\n    self.paused = stream.paused = true;\n  }\n\n  self.resume = function () {\n    self.paused = false;\n    stream.resume();\n    self.readable = stream.readable;\n  }\n\n  self.destroy = function () {\n    self.readable = false;\n    stream.destroy();\n  }\n}\n\n/**\n * pause\n * @ignore\n */\nGridStore.prototype.pause = function pause () {\n  // Overridden when the GridStore opens.\n  this.paused = true;\n}\n\n/**\n * resume\n * @ignore\n */\nGridStore.prototype.resume = function resume () {\n  // Overridden when the GridStore opens.\n  this.paused = false;\n}\n\n/**\n *  Internal module methods\n *  @ignore\n */\nvar _flush = function _flush(self, _force) {\n  if (!self._opened) return;\n  if (!_force && self._flushing) return;\n  self._flushing = true;\n\n  // write the entire q to gridfs\n  if (!self._q.length) {\n    self._flushing = false;\n    self.emit('drain');\n\n    if(self._destroying) {\n      self.destroy();\n    }\n    return;\n  }\n\n  self.write(self._q.shift(), function (err, store) {\n    if (err) return _error(self, err);\n    self.emit('progress', store.position);\n    _flush(self, true);\n  });\n}\n\nvar _openStream = function _openStream (self) {\n  if(self._opening == true) return;\n  self._opening = true;\n\n  // Open the store\n  self.open(function (err, gridstore) {\n    if (err) return _error(self, err);\n    self._opened = true;\n    self.emit('open');\n    _flush(self);\n  });\n}\n\nvar _error = function _error(self, err) {\n  self.destroy();\n  self.emit('error', err);\n}\n\nvar _errorRead = function _errorRead (self, err) {\n  self.readable = false;\n  self.emit('error', err);\n}\n\n/**\n * @ignore\n * @api private\n */\nexports.GridStore = GridStore;",
        "blocks": {
          "total": 281,
          "seen": 1,
          "missing": 280,
          "percentage": 0.0035587188612099642
        }
      },
      "hash": "f8d3e38ab120e39c9297cdd802feac04"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/gridfs/chunk.js": {
      "stats": {
        "percentage": 0.7230046948356808,
        "lines": [
          {
            "lineno": 20
          },
          {
            "lineno": 22
          },
          {
            "lineno": 23
          },
          {
            "lineno": 24
          },
          {
            "lineno": 26
          },
          {
            "lineno": 27
          },
          {
            "lineno": 28
          },
          {
            "lineno": 30
          },
          {
            "lineno": 31
          },
          {
            "lineno": 32
          },
          {
            "lineno": 33
          },
          {
            "lineno": 34
          },
          {
            "lineno": 35
          },
          {
            "lineno": 36
          },
          {
            "lineno": 37
          },
          {
            "lineno": 38
          },
          {
            "lineno": 39
          },
          {
            "lineno": 40
          },
          {
            "lineno": 41
          },
          {
            "lineno": 43
          },
          {
            "lineno": 46
          },
          {
            "lineno": 58
          },
          {
            "lineno": 59
          },
          {
            "lineno": 60
          },
          {
            "lineno": 61
          },
          {
            "lineno": 74
          },
          {
            "lineno": 76
          },
          {
            "lineno": 77
          },
          {
            "lineno": 78
          },
          {
            "lineno": 79
          },
          {
            "lineno": 81
          },
          {
            "lineno": 86
          },
          {
            "lineno": 87
          },
          {
            "lineno": 88
          },
          {
            "lineno": 89
          },
          {
            "lineno": 91
          },
          {
            "lineno": 92
          },
          {
            "lineno": 94
          },
          {
            "lineno": 95
          },
          {
            "lineno": 97
          },
          {
            "lineno": 108
          },
          {
            "lineno": 119
          },
          {
            "lineno": 127
          },
          {
            "lineno": 128
          },
          {
            "lineno": 140
          },
          {
            "lineno": 142
          },
          {
            "lineno": 143
          },
          {
            "lineno": 145
          },
          {
            "lineno": 146
          },
          {
            "lineno": 148
          },
          {
            "lineno": 149
          },
          {
            "lineno": 150
          },
          {
            "lineno": 151
          },
          {
            "lineno": 155
          },
          {
            "lineno": 180
          },
          {
            "lineno": 184
          },
          {
            "lineno": 191
          },
          {
            "lineno": 202
          },
          {
            "lineno": 205
          }
        ],
        "missing": 59,
        "seen": 154,
        "seen_lines": [
          {
            "s": 1,
            "e": 2
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 19,
            "e": 47
          },
          {
            "s": 57,
            "e": 62
          },
          {
            "s": 72,
            "e": 83
          },
          {
            "s": 85,
            "e": 99
          },
          {
            "s": 107,
            "e": 109
          },
          {
            "s": 118,
            "e": 120
          },
          {
            "s": 126,
            "e": 129
          },
          {
            "s": 139,
            "e": 159
          },
          {
            "s": 179,
            "e": 185
          },
          {
            "s": 190,
            "e": 192
          },
          {
            "s": 200,
            "e": 207
          },
          {
            "s": 200,
            "e": 207
          },
          {
            "s": 213,
            "e": 213
          },
          {
            "s": 213,
            "e": 213
          }
        ],
        "total": 213,
        "coverage": {
          "20": {
            "partial": false,
            "source": "  if(!(this instanceof Chunk)) return new Chunk(file, mongoObject);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 29
              },
              {
                "startCol": 6,
                "endCol": 29
              },
              {
                "startCol": 23,
                "endCol": 28
              },
              {
                "startCol": 31,
                "endCol": 67
              }
            ]
          },
          "22": {
            "partial": false,
            "source": "  this.file = file;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "23": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "24": {
            "partial": false,
            "source": "  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 25,
                "endCol": 36
              },
              {
                "startCol": 47,
                "endCol": 49
              },
              {
                "startCol": 52,
                "endCol": 63
              }
            ]
          },
          "26": {
            "partial": false,
            "source": "  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 87
              },
              {
                "startCol": 18,
                "endCol": 46
              },
              {
                "startCol": 49,
                "endCol": 63
              },
              {
                "startCol": 66,
                "endCol": 86
              }
            ]
          },
          "27": {
            "partial": false,
            "source": "  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 73
              },
              {
                "startCol": 21,
                "endCol": 47
              },
              {
                "startCol": 50,
                "endCol": 51
              },
              {
                "startCol": 54,
                "endCol": 72
              }
            ]
          },
          "28": {
            "partial": false,
            "source": "  this.data = new Binary();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "30": {
            "partial": false,
            "source": "  if(mongoObjectFinal.data == null) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 34
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "  } else if(typeof mongoObjectFinal.data == \"string\") {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 40
              }
            ]
          },
          "32": {
            "partial": false,
            "source": "    var buffer = new Buffer(mongoObjectFinal.data.length);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 58
              }
            ]
          },
          "33": {
            "partial": false,
            "source": "    buffer.write(mongoObjectFinal.data, 'binary', 0);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 52
              }
            ]
          },
          "34": {
            "partial": false,
            "source": "    this.data = new Binary(buffer);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "35": {
            "partial": false,
            "source": "  } else if(Array.isArray(mongoObjectFinal.data)) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 48
              }
            ]
          },
          "36": {
            "partial": false,
            "source": "    var buffer = new Buffer(mongoObjectFinal.data.length);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 58
              }
            ]
          },
          "37": {
            "partial": false,
            "source": "    buffer.write(mongoObjectFinal.data.join(''), 'binary', 0);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 61
              },
              {
                "startCol": 17,
                "endCol": 47
              }
            ]
          },
          "38": {
            "partial": false,
            "source": "    this.data = new Binary(buffer);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 35
              }
            ]
          },
          "39": {
            "partial": false,
            "source": "  } else if(mongoObjectFinal.data instanceof Binary || Object.prototype.toString.call(mongoObjectFinal.data) == \"[object Binary]\") {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 51
              },
              {
                "startCol": 45,
                "endCol": 51
              },
              {
                "startCol": 55,
                "endCol": 108
              }
            ]
          },
          "40": {
            "partial": false,
            "source": "    this.data = mongoObjectFinal.data;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 38
              }
            ]
          },
          "41": {
            "partial": false,
            "source": "  } else if(Buffer.isBuffer(mongoObjectFinal.data)) {",
            "missing": [
              {
                "startCol": 12,
                "endCol": 50
              }
            ]
          },
          "43": {
            "partial": false,
            "source": "    throw Error(\"Illegal chunk format\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              },
              {
                "startCol": 10,
                "endCol": 39
              }
            ]
          },
          "46": {
            "partial": false,
            "source": "  this.internalPosition = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 28
              }
            ]
          },
          "58": {
            "partial": false,
            "source": "  this.data.write(data, this.internalPosition);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              }
            ]
          },
          "59": {
            "partial": false,
            "source": "  this.internalPosition = this.data.length();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 45
              },
              {
                "startCol": 26,
                "endCol": 44
              }
            ]
          },
          "60": {
            "partial": false,
            "source": "  if(callback != null) return callback(null, this);",
            "missing": [
              {
                "startCol": 5,
                "endCol": 13
              },
              {
                "startCol": 23,
                "endCol": 51
              },
              {
                "startCol": 30,
                "endCol": 50
              }
            ]
          },
          "61": {
            "partial": false,
            "source": "  return this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 14
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "  length = length == null || length == 0 ? this.length() : length;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 66
              },
              {
                "startCol": 11,
                "endCol": 17
              },
              {
                "startCol": 29,
                "endCol": 35
              },
              {
                "startCol": 43,
                "endCol": 56
              },
              {
                "startCol": 59,
                "endCol": 65
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "  if(this.length() - this.internalPosition + 1 >= length) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 18
              },
              {
                "startCol": 50,
                "endCol": 56
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "    var data = this.data.read(this.internalPosition, length);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 61
              },
              {
                "startCol": 15,
                "endCol": 60
              }
            ]
          },
          "78": {
            "partial": false,
            "source": "    this.internalPosition = this.internalPosition + length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 59
              },
              {
                "startCol": 28,
                "endCol": 58
              },
              {
                "startCol": 52,
                "endCol": 58
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "    return data;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "    return '';",
            "missing": [
              {
                "startCol": 4,
                "endCol": 14
              }
            ]
          },
          "86": {
            "partial": false,
            "source": "  if ((this.length() - this.internalPosition) >= length) {",
            "missing": [
              {
                "startCol": 6,
                "endCol": 45
              },
              {
                "startCol": 7,
                "endCol": 20
              },
              {
                "startCol": 49,
                "endCol": 55
              }
            ]
          },
          "87": {
            "partial": false,
            "source": "    var data = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "88": {
            "partial": false,
            "source": "    if (this.data.buffer != null) { //Pure BSON",
            "missing": [
              {
                "startCol": 8,
                "endCol": 32
              }
            ]
          },
          "89": {
            "partial": false,
            "source": "      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 91
              },
              {
                "startCol": 13,
                "endCol": 90
              },
              {
                "startCol": 59,
                "endCol": 89
              },
              {
                "startCol": 83,
                "endCol": 89
              }
            ]
          },
          "91": {
            "partial": false,
            "source": "      data = new Buffer(length);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "      length = this.data.readInto(data, this.internalPosition);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 63
              },
              {
                "startCol": 15,
                "endCol": 62
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "    this.internalPosition = this.internalPosition + length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 59
              },
              {
                "startCol": 28,
                "endCol": 58
              },
              {
                "startCol": 52,
                "endCol": 58
              }
            ]
          },
          "95": {
            "partial": false,
            "source": "    return data;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "    return null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "108": {
            "partial": false,
            "source": "  return this.internalPosition == this.length() ? true : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 63
              },
              {
                "startCol": 9,
                "endCol": 47
              },
              {
                "startCol": 34,
                "endCol": 47
              },
              {
                "startCol": 50,
                "endCol": 54
              },
              {
                "startCol": 57,
                "endCol": 62
              }
            ]
          },
          "119": {
            "partial": false,
            "source": "  return this.read(1);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              },
              {
                "startCol": 9,
                "endCol": 21
              }
            ]
          },
          "127": {
            "partial": false,
            "source": "  this.internalPosition = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 28
              }
            ]
          },
          "128": {
            "partial": false,
            "source": "  this.data = new Binary();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "140": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "142": {
            "partial": false,
            "source": "  self.file.chunkCollection(function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "143": {
            "partial": false,
            "source": "    if(err) return callback(err);",
            "missing": [
              {
                "startCol": 7,
                "endCol": 10
              },
              {
                "startCol": 12,
                "endCol": 33
              },
              {},
              {
                "startCol": 19,
                "endCol": 32
              }
            ]
          },
          "144": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "145": {
            "partial": false,
            "source": "    collection.remove({'_id':self.objectId}, {safe:true}, function(err, result) {",
            "missing": [
              {}
            ]
          },
          "146": {
            "partial": false,
            "source": "      if(err) return callback(err);",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              },
              {
                "startCol": 14,
                "endCol": 35
              },
              {
                "startCol": 21,
                "endCol": 34
              }
            ]
          },
          "147": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "148": {
            "partial": false,
            "source": "      if(self.data.length() > 0) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 27
              },
              {}
            ]
          },
          "149": {
            "partial": false,
            "source": "        self.buildMongoObject(function(mongoObject) {",
            "missing": [
              {}
            ]
          },
          "150": {
            "partial": false,
            "source": "          collection.insert(mongoObject, {safe:true}, function(err, collection) {",
            "missing": [
              {}
            ]
          },
          "151": {
            "partial": false,
            "source": "            callback(err, self);",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 32
              }
            ]
          },
          "152": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "153": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "154": {
            "partial": false,
            "source": "      } else {",
            "missing": [
              {}
            ]
          },
          "155": {
            "partial": false,
            "source": "        callback(null, self);",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 29
              }
            ]
          },
          "156": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "157": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "158": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "180": {
            "partial": false,
            "source": "  var mongoObject = {'_id': this.objectId,",
            "missing": [
              {}
            ]
          },
          "181": {
            "partial": false,
            "source": "    'files_id': this.file.fileId,",
            "missing": [
              {}
            ]
          },
          "182": {
            "partial": false,
            "source": "    'n': this.chunkNumber,",
            "missing": [
              {}
            ]
          },
          "183": {
            "partial": false,
            "source": "    'data': this.data};",
            "missing": [
              {}
            ]
          },
          "184": {
            "partial": false,
            "source": "  callback(mongoObject);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "191": {
            "partial": false,
            "source": "  return this.data.length();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 28
              },
              {
                "startCol": 9,
                "endCol": 27
              }
            ]
          },
          "202": {
            "partial": false,
            "source": "      return this.internalPosition;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 35
              }
            ]
          },
          "205": {
            "partial": false,
            "source": "      this.internalPosition = value;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 36
              }
            ]
          }
        },
        "source": "var Binary = require('bson').Binary,\n  ObjectID = require('bson').ObjectID;\n\n/**\n * Class for representing a single chunk in GridFS.\n *\n * @class\n *\n * @param file {GridStore} The {@link GridStore} object holding this chunk.\n * @param mongoObject {object} The mongo object representation of this chunk.\n *\n * @throws Error when the type of data field for {@link mongoObject} is not\n *     supported. Currently supported types for data field are instances of\n *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}\n *     from the bson module\n *\n * @see Chunk#buildMongoObject\n */\nvar Chunk = exports.Chunk = function(file, mongoObject) {\n  if(!(this instanceof Chunk)) return new Chunk(file, mongoObject);\n\n  this.file = file;\n  var self = this;\n  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n\n  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n  this.data = new Binary();\n\n  if(mongoObjectFinal.data == null) {\n  } else if(typeof mongoObjectFinal.data == \"string\") {\n    var buffer = new Buffer(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data, 'binary', 0);\n    this.data = new Binary(buffer);\n  } else if(Array.isArray(mongoObjectFinal.data)) {\n    var buffer = new Buffer(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data.join(''), 'binary', 0);\n    this.data = new Binary(buffer);\n  } else if(mongoObjectFinal.data instanceof Binary || Object.prototype.toString.call(mongoObjectFinal.data) == \"[object Binary]\") {\n    this.data = mongoObjectFinal.data;\n  } else if(Buffer.isBuffer(mongoObjectFinal.data)) {\n  } else {\n    throw Error(\"Illegal chunk format\");\n  }\n  // Update position\n  this.internalPosition = 0;\n};\n\n/**\n * Writes a data to this object and advance the read/write head.\n *\n * @param data {string} the data to write \n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.write = function(data, callback) {\n  this.data.write(data, this.internalPosition);\n  this.internalPosition = this.data.length();\n  if(callback != null) return callback(null, this);\n  return this;\n};\n\n/**\n * Reads data and advances the read/write head.\n *\n * @param length {number} The length of data to read.\n *\n * @return {string} The data read if the given length will not exceed the end of\n *     the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.read = function(length) {\n  // Default to full read if no index defined\n  length = length == null || length == 0 ? this.length() : length;\n\n  if(this.length() - this.internalPosition + 1 >= length) {\n    var data = this.data.read(this.internalPosition, length);\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return '';\n  }\n};\n\nChunk.prototype.readSlice = function(length) {\n  if ((this.length() - this.internalPosition) >= length) {\n    var data = null;\n    if (this.data.buffer != null) { //Pure BSON\n      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);\n    } else { //Native BSON\n      data = new Buffer(length);\n      length = this.data.readInto(data, this.internalPosition);\n    }\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Checks if the read/write head is at the end.\n *\n * @return {boolean} Whether the read/write head has reached the end of this\n *     chunk.\n */\nChunk.prototype.eof = function() {\n  return this.internalPosition == this.length() ? true : false;\n};\n\n/**\n * Reads one character from the data of this chunk and advances the read/write\n * head.\n *\n * @return {string} a single character data read if the the read/write head is\n *     not at the end of the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.getc = function() {\n  return this.read(1);\n};\n\n/**\n * Clears the contents of the data in this chunk and resets the read/write head\n * to the initial position.\n */\nChunk.prototype.rewind = function() {\n  this.internalPosition = 0;\n  this.data = new Binary();\n};\n\n/**\n * Saves this chunk to the database. Also overwrites existing entries having the\n * same id as this chunk.\n *\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.save = function(callback) {\n  var self = this;\n\n  self.file.chunkCollection(function(err, collection) {\n    if(err) return callback(err);\n\n    collection.remove({'_id':self.objectId}, {safe:true}, function(err, result) {\n      if(err) return callback(err);\n\n      if(self.data.length() > 0) {\n        self.buildMongoObject(function(mongoObject) {\n          collection.insert(mongoObject, {safe:true}, function(err, collection) {\n            callback(err, self);\n          });\n        });\n      } else {\n        callback(null, self);\n      }\n    });\n  });\n};\n\n/**\n * Creates a mongoDB object representation of this chunk.\n *\n * @param callback {function(Object)} This will be called after executing this \n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *        \n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this chunk\n *          'files_id' : , // {number} foreign key to the file collection\n *          'n' : , // {number} chunk number\n *          'data' : , // {bson#Binary} the chunk data itself\n *        }\n *        </code></pre>\n *\n * @see <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}\">MongoDB GridFS Chunk Object Structure</a>\n */\nChunk.prototype.buildMongoObject = function(callback) {\n  var mongoObject = {'_id': this.objectId,\n    'files_id': this.file.fileId,\n    'n': this.chunkNumber,\n    'data': this.data};\n  callback(mongoObject);\n};\n\n/**\n * @return {number} the length of the data\n */\nChunk.prototype.length = function() {\n  return this.data.length();\n};\n\n/**\n * The position of the read/write head\n * @name position\n * @lends Chunk#\n * @field\n */\nObject.defineProperty(Chunk.prototype, \"position\", { enumerable: true\n  , get: function () {\n      return this.internalPosition;\n    }\n  , set: function(value) {\n      this.internalPosition = value;\n    }\n});\n\n/**\n * The default chunk size\n * @constant\n */\nChunk.DEFAULT_CHUNK_SIZE = 1024 * 256;",
        "blocks": {
          "total": 34,
          "seen": 0,
          "missing": 34,
          "percentage": 0
        }
      },
      "hash": "4e80174f9507aafb25c9584cbc28fd5b"
    },
    "/Users/ck/coding/projects/node-mongodb-native/lib/mongodb/gridfs/readstream.js": {
      "stats": {
        "percentage": 0.6206896551724138,
        "lines": [
          {
            "lineno": 21
          },
          {
            "lineno": 22
          },
          {
            "lineno": 24
          },
          {
            "lineno": 25
          },
          {
            "lineno": 27
          },
          {
            "lineno": 28
          },
          {
            "lineno": 29
          },
          {
            "lineno": 31
          },
          {
            "lineno": 32
          },
          {
            "lineno": 33
          },
          {
            "lineno": 34
          },
          {
            "lineno": 37
          },
          {
            "lineno": 39
          },
          {
            "lineno": 40
          },
          {
            "lineno": 41
          },
          {
            "lineno": 67
          },
          {
            "lineno": 68
          },
          {
            "lineno": 71
          },
          {
            "lineno": 72
          },
          {
            "lineno": 74
          },
          {
            "lineno": 76
          },
          {
            "lineno": 77
          },
          {
            "lineno": 79
          },
          {
            "lineno": 80
          },
          {
            "lineno": 81
          },
          {
            "lineno": 84
          },
          {
            "lineno": 85
          },
          {
            "lineno": 86
          },
          {
            "lineno": 87
          },
          {
            "lineno": 88
          },
          {
            "lineno": 89
          },
          {
            "lineno": 92
          },
          {
            "lineno": 93
          },
          {
            "lineno": 94
          },
          {
            "lineno": 96
          },
          {
            "lineno": 97
          },
          {
            "lineno": 98
          },
          {
            "lineno": 99
          },
          {
            "lineno": 100
          },
          {
            "lineno": 101
          },
          {
            "lineno": 103
          },
          {
            "lineno": 104
          },
          {
            "lineno": 107
          },
          {
            "lineno": 108
          },
          {
            "lineno": 112
          },
          {
            "lineno": 113
          },
          {
            "lineno": 114
          },
          {
            "lineno": 115
          },
          {
            "lineno": 116
          },
          {
            "lineno": 117
          },
          {
            "lineno": 120
          },
          {
            "lineno": 121
          },
          {
            "lineno": 122
          },
          {
            "lineno": 123
          },
          {
            "lineno": 126
          },
          {
            "lineno": 127
          },
          {
            "lineno": 139
          },
          {
            "lineno": 140
          },
          {
            "lineno": 151
          },
          {
            "lineno": 153
          },
          {
            "lineno": 163
          },
          {
            "lineno": 164
          },
          {
            "lineno": 167
          },
          {
            "lineno": 168
          },
          {
            "lineno": 169
          },
          {
            "lineno": 170
          }
        ],
        "missing": 66,
        "seen": 108,
        "seen_lines": [
          {
            "s": 1,
            "e": 2
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 50,
            "e": 50
          },
          {
            "s": 55,
            "e": 55
          },
          {
            "s": 60,
            "e": 60
          },
          {
            "s": 66,
            "e": 130
          },
          {
            "s": 138,
            "e": 142
          },
          {
            "s": 150,
            "e": 154
          },
          {
            "s": 162,
            "e": 172
          },
          {
            "s": 174,
            "e": 174
          }
        ],
        "total": 174,
        "coverage": {
          "21": {
            "partial": false,
            "source": "  if (!(this instanceof ReadStream)) return new ReadStream(autoclose, gstore);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 35
              },
              {
                "startCol": 7,
                "endCol": 35
              },
              {
                "startCol": 24,
                "endCol": 34
              },
              {
                "startCol": 37,
                "endCol": 78
              }
            ]
          },
          "22": {
            "partial": false,
            "source": "  Stream.call(this);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "24": {
            "partial": false,
            "source": "  this.autoclose = !!autoclose;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 31
              },
              {
                "startCol": 19,
                "endCol": 30
              },
              {
                "startCol": 20,
                "endCol": 30
              },
              {
                "startCol": 21,
                "endCol": 30
              }
            ]
          },
          "25": {
            "partial": false,
            "source": "  this.gstore = gstore;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "27": {
            "partial": false,
            "source": "  this.finalLength = gstore.length - gstore.position;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 53
              },
              {
                "startCol": 21,
                "endCol": 52
              }
            ]
          },
          "28": {
            "partial": false,
            "source": "  this.completedLength = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "29": {
            "partial": false,
            "source": "  this.currentChunkNumber = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 30
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "  this.paused = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "32": {
            "partial": false,
            "source": "  this.readable = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 23
              }
            ]
          },
          "33": {
            "partial": false,
            "source": "  this.pendingChunk = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "34": {
            "partial": false,
            "source": "  this.executing = false;  ",
            "missing": [
              {
                "startCol": 2,
                "endCol": 25
              }
            ]
          },
          "37": {
            "partial": false,
            "source": "  this.numberOfChunks = Math.ceil(gstore.length/gstore.chunkSize);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 66
              },
              {
                "startCol": 24,
                "endCol": 65
              },
              {
                "startCol": 34,
                "endCol": 64
              }
            ]
          },
          "39": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "40": {
            "partial": false,
            "source": "  process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "41": {
            "partial": false,
            "source": "    self._execute();",
            "missing": [
              {
                "startCol": 4,
                "endCol": 19
              },
              {}
            ]
          },
          "42": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "67": {
            "partial": false,
            "source": "  if(this.paused === true || this.readable === false) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 25
              },
              {
                "startCol": 29,
                "endCol": 52
              }
            ]
          },
          "68": {
            "partial": false,
            "source": "    return;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 11
              }
            ]
          },
          "71": {
            "partial": false,
            "source": "  var gstore = this.gstore;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 27
              }
            ]
          },
          "72": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "74": {
            "partial": false,
            "source": "  this.executing = true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "76": {
            "partial": false,
            "source": "  var last = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 19
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "  var toRead = 0;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 17
              }
            ]
          },
          "79": {
            "partial": false,
            "source": "  if(gstore.currentChunk.chunkNumber >= (this.numberOfChunks - 1)) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 65
              },
              {
                "startCol": 40,
                "endCol": 65
              }
            ]
          },
          "80": {
            "partial": false,
            "source": "    self.executing = false;    ",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "81": {
            "partial": false,
            "source": "    last = true;    ",
            "missing": [
              {
                "startCol": 4,
                "endCol": 16
              }
            ]
          },
          "84": {
            "partial": false,
            "source": "  var data = gstore.currentChunk.readSlice(gstore.currentChunk.length());",
            "missing": [
              {
                "startCol": 2,
                "endCol": 73
              },
              {
                "startCol": 13,
                "endCol": 72
              },
              {
                "startCol": 43,
                "endCol": 71
              }
            ]
          },
          "85": {
            "partial": false,
            "source": "  if(data != null && gstore.currentChunk.chunkNumber == self.currentChunkNumber) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 9
              },
              {
                "startCol": 21,
                "endCol": 79
              }
            ]
          },
          "86": {
            "partial": false,
            "source": "    self.currentChunkNumber = self.currentChunkNumber + 1;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 58
              },
              {
                "startCol": 30,
                "endCol": 57
              }
            ]
          },
          "87": {
            "partial": false,
            "source": "    self.completedLength += data.length;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 40
              }
            ]
          },
          "88": {
            "partial": false,
            "source": "    self.pendingChunk = null;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 29
              }
            ]
          },
          "89": {
            "partial": false,
            "source": "    self.emit(\"data\", data);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 27
              }
            ]
          },
          "92": {
            "partial": false,
            "source": "  if(last === true) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 9
              }
            ]
          },
          "93": {
            "partial": false,
            "source": "    self.readable = false;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 26
              }
            ]
          },
          "94": {
            "partial": false,
            "source": "    self.emit(\"end\");",
            "missing": [
              {
                "startCol": 4,
                "endCol": 20
              }
            ]
          },
          "96": {
            "partial": false,
            "source": "    if(self.autoclose === true) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 30
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "      if(gstore.mode[0] == \"w\") {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 30
              }
            ]
          },
          "98": {
            "partial": false,
            "source": "        gstore.close(function(err, doc) {",
            "missing": [
              {}
            ]
          },
          "99": {
            "partial": false,
            "source": "          if (err) {",
            "missing": [
              {},
              {
                "startCol": 14,
                "endCol": 17
              }
            ]
          },
          "100": {
            "partial": false,
            "source": "            self.emit(\"error\", err);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 35
              },
              {}
            ]
          },
          "101": {
            "partial": false,
            "source": "            return;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 19
              }
            ]
          },
          "102": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "103": {
            "partial": false,
            "source": "          self.readable = false;          ",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 32
              }
            ]
          },
          "104": {
            "partial": false,
            "source": "          self.emit(\"close\", doc);",
            "missing": [
              {
                "startCol": 10,
                "endCol": 33
              },
              {}
            ]
          },
          "105": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "107": {
            "partial": false,
            "source": "        self.readable = false;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 30
              }
            ]
          },
          "108": {
            "partial": false,
            "source": "        self.emit(\"close\");",
            "missing": [
              {
                "startCol": 8,
                "endCol": 26
              }
            ]
          },
          "112": {
            "partial": false,
            "source": "    gstore._nthChunk(gstore.currentChunk.chunkNumber + 1, function(err, chunk) {",
            "missing": [
              {},
              {
                "startCol": 21,
                "endCol": 56
              }
            ]
          },
          "113": {
            "partial": false,
            "source": "      if(err) {",
            "missing": [
              {},
              {
                "startCol": 9,
                "endCol": 12
              }
            ]
          },
          "114": {
            "partial": false,
            "source": "        self.readable = false;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 30
              }
            ]
          },
          "115": {
            "partial": false,
            "source": "        self.emit(\"error\", err);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 31
              },
              {}
            ]
          },
          "116": {
            "partial": false,
            "source": "        self.executing = false;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 31
              }
            ]
          },
          "117": {
            "partial": false,
            "source": "        return;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 15
              }
            ]
          },
          "118": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "119": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "120": {
            "partial": false,
            "source": "      self.pendingChunk = chunk;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              },
              {}
            ]
          },
          "121": {
            "partial": false,
            "source": "      if(self.paused === true) {",
            "missing": [
              {
                "startCol": 9,
                "endCol": 29
              },
              {}
            ]
          },
          "122": {
            "partial": false,
            "source": "        self.executing = false;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 31
              },
              {}
            ]
          },
          "123": {
            "partial": false,
            "source": "        return;",
            "missing": [
              {
                "startCol": 8,
                "endCol": 15
              },
              {}
            ]
          },
          "124": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "125": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "126": {
            "partial": false,
            "source": "      gstore.currentChunk = self.pendingChunk;",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 46
              }
            ]
          },
          "127": {
            "partial": false,
            "source": "      self._execute();        ",
            "missing": [
              {},
              {
                "startCol": 6,
                "endCol": 22
              }
            ]
          },
          "128": {
            "partial": false,
            "source": "    });",
            "missing": [
              {}
            ]
          },
          "139": {
            "partial": false,
            "source": "  if(!this.executing) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 20
              }
            ]
          },
          "140": {
            "partial": false,
            "source": "    this.paused = true;    ",
            "missing": [
              {
                "startCol": 4,
                "endCol": 23
              }
            ]
          },
          "151": {
            "partial": false,
            "source": "  this.readable = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              }
            ]
          },
          "153": {
            "partial": false,
            "source": "  this.emit(\"close\");",
            "missing": [
              {
                "startCol": 2,
                "endCol": 20
              }
            ]
          },
          "163": {
            "partial": false,
            "source": "  if(this.paused === false || !this.readable) {",
            "missing": [
              {
                "startCol": 5,
                "endCol": 26
              },
              {
                "startCol": 30,
                "endCol": 44
              }
            ]
          },
          "164": {
            "partial": false,
            "source": "    return;",
            "missing": [
              {
                "startCol": 4,
                "endCol": 11
              }
            ]
          },
          "167": {
            "partial": false,
            "source": "  this.paused = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 22
              }
            ]
          },
          "168": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "169": {
            "partial": false,
            "source": "  process.nextTick(function() {",
            "missing": [
              {}
            ]
          },
          "170": {
            "partial": false,
            "source": "    self._execute();",
            "missing": [
              {},
              {
                "startCol": 4,
                "endCol": 19
              }
            ]
          },
          "171": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          }
        },
        "source": "var Stream = require('stream').Stream,\n  util = require('util');\n\n/**\n * ReadStream\n *\n * Returns a stream interface for the **file**.\n *\n * Events\n *  - **data** {function(item) {}} the data event triggers when a document is ready.\n *  - **end** {function() {}} the end event triggers when there is no more documents available.\n *  - **close** {function() {}} the close event triggers when the stream is closed.\n *  - **error** {function(err) {}} the error event triggers if an error happens.\n *\n * @class Represents a GridFS File Stream.\n * @param {Boolean} autoclose automatically close file when the stream reaches the end.\n * @param {GridStore} cursor a cursor object that the stream wraps.\n * @return {ReadStream}\n */\nfunction ReadStream(autoclose, gstore) {\n  if (!(this instanceof ReadStream)) return new ReadStream(autoclose, gstore);\n  Stream.call(this);\n\n  this.autoclose = !!autoclose;\n  this.gstore = gstore;\n\n  this.finalLength = gstore.length - gstore.position;\n  this.completedLength = 0;\n  this.currentChunkNumber = 0;\n\n  this.paused = false;\n  this.readable = true;\n  this.pendingChunk = null;\n  this.executing = false;  \n  \n  // Calculate the number of chunks\n  this.numberOfChunks = Math.ceil(gstore.length/gstore.chunkSize);\n  \n  var self = this;\n  process.nextTick(function() {\n    self._execute();\n  });\n};\n\n/**\n * Inherit from Stream\n * @ignore\n * @api private\n */\nReadStream.prototype.__proto__ = Stream.prototype;\n\n/**\n * Flag stating whether or not this stream is readable.\n */\nReadStream.prototype.readable;\n\n/**\n * Flag stating whether or not this stream is paused.\n */\nReadStream.prototype.paused;\n\n/**\n * @ignore\n * @api private\n */\nReadStream.prototype._execute = function() {\n  if(this.paused === true || this.readable === false) {\n    return;\n  }\n\n  var gstore = this.gstore;\n  var self = this;\n  // Set that we are executing\n  this.executing = true;\n\n  var last = false;\n  var toRead = 0;\n\n  if(gstore.currentChunk.chunkNumber >= (this.numberOfChunks - 1)) {\n    self.executing = false;    \n    last = true;    \n  }\n\n  var data = gstore.currentChunk.readSlice(gstore.currentChunk.length());\n  if(data != null && gstore.currentChunk.chunkNumber == self.currentChunkNumber) {\n    self.currentChunkNumber = self.currentChunkNumber + 1;\n    self.completedLength += data.length;\n    self.pendingChunk = null;\n    self.emit(\"data\", data);\n  }\n\n  if(last === true) {\n    self.readable = false;\n    self.emit(\"end\");\n    \n    if(self.autoclose === true) {\n      if(gstore.mode[0] == \"w\") {\n        gstore.close(function(err, doc) {\n          if (err) {\n            self.emit(\"error\", err);\n            return;\n          }\n          self.readable = false;          \n          self.emit(\"close\", doc);\n        });\n      } else {\n        self.readable = false;\n        self.emit(\"close\");\n      }\n    }\n  } else {\n    gstore._nthChunk(gstore.currentChunk.chunkNumber + 1, function(err, chunk) {\n      if(err) {\n        self.readable = false;\n        self.emit(\"error\", err);\n        self.executing = false;\n        return;\n      }\n\n      self.pendingChunk = chunk;\n      if(self.paused === true) {\n        self.executing = false;\n        return;\n      }\n\n      gstore.currentChunk = self.pendingChunk;\n      self._execute();        \n    });\n  }\n};\n\n/**\n * Pauses this stream, then no farther events will be fired.\n *\n * @ignore\n * @api public\n */\nReadStream.prototype.pause = function() {\n  if(!this.executing) {\n    this.paused = true;    \n  }\n};\n\n/**\n * Destroys the stream, then no farther events will be fired.\n *\n * @ignore\n * @api public\n */\nReadStream.prototype.destroy = function() {\n  this.readable = false;\n  // Emit close event\n  this.emit(\"close\");\n};\n\n/**\n * Resumes this stream.\n *\n * @ignore\n * @api public\n */\nReadStream.prototype.resume = function() {\n  if(this.paused === false || !this.readable) {\n    return;\n  }\n    \n  this.paused = false;\n  var self = this;\n  process.nextTick(function() {\n    self._execute();\n  });\n};\n\nexports.ReadStream = ReadStream;",
        "blocks": {
          "total": 23,
          "seen": 0,
          "missing": 23,
          "percentage": 0
        }
      },
      "hash": "e3e0bb6514bf1375533df8b894f8f26b"
    },
    "/Users/ck/coding/projects/node-mongodb-native/dev/tools/gleak.js": {
      "stats": {
        "percentage": 1,
        "lines": [],
        "missing": 0,
        "seen": 9,
        "seen_lines": [
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 9,
            "e": 9
          }
        ],
        "total": 9,
        "coverage": {},
        "source": "var gleak = require('gleak')();\ngleak.ignore('AssertionError');\ngleak.ignore('testFullSpec_param_found');\ngleak.ignore('events');\ngleak.ignore('TAP_Global_Harness');\ngleak.ignore('Uint8ClampedArray');\ngleak.ignore('_$jscoverage');\n\nmodule.exports = gleak;",
        "blocks": {
          "total": 0,
          "seen": 0,
          "missing": 0,
          "percentage": 1
        }
      },
      "hash": "9bd2d15070a5649eeabb45293f82c7e2"
    },
    "/Users/ck/coding/projects/node-mongodb-native/test/tools/server_manager.js": {
      "stats": {
        "percentage": 0.5957446808510638,
        "lines": [
          {
            "lineno": 12
          },
          {
            "lineno": 14
          },
          {
            "lineno": 15
          },
          {
            "lineno": 16
          },
          {
            "lineno": 17
          },
          {
            "lineno": 18
          },
          {
            "lineno": 19
          },
          {
            "lineno": 20
          },
          {
            "lineno": 21
          },
          {
            "lineno": 22
          },
          {
            "lineno": 25
          },
          {
            "lineno": 26
          },
          {
            "lineno": 31
          },
          {
            "lineno": 33
          },
          {
            "lineno": 34
          },
          {
            "lineno": 35
          },
          {
            "lineno": 37
          },
          {
            "lineno": 40
          },
          {
            "lineno": 43
          },
          {
            "lineno": 44
          },
          {
            "lineno": 46
          },
          {
            "lineno": 47
          },
          {
            "lineno": 49
          },
          {
            "lineno": 53
          },
          {
            "lineno": 54
          },
          {
            "lineno": 59
          },
          {
            "lineno": 61
          },
          {
            "lineno": 62
          },
          {
            "lineno": 64
          },
          {
            "lineno": 70
          },
          {
            "lineno": 73
          },
          {
            "lineno": 75
          },
          {
            "lineno": 76
          },
          {
            "lineno": 81
          },
          {
            "lineno": 83
          },
          {
            "lineno": 84
          },
          {
            "lineno": 86
          },
          {
            "lineno": 93
          },
          {
            "lineno": 95
          },
          {
            "lineno": 96
          },
          {
            "lineno": 97
          },
          {
            "lineno": 99
          },
          {
            "lineno": 101
          },
          {
            "lineno": 105
          },
          {
            "lineno": 106
          },
          {
            "lineno": 109
          },
          {
            "lineno": 111
          },
          {
            "lineno": 116
          },
          {
            "lineno": 117
          },
          {
            "lineno": 123
          },
          {
            "lineno": 129
          },
          {
            "lineno": 131
          },
          {
            "lineno": 132
          },
          {
            "lineno": 133
          },
          {
            "lineno": 136
          },
          {
            "lineno": 137
          },
          {
            "lineno": 140
          }
        ],
        "missing": 57,
        "seen": 84,
        "seen_lines": [
          {
            "s": 1,
            "e": 9
          },
          {
            "s": 1,
            "e": 1
          },
          {
            "s": 2,
            "e": 2
          },
          {
            "s": 3,
            "e": 3
          },
          {
            "s": 4,
            "e": 4
          },
          {
            "s": 5,
            "e": 5
          },
          {
            "s": 6,
            "e": 6
          },
          {
            "s": 7,
            "e": 7
          },
          {
            "s": 8,
            "e": 8
          },
          {
            "s": 9,
            "e": 9
          },
          {
            "s": 11,
            "e": 30
          },
          {
            "s": 30,
            "e": 92
          },
          {
            "s": 92,
            "e": 115
          },
          {
            "s": 115,
            "e": 122
          },
          {
            "s": 122,
            "e": 127
          },
          {
            "s": 127,
            "e": 142
          }
        ],
        "total": 141,
        "coverage": {
          "12": {
            "partial": false,
            "source": "  options = options == null ? {} : options;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 43
              },
              {
                "startCol": 12,
                "endCol": 19
              },
              {
                "startCol": 30,
                "endCol": 32
              },
              {
                "startCol": 35,
                "endCol": 42
              }
            ]
          },
          "14": {
            "partial": false,
            "source": "  this.path = path.resolve(\"data\");",
            "missing": [
              {
                "startCol": 2,
                "endCol": 35
              },
              {
                "startCol": 14,
                "endCol": 34
              }
            ]
          },
          "15": {
            "partial": false,
            "source": "  this.port = options[\"start_port\"] != null ? options[\"start_port\"] : 27017;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 14,
                "endCol": 43
              },
              {
                "startCol": 46,
                "endCol": 67
              },
              {
                "startCol": 70,
                "endCol": 75
              }
            ]
          },
          "16": {
            "partial": false,
            "source": "  this.db_path = getPath(this, \"data-\" + this.port);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 52
              },
              {
                "startCol": 17,
                "endCol": 51
              },
              {
                "startCol": 31,
                "endCol": 50
              }
            ]
          },
          "17": {
            "partial": false,
            "source": "  this.log_path = getPath(this, \"log-\" + this.port);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 52
              },
              {
                "startCol": 18,
                "endCol": 51
              },
              {
                "startCol": 32,
                "endCol": 50
              }
            ]
          },
          "18": {
            "partial": false,
            "source": "  this.journal = options[\"journal\"] != null ? options[\"journal\"] : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 73
              },
              {
                "startCol": 17,
                "endCol": 43
              },
              {
                "startCol": 46,
                "endCol": 64
              },
              {
                "startCol": 67,
                "endCol": 72
              }
            ]
          },
          "19": {
            "partial": false,
            "source": "  this.auth = options['auth'] != null ? options['auth'] : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 64
              },
              {
                "startCol": 14,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 55
              },
              {
                "startCol": 58,
                "endCol": 63
              }
            ]
          },
          "20": {
            "partial": false,
            "source": "  this.ssl = options['ssl'] != null ? options['ssl'] : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 61
              },
              {
                "startCol": 13,
                "endCol": 35
              },
              {
                "startCol": 38,
                "endCol": 52
              },
              {
                "startCol": 55,
                "endCol": 60
              }
            ]
          },
          "21": {
            "partial": false,
            "source": "  this.purgedirectories = options['purgedirectories'] != null ? options['purgedirectories'] : true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 99
              },
              {
                "startCol": 26,
                "endCol": 61
              },
              {
                "startCol": 64,
                "endCol": 91
              },
              {
                "startCol": 94,
                "endCol": 98
              }
            ]
          },
          "22": {
            "partial": false,
            "source": "  this.configServer = options['configserver'] != null ? options['configserver'] : false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 88
              },
              {
                "startCol": 22,
                "endCol": 53
              },
              {
                "startCol": 56,
                "endCol": 79
              },
              {
                "startCol": 82,
                "endCol": 87
              }
            ]
          },
          "25": {
            "partial": false,
            "source": "  this.up = false;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "26": {
            "partial": false,
            "source": "  this.pid = null;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "31": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "33": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "34": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "35": {
            "partial": false,
            "source": "  killall = args.length ? args.shift() : true;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 46
              },
              {
                "startCol": 26,
                "endCol": 38
              },
              {
                "startCol": 41,
                "endCol": 45
              }
            ]
          },
          "37": {
            "partial": false,
            "source": "  var startCmd = generateStartCmd(this, {configserver:self.configServer, log_path: self.log_path,",
            "missing": [
              {}
            ]
          },
          "38": {
            "partial": false,
            "source": "    db_path: self.db_path, port: self.port, journal: self.journal, auth:self.auth, ssl:self.ssl});",
            "missing": [
              {}
            ]
          },
          "40": {
            "partial": false,
            "source": "  exec(killall ? 'killall -9 mongod' : '', function(err, stdout, stderr) {",
            "missing": [
              {
                "startCol": 7,
                "endCol": 14
              },
              {
                "startCol": 17,
                "endCol": 36
              },
              {},
              {
                "startCol": 39,
                "endCol": 41
              }
            ]
          },
          "41": {
            "partial": false,
            "source": "    if(self.purgedirectories) {",
            "missing": [
              {}
            ]
          },
          "42": {
            "partial": false,
            "source": "      // Remove directory",
            "missing": [
              {}
            ]
          },
          "43": {
            "partial": false,
            "source": "      exec(\"rm -rf \" + self.db_path, function(err, stdout, stderr) {",
            "missing": [
              {},
              {
                "startCol": 11,
                "endCol": 35
              }
            ]
          },
          "44": {
            "partial": false,
            "source": "        if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 11,
                "endCol": 14
              },
              {},
              {
                "startCol": 24,
                "endCol": 51
              },
              {
                "startCol": 31,
                "endCol": 50
              }
            ]
          },
          "45": {
            "partial": false,
            "source": "        // Create directory",
            "missing": [
              {}
            ]
          },
          "46": {
            "partial": false,
            "source": "        exec(\"mkdir -p \" + self.db_path, function(err, stdout, stderr) {",
            "missing": [
              {},
              {
                "startCol": 13,
                "endCol": 39
              }
            ]
          },
          "47": {
            "partial": false,
            "source": "          if(err != null) return callback(err, null);",
            "missing": [
              {
                "startCol": 33,
                "endCol": 52
              },
              {},
              {
                "startCol": 26,
                "endCol": 53
              },
              {
                "startCol": 13,
                "endCol": 16
              }
            ]
          },
          "48": {
            "partial": false,
            "source": "          // Start up mongod process",
            "missing": [
              {}
            ]
          },
          "49": {
            "partial": false,
            "source": "          var mongodb = exec(startCmd,",
            "missing": [
              {}
            ]
          },
          "50": {
            "partial": false,
            "source": "            function (error, stdout, stderr) {",
            "missing": [
              {}
            ]
          },
          "51": {
            "partial": false,
            "source": "              // console.log('stdout: ' + stdout);",
            "missing": [
              {}
            ]
          },
          "52": {
            "partial": false,
            "source": "              // console.log('stderr: ' + stderr);",
            "missing": [
              {}
            ]
          },
          "53": {
            "partial": false,
            "source": "              if (error != null) {",
            "missing": [
              {
                "startCol": 18,
                "endCol": 31
              },
              {}
            ]
          },
          "54": {
            "partial": false,
            "source": "                console.log('exec error: ' + error);",
            "missing": [
              {},
              {
                "startCol": 16,
                "endCol": 52
              },
              {
                "startCol": 45,
                "endCol": 50
              },
              {
                "startCol": 28,
                "endCol": 50
              }
            ]
          },
          "55": {
            "partial": false,
            "source": "              }",
            "missing": [
              {}
            ]
          },
          "56": {
            "partial": false,
            "source": "          });",
            "missing": [
              {}
            ]
          },
          "57": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "58": {
            "partial": false,
            "source": "          // Wait for a half a second then save the pids",
            "missing": [
              {}
            ]
          },
          "59": {
            "partial": false,
            "source": "          setTimeout(function() {",
            "missing": [
              {}
            ]
          },
          "60": {
            "partial": false,
            "source": "            // Mark server as running",
            "missing": [
              {}
            ]
          },
          "61": {
            "partial": false,
            "source": "            self.up = true;",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 27
              }
            ]
          },
          "62": {
            "partial": false,
            "source": "            self.pid = fs.readFileSync(path.join(self.db_path, \"mongod.lock\"), 'ascii').trim();",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 95
              },
              {
                "startCol": 23,
                "endCol": 94
              },
              {
                "startCol": 38,
                "endCol": 87
              },
              {
                "startCol": 39,
                "endCol": 77
              }
            ]
          },
          "63": {
            "partial": false,
            "source": "            // Callback",
            "missing": [
              {}
            ]
          },
          "64": {
            "partial": false,
            "source": "            callback();",
            "missing": [
              {},
              {
                "startCol": 12,
                "endCol": 23
              }
            ]
          },
          "65": {
            "partial": false,
            "source": "          }, 500);",
            "missing": [
              {}
            ]
          },
          "66": {
            "partial": false,
            "source": "        });",
            "missing": [
              {}
            ]
          },
          "67": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "68": {
            "partial": false,
            "source": "    } else {",
            "missing": [
              {}
            ]
          },
          "69": {
            "partial": false,
            "source": "      // Ensure we remove the lock file as we are not purging the directory",
            "missing": [
              {}
            ]
          },
          "70": {
            "partial": false,
            "source": "      fs.unlinkSync(path.join(self.db_path, \"mongod.lock\"));",
            "missing": [
              {
                "startCol": 6,
                "endCol": 59
              },
              {
                "startCol": 20,
                "endCol": 58
              },
              {}
            ]
          },
          "71": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "72": {
            "partial": false,
            "source": "      // Start up mongod process",
            "missing": [
              {}
            ]
          },
          "73": {
            "partial": false,
            "source": "      var mongodb = exec(startCmd,",
            "missing": [
              {}
            ]
          },
          "74": {
            "partial": false,
            "source": "        function (error, stdout, stderr) {",
            "missing": [
              {}
            ]
          },
          "75": {
            "partial": false,
            "source": "          if (error != null) {",
            "missing": [
              {
                "startCol": 14,
                "endCol": 19
              },
              {}
            ]
          },
          "76": {
            "partial": false,
            "source": "            console.log('exec error: ' + error);",
            "missing": [
              {
                "startCol": 12,
                "endCol": 47
              },
              {
                "startCol": 24,
                "endCol": 46
              },
              {},
              {
                "startCol": 41,
                "endCol": 46
              }
            ]
          },
          "77": {
            "partial": false,
            "source": "          }",
            "missing": [
              {}
            ]
          },
          "78": {
            "partial": false,
            "source": "      });",
            "missing": [
              {}
            ]
          },
          "79": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "80": {
            "partial": false,
            "source": "      // Wait for a half a second then save the pids",
            "missing": [
              {}
            ]
          },
          "81": {
            "partial": false,
            "source": "      setTimeout(function() {",
            "missing": [
              {}
            ]
          },
          "82": {
            "partial": false,
            "source": "        // Mark server as running",
            "missing": [
              {}
            ]
          },
          "83": {
            "partial": false,
            "source": "        self.up = true;",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 23
              }
            ]
          },
          "84": {
            "partial": false,
            "source": "        self.pid = fs.readFileSync(path.join(self.db_path, \"mongod.lock\"), 'ascii').trim();",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 91
              },
              {
                "startCol": 19,
                "endCol": 90
              },
              {
                "startCol": 34,
                "endCol": 83
              },
              {
                "startCol": 35,
                "endCol": 73
              }
            ]
          },
          "85": {
            "partial": false,
            "source": "        // Callback",
            "missing": [
              {}
            ]
          },
          "86": {
            "partial": false,
            "source": "        callback();",
            "missing": [
              {},
              {
                "startCol": 8,
                "endCol": 19
              }
            ]
          },
          "87": {
            "partial": false,
            "source": "      }, 5000);",
            "missing": [
              {}
            ]
          },
          "88": {
            "partial": false,
            "source": "    }",
            "missing": [
              {}
            ]
          },
          "89": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "93": {
            "partial": false,
            "source": "  var self = this;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          },
          "95": {
            "partial": false,
            "source": "  var args = Array.prototype.slice.call(arguments, 0);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 54
              },
              {
                "startCol": 13,
                "endCol": 53
              }
            ]
          },
          "96": {
            "partial": false,
            "source": "  callback = args.pop();",
            "missing": [
              {
                "startCol": 2,
                "endCol": 24
              },
              {
                "startCol": 13,
                "endCol": 23
              }
            ]
          },
          "97": {
            "partial": false,
            "source": "  signal = args.length ? args.shift() : 2;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 42
              },
              {
                "startCol": 25,
                "endCol": 37
              },
              {
                "startCol": 40,
                "endCol": 41
              }
            ]
          },
          "99": {
            "partial": false,
            "source": "  var command = \"kill -\" + signal + \" \" + self.pid;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 51
              },
              {
                "startCol": 16,
                "endCol": 33
              },
              {
                "startCol": 27,
                "endCol": 33
              }
            ]
          },
          "101": {
            "partial": false,
            "source": "  exec(command,",
            "missing": [
              {}
            ]
          },
          "102": {
            "partial": false,
            "source": "    function (error, stdout, stderr) {",
            "missing": [
              {}
            ]
          },
          "103": {
            "partial": false,
            "source": "      // console.log('stdout: ' + stdout);",
            "missing": [
              {}
            ]
          },
          "104": {
            "partial": false,
            "source": "      // console.log('stderr: ' + stderr);",
            "missing": [
              {}
            ]
          },
          "105": {
            "partial": false,
            "source": "      if (error !== null) {",
            "missing": [
              {},
              {
                "startCol": 10,
                "endCol": 15
              }
            ]
          },
          "106": {
            "partial": false,
            "source": "        console.log('exec error: ' + error);",
            "missing": [
              {
                "startCol": 8,
                "endCol": 43
              },
              {},
              {
                "startCol": 20,
                "endCol": 42
              },
              {
                "startCol": 37,
                "endCol": 42
              }
            ]
          },
          "107": {
            "partial": false,
            "source": "      }",
            "missing": [
              {}
            ]
          },
          "108": {
            "partial": false,
            "source": "",
            "missing": [
              {}
            ]
          },
          "109": {
            "partial": false,
            "source": "      self.up = false;",
            "missing": [
              {
                "startCol": 6,
                "endCol": 22
              },
              {}
            ]
          },
          "110": {
            "partial": false,
            "source": "      // Wait for a second",
            "missing": [
              {}
            ]
          },
          "111": {
            "partial": false,
            "source": "      setTimeout(callback, 1000);",
            "missing": [
              {
                "startCol": 6,
                "endCol": 32
              },
              {}
            ]
          },
          "112": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "116": {
            "partial": false,
            "source": "  exec('killall -9 mongod', function(err, stdout, stderr) {",
            "missing": [
              {}
            ]
          },
          "117": {
            "partial": false,
            "source": "    callback(null, null);",
            "missing": [
              {
                "startCol": 4,
                "endCol": 24
              },
              {}
            ]
          },
          "118": {
            "partial": false,
            "source": "  });",
            "missing": [
              {}
            ]
          },
          "123": {
            "partial": false,
            "source": "  return path.join(self.path, name);",
            "missing": [
              {
                "startCol": 2,
                "endCol": 36
              },
              {
                "startCol": 9,
                "endCol": 35
              }
            ]
          },
          "129": {
            "partial": false,
            "source": "  var startCmd = \"mongod --noprealloc --smallfiles --logpath '\" + options['log_path'] + \"' \" +",
            "missing": [
              {},
              {
                "startCol": 17,
                "endCol": 85
              }
            ]
          },
          "130": {
            "partial": false,
            "source": "      \" --dbpath \" + options['db_path'] + \" --port \" + options['port'] + \" --fork\";",
            "missing": [
              {}
            ]
          },
          "131": {
            "partial": false,
            "source": "  startCmd = options['journal'] ? startCmd + \" --journal\" : startCmd;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 69
              },
              {
                "startCol": 34,
                "endCol": 42
              },
              {
                "startCol": 60,
                "endCol": 68
              }
            ]
          },
          "132": {
            "partial": false,
            "source": "  startCmd = options['auth'] ? startCmd + \" --auth\" : startCmd;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 63
              },
              {
                "startCol": 31,
                "endCol": 39
              },
              {
                "startCol": 54,
                "endCol": 62
              }
            ]
          },
          "133": {
            "partial": false,
            "source": "  startCmd = options['configserver'] ? startCmd + \" --configsvr\" : startCmd;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 76
              },
              {
                "startCol": 39,
                "endCol": 47
              },
              {
                "startCol": 67,
                "endCol": 75
              }
            ]
          },
          "136": {
            "partial": false,
            "source": "    var path = getPath(self, '../test/certificates');",
            "missing": [
              {
                "startCol": 4,
                "endCol": 53
              },
              {
                "startCol": 15,
                "endCol": 52
              }
            ]
          },
          "137": {
            "partial": false,
            "source": "    startCmd = startCmd + \" --sslOnNormalPorts --sslPEMKeyFile=\" + path + \"/mycert.pem --sslPEMKeyPassword=10gen\";",
            "missing": [
              {
                "startCol": 4,
                "endCol": 114
              },
              {
                "startCol": 15,
                "endCol": 23
              },
              {
                "startCol": 67,
                "endCol": 71
              }
            ]
          },
          "140": {
            "partial": false,
            "source": "  return startCmd;",
            "missing": [
              {
                "startCol": 2,
                "endCol": 18
              }
            ]
          }
        },
        "source": "var debug = require('util').debug,\n  inspect = require('util').inspect,\n  path = require('path'),\n  fs = require('fs'),\n  exec = require('child_process').exec,\n  spawn = require('child_process').spawn,\n  Connection = require('../../lib/mongodb').Connection,\n  Db = require('../../lib/mongodb').Db,\n  Server = require('../../lib/mongodb').Server;\n\nvar ServerManager = exports.ServerManager = function(options) {\n  options = options == null ? {} : options;\n  // Basic unpack values\n  this.path = path.resolve(\"data\");\n  this.port = options[\"start_port\"] != null ? options[\"start_port\"] : 27017;\n  this.db_path = getPath(this, \"data-\" + this.port);\n  this.log_path = getPath(this, \"log-\" + this.port);\n  this.journal = options[\"journal\"] != null ? options[\"journal\"] : false;\n  this.auth = options['auth'] != null ? options['auth'] : false;\n  this.ssl = options['ssl'] != null ? options['ssl'] : false;\n  this.purgedirectories = options['purgedirectories'] != null ? options['purgedirectories'] : true;\n  this.configServer = options['configserver'] != null ? options['configserver'] : false;\n\n  // Server status values\n  this.up = false;\n  this.pid = null;\n}\n\n// Start up the server instance\nServerManager.prototype.start = function(killall, callback) {\n  var self = this;\n  // Unpack callback and variables\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  killall = args.length ? args.shift() : true;\n  // Create start command\n  var startCmd = generateStartCmd(this, {configserver:self.configServer, log_path: self.log_path,\n    db_path: self.db_path, port: self.port, journal: self.journal, auth:self.auth, ssl:self.ssl});\n\n  exec(killall ? 'killall -9 mongod' : '', function(err, stdout, stderr) {\n    if(self.purgedirectories) {\n      // Remove directory\n      exec(\"rm -rf \" + self.db_path, function(err, stdout, stderr) {\n        if(err != null) return callback(err, null);\n        // Create directory\n        exec(\"mkdir -p \" + self.db_path, function(err, stdout, stderr) {\n          if(err != null) return callback(err, null);\n          // Start up mongod process\n          var mongodb = exec(startCmd,\n            function (error, stdout, stderr) {\n              // console.log('stdout: ' + stdout);\n              // console.log('stderr: ' + stderr);\n              if (error != null) {\n                console.log('exec error: ' + error);\n              }\n          });\n\n          // Wait for a half a second then save the pids\n          setTimeout(function() {\n            // Mark server as running\n            self.up = true;\n            self.pid = fs.readFileSync(path.join(self.db_path, \"mongod.lock\"), 'ascii').trim();\n            // Callback\n            callback();\n          }, 500);\n        });\n      });\n    } else {\n      // Ensure we remove the lock file as we are not purging the directory\n      fs.unlinkSync(path.join(self.db_path, \"mongod.lock\"));\n\n      // Start up mongod process\n      var mongodb = exec(startCmd,\n        function (error, stdout, stderr) {\n          if (error != null) {\n            console.log('exec error: ' + error);\n          }\n      });\n\n      // Wait for a half a second then save the pids\n      setTimeout(function() {\n        // Mark server as running\n        self.up = true;\n        self.pid = fs.readFileSync(path.join(self.db_path, \"mongod.lock\"), 'ascii').trim();\n        // Callback\n        callback();\n      }, 5000);\n    }\n  });\n}\n\nServerManager.prototype.stop = function(signal, callback) {\n  var self = this;\n  // Unpack callback and variables\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  signal = args.length ? args.shift() : 2;\n  // Stop the server\n  var command = \"kill -\" + signal + \" \" + self.pid;\n  // Kill process\n  exec(command,\n    function (error, stdout, stderr) {\n      // console.log('stdout: ' + stdout);\n      // console.log('stderr: ' + stderr);\n      if (error !== null) {\n        console.log('exec error: ' + error);\n      }\n\n      self.up = false;\n      // Wait for a second\n      setTimeout(callback, 1000);\n  });\n}\n\nServerManager.prototype.killAll = function(callback) {\n  exec('killall -9 mongod', function(err, stdout, stderr) {\n    callback(null, null);\n  });\n}\n\n// Get absolute path\nvar getPath = function(self, name) {\n  return path.join(self.path, name);\n}\n\n// Generate start command\nvar generateStartCmd = function(self, options) {\n  // Create boot command\n  var startCmd = \"mongod --noprealloc --smallfiles --logpath '\" + options['log_path'] + \"' \" +\n      \" --dbpath \" + options['db_path'] + \" --port \" + options['port'] + \" --fork\";\n  startCmd = options['journal'] ? startCmd + \" --journal\" : startCmd;\n  startCmd = options['auth'] ? startCmd + \" --auth\" : startCmd;\n  startCmd = options['configserver'] ? startCmd + \" --configsvr\" : startCmd;\n  // If we have ssl defined set up with test certificate\n  if(options['ssl']) {\n    var path = getPath(self, '../test/certificates');\n    startCmd = startCmd + \" --sslOnNormalPorts --sslPEMKeyFile=\" + path + \"/mycert.pem --sslPEMKeyPassword=10gen\";\n  }\n  // Return start command\n  return startCmd;\n}",
        "blocks": {
          "total": 23,
          "seen": 0,
          "missing": 23,
          "percentage": 0
        }
      },
      "hash": "4d9c8012fb53722e224527920beb3df0"
    }
  },
  "test_file": "/Users/ck/coding/projects/node-mongodb-native/test/insert_test.js",
  "test_method": "shouldForceMongoDbServerToAssignId"
}